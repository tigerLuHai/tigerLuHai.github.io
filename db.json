{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFunction.js","path":"libs/codeBlock/codeBlockFunction.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/explosion.min.js","path":"libs/others/explosion.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/text.js","path":"libs/others/text.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/fireworks.js","path":"libs/others/fireworks.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/babyq.png","path":"medias/avatars/babyq.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/cww97.jpg","path":"medias/avatars/cww97.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/fun4go.png","path":"medias/avatars/fun4go.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/hael.jpg","path":"medias/avatars/hael.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/huaji.jpg","path":"medias/avatars/huaji.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ids2.jpg","path":"medias/avatars/ids2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ldy.jpg","path":"medias/avatars/ldy.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/hzwer.jpg","path":"medias/avatars/hzwer.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lijiaqian.png","path":"medias/avatars/lijiaqian.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/liyucheng.jpg","path":"medias/avatars/liyucheng.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/kewlgrl.jpg","path":"medias/avatars/kewlgrl.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/liyangzone.jpg","path":"medias/avatars/liyangzone.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/michael.jpg","path":"medias/avatars/michael.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mouse.jpg","path":"medias/avatars/mouse.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mpy634.png","path":"medias/avatars/mpy634.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/myzhihu.png","path":"medias/avatars/myzhihu.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qiqiang.jpg","path":"medias/avatars/qiqiang.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/sunchangzhi.jpg","path":"medias/avatars/sunchangzhi.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/taowei.jpg","path":"medias/avatars/taowei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/spacesac.png","path":"medias/avatars/spacesac.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhaokangzhe.jpg","path":"medias/avatars/zhaokangzhe.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/flink.jpg","path":"medias/featureimages/flink.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/hbase.png","path":"medias/featureimages/hbase.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/hive.png","path":"medias/featureimages/hive.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/hadoop.png","path":"medias/featureimages/hadoop.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/jvm.png","path":"medias/featureimages/jvm.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/mysql.png","path":"medias/featureimages/mysql.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/queue.png","path":"medias/featureimages/queue.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/sqoop.jpg","path":"medias/featureimages/sqoop.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/red_black_tree.png","path":"medias/featureimages/red_black_tree.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/antnlp.ico","path":"medias/avatars/antnlp.ico","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/duyupei.jpg","path":"medias/avatars/duyupei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/gsy.jpg","path":"medias/avatars/gsy.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mizunashi.png","path":"medias/avatars/mizunashi.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/milyyy.jpg","path":"medias/avatars/milyyy.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qiandongwei.jpg","path":"medias/avatars/qiandongwei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/xuzhongyou.jpg","path":"medias/avatars/xuzhongyou.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhangting.jpg","path":"medias/avatars/zhangting.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zzw.jpg","path":"medias/avatars/zzw.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/shrio.jpg","path":"medias/featureimages/shrio.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/spring.png","path":"medias/featureimages/spring.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/0xbird.png","path":"medias/avatars/0xbird.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","path":"medias/avatars/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lyn-draw.jpg","path":"medias/avatars/lyn-draw.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lzh.png","path":"medias/avatars/lzh.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mashiro.jpg","path":"medias/avatars/mashiro.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qianqian.png","path":"medias/avatars/qianqian.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/yequ.jpg","path":"medias/music/avatars/yequ.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/yiluxiangbei.jpg","path":"medias/music/avatars/yiluxiangbei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/tiantangdemogui.jpg","path":"medias/music/avatars/tiantangdemogui.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/jitao.jpg","path":"medias/avatars/jitao.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhangyi.jpg","path":"medias/avatars/zhangyi.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/25.jpg","path":"medias/featureimages/25.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/26.jpg","path":"medias/featureimages/26.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/jingjing.jpg","path":"medias/avatars/jingjing.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/24.jpg","path":"medias/featureimages/24.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/27.jpg","path":"medias/featureimages/27.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/daoshu.jpg","path":"medias/music/avatars/daoshu.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"5235026c3a9a7a6e55b133af529bc4dd7326515d","modified":1577454047770},{"_id":"themes/matery/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1577408074929},{"_id":"themes/matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1577408074929},{"_id":"themes/matery/README.md","hash":"7ef16198a2c5ff580f006582286354caf160c7fe","modified":1577408074929},{"_id":"themes/matery/README_CN.md","hash":"a94324950e0299bcfcbc106cf2ca65c93e1fe843","modified":1577408074929},{"_id":"themes/matery/_config.yml","hash":"29d6ddba2e8e2047236b40bb6185f84c1612b54d","modified":1619682457871},{"_id":"source/_data/musics.json","hash":"97d170e1550eee4afc0af065b78cda302a97674c","modified":1582694721660},{"_id":"source/_posts/ElasticSearch原理及基本使用.md","hash":"30b0f062e3921647f1387c6967ff0b0652ad8bdb","modified":1619693422391},{"_id":"source/_posts/FastDFS分布式文件系统安装使用教程.md","hash":"557c4788f6ea057238510b57ac165726e6ed8976","modified":1619693145475},{"_id":"source/_posts/Flume-大数据采集工具.md","hash":"815690b2ff5d4dbff4da6379b0c92f6d35ab972a","modified":1619690001425},{"_id":"source/_posts/HBase建立二级索引的几种方式.md","hash":"bb4498aebfa5d4d0923cec2c43c6e7bab2c41e21","modified":1582866839212},{"_id":"source/_posts/HBase的rowkey设计的理解.md","hash":"cea8a266324752e12432a8af09d2c6f5cf40fed4","modified":1582683218065},{"_id":"source/_posts/HTTP与HTTPS原理.md","hash":"5e2c58e167a9be587fa8715a824def3a83c4e4f9","modified":1582694239915},{"_id":"source/_posts/HTTP请求方法的幂等性.md","hash":"fac3e5e447d93594d691b3680b74bbcba7b522bb","modified":1619688791261},{"_id":"source/_posts/Hadoop之HDFS上传文件源码分析.md","hash":"da6a9bf8abc0ea9ccf125d237c8f16efe7f16f2e","modified":1619691585460},{"_id":"source/_posts/Hadoop集群搭建与简单使用.md","hash":"d60ca3c2ecde9b4501b68c73377e1f44edb2e238","modified":1619693701897},{"_id":"source/_posts/HashMap与ConcurrentHashMap.md","hash":"76395766e1a508cf592e861dbda8a52bef3c0761","modified":1619689329555},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具.md","hash":"0bf696d532690b7b41cef730d5a166ff579038ba","modified":1619690983999},{"_id":"source/_posts/JVM必须知道的基础.md","hash":"ffc3863ef8750ed4417ac4a1d056a8e4834614d3","modified":1619692187185},{"_id":"source/_posts/Kafka-大数据的标准数据源.md","hash":"e24e42b617cb3cdadb539c92227d48ad66cc892f","modified":1619691349533},{"_id":"source/_posts/MapReduce中的两表join方案.md","hash":"269c517454983afc98f806f44bd5e02efb1c591e","modified":1593946099487},{"_id":"source/_posts/MapReduce的流程及优化.md","hash":"6d2e668777011280033bc2e74dd27f41feddebdf","modified":1594043855706},{"_id":"source/_posts/MongoDB使用及底层原理.md","hash":"e08dfad1a9791af0edfcbf8b75d2939c1d3e24af","modified":1619687076543},{"_id":"source/_posts/Netty原理.md","hash":"e69079e3fa39624019dccf097057e0c4a7eb7d57","modified":1582867474077},{"_id":"source/_posts/Nginx使用心得.md","hash":"0c45fda4bb65887ccfa7fce5eb2b784b30ea7bf5","modified":1619689444379},{"_id":"source/_posts/Shiro框架原理及简单使用.md","hash":"313e720b5449111b91f898c48d5538c20e21329f","modified":1619688626347},{"_id":"source/_posts/Spark到底好在哪里.md","hash":"3b92c83b7c6655f176bb8ac428f908cf85fc7e18","modified":1619690754220},{"_id":"source/_posts/SpringMVC原理.md","hash":"1029e202854c93ac79063416722afc7e0ef3dba9","modified":1619692566689},{"_id":"source/_posts/Sqoop-HDFS与外界交互数据的工具.md","hash":"b43a2d595b8f4511d7b0bc7572e53d4c6fe2b612","modified":1619690438038},{"_id":"source/_posts/docker-1.md","hash":"ac2f968ba143c45fc3e5b3cc4ce6de57afc8e23a","modified":1620444169117},{"_id":"source/_posts/docker.md","hash":"d0e9bb8fb5fef7e7b6c037f383eecc574f8f1210","modified":1620444013902},{"_id":"source/_posts/hexo博文包含图片的坑.md","hash":"09f9db7fc0274cae0a3c1fefc4d041928a11463f","modified":1619692895237},{"_id":"source/_posts/javaWeb三大核心组件之servlet.md","hash":"b9906bb26dd5a7b422692e4e9a02791092ef3de2","modified":1582699705763},{"_id":"source/_posts/java异常.md","hash":"1fcf4510fdaa28c081bad386d8d82ae0e1a8a7cd","modified":1619692462201},{"_id":"source/_posts/java的Object对象.md","hash":"10e09c417d7e5be1520f6f56b0aeb2f6e2ff69b6","modified":1619691824962},{"_id":"source/_posts/redis简单使用总结.md","hash":"b056fc1e51fe19fba6704fb3f38b64235d3042f8","modified":1619691993970},{"_id":"source/_posts/springboot项目遇到的问题.md","hash":"65beb443aa6d62faf4710225adeee114351b6c2e","modified":1619686680593},{"_id":"source/_posts/使用VMware安装linux虚拟机.md","hash":"3da2af538e3caacbfa1f8b42b66a77c7cc21c786","modified":1619692751335},{"_id":"source/_posts/动态代理的实现方式与区别.md","hash":"2878ad3fb52b02781030d8990269758446e87be1","modified":1594301213201},{"_id":"source/_posts/回头再看spring.md","hash":"ff86d6c56669ada16d4716e8f78c4eaba40b4edd","modified":1582699909581},{"_id":"source/_posts/因特网五层架构.md","hash":"b9129aac71a36f0a9ae24ead1ea0110435c7512a","modified":1582869257575},{"_id":"source/_posts/多线程之缓存与主存一致性.md","hash":"28e3e725e4877a6369ba8b54152f5f7ea153f28f","modified":1619691637608},{"_id":"source/_posts/对MySQL执行引擎InnoDB的认识.md","hash":"801946989d3bb3a4a0e1c7219b6290a0a65720f9","modified":1582962755943},{"_id":"source/_posts/对Mysql读写分离的认识.md","hash":"113ccfa2e270cc2a71fe2da0edaa6bd50e630147","modified":1582700239283},{"_id":"source/_posts/栈的性质及一些使用场景.md","hash":"6f628b7428f45d2fd686990c4fb7770597a11fcc","modified":1619689710687},{"_id":"source/_posts/流式处理框架后起之秀Flink.md","hash":"d439e006efc04aa0c565e4e53967813e4d658194","modified":1619690352318},{"_id":"source/_posts/深入理解JSP.md","hash":"34d97ab058fb9ac452b7967c1e39414f35a2f7d3","modified":1594218912234},{"_id":"source/_posts/深入理解java的BIO、NIO、AIO.md","hash":"babd640f8844747224bb52a7c5ca830c64eac770","modified":1619694081233},{"_id":"source/_posts/理解KMP回溯.md","hash":"55c21a3258b00bb110205bc14e4fa6030c810252","modified":1619692638306},{"_id":"source/_posts/真正意义的流式处理框架Strom.md","hash":"6f2b8389d195fe816782a317d12114838f6b1798","modified":1619690675744},{"_id":"source/_posts/稳定排序与非稳定排序的应用场景.md","hash":"fdb8f056e61cb2045656fc7bf0b65028814bc986","modified":1582699968175},{"_id":"source/_posts/红黑树的建立与维护.md","hash":"6e04647091ef921572e4b6e02a232e887d95fb0e","modified":1619689496682},{"_id":"source/_posts/线程池原理.md","hash":"f5cd418646a53b05de2b42fa6506df5d22722b00","modified":1619688959878},{"_id":"source/_posts/网络七层架构.md","hash":"75a633aba50028b455c9c4f8deb7ab312d8380c7","modified":1582869143972},{"_id":"source/_posts/软件开发六大设计原则.md","hash":"b5e5c01f681e407c7c59d019cdf8c0720c99c88e","modified":1619691868210},{"_id":"source/_posts/队列的用法.md","hash":"9588dcfb4e50693586e1d0ce58298ff2d82f4934","modified":1619689561866},{"_id":"source/about/index.md","hash":"819aa24cbd04cab839660e26946a2fb61c872fac","modified":1577454530567},{"_id":"source/archives/index.md","hash":"a62b7d9b8a8bdf966ec5c823e71581d2b185156e","modified":1577408074929},{"_id":"source/categories/index.md","hash":"76889deb16e0d61d5c585f26a0e69f01de6cab74","modified":1577408074929},{"_id":"source/contact/index.md","hash":"a56b48cecf51d6450ca60db9873b53f575e1ec12","modified":1580953920079},{"_id":"source/tags/index.md","hash":"98697833897097a5c65521ea02baa1c6f85948d8","modified":1577408074929},{"_id":"themes/matery/layout/404.ejs","hash":"f08a0f507b36f3652520a41381f71167488405c7","modified":1577408074929},{"_id":"themes/matery/languages/default.yml","hash":"527c795b8c41fe62bf35603ffebfa6d4a7929a2c","modified":1577408074929},{"_id":"themes/matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1577408074959},{"_id":"themes/matery/languages/zh-CN.yml","hash":"d92db4b986bb6f0d228e9a8249383103bf56342d","modified":1577408074929},{"_id":"themes/matery/layout/about.ejs","hash":"e87752e59f021b5139b1155a264da11ab469a9aa","modified":1577408074959},{"_id":"themes/matery/layout/contact.ejs","hash":"1513c5a40b7cc0b6e5854cf8c3253958bcb486cb","modified":1577408074959},{"_id":"themes/matery/layout/category.ejs","hash":"2d421e10c3b8fd2c4f725e5eaa967c4a1429c707","modified":1577408074959},{"_id":"themes/matery/layout/layout.ejs","hash":"2ba4110dc596424b1220a259c8e594da774e7f59","modified":1577408074959},{"_id":"themes/matery/layout/post.ejs","hash":"9ecae79690293cacdccc172118f1fe481705b1f2","modified":1577408074959},{"_id":"themes/matery/layout/tag.ejs","hash":"5cdf3a1d72f54285ee9cb826fd0e4a0449093215","modified":1577408074959},{"_id":"themes/matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1577408074959},{"_id":"themes/matery/layout/index.ejs","hash":"7fc5a6c4f0229c0be43b7d1315524c468346fbb8","modified":1577408074959},{"_id":"themes/matery/layout/archive.ejs","hash":"1b5023571894404d75caffa28128fc9c49f9095d","modified":1577408074959},{"_id":"themes/matery/layout/friends.ejs","hash":"b9b75ff45324da5b4ddbb6e16ea1ecd239dbc310","modified":1577408074959},{"_id":"source/_posts/ElasticSearch原理及基本使用/1.png","hash":"9750efad69d0d7ca0d0a055e5130aada00ab867c","modified":1582872982957},{"_id":"source/_posts/ElasticSearch原理及基本使用/2.png","hash":"6b872e770649a2e696d008215ea4ccf0b5ad889f","modified":1582872992297},{"_id":"source/_posts/ElasticSearch原理及基本使用/3.png","hash":"3e1abbebefdb82d7147ec710926db9ea346c6f3e","modified":1582873003068},{"_id":"source/_posts/ElasticSearch原理及基本使用/1577523021175.png","hash":"c72f1af015e43a82bdb3f87982d6735af077998b","modified":1577540319398},{"_id":"source/_posts/FastDFS分布式文件系统安装使用教程/1577523021175.png","hash":"c72f1af015e43a82bdb3f87982d6735af077998b","modified":1577540319398},{"_id":"source/_posts/FastDFS分布式文件系统安装使用教程/1577523108700.png","hash":"cbbee17128881b71922a83dc127b1e55ca6e162a","modified":1577540329787},{"_id":"source/_posts/FastDFS分布式文件系统安装使用教程/1577523192987.png","hash":"b34130cbc93659782ce6a1d580e5ef124658c11f","modified":1577540338304},{"_id":"source/_posts/FastDFS分布式文件系统安装使用教程/1577524769079.png","hash":"9464098e580a25271c7e9da48ed992cbd8579656","modified":1577540405674},{"_id":"source/_posts/FastDFS分布式文件系统安装使用教程/1577525471795.png","hash":"f212bf41e93c8c1c03095ab6c0309a0425fa85af","modified":1577540399355},{"_id":"source/_posts/FastDFS分布式文件系统安装使用教程/1577535905825.png","hash":"46832c4d23a3e87aa6250a271f8263e76457c394","modified":1577540388235},{"_id":"source/_posts/FastDFS分布式文件系统安装使用教程/1577536510714.png","hash":"1075799fb0225f5bc6ad44574417eb3ab2d7be95","modified":1577540355664},{"_id":"source/_posts/Flume-大数据采集工具/wps11.jpg","hash":"1dc718659819d7ce3fc9133a377b4d059bf48bc3","modified":1582702817043},{"_id":"source/_posts/Flume-大数据采集工具/wps2.jpg","hash":"413d7f0ce3ccfcd466fd0cc9cd3d2767b7b6b01f","modified":1582702773200},{"_id":"source/_posts/Flume-大数据采集工具/wps28.jpg","hash":"acc00d763a1add5fddf2880f87984ada0a579037","modified":1582703049809},{"_id":"source/_posts/Flume-大数据采集工具/wps4.jpg","hash":"560cada6d16078f98c8d73b0156c4e4d2309c1ba","modified":1582702784827},{"_id":"source/_posts/Flume-大数据采集工具/wps5.jpg","hash":"57470b391cca5dca845da656f00c7e70ae2c8a8a","modified":1582702787071},{"_id":"source/_posts/HTTP与HTTPS原理/3.png","hash":"db15fdc6100eb090aaf3da52f2ac18dc18250fda","modified":1579610913052},{"_id":"source/_posts/HTTP与HTTPS原理/4.png","hash":"3dc3ca35ee24de0d45cee78df766b9dc307691d1","modified":1579610904672},{"_id":"source/_posts/HTTP与HTTPS原理/2.png","hash":"4dea1a80c7432461836a2780363e4b7a8ae932aa","modified":1579610917856},{"_id":"source/_posts/HTTP与HTTPS原理/6.png","hash":"48e6c2d7f013c17a4ce8a50e94c3423558ba0482","modified":1579610895273},{"_id":"source/_posts/HashMap与ConcurrentHashMap/10.png","hash":"4693a9d70b8536e344f4beb16583fa39b70ff0e3","modified":1579783553287},{"_id":"source/_posts/HashMap与ConcurrentHashMap/1.png","hash":"9e197b93178ae5f66e77b6d9e928d4eff24a637a","modified":1579783453940},{"_id":"source/_posts/HashMap与ConcurrentHashMap/11.png","hash":"4b87bd06a1d3478ba09f54055ada3d7e7ae18e8f","modified":1579783560514},{"_id":"source/_posts/HashMap与ConcurrentHashMap/12.png","hash":"89e2517754c4c9793f71dd5dc0780bc59a6c4447","modified":1579783572231},{"_id":"source/_posts/HashMap与ConcurrentHashMap/13.png","hash":"eb358b27dd737aa774c12ca3e226100b2f58fe6a","modified":1579783582705},{"_id":"source/_posts/HashMap与ConcurrentHashMap/2.png","hash":"727f8f18591add3d9ea41a98b07b31a1733d9c8e","modified":1579783464778},{"_id":"source/_posts/HashMap与ConcurrentHashMap/3.png","hash":"c7c8e7c0b63ea2c9d8a43e7ab1d722aa55f93446","modified":1579783474154},{"_id":"source/_posts/HashMap与ConcurrentHashMap/4.png","hash":"b5311d8a5e1f4ba21b8629bb5db33dd01ae14fdb","modified":1579783485298},{"_id":"source/_posts/HashMap与ConcurrentHashMap/5.png","hash":"29a8a0537990a599a4e78709544332403c20a230","modified":1579783495376},{"_id":"source/_posts/HashMap与ConcurrentHashMap/6.png","hash":"dfe085bd93b7e139b40275b91fc972098ffd6b3f","modified":1579783506714},{"_id":"source/_posts/HashMap与ConcurrentHashMap/7.png","hash":"788fa04a1cf4d41be1cb915384a42e339dd18a99","modified":1579783520590},{"_id":"source/_posts/HashMap与ConcurrentHashMap/8.png","hash":"520b326fbf9c22fb561b7f2d93bbc6e6b31708d0","modified":1579783532756},{"_id":"source/_posts/HashMap与ConcurrentHashMap/9.png","hash":"915aab47c5994b3c57e1074b1c8ec543ca22a28b","modified":1579783544093},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/10.png","hash":"ff84dc6f0699694d1bc24a98987ddfa76f072cb2","modified":1582002510966},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/1.png","hash":"595d16ef0a14c2bbf9a97deac979900de0b5e267","modified":1582002159754},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/11.png","hash":"df182c83cde68e12b18f3c4e5fc86282a674a356","modified":1582002519547},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/12.png","hash":"8f6c55747ba896c33a01a5c03e113ff7ac4a2a59","modified":1582002548182},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/13.png","hash":"be2f5d4a69f7457a888f151edc83d6490770d8fe","modified":1582002561669},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/14.png","hash":"841f7c8850b62614ee0eece5666b5622f3e8ad16","modified":1582002576693},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/15.png","hash":"bf5028023e769de177513d70296ea09a2775c30c","modified":1582002617522},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/16.png","hash":"460f9245da2bea0b80b2588062cf2ea8dcca38b3","modified":1582002627029},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/2.png","hash":"d460cbea968d6e0932ee2af74283d3c7db732e3e","modified":1582002317897},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/3.png","hash":"b8aec9dca0c6087a238fefcce72537d65054a5d1","modified":1582002326698},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/4.png","hash":"85e7bf5f7782b4b4cc0163a57487154e9646c08c","modified":1582002336108},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/5.png","hash":"6fe8eb877bea4092d186b53b5068f2850fd32e55","modified":1582002382763},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/6.png","hash":"85ac969827157dd795ef5c1721e67bca92d05572","modified":1582002400103},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/8.png","hash":"617edb6704872b76224b92a362f9119f48522f42","modified":1582002414477},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/9.png","hash":"2051f2fbad536c68d1216ef3155e7f8cfba49710","modified":1582002462063},{"_id":"source/_posts/JVM必须知道的基础/10.png","hash":"bae83287306566cad893084010c0998cd9437faa","modified":1578491274899},{"_id":"source/_posts/JVM必须知道的基础/11.png","hash":"1a94daaaadfb9b41da98fc7b1e1ac7b51474bee9","modified":1578491285783},{"_id":"source/_posts/JVM必须知道的基础/12.png","hash":"b6573d5a1135b952870cdf307b172e38dcc5dbff","modified":1578491296003},{"_id":"source/_posts/JVM必须知道的基础/13.png","hash":"642a8f66db67b356a19b6048f3f053042b8753c0","modified":1578491423067},{"_id":"source/_posts/JVM必须知道的基础/3.png","hash":"5fac0388773ad247e6fb8f92274c6ef9fc96db8a","modified":1578402181647},{"_id":"source/_posts/JVM必须知道的基础/4.png","hash":"2560a0a36558743a42e3b696119e8056ea301b5a","modified":1578404413531},{"_id":"source/_posts/JVM必须知道的基础/5.png","hash":"ac91035fa09542f89715da719ceb2a8046df0c76","modified":1578404456946},{"_id":"source/_posts/JVM必须知道的基础/6.png","hash":"3326c2ee58f09f2f6e970f4b8002fc20dde39245","modified":1578490924913},{"_id":"source/_posts/JVM必须知道的基础/7.png","hash":"0889acec5cee126e2d9e94907ea06416d48527c9","modified":1578491166738},{"_id":"source/_posts/JVM必须知道的基础/8.png","hash":"6ab29e215fae6701b1c64c3375c9142c93f1c38c","modified":1578491212302},{"_id":"source/_posts/JVM必须知道的基础/9.png","hash":"ddb5b57ac53b2c35b8d0f7529676b7a0102f8e23","modified":1578491222454},{"_id":"source/_posts/Kafka-大数据的标准数据源/1.png","hash":"9c03e00efaf3bf2d88a981d0f38beb29b0c23d9f","modified":1582866318754},{"_id":"source/_posts/Kafka-大数据的标准数据源/2.png","hash":"a4c34a560ce0114beb5f56c805925b9d8e72aa2a","modified":1582866349164},{"_id":"source/_posts/MongoDB使用及底层原理/1.png","hash":"dc4c9dbb1a62075c8352343f36854e7d38a4dc13","modified":1582700315057},{"_id":"source/_posts/Netty原理/1.png","hash":"0eb9d26338dba8c4d25b6b6e7eca684394d71c51","modified":1582696633093},{"_id":"source/_posts/Netty原理/11.webp","hash":"ac437a6b11fb5cc2c4074310488f494010aeda22","modified":1582696754295},{"_id":"source/_posts/JVM必须知道的基础/2.png","hash":"626612f6986c23194c3ebe35aa19296cef3756d4","modified":1578402131064},{"_id":"source/_posts/Netty原理/12.webp","hash":"ef3a0a0dff118bee5d3e3066ca01e98dcd85d31c","modified":1582696759454},{"_id":"source/_posts/Netty原理/13.webp","hash":"ab3cade11306d79b409a43574bca7ea0c75291bd","modified":1582696766840},{"_id":"source/_posts/Netty原理/14.png","hash":"e946c5ab5235607474bba22d3450086858227c85","modified":1582696771834},{"_id":"source/_posts/Netty原理/15.webp","hash":"6ea6f31186b092223a129527bd21a17965e5d1a2","modified":1582696779826},{"_id":"source/_posts/Netty原理/16.jpg","hash":"a8ce6feecddd9135f4e13839ee4312a9d2e6d232","modified":1582696786534},{"_id":"source/_posts/Netty原理/17.png","hash":"a228835a9dab04b0350e0802718298acfc764f7f","modified":1582696792928},{"_id":"source/_posts/Netty原理/19.webp","hash":"657adfd2c8f4461149dc6a4d6711b4cb9287ed20","modified":1582696807139},{"_id":"source/_posts/Netty原理/2.png","hash":"ce6de600e8b525d69b11ea4ee7eb68d1ae7ce1ab","modified":1582696659578},{"_id":"source/_posts/Netty原理/20.jpg","hash":"6651871536e6a3c0f9d0ee16bf55ea3e45d738ad","modified":1582696820513},{"_id":"source/_posts/Netty原理/21.webp","hash":"1405931144855fdf6989f2da51b6bb20bcb38817","modified":1582696829514},{"_id":"source/_posts/Netty原理/22.png","hash":"828fb32f9e98feaafca83d175ad1f969db765472","modified":1582696835473},{"_id":"source/_posts/Netty原理/3.webp","hash":"b37c0cffb001959af2cefa4455983e365983917f","modified":1582696676659},{"_id":"source/_posts/Netty原理/5.jpg","hash":"d9bd057d236507ae03e8dfab416d36dcda3cd61e","modified":1582696692175},{"_id":"source/_posts/Netty原理/4.jpg","hash":"5bd3ef67ebe178fbecacefb860a7084d4d628a8d","modified":1582696682221},{"_id":"source/_posts/Netty原理/6.webp","hash":"e3198491ac46af71164e79505d39fbf8ed899c92","modified":1582696700703},{"_id":"source/_posts/Netty原理/7.webp","hash":"58a9efc0f107799ea116e4fe24d0c5d69c8d9622","modified":1582696707851},{"_id":"source/_posts/Netty原理/8.jpg","hash":"0c25ee2a26cde22ea2ce5ec0218cdd82a97cfeed","modified":1582696717527},{"_id":"source/_posts/Netty原理/9.png","hash":"05b08f6e0dd64bffa1b7a4679afb91ab42a1b917","modified":1582696736055},{"_id":"source/_posts/Nginx使用心得/1526016663674.png","hash":"8316954edf76e8e099f25c7f3639de3de3960b6d","modified":1580725047593},{"_id":"source/_posts/Nginx使用心得/1526187409033.png","hash":"5b0f0b32a502c7deca508ecf2b24794ad84b4cc1","modified":1580725036693},{"_id":"source/_posts/Nginx使用心得/1526188831504.png","hash":"c35b1196514ff935bba01a9f7665750b1b76861b","modified":1580725055159},{"_id":"source/_posts/Nginx使用心得/1526189945180.png","hash":"c661733796251db60231969bba3056d350fcedb7","modified":1580725092856},{"_id":"source/_posts/Nginx使用心得/1579422396676.png","hash":"b35fb05a396e94f383f19ae64098071062d42356","modified":1579422437548},{"_id":"source/_posts/Nginx使用心得/screenshot.png","hash":"59d966789df57e54306e23d6ab0da94bac9977a4","modified":1580725071476},{"_id":"source/_posts/Nginx使用心得/sshot-1.png","hash":"47a9f035efc416d0c9bb4320cc734f81ea9dd6ee","modified":1580725065873},{"_id":"source/_posts/Shiro框架原理及简单使用/1.png","hash":"2228b516d1b23c16481b8463aeb9601852077c5e","modified":1580909822781},{"_id":"source/_posts/Shiro框架原理及简单使用/2.png","hash":"56fc81ecf4243f16fa887fc7bf68b0ab451e28bf","modified":1580909889436},{"_id":"source/_posts/Shiro框架原理及简单使用/3.png","hash":"e7a039a2bfb12e3f9dda9b81c4df6d44836342b0","modified":1582683656658},{"_id":"source/_posts/Spark到底好在哪里/10.png","hash":"32ec5971cf241275551236ac435696ee20923119","modified":1581950321395},{"_id":"source/_posts/Spark到底好在哪里/11.png","hash":"e166e7d6a2bd9d53e09e8fea5942dff640e5cb18","modified":1581950335130},{"_id":"source/_posts/Spark到底好在哪里/12.png","hash":"0abdd3741573f1525837a773c44cf28edda4096e","modified":1581950345015},{"_id":"source/_posts/Spark到底好在哪里/13.png","hash":"8e7791c8e7503578f92379e2a619458ed4f1dd45","modified":1581950359139},{"_id":"source/_posts/Spark到底好在哪里/2.png","hash":"b5cc5d8b696128fa12b2cca6aa4714e5768d48e7","modified":1581950245321},{"_id":"source/_posts/Spark到底好在哪里/3.png","hash":"e5f469c5b213205d52faec223dd6706108b46189","modified":1581950254868},{"_id":"source/_posts/Spark到底好在哪里/4.png","hash":"a671fe81a65c18649364ed20b2623d573ccf47d1","modified":1581950262901},{"_id":"source/_posts/Spark到底好在哪里/5.png","hash":"ff9753613ee43cbed142b11a3897f83c887c22b4","modified":1581950270223},{"_id":"source/_posts/Spark到底好在哪里/7.png","hash":"a1f0ec3bde2dd4cb1fd7392a6512cf8f82856de8","modified":1581950294468},{"_id":"source/_posts/Spark到底好在哪里/8.png","hash":"9514de8017aeb5001c5baeee50f2a7c8d36204ab","modified":1581950303256},{"_id":"source/_posts/Spark到底好在哪里/9.png","hash":"e726dfb7a4ad3dd29cc1da02a42f2d76216be48f","modified":1581950313333},{"_id":"source/_posts/SpringMVC原理/1.png","hash":"b94920ff5d053dfa31a0c8cbf391f2e2c208c26a","modified":1578147203960},{"_id":"source/_posts/SpringMVC原理/12.png","hash":"309b52fbdf982246f2c009c8ace8edb50e539a42","modified":1578147341182},{"_id":"source/_posts/SpringMVC原理/3.png","hash":"78e7acfb96161c7522af534167f756af38313d82","modified":1581949989995},{"_id":"source/_posts/SpringMVC原理/4.png","hash":"7f8752e55ee130f8131e3759cc62ae5851505aea","modified":1581949998504},{"_id":"source/_posts/SpringMVC原理/5.png","hash":"af05afe475ce1f931a3fc334d08ddd46ded575da","modified":1581950007457},{"_id":"source/_posts/SpringMVC原理/6.png","hash":"8dd5fbb767d1844111351cce92e40d2f48f92217","modified":1581950016294},{"_id":"source/_posts/SpringMVC原理/b856096cf065baaaabe5884deb4ecfa3.png","hash":"593c63ab827b9194244017ac0f8d1f27f6f00bfc","modified":1578145440469},{"_id":"source/_posts/Spark到底好在哪里/6.png","hash":"399367e9dd7eddd6b753cc53dd54d65f9ade3561","modified":1581950285434},{"_id":"source/_posts/javaWeb三大核心组件之servlet/1","hash":"309b52fbdf982246f2c009c8ace8edb50e539a42","modified":1578148259217},{"_id":"source/_posts/javaWeb三大核心组件之servlet/2.png","hash":"b94920ff5d053dfa31a0c8cbf391f2e2c208c26a","modified":1578148273579},{"_id":"source/_posts/java异常/1.png","hash":"8e046028c95ad0df00075fff533888cf80d8275b","modified":1579183239024},{"_id":"source/_posts/java的Object对象/1.png","hash":"c7bf9876076e1aecb3b3795057b2d0fea238ebb4","modified":1578923804756},{"_id":"source/_posts/java的Object对象/10.png","hash":"0f47edf20dd8df37bb289cd3b36080d8cf661089","modified":1582698604416},{"_id":"source/_posts/java的Object对象/12.png","hash":"1b005f4354984df1f20bc28a199830f72b097ddc","modified":1582698625744},{"_id":"source/_posts/java的Object对象/13.png","hash":"cf520d0eda0655a49d9f6775626e6f19997e084a","modified":1582698656559},{"_id":"source/_posts/java的Object对象/14.png","hash":"6b11cf88ba040ef97e5d320a39c75af9a32aa147","modified":1582698666687},{"_id":"source/_posts/java的Object对象/15.png","hash":"a3ef39787480a4d1338cd1f08ddde4c21bd9dfc8","modified":1582698674122},{"_id":"source/_posts/java的Object对象/1578923476661.png","hash":"fcbf6534b67da7ea15cfc0b76081c60895f4dcc0","modified":1578923496895},{"_id":"source/_posts/java的Object对象/1578923575140.png","hash":"0cdc6f2ed8a52ffb6ef95a7281eeaea58c436d1b","modified":1578923582692},{"_id":"source/_posts/java的Object对象/19.png","hash":"525277d563227e8c30fe03febb4cba3a1509fe82","modified":1582698770962},{"_id":"source/_posts/java的Object对象/4.png","hash":"1884d1b9d402974a5f067132e008fb5af6ead8a5","modified":1582698554342},{"_id":"source/_posts/java的Object对象/5.png","hash":"d7108c0700ed42d8d351fdba17e2cae3a202341d","modified":1582698563151},{"_id":"source/_posts/java的Object对象/6.png","hash":"bebc8776c9760762ebecd844b1fc2e865fadc408","modified":1582698570602},{"_id":"source/_posts/java的Object对象/7.png","hash":"0f6ab8ab0607f1b8388c882e65fccf1b4ff6cea0","modified":1582698578435},{"_id":"source/_posts/java的Object对象/9.png","hash":"2377d27065834d07d8de2a2b4b0d21cc93f82ec6","modified":1582698597129},{"_id":"source/_posts/redis简单使用总结/1.png","hash":"c6e2fed002cda595d440003e9562ce0c0261ac45","modified":1578663849730},{"_id":"source/_posts/redis简单使用总结/2.png","hash":"7deb137e79610fb6ef0fb29441de999ce65366d3","modified":1578663871258},{"_id":"source/_posts/redis简单使用总结/3.png","hash":"e01cd0bb991215c0a80f6b0d94c7a2b6722bb3ab","modified":1578663880914},{"_id":"source/_posts/redis简单使用总结/4.png","hash":"2da79bf17cd462cd5effb4aaa4b729064a8c4b79","modified":1578663889702},{"_id":"source/_posts/redis简单使用总结/5.png","hash":"48560725318ca829b69a305f60083a5701df3b5d","modified":1578663899789},{"_id":"source/_posts/springboot项目遇到的问题/1594362451200.png","hash":"1f3cc371bcfdeb31e8d0609c778734de6a619c5c","modified":1594362473292},{"_id":"source/_posts/使用VMware安装linux虚拟机/1577692561419.png","hash":"b6dc89414550de52ef499906ec14f48742b79417","modified":1577692568751},{"_id":"source/_posts/使用VMware安装linux虚拟机/format7.png","hash":"91412014eb3687b94849bc614083670f9b1152ee","modified":1577690272993},{"_id":"source/_posts/动态代理的实现方式与区别/1.png","hash":"db01b55b558aa0a458237325014634d21ed8c66f","modified":1580976241555},{"_id":"source/_posts/回头再看spring/1.png","hash":"40bf0bd9efc20c44c22f2383dc076ae4e915ad77","modified":1578129584531},{"_id":"source/_posts/回头再看spring/clipboard.png","hash":"1a0a34e6aa9a0cbcb5ae6d351d7f1a04464950f2","modified":1578140142332},{"_id":"source/_posts/对MySQL执行引擎InnoDB的认识/1.png","hash":"1023a3f7eb63510fa079e145b69c266b8c2f8c00","modified":1582947751107},{"_id":"source/_posts/对MySQL执行引擎InnoDB的认识/2.png","hash":"4b9a857ce961e40570360955a4ed3576da67ac9d","modified":1582947926069},{"_id":"source/_posts/对MySQL执行引擎InnoDB的认识/3.png","hash":"a8ab868d6e564b1fb23a9bbb988250ae8d1e0c1a","modified":1582947797074},{"_id":"source/_posts/对MySQL执行引擎InnoDB的认识/4.png","hash":"666efe3aedef5ca03029a5733e26f3ce6f0568f9","modified":1582947803884},{"_id":"source/_posts/对MySQL执行引擎InnoDB的认识/5.png","hash":"5b7210c1ed85125818c5db73ea8328be8a1bb0a2","modified":1582947816558},{"_id":"source/_posts/对MySQL执行引擎InnoDB的认识/6.png","hash":"1063b5b8d792db8909cfcf7286398b19c42b00cb","modified":1582947830321},{"_id":"source/_posts/对MySQL执行引擎InnoDB的认识/7.png","hash":"51161c11a6fcaba2a2de5e3dc9d5b6b414214832","modified":1582947843837},{"_id":"source/_posts/对Mysql读写分离的认识/1.png","hash":"0f8b75827bfaafaaa5353fb2c5a54f5f90b1806c","modified":1580725484128},{"_id":"source/_posts/对Mysql读写分离的认识/2.png","hash":"b2d9ff8f3345d0552555927361facaaebba0d54b","modified":1580046669508},{"_id":"source/_posts/对Mysql读写分离的认识/3.png","hash":"012e98b5d117cbd86a5f3826779bb4f0ebdb0aee","modified":1580046700846},{"_id":"source/_posts/多线程之缓存与主存一致性/20160613151013467.png","hash":"da8ff67b12daf7bc3384b335f9baa0924bb7de74","modified":1579096599274},{"_id":"source/_posts/栈的性质及一些使用场景/1.png","hash":"1a58321155c2c31ce98a3d784658a0877b743c6d","modified":1582700472143},{"_id":"source/_posts/栈的性质及一些使用场景/2.png","hash":"218584882750b05953ce02c66053562daa6bb4b4","modified":1582700481460},{"_id":"source/_posts/栈的性质及一些使用场景/3.png","hash":"722805682d2d4440a0607a5c554e76429f2cc74b","modified":1582700499927},{"_id":"source/_posts/栈的性质及一些使用场景/4.png","hash":"e20c30513d0cf99a9cd41e11b06732381b32a19a","modified":1582700770863},{"_id":"source/_posts/流式处理框架后起之秀Flink/2.jpg","hash":"0f0199fb236638dcc215ec46754209009d7aead3","modified":1580949856234},{"_id":"source/_posts/流式处理框架后起之秀Flink/2.png","hash":"252966c95d3b7c6468e465b0811d35f44890d8cc","modified":1580948219636},{"_id":"source/_posts/流式处理框架后起之秀Flink/3.jpg","hash":"19838edceb75b89e3a2b4b3b8a3127e0c62cb5a1","modified":1580949889648},{"_id":"source/_posts/流式处理框架后起之秀Flink/4.jpg","hash":"5103592c7332e7b9bb8ec34651121f32d3383b3c","modified":1580950029793},{"_id":"source/_posts/流式处理框架后起之秀Flink/4.png","hash":"89e0d6a23264f1f4ffcbe71ff30362071ee85f6e","modified":1580948296578},{"_id":"source/_posts/流式处理框架后起之秀Flink/5.png","hash":"ac5eb9f8a138e09adfb03c2ce568bac41491b243","modified":1580948523827},{"_id":"source/_posts/流式处理框架后起之秀Flink/6.png","hash":"b589c516596cb41840737ed2851e6fbfcb0ade34","modified":1580950626585},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps26.jpg","hash":"aace61b227944476d769cf962ff2c8f7bf7e471b","modified":1580972183157},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps29.jpg","hash":"2e8d5d19688cf5e409eb52235ad7fc068e4870e9","modified":1580972298718},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps6.jpg","hash":"871afee0aa70390c23dbf28bdc99361dca2330cf","modified":1580950176831},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps7.jpg","hash":"2bd7914c6584b58750dad52141819f3015df323a","modified":1580950215376},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps9.jpg","hash":"e87de305a831f153d66ba509d21ae51c9be8a763","modified":1580950222725},{"_id":"source/_posts/深入理解java的BIO、NIO、AIO/1.png","hash":"9eb16f7c7313438b783cfc4d176d9ae3bb5a3371","modified":1582962503649},{"_id":"source/_posts/深入理解java的BIO、NIO、AIO/2.png","hash":"4de362d0658d244d66341e745c583547e7c48606","modified":1582962693330},{"_id":"source/_posts/真正意义的流式处理框架Strom/1.png","hash":"4df99a4c0245e8c1079d20d16aee8d491bb57108","modified":1580912885478},{"_id":"source/_posts/真正意义的流式处理框架Strom/2.png","hash":"271b2a82e5c30262eecfede93d7917ea18b6823e","modified":1580912898273},{"_id":"source/_posts/真正意义的流式处理框架Strom/3.png","hash":"eaf5f1116d3abd66ff595a391875eeb8cf746b83","modified":1580912911537},{"_id":"source/_posts/真正意义的流式处理框架Strom/4.png","hash":"d9f6bb91655e712e2d15cb31d9ed92ec3e5460f1","modified":1582683970538},{"_id":"source/_posts/稳定排序与非稳定排序的应用场景/0_1275286328kIDC.png","hash":"389259d20a726418b47b23d376522091bfb8ace8","modified":1580911588099},{"_id":"source/_posts/线程池原理/1.png","hash":"282f73524658158c00707d15b8cabbed042c5074","modified":1579786984390},{"_id":"source/_posts/线程池原理/2.png","hash":"e09eaf537bfc75ce0d44cac6dc6e7b9400be4bfa","modified":1579786974704},{"_id":"source/_posts/软件开发六大设计原则/1.png","hash":"deb73f69084cbdef4fdbf9b20298cc31533e49bc","modified":1578663494262},{"_id":"source/_posts/软件开发六大设计原则/2.png","hash":"68cb4e3b735aa3a3fa4f8de7786a281290a857a1","modified":1578663511896},{"_id":"source/_posts/队列的用法/1.png","hash":"d05d41938d764b6c8161e2795c666c8ac399feb0","modified":1580975385975},{"_id":"source/_posts/队列的用法/10.png","hash":"786a854926fdbf568ef9a5781cb526470d207bba","modified":1580975476866},{"_id":"source/_posts/队列的用法/2.png","hash":"832fb019b8255e5e4289145e6ed10b07123516ff","modified":1580975393697},{"_id":"source/_posts/队列的用法/3.png","hash":"8fdb9a7339a7d0a6e6033361ea9d9a540a997577","modified":1580975400499},{"_id":"source/_posts/队列的用法/4.png","hash":"aa7c36a070dcbfb0e0aa66554359a46c60683d48","modified":1580975407329},{"_id":"source/_posts/队列的用法/5.png","hash":"951be6c22ccf0110faf8b177473ef9ebb99de76f","modified":1580975430726},{"_id":"source/_posts/队列的用法/6.png","hash":"4738b0a4613d18240afa1f36644c12ea8b253b81","modified":1580975443291},{"_id":"source/_posts/队列的用法/7.png","hash":"a820aa5f9cb8db300c0db92cff74fdc6825917d0","modified":1580975451531},{"_id":"source/_posts/队列的用法/9.png","hash":"953b7748e71537e498037c398298512676ca9d44","modified":1580975468962},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"cb99dc352397ec5d0765794d7b8884972e61973b","modified":1577408074939},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1577408074939},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"42dda8e67f7f09d148347887e52f18aea546df26","modified":1577408074939},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"6bf708dbd705b486bc464e9be8e8834bbd692850","modified":1577408074939},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"d8c40dbc8106b5bc53ceb727ad968c1d8f234261","modified":1577408074939},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1577408074939},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"8b680d867eb51054e3faf364f6ffa98bcb62924e","modified":1580956561612},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"764d20ae433f558e81249ff0c8105ac53e6d3f59","modified":1577408074939},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"d4042e5521ceb5f3255cd4455ac7ccd227fee6df","modified":1577408074939},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1577408074939},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"821e1af65990521c9e0288178d8e5b18c73a9cab","modified":1577408074939},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1577408074939},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"a3a140e6aeeb6f289e4b821a577ef548267f3de1","modified":1577408074939},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"e761f0104fbf431671bbe6bebc91ca82f737f4d2","modified":1577408074939},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"3a82fcb6f31d69971cb564985842c14ac02cdca0","modified":1577408074939},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"dfdeea9c59d157acb851d4bf44bf95f81787523c","modified":1577408074939},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"166c0b9753f3f913bd801e82ad5b268004be198d","modified":1577408074939},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"4e73f10eacb5d00a0681cb44fe5c039cd8ab03cd","modified":1577408074949},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"73624d9db81e87ff0c12310bb873fbd0b5221021","modified":1577408074949},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"e859fe6e0259e0c123cb7ceda6e4cac836318ffc","modified":1577408074949},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"0f2e1e27d21492cf228e786daead985b1e1dcea4","modified":1577408074949},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"f85a222ec3f9bc27eb7978015e63a16514b38791","modified":1577408074949},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"82cb8090cde663fa7ad67418a802997b3057e957","modified":1577408074939},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"c3039180ddb2eb17e724b8441e5f93e79859aef7","modified":1577408074949},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"b2b22d4fc4e46b051f67216c391f629f4ff552b5","modified":1577408074949},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"2af85ddef6e61a44cbe10e8f6272a8324681ee3f","modified":1577408074949},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"55272fab7a3303e94f1839ebd7ca6cf9965fb328","modified":1577408074949},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"fc50cb4bbc1f4d0e4c9f5941f1c3c74bea742db7","modified":1577408074949},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"3b42900247d5ea4ea5b68e2be44420a0d54785ad","modified":1577408074949},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"5284712d84bbaa4f0d88026ac3ec5a8c13e00056","modified":1577408074949},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"7e7d8bdf170bfb9fe18ef1ccfbce343117aa6ff0","modified":1619696642788},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"9ea672db65f1e5b8fad1ffafb1614f25adc97e63","modified":1577408074949},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"0aaf0a111b9aa07ff37f6286eeac5506283f47f8","modified":1577408074949},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"4608af6151f0e32f668c89f09343748340021478","modified":1577408074949},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"785cb588a31215876f6737213054ba0e8552fff0","modified":1577408074949},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"c6f713316ce75ad08ac5d1587bd8ce42e894e9ae","modified":1577408074949},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"d439d86818de179d64965d4f7f5fa56147fd9221","modified":1577408074949},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"05f5e2acace5730cdf7bed650375ad88f6b5d1b7","modified":1577408074959},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"bf604fe9c435f0fb9a559cac9c35772579b590e8","modified":1577408074949},{"_id":"themes/matery/source/css/matery.css","hash":"73261915056844ec6e139bc5d5742a0503fb225b","modified":1619745044677},{"_id":"themes/matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1577408074959},{"_id":"themes/matery/source/favicon.png","hash":"425b74a532f97dbb0c3fd2023c7017bc0f3378af","modified":1577495489729},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"6310903eb0e434d6f9a59ca669aab7fae38d4797","modified":1577408074949},{"_id":"themes/matery/source/js/matery.js","hash":"208b7806caa943c115aa0825c9c72a0781404775","modified":1577408074969},{"_id":"themes/matery/source/js/search.js","hash":"77ecae23dd3edd8ad962c5b12954652bb2f7a1b6","modified":1577408074970},{"_id":"themes/matery/source/medias/logo.png","hash":"95d4fbb9633e08a215f3b888f328a2a663815e7c","modified":1577495679657},{"_id":"themes/matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1577408074959},{"_id":"source/_posts/Flume-大数据采集工具/wps27.jpg","hash":"aaeafd4be264e96668df021e8e479b6b1e5188ba","modified":1582702809285},{"_id":"source/_posts/Flume-大数据采集工具/wps7.jpg","hash":"72adac4033914046eecea50af3d207badaf724ad","modified":1582702791716},{"_id":"source/_posts/HTTP与HTTPS原理/5.png","hash":"f088ec8f4de98a4a173ab8cc36f0d4c621019bff","modified":1579610899824},{"_id":"source/_posts/Flume-大数据采集工具/wps6.jpg","hash":"baec5c992487ca7a58c796cf61c091917eb9c27c","modified":1582702789089},{"_id":"source/_posts/HTTP与HTTPS原理/7.png","hash":"d1aa6cd25e7880326058962cf8908829bbdaa6f8","modified":1579610885375},{"_id":"source/_posts/Netty原理/10.png","hash":"18972d1739ca30bed1bf3aa8526293c7e851c4c6","modified":1582696744454},{"_id":"source/_posts/Netty原理/18.png","hash":"dc2535b567217dd6b9c3d822d59625f6b52506b0","modified":1582696799352},{"_id":"source/_posts/Netty原理/23.png","hash":"66ebfe7944ade082fc3b6cd27fb886d410974cd4","modified":1582696841123},{"_id":"source/_posts/Netty原理/24.png","hash":"8e818e96f8dff7686c37ea86ec87519fe48c7598","modified":1582696846835},{"_id":"source/_posts/JVM必须知道的基础/1.png","hash":"28bb6a1f5f5d4f065b5814b12b2a0f4bafd1b657","modified":1578400942000},{"_id":"source/_posts/SpringMVC原理/16b5eb3cc1ab2fe9.png","hash":"f4aaee207d4f115fc0bd53051265095b8b98eaa3","modified":1578146255934},{"_id":"source/_posts/docker/1.png","hash":"6f4e4451540d86c5f42863bfe1eaff12059fa424","modified":1619671502303},{"_id":"source/_posts/Spark到底好在哪里/1.png","hash":"07ed474bc2c7ae9bf0d72553fcc4aaa982184957","modified":1581950228264},{"_id":"source/_posts/SpringMVC原理/16b5eb3870589ac4.png","hash":"32ddbb444857275476c09666be18633496bd07e6","modified":1578146034603},{"_id":"source/_posts/java的Object对象/11.png","hash":"680615c1e798683bb746e564668a4c114a8a309e","modified":1582698615429},{"_id":"source/_posts/java的Object对象/16.png","hash":"46f03638c61361a599be2736753ddfa210bf3dca","modified":1582698682583},{"_id":"source/_posts/java的Object对象/18.png","hash":"b58a8107a01c59fdc47508d9c2cb7cbea923a2bd","modified":1582698704161},{"_id":"source/_posts/java的Object对象/8.png","hash":"bd83bba5701e9273b625727ae1f01abad19ecddc","modified":1582698588969},{"_id":"source/_posts/java的Object对象/17.png","hash":"280e19dd77e780ea4a9831086cd274c5d3efe66e","modified":1582698696478},{"_id":"source/_posts/java的Object对象/3.png","hash":"fa83b914d2c790b2295c23d7c4059d80efcf804f","modified":1582698544760},{"_id":"source/_posts/使用VMware安装linux虚拟机/1577691474359.png","hash":"192f67c188820c3a43de754571f9d983eb35e2ab","modified":1577691497686},{"_id":"source/_posts/java的Object对象/2.png","hash":"e614af30b47ab07b66de5666993ef7a7be971e8c","modified":1582698536756},{"_id":"source/_posts/springboot项目遇到的问题/1593848519591.png","hash":"68d188815282d5fcf6894394f9274e6c07dc8239","modified":1593848544348},{"_id":"source/_posts/使用VMware安装linux虚拟机/format.png","hash":"50a7f49146f9e0c94d738a24a735fd39142a26c4","modified":1577690154842},{"_id":"source/_posts/使用VMware安装linux虚拟机/format1.png","hash":"c180c125d0752e14bcdc470403de9bfac786e5a4","modified":1577690170517},{"_id":"source/_posts/使用VMware安装linux虚拟机/format3.png","hash":"3766650b1fa548f67032ddc927d91b77e80ff26b","modified":1577690193767},{"_id":"source/_posts/使用VMware安装linux虚拟机/format4.png","hash":"9c8881af2f8d8830397d8929c1ef2c0c2e9f11e5","modified":1577690210512},{"_id":"source/_posts/因特网五层架构/tcpip1.png","hash":"947653fa87f84bfc9fcc3381944a0212a634db1f","modified":1579523392717},{"_id":"source/_posts/流式处理框架后起之秀Flink/1.jpg","hash":"b648c9e0dfb30778a21bd41da49c5081181e44e5","modified":1580949788098},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps10.jpg","hash":"df8664ab9179a74769ee344db24735579c494cfb","modified":1580950908450},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps23.jpg","hash":"66275e8e2db0ab2af38a6d1f0259a1452137adb2","modified":1580972107708},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps24.jpg","hash":"32d4828937bac7ecfb45d4c81b34313435cb8eec","modified":1580972113292},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps5.jpg","hash":"fcf527ec326c9b2d3d57d943add8fac58950c861","modified":1580950183925},{"_id":"source/_posts/红黑树的建立与维护/1.png","hash":"acf3126fc9d92cb5cdf7451ed7f4386ef83f0e3e","modified":1580973601585},{"_id":"source/_posts/稳定排序与非稳定排序的应用场景/stable1.png","hash":"2d443188a88518072f0d59a204510ed6a9a20092","modified":1579697790814},{"_id":"source/_posts/队列的用法/8.png","hash":"c0c5ea197a2703d594a5815beac911d4d3e7a191","modified":1580975460804},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1577408074959},{"_id":"source/_posts/go语言入门/1.png","hash":"4b69816ac3cb2c82cc60eb1cdce45c2ffebc1e3a","modified":1618927116862},{"_id":"source/_posts/使用VMware安装linux虚拟机/20171126015051216.png","hash":"c6c8e5f01a36fdd4fb025702045e8df4ac728ba2","modified":1577690260794},{"_id":"source/_posts/使用VMware安装linux虚拟机/1577631145598.png","hash":"751cb3e759131eaedd78acaa308340e9ee632a85","modified":1577631151438},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps30.jpg","hash":"708640653a2ed4fdf313a48e7a9f75a371cfd5e1","modified":1580972326990},{"_id":"source/_posts/使用VMware安装linux虚拟机/20171126014938900.png","hash":"6749588f5c40f746e98b60782f2abd91320530d6","modified":1577690230039},{"_id":"source/_posts/使用VMware安装linux虚拟机/20171126015037602.png","hash":"48268e57f013068c03d7b6d7ed8c537091b4a742","modified":1577690244300},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1577408074971},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1577408074972},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1577408074973},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFunction.js","hash":"f3067f7445cd555feb592ee6fc125533235a9965","modified":1619687586809},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","hash":"291ad14cf1d2386f5ce62d42ceca2228d2a4c64c","modified":1619683781864},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","hash":"6762a0cc9f2157d5e6dacae6e533040463d320fb","modified":1619683820382},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","hash":"de6b405e3d67d9a4cb67d19daaa61ed960bc751b","modified":1619683935929},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1577408074984},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1577408074973},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1577408074984},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1577408074974},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1577408074994},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1577408075014},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1577408075014},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1577408075004},{"_id":"themes/matery/source/libs/others/explosion.min.js","hash":"5b76fa72a85cfb27d54b00128393ece773d65386","modified":1577408075014},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1577408075014},{"_id":"themes/matery/source/libs/others/snow.js","hash":"b393f069781eef788a0ae66b2681cece8fea2851","modified":1577408075014},{"_id":"themes/matery/source/libs/others/text.js","hash":"fdf18f65977e4bc358dfb5fb0b7c98492ae72efd","modified":1577408075014},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1577408075014},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1577408075024},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1577408075024},{"_id":"themes/matery/source/libs/others/fireworks.js","hash":"e9c74f2dd3953d4d8dec44e9977574d00702e84d","modified":1577408075014},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"021898a16279ac2ffe75af4f902fab2a0a39f11a","modified":1577408074994},{"_id":"themes/matery/source/medias/avatars/babyq.png","hash":"be5432588003e5a52c02e690622eec72b5f7346c","modified":1577408075034},{"_id":"themes/matery/source/medias/avatars/cww97.jpg","hash":"6af987cafc55d8d031534dd5e0f722fff19f70ec","modified":1577408075034},{"_id":"themes/matery/source/medias/avatars/fun4go.png","hash":"0f4333973a972a629cfbabf601bc7c192b65376c","modified":1577408075034},{"_id":"themes/matery/source/medias/avatars/hael.jpg","hash":"e66ccedab38bb2e8fc45fac024e234ab8e7b9d54","modified":1577408075034},{"_id":"themes/matery/source/medias/avatars/huaji.jpg","hash":"86be7eed2a491455ccfe3e7da46366ff477765ca","modified":1577408075034},{"_id":"themes/matery/source/medias/avatars/ids2.jpg","hash":"2c8d3ac6ab5ac6196bac83766fde975daca91c32","modified":1577408075044},{"_id":"themes/matery/source/medias/avatars/ldy.jpg","hash":"906ef214d1f2fe52a663738340ad5623f826bd82","modified":1577408075044},{"_id":"themes/matery/source/medias/avatars/hzwer.jpg","hash":"53a66bb5e65d2abd5b7412edf094c1e0b1094492","modified":1577408075034},{"_id":"themes/matery/source/medias/avatars/lijiaqian.png","hash":"9d96b3838acfae9a23b6e290fcfafceff0419c63","modified":1577408075044},{"_id":"themes/matery/source/medias/avatars/liyucheng.jpg","hash":"12055a27fa667c87d2319475968056e1a8ad0f08","modified":1577408075044},{"_id":"themes/matery/source/medias/avatars/kewlgrl.jpg","hash":"3af0fd1029a1511bb3c0e90871e41b35e714b01f","modified":1577408075044},{"_id":"themes/matery/source/medias/avatars/liyangzone.jpg","hash":"febab557e4c0d859ab4cc14b57d8106f5e3fccfb","modified":1577408075044},{"_id":"themes/matery/source/medias/avatars/michael.jpg","hash":"331a2ab20c299196f5a3089b8445fc8f55346cb6","modified":1577408075054},{"_id":"themes/matery/source/medias/avatars/mouse.jpg","hash":"2eae273885b9859150a1f98f74b3df12ca9a207c","modified":1577408075054},{"_id":"themes/matery/source/medias/avatars/mpy634.png","hash":"30f88e09c02b37c2dc684d4ee3237e327bb23f8b","modified":1577408075054},{"_id":"themes/matery/source/medias/avatars/myzhihu.png","hash":"245bf683033c88588e6b0e74bde5398866731652","modified":1577408075054},{"_id":"themes/matery/source/medias/avatars/qiqiang.jpg","hash":"081459866f922d9558a88cd4d7155d91fa730322","modified":1577408075064},{"_id":"themes/matery/source/medias/avatars/sunchangzhi.jpg","hash":"bbe2a15fd474ab62dbd14fea72deb1113a4fb005","modified":1577408075064},{"_id":"themes/matery/source/medias/avatars/taowei.jpg","hash":"e58b03b70656aa7a27238be38dac3896d9d16f10","modified":1577408075064},{"_id":"themes/matery/source/medias/avatars/spacesac.png","hash":"ff1bdb058f1f0499312da1a082ba97d78590db1a","modified":1577408075064},{"_id":"themes/matery/source/medias/avatars/zhaokangzhe.jpg","hash":"c8242bd13f08a9ddb97e26f216bc729b12ed9058","modified":1577408075064},{"_id":"themes/matery/source/medias/featureimages/flink.jpg","hash":"227e01dfe8af598ba0b462ad133cd3e6054ee7bc","modified":1580953453109},{"_id":"themes/matery/source/medias/featureimages/hbase.png","hash":"1ce476ea7742347fbef825663e21de4de3dbbc8f","modified":1582680806552},{"_id":"themes/matery/source/medias/featureimages/hive.png","hash":"df41235ece34eec2ff56c7575b329bd04324b672","modified":1582680499197},{"_id":"themes/matery/source/medias/featureimages/hadoop.png","hash":"53d89e6c2ff7b9698be2cd6cc93607822911bf6e","modified":1582680944409},{"_id":"themes/matery/source/medias/featureimages/jvm.png","hash":"d1395bc1a829d7ddc7c155ad15832297bdb78455","modified":1582680663964},{"_id":"themes/matery/source/medias/featureimages/mysql.png","hash":"b32675731302b1cd1816bf0edc4bba403ca12671","modified":1580974368796},{"_id":"themes/matery/source/medias/featureimages/queue.png","hash":"9dd542232d55e662529fe3abc5b4131a4e136773","modified":1580974551687},{"_id":"themes/matery/source/medias/featureimages/sqoop.jpg","hash":"6b01c2539cd1f586aacc942c8a728760340afbfc","modified":1580978831245},{"_id":"source/_posts/docker/2.png","hash":"8f1de86f61b690790ce76c801d719a9e7da3e09b","modified":1619698321773},{"_id":"source/_posts/使用VMware安装linux虚拟机/format2.png","hash":"70d60bc318ebf4ff639ff3967b10ef2e66215880","modified":1577690182277},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps25.jpg","hash":"e22f4d750fbfc3e46ce0bc7012f2a5889ae17aa0","modified":1580972176949},{"_id":"themes/matery/source/medias/featureimages/red_black_tree.png","hash":"1b22a187b5172be79204f28538dea74ce340dc3d","modified":1582680709346},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1577408074984},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1577408075004},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"7a551393b8360731104fdef1af36a6f3638f5855","modified":1577408075004},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"f1558f12d96a352e490166d543a8e821dd3bb2bc","modified":1577408075024},{"_id":"themes/matery/source/medias/avatars/antnlp.ico","hash":"29475f350b989331cebd702a315f020917d06ed8","modified":1577408075034},{"_id":"themes/matery/source/medias/avatars/duyupei.jpg","hash":"3c02ed4cf57dc37e4f4b8314bf5094833a854cb0","modified":1577408075034},{"_id":"themes/matery/source/medias/avatars/gsy.jpg","hash":"6a175e2ba56a2280d40a2e654b559be41c3a0a48","modified":1577408075034},{"_id":"themes/matery/source/medias/avatars/mizunashi.png","hash":"5fc300701d3b4250a307ed70e3a3aa0d5395c808","modified":1577408075054},{"_id":"themes/matery/source/medias/avatars/milyyy.jpg","hash":"ac2826d9c28346efeb967df01465a2c74d9041fe","modified":1577408075054},{"_id":"themes/matery/source/medias/avatars/qiandongwei.jpg","hash":"6873551596a4513d01898ad866c4073c68270c57","modified":1577408075054},{"_id":"themes/matery/source/medias/avatars/xuzhongyou.jpg","hash":"1db4dfaf23cf250f222a398326562d4170d3aaa1","modified":1577408075064},{"_id":"themes/matery/source/medias/avatars/zhangting.jpg","hash":"10ee25ae3531f046a8bd3696c1cc8a16f0f25e1b","modified":1577408075064},{"_id":"themes/matery/source/medias/avatars/zzw.jpg","hash":"5d385b5732644b07b937a4919abc83cb95e14513","modified":1577408075074},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"13b2ed02ab034bcef1e4ec22136d514df437c988","modified":1577496077388},{"_id":"source/_posts/HTTP与HTTPS原理/1.png","hash":"f2d3c68d23427b2e3d71ad615152c31a765671d5","modified":1579610922300},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps27.jpg","hash":"a394438a6c7e468cd8219aaa7371bc72761ba44c","modified":1580972292889},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps8.png","hash":"ab504c5866cbfcbd778f3316b5e3c14ffb682544","modified":1580950219350},{"_id":"source/_posts/网络七层架构/OSIModel.png","hash":"b924a1e05f41a6f4e2e2f29a02d7ce1b477e2d82","modified":1579523304479},{"_id":"themes/matery/source/medias/featureimages/shrio.jpg","hash":"2dcdaa8aff06b4419ce334596b080d43a80d60b2","modified":1582680569877},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1577408075004},{"_id":"themes/matery/source/medias/featureimages/spring.png","hash":"16230ad93f1a19b9a66afc680c94fd62c5863da7","modified":1580972888182},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1577408074974},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"f63c7c489524ccb5d95e74fcd6618116c58fb305","modified":1577408074994},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1577408075004},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1577408075004},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1577408075004},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1577408075004},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1577408075004},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1577408075004},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1577408075014},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1577408075004},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1577408075014},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"2c27939768606603bee3b5e6c8a722596a667e60","modified":1577408075014},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1577408075004},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1577408075024},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1577408075004},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1577408075024},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1577408075024},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1577408075024},{"_id":"themes/matery/source/medias/avatars/0xbird.png","hash":"f9d597dfcb49e1e2be06138b24028291f5638610","modified":1577408075034},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"04c6b2782ce4610c429563110f6a20a47432fc4c","modified":1577408075024},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","hash":"425b74a532f97dbb0c3fd2023c7017bc0f3378af","modified":1577495489729},{"_id":"themes/matery/source/medias/avatars/lyn-draw.jpg","hash":"837d5d5df4dcb086d2da114d0d85084b4ec18768","modified":1577408075044},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1577408075024},{"_id":"themes/matery/source/medias/avatars/lzh.png","hash":"8ffcbf19d6b38b891dbe408d9a4e9513b56f247e","modified":1577408075054},{"_id":"themes/matery/source/medias/avatars/mashiro.jpg","hash":"250e911c16eeb6acb1e6214ad3e6a3d762850a8e","modified":1577408075054},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"0d8315876e8285abec48ce71797a14734fdc980c","modified":1577408075124},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"5f27406bd8661bef44291601edc2784b5af63c23","modified":1577408075124},{"_id":"themes/matery/source/medias/avatars/qianqian.png","hash":"fed254c4e7eb58ee22d647acb83f1d08f4508f8f","modified":1577408075064},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"c86ede693175156922041c5cdb31b9f1432a0e8a","modified":1577408075134},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"7bdf83e0822794a7294fe554c5d21edda1e0c28f","modified":1577408075174},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1577408075024},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1577408075024},{"_id":"themes/matery/source/medias/music/avatars/yequ.jpg","hash":"103beb9ab33434b434fa37a30aecdb29db633024","modified":1577408075194},{"_id":"themes/matery/source/medias/music/avatars/yiluxiangbei.jpg","hash":"01b12e3aca7385a88412c12539e1a608a78896fa","modified":1577408075194},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1577408074984},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1577408074984},{"_id":"themes/matery/source/medias/music/avatars/tiantangdemogui.jpg","hash":"f005578ddb4d3d731838db89a708f39f18d50e60","modified":1577408075184},{"_id":"themes/matery/source/medias/avatars/jitao.jpg","hash":"5934b9baccebccbc2be2ead5d84ad32dd41f9559","modified":1577408075044},{"_id":"themes/matery/source/medias/avatars/zhangyi.jpg","hash":"c9130036aac9a7ac8d62e33550a9d64896cdc364","modified":1577408075064},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"e177d97cfbb0071d2ac15e99d15666cf09d5eacb","modified":1577408075104},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"6dcacca5f1d93dec5c12cab74516e415243c0a64","modified":1577408075134},{"_id":"themes/matery/source/medias/featureimages/25.jpg","hash":"35a945ed6f2f8a0d055f9da6e90b974b7f30c5b0","modified":1577408075154},{"_id":"themes/matery/source/medias/featureimages/26.jpg","hash":"7e6241a0793404fb3668b1030795e5031e0f1ba7","modified":1577408075154},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"b2fff64a89f74ad9788d0b077c3b2f41c6a42e2a","modified":1577496104229},{"_id":"source/_posts/对MySQL执行引擎InnoDB的认识/授权声明.pdf","hash":"8acb1b5242efdebb2c430d72d8eb272b449b7a9c","modified":1583905921294},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1577408074984},{"_id":"themes/matery/source/medias/avatars/jingjing.jpg","hash":"bfcab0139edb2509de984cb0a9b156879c355158","modified":1577408075044},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"6339e06736ff6618d97cca389d7887439c87415a","modified":1577408075104},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"3fa19adaa3c19d58e34be573f1c3233c9b57b242","modified":1577408075114},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"18cc714b6693d0336c1bbaef47ed79cc8a1d95e7","modified":1577408075124},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"7a07b854a602cb9c8fa0db80ebd2c9b989f3de22","modified":1577408075134},{"_id":"themes/matery/source/medias/featureimages/24.jpg","hash":"44d047bc0d29d6ae3e1d65b6cb95143d0d1b6ec2","modified":1577408075154},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"5efc3856cd2da8863e9c808005c3724c09843c3c","modified":1577408075124},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"d41c54ff1c41f5bfd4ccf5af303229059577c351","modified":1577408075174},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"c72b487cf410eb99697ac6e416b1db9c10fa92ce","modified":1577408075114},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"c04a6292dc85cc47a9ec370e1bee81e0e7e65652","modified":1577408075144},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"447bf84c1d9bd71491545922c8735b5b41e2121f","modified":1577408075164},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1577408074974},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"575cb26b73b220a3fea685108812466fb8b68e62","modified":1577408075114},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"4d6f31f86966584360bcdbfecb6f6a2ec94f944d","modified":1577408075074},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"c2980f75f2c047d0957e3c8227b3f8d84e67f752","modified":1577408075084},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"cd3fc47d2042a3277e4b375ad084365abdc28f5d","modified":1577408075074},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"5be9274e63d6ac02607e3d659fd32532291385fa","modified":1577408075094},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"39a1cb44e4ab3006577fefcbeecaddd1a2f62cfa","modified":1577408075104},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1577408074974},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"f515cb01de6d2b1981f50f0487e9b5beb99baf43","modified":1577408075124},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"6f5795e2fa01a6a7f09e3419941a0fc147ea83c5","modified":1577408075094},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"43d1db28c3f3f953c5fd399fd959f6e92ee88fe7","modified":1577408075144},{"_id":"themes/matery/source/medias/featureimages/27.jpg","hash":"f4d026ea224b9d216357d4b42fbe9f002bcaa2b0","modified":1577408075164},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"4cedcb5a87fa5fbc1f343c9180d4e52bb4331220","modified":1577408075184},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"73bae0e6812c46509b91e3155bd12ce8640b245a","modified":1577408075084},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"4c001e19790f5ac73259138ad1713338ea34c664","modified":1577408075174},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"5c494c93ad30b8f71c7865b42b3cf613279a914e","modified":1577408075084},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"8cc1c127ca8ff09d4a07f5c3b845ef2340a1106f","modified":1577408075144},{"_id":"themes/matery/source/medias/music/avatars/daoshu.jpg","hash":"eee120fdf5ccbe86aa7d51826c4c773e76e6357f","modified":1577408075184},{"_id":"source/_posts/go语言入门/2.png","hash":"c94936716cab5e235092c1c7d75317ebe1dd6303","modified":1618927444476},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"1829b3464d5715136d3feec2849c7716541e83ed","modified":1577408075184},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1577408074984},{"_id":"source/_posts/FastDFS分布式文件系统安装使用教程/1577537632508.png","hash":"906a7f80eadb1abf054ae0f254b2d4f870a6c97e","modified":1577540362281},{"_id":"source/_posts/FastDFS分布式文件系统安装使用教程/1577538377340.png","hash":"9a179032690f01f7fc4ee28cdcfe80731a48a199","modified":1577540373401},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1577408074994},{"_id":"source/_posts/MapReduce的流程及优化/wps4.png","hash":"c1ba25e9810f61a0013307536c350300e6170ceb","modified":1594043116261},{"_id":"source/_posts/MapReduce的流程及优化/wps3.png","hash":"596ff295bf17379d5d1c86811cc36cf33d316503","modified":1594043090825},{"_id":"source/_posts/Flume-大数据采集工具/wps8.png","hash":"6af7514eca5798dc05b26c752fd8ef4f87d5fd72","modified":1582702803709},{"_id":"source/_posts/对MySQL执行引擎InnoDB的认识/0300000000_1.3.0.435.publish_release.exe","hash":"ef3020a0b65d516597b3c0049d9d6694e906509c","modified":1584063132471},{"_id":"public/atom.xml","hash":"4083d276e29ab61a85ddc93b8bca19518ad3d02e","modified":1620444194151},{"_id":"public/search.xml","hash":"fe8c108d4e84c14b21ead3d0d1270355dcc5c760","modified":1620444194162},{"_id":"public/sitemap.xml","hash":"dc7c63ee173be78c15fcad360469ad351bb097df","modified":1620444210252},{"_id":"public/404.html","hash":"4af31c85e03f3998e732bacbd9eeb2953aa70044","modified":1620444212110},{"_id":"public/about/index.html","hash":"0f7c0084da8159315bb5f09beb757417e570e7f9","modified":1620444212111},{"_id":"public/archives/index.html","hash":"ad90c6d3e45d4386d04a7dd20aaf3bac9ebc051f","modified":1620444212838},{"_id":"public/categories/index.html","hash":"24600d1066e578bf58b331f62a0eae791d989dc9","modified":1620444212882},{"_id":"public/contact/index.html","hash":"e758f4175a9abca71cf4c42477f2115635bce08d","modified":1620444212882},{"_id":"public/tags/index.html","hash":"ce3d4ac854bf9285178e9371605b2673c545490f","modified":1620444212884},{"_id":"public/2021/04/27/docker/index.html","hash":"e9b610959baa55acc5eef0ce3c98814d1b82d806","modified":1620444212884},{"_id":"public/2020/07/06/mapreduce-de-liu-cheng-ji-you-hua/index.html","hash":"bfc851128eb93bb772db5125417605ceeff5ef73","modified":1620444212884},{"_id":"public/2020/07/05/mapreduce-zhong-de-liang-biao-join-fang-an/index.html","hash":"2e6133b2d27cc15d1eea182f0ae69afccc414243","modified":1620444212884},{"_id":"public/2020/07/03/springboot-xiang-mu-yu-dao-de-wen-ti/index.html","hash":"939078cac5113a8e61de00a7a43fcd385e9818de","modified":1620444212884},{"_id":"public/2020/02/29/shen-ru-li-jie-java-de-bio-nio-aio/index.html","hash":"b5ec4a934612cc2d2426c759c8a326cd1ee2e951","modified":1620444212885},{"_id":"public/2020/02/29/dui-mysql-zhi-xing-yin-qing-innodb-de-ren-shi/index.html","hash":"bfd2e45c3cb02b97ff6f9da4f24ac58b0da2a986","modified":1620444212885},{"_id":"public/2020/02/17/mongodb-shi-yong-ji-di-ceng-yuan-li/index.html","hash":"2b73c3717ac5c829fd6fa32e0ffa9cb6da670833","modified":1620444212885},{"_id":"public/2020/02/04/shiro-kuang-jia-yuan-li-ji-jian-dan-shi-yong/index.html","hash":"3157bff19a369b5904bdee78629c581276bd5943","modified":1620444212885},{"_id":"public/2020/02/02/http-qing-qiu-fang-fa-de-mi-deng-xing/index.html","hash":"810ee56aece48a4f620cfe325f12767da787fe00","modified":1620444212885},{"_id":"public/2020/01/26/dui-mysql-du-xie-fen-chi-de-ren-shi/index.html","hash":"8ff69d9c1f184389b952ae908fea0bab26e97209","modified":1620444212885},{"_id":"public/2020/01/23/hashmap-yu-concurrenthashmap/index.html","hash":"eafcbae875980b6c889d17a19ac83c2dc659a66f","modified":1620444212885},{"_id":"public/2020/01/22/xian-cheng-chi-yuan-li/index.html","hash":"623c162a35f193edcf851c6b775b76584916fab8","modified":1620444212886},{"_id":"public/2020/01/22/wen-ding-pai-xu-yu-fei-wen-ding-pai-xu-de-ying-yong-chang-jing/index.html","hash":"4be9ecaa87d39c5a5ba6600fc0a38e652f0b048b","modified":1620444212886},{"_id":"public/2020/01/21/http-yu-https-yuan-li/index.html","hash":"a608a0f64a23904f8cf2fdbebf5cc504f9e3d5c9","modified":1620444212886},{"_id":"public/2020/01/20/yin-te-wang-wu-ceng-jia-gou/index.html","hash":"25f86d3f316f1ab61a731c0252fe02772bc8b0a6","modified":1620444212886},{"_id":"public/2020/01/20/wang-luo-qi-ceng-jia-gou/index.html","hash":"fb3e9af0aeac1db679b43fd1c6268f57152eef5a","modified":1620444212886},{"_id":"public/2020/01/19/nginx-shi-yong-xin-de/index.html","hash":"9c8c528af52cd0efe5b923e3f3a24bc92a07d99b","modified":1620444212886},{"_id":"public/2020/01/16/hong-hei-shu-de-jian-li-yu-wei-hu/index.html","hash":"962cde724ba777b22eec85779a78fb1e6b911414","modified":1620444212887},{"_id":"public/2020/01/16/dui-lie-de-yong-fa/index.html","hash":"f93f5d736ce1e7234afc5bc82f80f09da0f64115","modified":1620444212887},{"_id":"public/2020/01/16/zhan-de-xing-zhi-ji-yi-xie-shi-yong-chang-jing/index.html","hash":"a47d6a89c1a2c33267d1eee41fa19c1934c2765d","modified":1620444212887},{"_id":"public/2020/01/16/hbase-jian-li-er-ji-suo-yin-de-ji-chong-fang-shi/index.html","hash":"c784c26e9d464a9e6a6cfe3f56e1b799bc5a4c0d","modified":1620444212887},{"_id":"public/2020/01/16/sqoop-hdfs-yu-wai-jie-jiao-hu-shu-ju-de-gong-ju/index.html","hash":"87c760e84453303db4413c2928679517926d4f23","modified":1620444212887},{"_id":"public/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/index.html","hash":"916e67156a340785c20f6d8b37f8ff44cdb0953d","modified":1620444212887},{"_id":"public/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/index.html","hash":"b531e1ec085f1a9ed0980b364f2d183a26575724","modified":1620444212888},{"_id":"public/2020/01/16/zhen-zheng-yi-yi-de-liu-shi-chu-li-kuang-jia-strom/index.html","hash":"a21b4ec6e446060720fca66efb4adceea4c52ed0","modified":1620444212888},{"_id":"public/2020/01/16/spark-dao-di-hao-zai-na-li/index.html","hash":"0955b90f07375649fa0d146c5e888556cf71f94a","modified":1620444212888},{"_id":"public/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/index.html","hash":"961a82bda2e8438bd968fbb1dbc9aec406b080fb","modified":1620444212888},{"_id":"public/2020/01/16/kafka-da-shu-ju-de-biao-zhun-shu-ju-yuan/index.html","hash":"0d0cffe29b8036b2fbaf33b8ea5fb79c149afb9f","modified":1620444212889},{"_id":"public/2020/01/16/hbase-de-rowkey-she-ji-de-li-jie/index.html","hash":"9da88b5c0be4dda15885ef8f1c1c8b8c9733ba6d","modified":1620444212889},{"_id":"public/2020/01/16/hadoop-zhi-hdfs-shang-chuan-wen-jian-yuan-ma-fen-xi/index.html","hash":"e02944ea3f592c08806acfa922284714d8e0969e","modified":1620444212889},{"_id":"public/2020/01/15/duo-xian-cheng-zhi-huan-cun-yu-zhu-cun-yi-zhi-xing/index.html","hash":"1c73cf5c712a59ba4962d3bf23a2cebe9c2dc3d2","modified":1620444212890},{"_id":"public/2020/01/14/netty-yuan-li/index.html","hash":"b71aa921db883ce0c49599cb247f1de28d5c5508","modified":1620444212890},{"_id":"public/2020/01/13/java-de-object-dui-xiang/index.html","hash":"90e936df1b5c5e7088352239a96d835109e5770b","modified":1620444212890},{"_id":"public/2020/01/10/ruan-jian-kai-fa-liu-da-she-ji-yuan-ze/index.html","hash":"cf0872053f40cb4ebdb71ab08de98021b1166b84","modified":1620444212890},{"_id":"public/2020/01/09/shen-ru-li-jie-jsp/index.html","hash":"495ed7e9e7d309d54a22b6c25ccedd1292ce6f39","modified":1620444212890},{"_id":"public/2020/01/08/redis-jian-dan-shi-yong-zong-jie/index.html","hash":"9d4caca43ec1428ae95623d0716e695489b7204a","modified":1620444212890},{"_id":"public/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/index.html","hash":"fc61046d159c3eba1f97fde3d091043f8c1afa04","modified":1620444212890},{"_id":"public/2020/01/06/dong-tai-dai-li-de-shi-xian-fang-shi-yu-qu-bie/index.html","hash":"16100467bd29431ea4d14fb6441595abde329eee","modified":1620444212890},{"_id":"public/2020/01/05/java-yi-chang/index.html","hash":"bab3f6c913919735e5e00cc8ffcfb96de625ee20","modified":1620444212891},{"_id":"public/2020/01/04/javaweb-san-da-he-xin-zu-jian-zhi-servlet/index.html","hash":"b58a3a7b918be9475ee323d45c5f1f77072041ab","modified":1620444212891},{"_id":"public/2020/01/04/springmvc-yuan-li/index.html","hash":"a936bf09632a68d93e1ef15e9014d4640329b4f4","modified":1620444212891},{"_id":"public/2020/01/04/hui-tou-zai-kan-spring/index.html","hash":"d38980ca044386acb9d019de4c97581a691d4a6c","modified":1620444212891},{"_id":"public/2020/01/03/li-jie-kmp-hui-su/index.html","hash":"e183a57639016c62bf860807ba3487be85fc729c","modified":1620444212891},{"_id":"public/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/index.html","hash":"2787b98324ceaec71f0f423ee9c4c2beeaa1546f","modified":1620444212892},{"_id":"public/2019/12/29/hexo-bo-wen-bao-han-tu-pian-de-keng/index.html","hash":"50f92e18934f4028986acd995379adb7a13ef2fe","modified":1620444212892},{"_id":"public/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/index.html","hash":"e8328114a0e852ee341764b67c205182d9e2ae1e","modified":1620444212892},{"_id":"public/2019/12/27/elasticsearch-yuan-li-ji-ji-ben-shi-yong/index.html","hash":"e98b698485eec3954346f49b2c516a6353521955","modified":1620444212892},{"_id":"public/2019/12/01/hadoop-ji-qun-da-jian-yu-jian-dan-shi-yong/index.html","hash":"b10265c9b56b0a9ecc927c32bf8162374dc5dcc2","modified":1620444212892},{"_id":"public/archives/page/2/index.html","hash":"8dee1d46cf8450076e877a1b9bd968f0aeafb1e5","modified":1620444212893},{"_id":"public/archives/page/3/index.html","hash":"d2184eb4a115483acf100d598d83c01f8669557a","modified":1620444212894},{"_id":"public/archives/page/4/index.html","hash":"53a62fd1242c6d280e0b938ff42b53d368324e66","modified":1620444212894},{"_id":"public/archives/2019/index.html","hash":"ddfea359dd8568d2bc611fcbb3000be32ca44403","modified":1620444212894},{"_id":"public/archives/2019/12/index.html","hash":"e145ac379e9dfad07d54cf784a7b819b2ffd86c6","modified":1620444212895},{"_id":"public/archives/2020/index.html","hash":"9ef12c3f75bfad8d2beb71f3fa9da0b2a8e71463","modified":1620444212895},{"_id":"public/archives/2020/page/2/index.html","hash":"37825b372478255daf83a3fb31882c16b0c0706d","modified":1620444212895},{"_id":"public/archives/2020/page/3/index.html","hash":"c23f31990ad864b01fbd4b5eaac2d9df51bca1d7","modified":1620444212895},{"_id":"public/archives/2020/page/4/index.html","hash":"8e0a5f2ce2ae3531f7a89fa3259ee9335ba45f98","modified":1620444212895},{"_id":"public/archives/2020/01/index.html","hash":"b2db1f10334aed50c5023fe972c16aeaa4932afb","modified":1620444212896},{"_id":"public/archives/2020/01/page/2/index.html","hash":"9be0af5856a07bc26061c8d01bbb8f14f52d6d62","modified":1620444212896},{"_id":"public/archives/2020/01/page/3/index.html","hash":"40c64f330ae2ca00ebbb8d2e07e9ec2ca4b4f87c","modified":1620444212896},{"_id":"public/archives/2020/02/index.html","hash":"0ed2eba97dd4a87f8365dfee219d2ae438d35c5d","modified":1620444212896},{"_id":"public/archives/2020/07/index.html","hash":"4f930f39d96ff45740b3486d610566673dcc2093","modified":1620444212896},{"_id":"public/archives/2021/index.html","hash":"81f4b5a581d5f693ca1b81666ce42413ad6c63b6","modified":1620444212896},{"_id":"public/archives/2021/04/index.html","hash":"5c04f2b3a32c27d714f6a4d46405bc09716bc6d0","modified":1620444212896},{"_id":"public/categories/tool/index.html","hash":"a5e8887d9955d2b93efb030303584ada62785630","modified":1620444212896},{"_id":"public/categories/大数据/index.html","hash":"2ae55c797f7d09441086c2867361b2b7089a3ae0","modified":1620444212896},{"_id":"public/categories/大数据/page/2/index.html","hash":"aedb1ada5bce4cb4223f1af19d83277b9fe854dc","modified":1620444212897},{"_id":"public/categories/计算机网络/index.html","hash":"42015c5581253b1d632e516b18931e495d424d15","modified":1620444212897},{"_id":"public/categories/java/index.html","hash":"69c004275ebe080eace8fd3e7c64b84932fc8ec6","modified":1620444212897},{"_id":"public/categories/java/page/2/index.html","hash":"61dd3a6829e3f53f68708b57c673948e5b0bbcbf","modified":1620444212897},{"_id":"public/categories/数据库/index.html","hash":"419f6b37558febf3cf3716bc5a3d858528da7afc","modified":1620444212897},{"_id":"public/categories/数据结构/index.html","hash":"ab59de525671238911b2db1b0d98435ddeb4caeb","modified":1620444212897},{"_id":"public/index.html","hash":"0313e72453a322997710d309260811a72838be03","modified":1620444212897},{"_id":"public/page/2/index.html","hash":"4ba268dd10817fc339e73680d75c51ad4e64eb1b","modified":1620444212897},{"_id":"public/page/3/index.html","hash":"05defab02490819052ad722c6a1f70db9bd2644f","modified":1620444212897},{"_id":"public/page/4/index.html","hash":"e970195a2842ad0c3fbb9e247417f7bfe47663f8","modified":1620444212898},{"_id":"public/2021/05/08/docker-1/index.html","hash":"80ffd2e17a33fe05b1b412fa62a0dda8409c2a30","modified":1620444212898},{"_id":"public/archives/page/5/index.html","hash":"5f189e1a99d5130d7ca722c63e724a62ab523813","modified":1620444212899},{"_id":"public/archives/2021/05/index.html","hash":"2f401337b2d37fcc63aed10e7ec6d0a1e139f84d","modified":1620444212899},{"_id":"public/page/5/index.html","hash":"371d9c54f8c69c2c0342d9cca2cf97d94ddea446","modified":1620444212899},{"_id":"public/medias/logo.png","hash":"95d4fbb9633e08a215f3b888f328a2a663815e7c","modified":1620444213211},{"_id":"public/medias/avatars/babyq.png","hash":"be5432588003e5a52c02e690622eec72b5f7346c","modified":1620444213211},{"_id":"public/medias/avatars/cww97.jpg","hash":"6af987cafc55d8d031534dd5e0f722fff19f70ec","modified":1620444213211},{"_id":"public/medias/avatars/fun4go.png","hash":"0f4333973a972a629cfbabf601bc7c192b65376c","modified":1620444213211},{"_id":"public/medias/avatars/hael.jpg","hash":"e66ccedab38bb2e8fc45fac024e234ab8e7b9d54","modified":1620444213211},{"_id":"public/medias/avatars/huaji.jpg","hash":"86be7eed2a491455ccfe3e7da46366ff477765ca","modified":1620444213211},{"_id":"public/medias/avatars/ids2.jpg","hash":"2c8d3ac6ab5ac6196bac83766fde975daca91c32","modified":1620444213211},{"_id":"public/medias/avatars/ldy.jpg","hash":"906ef214d1f2fe52a663738340ad5623f826bd82","modified":1620444213212},{"_id":"public/medias/avatars/hzwer.jpg","hash":"53a66bb5e65d2abd5b7412edf094c1e0b1094492","modified":1620444213212},{"_id":"public/medias/avatars/lijiaqian.png","hash":"9d96b3838acfae9a23b6e290fcfafceff0419c63","modified":1620444213212},{"_id":"public/medias/avatars/liyucheng.jpg","hash":"12055a27fa667c87d2319475968056e1a8ad0f08","modified":1620444213212},{"_id":"public/medias/avatars/kewlgrl.jpg","hash":"3af0fd1029a1511bb3c0e90871e41b35e714b01f","modified":1620444213212},{"_id":"public/medias/avatars/liyangzone.jpg","hash":"febab557e4c0d859ab4cc14b57d8106f5e3fccfb","modified":1620444213212},{"_id":"public/medias/avatars/michael.jpg","hash":"331a2ab20c299196f5a3089b8445fc8f55346cb6","modified":1620444213212},{"_id":"public/medias/avatars/mouse.jpg","hash":"2eae273885b9859150a1f98f74b3df12ca9a207c","modified":1620444213212},{"_id":"public/medias/avatars/mpy634.png","hash":"30f88e09c02b37c2dc684d4ee3237e327bb23f8b","modified":1620444213212},{"_id":"public/medias/avatars/myzhihu.png","hash":"245bf683033c88588e6b0e74bde5398866731652","modified":1620444213212},{"_id":"public/medias/avatars/qiqiang.jpg","hash":"081459866f922d9558a88cd4d7155d91fa730322","modified":1620444213213},{"_id":"public/medias/avatars/sunchangzhi.jpg","hash":"bbe2a15fd474ab62dbd14fea72deb1113a4fb005","modified":1620444213213},{"_id":"public/medias/avatars/taowei.jpg","hash":"e58b03b70656aa7a27238be38dac3896d9d16f10","modified":1620444213213},{"_id":"public/medias/avatars/spacesac.png","hash":"ff1bdb058f1f0499312da1a082ba97d78590db1a","modified":1620444213213},{"_id":"public/medias/avatars/zhaokangzhe.jpg","hash":"c8242bd13f08a9ddb97e26f216bc729b12ed9058","modified":1620444213214},{"_id":"public/medias/featureimages/flink.jpg","hash":"227e01dfe8af598ba0b462ad133cd3e6054ee7bc","modified":1620444213214},{"_id":"public/medias/featureimages/hbase.png","hash":"1ce476ea7742347fbef825663e21de4de3dbbc8f","modified":1620444213214},{"_id":"public/medias/featureimages/hive.png","hash":"df41235ece34eec2ff56c7575b329bd04324b672","modified":1620444213214},{"_id":"public/medias/featureimages/jvm.png","hash":"d1395bc1a829d7ddc7c155ad15832297bdb78455","modified":1620444213214},{"_id":"public/medias/featureimages/hadoop.png","hash":"53d89e6c2ff7b9698be2cd6cc93607822911bf6e","modified":1620444213214},{"_id":"public/medias/featureimages/mysql.png","hash":"b32675731302b1cd1816bf0edc4bba403ca12671","modified":1620444213214},{"_id":"public/medias/featureimages/queue.png","hash":"9dd542232d55e662529fe3abc5b4131a4e136773","modified":1620444213214},{"_id":"public/medias/featureimages/sqoop.jpg","hash":"6b01c2539cd1f586aacc942c8a728760340afbfc","modified":1620444213214},{"_id":"public/medias/featureimages/red_black_tree.png","hash":"1b22a187b5172be79204f28538dea74ce340dc3d","modified":1620444213214},{"_id":"public/medias/featureimages/shrio.jpg","hash":"2dcdaa8aff06b4419ce334596b080d43a80d60b2","modified":1620444213214},{"_id":"public/medias/featureimages/spring.png","hash":"16230ad93f1a19b9a66afc680c94fd62c5863da7","modified":1620444213214},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1620444213215},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1620444213215},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1620444213215},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1620444213215},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1620444213215},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1620444213215},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1620444213215},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1620444213215},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1620444213215},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1620444213215},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1620444213215},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1620444213215},{"_id":"public/medias/music/avatars/yequ.jpg","hash":"103beb9ab33434b434fa37a30aecdb29db633024","modified":1620444213215},{"_id":"public/medias/music/avatars/yiluxiangbei.jpg","hash":"01b12e3aca7385a88412c12539e1a608a78896fa","modified":1620444213215},{"_id":"public/medias/music/avatars/tiantangdemogui.jpg","hash":"f005578ddb4d3d731838db89a708f39f18d50e60","modified":1620444213216},{"_id":"public/2020/02/17/mongodb-shi-yong-ji-di-ceng-yuan-li/1.png","hash":"dc4c9dbb1a62075c8352343f36854e7d38a4dc13","modified":1620444213216},{"_id":"public/2020/01/05/java-yi-chang/1.png","hash":"8e046028c95ad0df00075fff533888cf80d8275b","modified":1620444213216},{"_id":"public/2020/01/06/dong-tai-dai-li-de-shi-xian-fang-shi-yu-qu-bie/1.png","hash":"db01b55b558aa0a458237325014634d21ed8c66f","modified":1620444213217},{"_id":"public/2020/01/15/duo-xian-cheng-zhi-huan-cun-yu-zhu-cun-yi-zhi-xing/20160613151013467.png","hash":"da8ff67b12daf7bc3384b335f9baa0924bb7de74","modified":1620444213217},{"_id":"public/2020/01/16/kafka-da-shu-ju-de-biao-zhun-shu-ju-yuan/1.png","hash":"9c03e00efaf3bf2d88a981d0f38beb29b0c23d9f","modified":1620444213217},{"_id":"public/2020/01/16/kafka-da-shu-ju-de-biao-zhun-shu-ju-yuan/2.png","hash":"a4c34a560ce0114beb5f56c805925b9d8e72aa2a","modified":1620444213217},{"_id":"public/2020/01/04/javaweb-san-da-he-xin-zu-jian-zhi-servlet/1","hash":"309b52fbdf982246f2c009c8ace8edb50e539a42","modified":1620444213217},{"_id":"public/2020/01/04/javaweb-san-da-he-xin-zu-jian-zhi-servlet/2.png","hash":"b94920ff5d053dfa31a0c8cbf391f2e2c208c26a","modified":1620444213217},{"_id":"public/2020/07/03/springboot-xiang-mu-yu-dao-de-wen-ti/1594362451200.png","hash":"1f3cc371bcfdeb31e8d0609c778734de6a619c5c","modified":1620444213217},{"_id":"public/2020/01/04/hui-tou-zai-kan-spring/1.png","hash":"40bf0bd9efc20c44c22f2383dc076ae4e915ad77","modified":1620444213217},{"_id":"public/2020/01/04/hui-tou-zai-kan-spring/clipboard.png","hash":"1a0a34e6aa9a0cbcb5ae6d351d7f1a04464950f2","modified":1620444213217},{"_id":"public/2020/02/29/shen-ru-li-jie-java-de-bio-nio-aio/1.png","hash":"9eb16f7c7313438b783cfc4d176d9ae3bb5a3371","modified":1620444213218},{"_id":"public/2020/02/29/shen-ru-li-jie-java-de-bio-nio-aio/2.png","hash":"4de362d0658d244d66341e745c583547e7c48606","modified":1620444213218},{"_id":"public/2020/01/22/wen-ding-pai-xu-yu-fei-wen-ding-pai-xu-de-ying-yong-chang-jing/0_1275286328kIDC.png","hash":"389259d20a726418b47b23d376522091bfb8ace8","modified":1620444213218},{"_id":"public/2020/01/22/xian-cheng-chi-yuan-li/1.png","hash":"282f73524658158c00707d15b8cabbed042c5074","modified":1620444213218},{"_id":"public/2020/01/22/xian-cheng-chi-yuan-li/2.png","hash":"e09eaf537bfc75ce0d44cac6dc6e7b9400be4bfa","modified":1620444213218},{"_id":"public/2020/01/10/ruan-jian-kai-fa-liu-da-she-ji-yuan-ze/1.png","hash":"deb73f69084cbdef4fdbf9b20298cc31533e49bc","modified":1620444213218},{"_id":"public/2020/01/10/ruan-jian-kai-fa-liu-da-she-ji-yuan-ze/2.png","hash":"68cb4e3b735aa3a3fa4f8de7786a281290a857a1","modified":1620444213218},{"_id":"public/2020/02/04/shiro-kuang-jia-yuan-li-ji-jian-dan-shi-yong/1.png","hash":"2228b516d1b23c16481b8463aeb9601852077c5e","modified":1620444213218},{"_id":"public/2020/02/04/shiro-kuang-jia-yuan-li-ji-jian-dan-shi-yong/2.png","hash":"56fc81ecf4243f16fa887fc7bf68b0ab451e28bf","modified":1620444213218},{"_id":"public/2020/02/04/shiro-kuang-jia-yuan-li-ji-jian-dan-shi-yong/3.png","hash":"e7a039a2bfb12e3f9dda9b81c4df6d44836342b0","modified":1620444213218},{"_id":"public/2020/01/26/dui-mysql-du-xie-fen-chi-de-ren-shi/1.png","hash":"0f8b75827bfaafaaa5353fb2c5a54f5f90b1806c","modified":1620444213219},{"_id":"public/2020/01/26/dui-mysql-du-xie-fen-chi-de-ren-shi/2.png","hash":"b2d9ff8f3345d0552555927361facaaebba0d54b","modified":1620444213219},{"_id":"public/2020/01/26/dui-mysql-du-xie-fen-chi-de-ren-shi/3.png","hash":"012e98b5d117cbd86a5f3826779bb4f0ebdb0aee","modified":1620444213219},{"_id":"public/2019/12/27/elasticsearch-yuan-li-ji-ji-ben-shi-yong/1.png","hash":"9750efad69d0d7ca0d0a055e5130aada00ab867c","modified":1620444213219},{"_id":"public/2019/12/27/elasticsearch-yuan-li-ji-ji-ben-shi-yong/1577523021175.png","hash":"c72f1af015e43a82bdb3f87982d6735af077998b","modified":1620444213219},{"_id":"public/2019/12/27/elasticsearch-yuan-li-ji-ji-ben-shi-yong/2.png","hash":"6b872e770649a2e696d008215ea4ccf0b5ad889f","modified":1620444213219},{"_id":"public/2019/12/27/elasticsearch-yuan-li-ji-ji-ben-shi-yong/3.png","hash":"3e1abbebefdb82d7147ec710926db9ea346c6f3e","modified":1620444213219},{"_id":"public/2020/01/16/zhan-de-xing-zhi-ji-yi-xie-shi-yong-chang-jing/1.png","hash":"1a58321155c2c31ce98a3d784658a0877b743c6d","modified":1620444213219},{"_id":"public/2020/01/16/zhan-de-xing-zhi-ji-yi-xie-shi-yong-chang-jing/2.png","hash":"218584882750b05953ce02c66053562daa6bb4b4","modified":1620444213219},{"_id":"public/2020/01/16/zhan-de-xing-zhi-ji-yi-xie-shi-yong-chang-jing/3.png","hash":"722805682d2d4440a0607a5c554e76429f2cc74b","modified":1620444213219},{"_id":"public/2020/01/16/zhan-de-xing-zhi-ji-yi-xie-shi-yong-chang-jing/4.png","hash":"e20c30513d0cf99a9cd41e11b06732381b32a19a","modified":1620444213219},{"_id":"public/2020/01/16/zhen-zheng-yi-yi-de-liu-shi-chu-li-kuang-jia-strom/1.png","hash":"4df99a4c0245e8c1079d20d16aee8d491bb57108","modified":1620444213220},{"_id":"public/2020/01/16/zhen-zheng-yi-yi-de-liu-shi-chu-li-kuang-jia-strom/2.png","hash":"271b2a82e5c30262eecfede93d7917ea18b6823e","modified":1620444213220},{"_id":"public/2020/01/16/zhen-zheng-yi-yi-de-liu-shi-chu-li-kuang-jia-strom/3.png","hash":"eaf5f1116d3abd66ff595a391875eeb8cf746b83","modified":1620444213220},{"_id":"public/2020/01/16/zhen-zheng-yi-yi-de-liu-shi-chu-li-kuang-jia-strom/4.png","hash":"d9f6bb91655e712e2d15cb31d9ed92ec3e5460f1","modified":1620444213220},{"_id":"public/2020/01/08/redis-jian-dan-shi-yong-zong-jie/1.png","hash":"c6e2fed002cda595d440003e9562ce0c0261ac45","modified":1620444213220},{"_id":"public/2020/01/08/redis-jian-dan-shi-yong-zong-jie/2.png","hash":"7deb137e79610fb6ef0fb29441de999ce65366d3","modified":1620444213220},{"_id":"public/2020/01/08/redis-jian-dan-shi-yong-zong-jie/3.png","hash":"e01cd0bb991215c0a80f6b0d94c7a2b6722bb3ab","modified":1620444213220},{"_id":"public/2020/01/08/redis-jian-dan-shi-yong-zong-jie/4.png","hash":"2da79bf17cd462cd5effb4aaa4b729064a8c4b79","modified":1620444213220},{"_id":"public/2020/01/08/redis-jian-dan-shi-yong-zong-jie/5.png","hash":"48560725318ca829b69a305f60083a5701df3b5d","modified":1620444213220},{"_id":"public/2020/01/21/http-yu-https-yuan-li/2.png","hash":"4dea1a80c7432461836a2780363e4b7a8ae932aa","modified":1620444213221},{"_id":"public/2020/01/21/http-yu-https-yuan-li/3.png","hash":"db15fdc6100eb090aaf3da52f2ac18dc18250fda","modified":1620444213221},{"_id":"public/2020/01/21/http-yu-https-yuan-li/4.png","hash":"3dc3ca35ee24de0d45cee78df766b9dc307691d1","modified":1620444213221},{"_id":"public/2020/01/21/http-yu-https-yuan-li/6.png","hash":"48e6c2d7f013c17a4ce8a50e94c3423558ba0482","modified":1620444213221},{"_id":"public/2020/01/19/nginx-shi-yong-xin-de/1526016663674.png","hash":"8316954edf76e8e099f25c7f3639de3de3960b6d","modified":1620444213221},{"_id":"public/2020/01/19/nginx-shi-yong-xin-de/1526187409033.png","hash":"5b0f0b32a502c7deca508ecf2b24794ad84b4cc1","modified":1620444213221},{"_id":"public/2020/01/19/nginx-shi-yong-xin-de/1526188831504.png","hash":"c35b1196514ff935bba01a9f7665750b1b76861b","modified":1620444213222},{"_id":"public/2020/01/19/nginx-shi-yong-xin-de/1526189945180.png","hash":"c661733796251db60231969bba3056d350fcedb7","modified":1620444213222},{"_id":"public/2020/01/19/nginx-shi-yong-xin-de/1579422396676.png","hash":"b35fb05a396e94f383f19ae64098071062d42356","modified":1620444213222},{"_id":"public/2020/01/19/nginx-shi-yong-xin-de/screenshot.png","hash":"59d966789df57e54306e23d6ab0da94bac9977a4","modified":1620444213222},{"_id":"public/2020/01/19/nginx-shi-yong-xin-de/sshot-1.png","hash":"47a9f035efc416d0c9bb4320cc734f81ea9dd6ee","modified":1620444213222},{"_id":"public/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577523021175.png","hash":"c72f1af015e43a82bdb3f87982d6735af077998b","modified":1620444213222},{"_id":"public/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577523108700.png","hash":"cbbee17128881b71922a83dc127b1e55ca6e162a","modified":1620444213222},{"_id":"public/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577523192987.png","hash":"b34130cbc93659782ce6a1d580e5ef124658c11f","modified":1620444213223},{"_id":"public/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577524769079.png","hash":"9464098e580a25271c7e9da48ed992cbd8579656","modified":1620444213223},{"_id":"public/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577525471795.png","hash":"f212bf41e93c8c1c03095ab6c0309a0425fa85af","modified":1620444213223},{"_id":"public/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577535905825.png","hash":"46832c4d23a3e87aa6250a271f8263e76457c394","modified":1620444213223},{"_id":"public/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577536510714.png","hash":"1075799fb0225f5bc6ad44574417eb3ab2d7be95","modified":1620444213223},{"_id":"public/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps11.jpg","hash":"1dc718659819d7ce3fc9133a377b4d059bf48bc3","modified":1620444213223},{"_id":"public/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps2.jpg","hash":"413d7f0ce3ccfcd466fd0cc9cd3d2767b7b6b01f","modified":1620444213224},{"_id":"public/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps28.jpg","hash":"acc00d763a1add5fddf2880f87984ada0a579037","modified":1620444213224},{"_id":"public/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps4.jpg","hash":"560cada6d16078f98c8d73b0156c4e4d2309c1ba","modified":1620444213224},{"_id":"public/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps5.jpg","hash":"57470b391cca5dca845da656f00c7e70ae2c8a8a","modified":1620444213224},{"_id":"public/2020/01/04/springmvc-yuan-li/1.png","hash":"b94920ff5d053dfa31a0c8cbf391f2e2c208c26a","modified":1620444213224},{"_id":"public/2020/01/04/springmvc-yuan-li/12.png","hash":"309b52fbdf982246f2c009c8ace8edb50e539a42","modified":1620444213224},{"_id":"public/2020/01/04/springmvc-yuan-li/3.png","hash":"78e7acfb96161c7522af534167f756af38313d82","modified":1620444213224},{"_id":"public/2020/01/04/springmvc-yuan-li/4.png","hash":"7f8752e55ee130f8131e3759cc62ae5851505aea","modified":1620444213224},{"_id":"public/2020/01/04/springmvc-yuan-li/5.png","hash":"af05afe475ce1f931a3fc334d08ddd46ded575da","modified":1620444213225},{"_id":"public/2020/01/04/springmvc-yuan-li/6.png","hash":"8dd5fbb767d1844111351cce92e40d2f48f92217","modified":1620444213225},{"_id":"public/2020/01/04/springmvc-yuan-li/b856096cf065baaaabe5884deb4ecfa3.png","hash":"593c63ab827b9194244017ac0f8d1f27f6f00bfc","modified":1620444213225},{"_id":"public/2020/01/16/dui-lie-de-yong-fa/1.png","hash":"d05d41938d764b6c8161e2795c666c8ac399feb0","modified":1620444213225},{"_id":"public/2020/01/16/dui-lie-de-yong-fa/10.png","hash":"786a854926fdbf568ef9a5781cb526470d207bba","modified":1620444213225},{"_id":"public/2020/01/16/dui-lie-de-yong-fa/2.png","hash":"832fb019b8255e5e4289145e6ed10b07123516ff","modified":1620444213226},{"_id":"public/2020/01/16/dui-lie-de-yong-fa/3.png","hash":"8fdb9a7339a7d0a6e6033361ea9d9a540a997577","modified":1620444213226},{"_id":"public/2020/01/16/dui-lie-de-yong-fa/4.png","hash":"aa7c36a070dcbfb0e0aa66554359a46c60683d48","modified":1620444213227},{"_id":"public/2020/01/16/dui-lie-de-yong-fa/5.png","hash":"951be6c22ccf0110faf8b177473ef9ebb99de76f","modified":1620444213227},{"_id":"public/2020/01/16/dui-lie-de-yong-fa/6.png","hash":"4738b0a4613d18240afa1f36644c12ea8b253b81","modified":1620444213227},{"_id":"public/2020/01/16/dui-lie-de-yong-fa/7.png","hash":"a820aa5f9cb8db300c0db92cff74fdc6825917d0","modified":1620444213227},{"_id":"public/2020/01/16/dui-lie-de-yong-fa/9.png","hash":"953b7748e71537e498037c398298512676ca9d44","modified":1620444213227},{"_id":"public/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/1577692561419.png","hash":"b6dc89414550de52ef499906ec14f48742b79417","modified":1620444213227},{"_id":"public/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/format7.png","hash":"91412014eb3687b94849bc614083670f9b1152ee","modified":1620444213227},{"_id":"public/2020/01/23/hashmap-yu-concurrenthashmap/1.png","hash":"9e197b93178ae5f66e77b6d9e928d4eff24a637a","modified":1620444213227},{"_id":"public/2020/01/23/hashmap-yu-concurrenthashmap/10.png","hash":"4693a9d70b8536e344f4beb16583fa39b70ff0e3","modified":1620444213228},{"_id":"public/2020/01/23/hashmap-yu-concurrenthashmap/11.png","hash":"4b87bd06a1d3478ba09f54055ada3d7e7ae18e8f","modified":1620444213228},{"_id":"public/2020/01/23/hashmap-yu-concurrenthashmap/12.png","hash":"89e2517754c4c9793f71dd5dc0780bc59a6c4447","modified":1620444213228},{"_id":"public/2020/01/23/hashmap-yu-concurrenthashmap/13.png","hash":"eb358b27dd737aa774c12ca3e226100b2f58fe6a","modified":1620444213228},{"_id":"public/2020/01/23/hashmap-yu-concurrenthashmap/2.png","hash":"727f8f18591add3d9ea41a98b07b31a1733d9c8e","modified":1620444213228},{"_id":"public/2020/01/23/hashmap-yu-concurrenthashmap/3.png","hash":"c7c8e7c0b63ea2c9d8a43e7ab1d722aa55f93446","modified":1620444213228},{"_id":"public/2020/01/23/hashmap-yu-concurrenthashmap/4.png","hash":"b5311d8a5e1f4ba21b8629bb5db33dd01ae14fdb","modified":1620444213228},{"_id":"public/2020/01/23/hashmap-yu-concurrenthashmap/5.png","hash":"29a8a0537990a599a4e78709544332403c20a230","modified":1620444213228},{"_id":"public/2020/01/23/hashmap-yu-concurrenthashmap/6.png","hash":"dfe085bd93b7e139b40275b91fc972098ffd6b3f","modified":1620444213228},{"_id":"public/2020/01/23/hashmap-yu-concurrenthashmap/7.png","hash":"788fa04a1cf4d41be1cb915384a42e339dd18a99","modified":1620444213228},{"_id":"public/2020/01/23/hashmap-yu-concurrenthashmap/8.png","hash":"520b326fbf9c22fb561b7f2d93bbc6e6b31708d0","modified":1620444213229},{"_id":"public/2020/01/23/hashmap-yu-concurrenthashmap/9.png","hash":"915aab47c5994b3c57e1074b1c8ec543ca22a28b","modified":1620444213229},{"_id":"public/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/10.png","hash":"bae83287306566cad893084010c0998cd9437faa","modified":1620444213229},{"_id":"public/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/11.png","hash":"1a94daaaadfb9b41da98fc7b1e1ac7b51474bee9","modified":1620444213229},{"_id":"public/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/12.png","hash":"b6573d5a1135b952870cdf307b172e38dcc5dbff","modified":1620444213229},{"_id":"public/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/13.png","hash":"642a8f66db67b356a19b6048f3f053042b8753c0","modified":1620444213229},{"_id":"public/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/2.png","hash":"626612f6986c23194c3ebe35aa19296cef3756d4","modified":1620444213229},{"_id":"public/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/3.png","hash":"5fac0388773ad247e6fb8f92274c6ef9fc96db8a","modified":1620444213230},{"_id":"public/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/4.png","hash":"2560a0a36558743a42e3b696119e8056ea301b5a","modified":1620444213230},{"_id":"public/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/5.png","hash":"ac91035fa09542f89715da719ceb2a8046df0c76","modified":1620444213230},{"_id":"public/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/6.png","hash":"3326c2ee58f09f2f6e970f4b8002fc20dde39245","modified":1620444213230},{"_id":"public/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/7.png","hash":"0889acec5cee126e2d9e94907ea06416d48527c9","modified":1620444213230},{"_id":"public/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/8.png","hash":"6ab29e215fae6701b1c64c3375c9142c93f1c38c","modified":1620444213230},{"_id":"public/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/9.png","hash":"ddb5b57ac53b2c35b8d0f7529676b7a0102f8e23","modified":1620444213230},{"_id":"public/2020/01/16/spark-dao-di-hao-zai-na-li/10.png","hash":"32ec5971cf241275551236ac435696ee20923119","modified":1620444213230},{"_id":"public/2020/01/16/spark-dao-di-hao-zai-na-li/11.png","hash":"e166e7d6a2bd9d53e09e8fea5942dff640e5cb18","modified":1620444213230},{"_id":"public/2020/01/16/spark-dao-di-hao-zai-na-li/12.png","hash":"0abdd3741573f1525837a773c44cf28edda4096e","modified":1620444213231},{"_id":"public/2020/01/16/spark-dao-di-hao-zai-na-li/13.png","hash":"8e7791c8e7503578f92379e2a619458ed4f1dd45","modified":1620444213231},{"_id":"public/2020/01/16/spark-dao-di-hao-zai-na-li/2.png","hash":"b5cc5d8b696128fa12b2cca6aa4714e5768d48e7","modified":1620444213231},{"_id":"public/2020/01/16/spark-dao-di-hao-zai-na-li/3.png","hash":"e5f469c5b213205d52faec223dd6706108b46189","modified":1620444213231},{"_id":"public/2020/01/16/spark-dao-di-hao-zai-na-li/4.png","hash":"a671fe81a65c18649364ed20b2623d573ccf47d1","modified":1620444213231},{"_id":"public/2020/01/16/spark-dao-di-hao-zai-na-li/5.png","hash":"ff9753613ee43cbed142b11a3897f83c887c22b4","modified":1620444213231},{"_id":"public/2020/01/16/spark-dao-di-hao-zai-na-li/6.png","hash":"399367e9dd7eddd6b753cc53dd54d65f9ade3561","modified":1620444213231},{"_id":"public/2020/01/16/spark-dao-di-hao-zai-na-li/7.png","hash":"a1f0ec3bde2dd4cb1fd7392a6512cf8f82856de8","modified":1620444213231},{"_id":"public/2020/01/16/spark-dao-di-hao-zai-na-li/8.png","hash":"9514de8017aeb5001c5baeee50f2a7c8d36204ab","modified":1620444213231},{"_id":"public/2020/01/16/spark-dao-di-hao-zai-na-li/9.png","hash":"e726dfb7a4ad3dd29cc1da02a42f2d76216be48f","modified":1620444213231},{"_id":"public/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/1.png","hash":"595d16ef0a14c2bbf9a97deac979900de0b5e267","modified":1620444213232},{"_id":"public/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/10.png","hash":"ff84dc6f0699694d1bc24a98987ddfa76f072cb2","modified":1620444213232},{"_id":"public/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/11.png","hash":"df182c83cde68e12b18f3c4e5fc86282a674a356","modified":1620444213232},{"_id":"public/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/12.png","hash":"8f6c55747ba896c33a01a5c03e113ff7ac4a2a59","modified":1620444213232},{"_id":"public/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/13.png","hash":"be2f5d4a69f7457a888f151edc83d6490770d8fe","modified":1620444213232},{"_id":"public/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/14.png","hash":"841f7c8850b62614ee0eece5666b5622f3e8ad16","modified":1620444213232},{"_id":"public/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/15.png","hash":"bf5028023e769de177513d70296ea09a2775c30c","modified":1620444213232},{"_id":"public/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/16.png","hash":"460f9245da2bea0b80b2588062cf2ea8dcca38b3","modified":1620444213232},{"_id":"public/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/2.png","hash":"d460cbea968d6e0932ee2af74283d3c7db732e3e","modified":1620444213232},{"_id":"public/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/3.png","hash":"b8aec9dca0c6087a238fefcce72537d65054a5d1","modified":1620444213232},{"_id":"public/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/5.png","hash":"6fe8eb877bea4092d186b53b5068f2850fd32e55","modified":1620444213232},{"_id":"public/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/4.png","hash":"85e7bf5f7782b4b4cc0163a57487154e9646c08c","modified":1620444213232},{"_id":"public/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/6.png","hash":"85ac969827157dd795ef5c1721e67bca92d05572","modified":1620444213233},{"_id":"public/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/8.png","hash":"617edb6704872b76224b92a362f9119f48522f42","modified":1620444213233},{"_id":"public/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/9.png","hash":"2051f2fbad536c68d1216ef3155e7f8cfba49710","modified":1620444213233},{"_id":"public/2020/01/13/java-de-object-dui-xiang/1.png","hash":"c7bf9876076e1aecb3b3795057b2d0fea238ebb4","modified":1620444213233},{"_id":"public/2020/01/13/java-de-object-dui-xiang/10.png","hash":"0f47edf20dd8df37bb289cd3b36080d8cf661089","modified":1620444213233},{"_id":"public/2020/01/13/java-de-object-dui-xiang/12.png","hash":"1b005f4354984df1f20bc28a199830f72b097ddc","modified":1620444213233},{"_id":"public/2020/01/13/java-de-object-dui-xiang/13.png","hash":"cf520d0eda0655a49d9f6775626e6f19997e084a","modified":1620444213233},{"_id":"public/2020/01/13/java-de-object-dui-xiang/14.png","hash":"6b11cf88ba040ef97e5d320a39c75af9a32aa147","modified":1620444213233},{"_id":"public/2020/01/13/java-de-object-dui-xiang/15.png","hash":"a3ef39787480a4d1338cd1f08ddde4c21bd9dfc8","modified":1620444213234},{"_id":"public/2020/01/13/java-de-object-dui-xiang/1578923476661.png","hash":"fcbf6534b67da7ea15cfc0b76081c60895f4dcc0","modified":1620444213234},{"_id":"public/2020/01/13/java-de-object-dui-xiang/1578923575140.png","hash":"0cdc6f2ed8a52ffb6ef95a7281eeaea58c436d1b","modified":1620444213234},{"_id":"public/2020/01/13/java-de-object-dui-xiang/19.png","hash":"525277d563227e8c30fe03febb4cba3a1509fe82","modified":1620444213234},{"_id":"public/2020/01/13/java-de-object-dui-xiang/4.png","hash":"1884d1b9d402974a5f067132e008fb5af6ead8a5","modified":1620444213234},{"_id":"public/2020/01/13/java-de-object-dui-xiang/5.png","hash":"d7108c0700ed42d8d351fdba17e2cae3a202341d","modified":1620444213234},{"_id":"public/2020/01/13/java-de-object-dui-xiang/6.png","hash":"bebc8776c9760762ebecd844b1fc2e865fadc408","modified":1620444213234},{"_id":"public/2020/01/13/java-de-object-dui-xiang/7.png","hash":"0f6ab8ab0607f1b8388c882e65fccf1b4ff6cea0","modified":1620444213234},{"_id":"public/2020/01/13/java-de-object-dui-xiang/9.png","hash":"2377d27065834d07d8de2a2b4b0d21cc93f82ec6","modified":1620444213234},{"_id":"public/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/2.jpg","hash":"0f0199fb236638dcc215ec46754209009d7aead3","modified":1620444213234},{"_id":"public/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/2.png","hash":"252966c95d3b7c6468e465b0811d35f44890d8cc","modified":1620444213235},{"_id":"public/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/3.jpg","hash":"19838edceb75b89e3a2b4b3b8a3127e0c62cb5a1","modified":1620444213235},{"_id":"public/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/4.jpg","hash":"5103592c7332e7b9bb8ec34651121f32d3383b3c","modified":1620444213235},{"_id":"public/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/4.png","hash":"89e0d6a23264f1f4ffcbe71ff30362071ee85f6e","modified":1620444213235},{"_id":"public/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/5.png","hash":"ac5eb9f8a138e09adfb03c2ce568bac41491b243","modified":1620444213235},{"_id":"public/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/6.png","hash":"b589c516596cb41840737ed2851e6fbfcb0ade34","modified":1620444213235},{"_id":"public/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps26.jpg","hash":"aace61b227944476d769cf962ff2c8f7bf7e471b","modified":1620444213235},{"_id":"public/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps29.jpg","hash":"2e8d5d19688cf5e409eb52235ad7fc068e4870e9","modified":1620444213235},{"_id":"public/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps6.jpg","hash":"871afee0aa70390c23dbf28bdc99361dca2330cf","modified":1620444213235},{"_id":"public/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps7.jpg","hash":"2bd7914c6584b58750dad52141819f3015df323a","modified":1620444213235},{"_id":"public/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps9.jpg","hash":"e87de305a831f153d66ba509d21ae51c9be8a763","modified":1620444213236},{"_id":"public/2020/01/14/netty-yuan-li/1.png","hash":"0eb9d26338dba8c4d25b6b6e7eca684394d71c51","modified":1620444213236},{"_id":"public/2020/01/14/netty-yuan-li/11.webp","hash":"ac437a6b11fb5cc2c4074310488f494010aeda22","modified":1620444213236},{"_id":"public/2020/01/14/netty-yuan-li/12.webp","hash":"ef3a0a0dff118bee5d3e3066ca01e98dcd85d31c","modified":1620444213236},{"_id":"public/2020/01/14/netty-yuan-li/13.webp","hash":"ab3cade11306d79b409a43574bca7ea0c75291bd","modified":1620444213236},{"_id":"public/2020/01/14/netty-yuan-li/14.png","hash":"e946c5ab5235607474bba22d3450086858227c85","modified":1620444213236},{"_id":"public/2020/01/14/netty-yuan-li/15.webp","hash":"6ea6f31186b092223a129527bd21a17965e5d1a2","modified":1620444213236},{"_id":"public/2020/01/14/netty-yuan-li/16.jpg","hash":"a8ce6feecddd9135f4e13839ee4312a9d2e6d232","modified":1620444213236},{"_id":"public/2020/01/14/netty-yuan-li/17.png","hash":"a228835a9dab04b0350e0802718298acfc764f7f","modified":1620444213236},{"_id":"public/2020/01/14/netty-yuan-li/19.webp","hash":"657adfd2c8f4461149dc6a4d6711b4cb9287ed20","modified":1620444213236},{"_id":"public/2020/01/14/netty-yuan-li/2.png","hash":"ce6de600e8b525d69b11ea4ee7eb68d1ae7ce1ab","modified":1620444213237},{"_id":"public/2020/01/14/netty-yuan-li/20.jpg","hash":"6651871536e6a3c0f9d0ee16bf55ea3e45d738ad","modified":1620444213237},{"_id":"public/2020/01/14/netty-yuan-li/21.webp","hash":"1405931144855fdf6989f2da51b6bb20bcb38817","modified":1620444213237},{"_id":"public/2020/01/14/netty-yuan-li/22.png","hash":"828fb32f9e98feaafca83d175ad1f969db765472","modified":1620444213238},{"_id":"public/2020/01/14/netty-yuan-li/3.webp","hash":"b37c0cffb001959af2cefa4455983e365983917f","modified":1620444213238},{"_id":"public/2020/01/14/netty-yuan-li/4.jpg","hash":"5bd3ef67ebe178fbecacefb860a7084d4d628a8d","modified":1620444213238},{"_id":"public/2020/01/14/netty-yuan-li/5.jpg","hash":"d9bd057d236507ae03e8dfab416d36dcda3cd61e","modified":1620444213238},{"_id":"public/2020/01/14/netty-yuan-li/6.webp","hash":"e3198491ac46af71164e79505d39fbf8ed899c92","modified":1620444213238},{"_id":"public/2020/01/14/netty-yuan-li/7.webp","hash":"58a9efc0f107799ea116e4fe24d0c5d69c8d9622","modified":1620444213238},{"_id":"public/2020/01/14/netty-yuan-li/8.jpg","hash":"0c25ee2a26cde22ea2ce5ec0218cdd82a97cfeed","modified":1620444213238},{"_id":"public/2020/01/14/netty-yuan-li/9.png","hash":"05b08f6e0dd64bffa1b7a4679afb91ab42a1b917","modified":1620444213238},{"_id":"public/2020/02/29/dui-mysql-zhi-xing-yin-qing-innodb-de-ren-shi/1.png","hash":"1023a3f7eb63510fa079e145b69c266b8c2f8c00","modified":1620444213239},{"_id":"public/2020/02/29/dui-mysql-zhi-xing-yin-qing-innodb-de-ren-shi/2.png","hash":"4b9a857ce961e40570360955a4ed3576da67ac9d","modified":1620444213239},{"_id":"public/2020/02/29/dui-mysql-zhi-xing-yin-qing-innodb-de-ren-shi/3.png","hash":"a8ab868d6e564b1fb23a9bbb988250ae8d1e0c1a","modified":1620444213239},{"_id":"public/2020/02/29/dui-mysql-zhi-xing-yin-qing-innodb-de-ren-shi/4.png","hash":"666efe3aedef5ca03029a5733e26f3ce6f0568f9","modified":1620444213239},{"_id":"public/2020/02/29/dui-mysql-zhi-xing-yin-qing-innodb-de-ren-shi/5.png","hash":"5b7210c1ed85125818c5db73ea8328be8a1bb0a2","modified":1620444213239},{"_id":"public/2020/02/29/dui-mysql-zhi-xing-yin-qing-innodb-de-ren-shi/6.png","hash":"1063b5b8d792db8909cfcf7286398b19c42b00cb","modified":1620444213240},{"_id":"public/2020/02/29/dui-mysql-zhi-xing-yin-qing-innodb-de-ren-shi/7.png","hash":"51161c11a6fcaba2a2de5e3dc9d5b6b414214832","modified":1620444213240},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1620444213242},{"_id":"public/css/prism-line-numbers.css","hash":"a1692758d22c6cdf6fd1a8dafc9b4b98e41d3138","modified":1620444213243},{"_id":"public/medias/avatars/antnlp.ico","hash":"29475f350b989331cebd702a315f020917d06ed8","modified":1620444213320},{"_id":"public/medias/avatars/duyupei.jpg","hash":"3c02ed4cf57dc37e4f4b8314bf5094833a854cb0","modified":1620444213328},{"_id":"public/medias/avatars/gsy.jpg","hash":"6a175e2ba56a2280d40a2e654b559be41c3a0a48","modified":1620444213368},{"_id":"public/medias/avatars/mizunashi.png","hash":"5fc300701d3b4250a307ed70e3a3aa0d5395c808","modified":1620444213368},{"_id":"public/medias/avatars/milyyy.jpg","hash":"ac2826d9c28346efeb967df01465a2c74d9041fe","modified":1620444213368},{"_id":"public/medias/avatars/qiandongwei.jpg","hash":"6873551596a4513d01898ad866c4073c68270c57","modified":1620444213369},{"_id":"public/medias/avatars/xuzhongyou.jpg","hash":"1db4dfaf23cf250f222a398326562d4170d3aaa1","modified":1620444213369},{"_id":"public/medias/avatars/zhangting.jpg","hash":"10ee25ae3531f046a8bd3696c1cc8a16f0f25e1b","modified":1620444213369},{"_id":"public/medias/avatars/zzw.jpg","hash":"5d385b5732644b07b937a4919abc83cb95e14513","modified":1620444213369},{"_id":"public/medias/reward/wechat.png","hash":"13b2ed02ab034bcef1e4ec22136d514df437c988","modified":1620444213369},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1620444213370},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1620444213370},{"_id":"public/2020/01/20/yin-te-wang-wu-ceng-jia-gou/tcpip1.png","hash":"947653fa87f84bfc9fcc3381944a0212a634db1f","modified":1620444213370},{"_id":"public/2020/01/16/hong-hei-shu-de-jian-li-yu-wei-hu/1.png","hash":"acf3126fc9d92cb5cdf7451ed7f4386ef83f0e3e","modified":1620444213370},{"_id":"public/2021/04/27/docker/1.png","hash":"6f4e4451540d86c5f42863bfe1eaff12059fa424","modified":1620444213370},{"_id":"public/2020/07/03/springboot-xiang-mu-yu-dao-de-wen-ti/1593848519591.png","hash":"68d188815282d5fcf6894394f9274e6c07dc8239","modified":1620444213371},{"_id":"public/2020/01/22/wen-ding-pai-xu-yu-fei-wen-ding-pai-xu-de-ying-yong-chang-jing/stable1.png","hash":"2d443188a88518072f0d59a204510ed6a9a20092","modified":1620444213371},{"_id":"public/2020/01/21/http-yu-https-yuan-li/5.png","hash":"f088ec8f4de98a4a173ab8cc36f0d4c621019bff","modified":1620444213371},{"_id":"public/2020/01/21/http-yu-https-yuan-li/7.png","hash":"d1aa6cd25e7880326058962cf8908829bbdaa6f8","modified":1620444213371},{"_id":"public/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps27.jpg","hash":"aaeafd4be264e96668df021e8e479b6b1e5188ba","modified":1620444213371},{"_id":"public/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps6.jpg","hash":"baec5c992487ca7a58c796cf61c091917eb9c27c","modified":1620444213372},{"_id":"public/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps7.jpg","hash":"72adac4033914046eecea50af3d207badaf724ad","modified":1620444213373},{"_id":"public/2020/01/04/springmvc-yuan-li/16b5eb3870589ac4.png","hash":"32ddbb444857275476c09666be18633496bd07e6","modified":1620444213373},{"_id":"public/2020/01/04/springmvc-yuan-li/16b5eb3cc1ab2fe9.png","hash":"f4aaee207d4f115fc0bd53051265095b8b98eaa3","modified":1620444213373},{"_id":"public/2020/01/16/dui-lie-de-yong-fa/8.png","hash":"c0c5ea197a2703d594a5815beac911d4d3e7a191","modified":1620444213373},{"_id":"public/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/1577691474359.png","hash":"192f67c188820c3a43de754571f9d983eb35e2ab","modified":1620444213379},{"_id":"public/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/format.png","hash":"50a7f49146f9e0c94d738a24a735fd39142a26c4","modified":1620444213379},{"_id":"public/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/format1.png","hash":"c180c125d0752e14bcdc470403de9bfac786e5a4","modified":1620444213379},{"_id":"public/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/format3.png","hash":"3766650b1fa548f67032ddc927d91b77e80ff26b","modified":1620444213380},{"_id":"public/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/format4.png","hash":"9c8881af2f8d8830397d8929c1ef2c0c2e9f11e5","modified":1620444213380},{"_id":"public/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/1.png","hash":"28bb6a1f5f5d4f065b5814b12b2a0f4bafd1b657","modified":1620444213380},{"_id":"public/2020/01/16/spark-dao-di-hao-zai-na-li/1.png","hash":"07ed474bc2c7ae9bf0d72553fcc4aaa982184957","modified":1620444213380},{"_id":"public/2020/01/13/java-de-object-dui-xiang/11.png","hash":"680615c1e798683bb746e564668a4c114a8a309e","modified":1620444213381},{"_id":"public/2020/01/13/java-de-object-dui-xiang/16.png","hash":"46f03638c61361a599be2736753ddfa210bf3dca","modified":1620444213381},{"_id":"public/2020/01/13/java-de-object-dui-xiang/17.png","hash":"280e19dd77e780ea4a9831086cd274c5d3efe66e","modified":1620444213381},{"_id":"public/2020/01/13/java-de-object-dui-xiang/18.png","hash":"b58a8107a01c59fdc47508d9c2cb7cbea923a2bd","modified":1620444213382},{"_id":"public/2020/01/13/java-de-object-dui-xiang/2.png","hash":"e614af30b47ab07b66de5666993ef7a7be971e8c","modified":1620444213382},{"_id":"public/2020/01/13/java-de-object-dui-xiang/3.png","hash":"fa83b914d2c790b2295c23d7c4059d80efcf804f","modified":1620444213383},{"_id":"public/2020/01/13/java-de-object-dui-xiang/8.png","hash":"bd83bba5701e9273b625727ae1f01abad19ecddc","modified":1620444213384},{"_id":"public/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/1.jpg","hash":"b648c9e0dfb30778a21bd41da49c5081181e44e5","modified":1620444213384},{"_id":"public/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps10.jpg","hash":"df8664ab9179a74769ee344db24735579c494cfb","modified":1620444213384},{"_id":"public/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps23.jpg","hash":"66275e8e2db0ab2af38a6d1f0259a1452137adb2","modified":1620444213384},{"_id":"public/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps24.jpg","hash":"32d4828937bac7ecfb45d4c81b34313435cb8eec","modified":1620444213384},{"_id":"public/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps5.jpg","hash":"fcf527ec326c9b2d3d57d943add8fac58950c861","modified":1620444213386},{"_id":"public/2020/01/14/netty-yuan-li/10.png","hash":"18972d1739ca30bed1bf3aa8526293c7e851c4c6","modified":1620444213386},{"_id":"public/2020/01/14/netty-yuan-li/18.png","hash":"dc2535b567217dd6b9c3d822d59625f6b52506b0","modified":1620444213386},{"_id":"public/2020/01/14/netty-yuan-li/23.png","hash":"66ebfe7944ade082fc3b6cd27fb886d410974cd4","modified":1620444213386},{"_id":"public/2020/01/14/netty-yuan-li/24.png","hash":"8e818e96f8dff7686c37ea86ec87519fe48c7598","modified":1620444213386},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1620444213406},{"_id":"public/js/matery.js","hash":"92f07106944f5ef7cd72e84bb3534513d00eebe1","modified":1620444213406},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1620444213406},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1620444213407},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1620444213407},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1620444213407},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"e118d04190b354b594ec636999fb4f2c39a9dd19","modified":1620444213407},{"_id":"public/libs/codeBlock/codeLang.js","hash":"8defd85fc8822666aa6edf60f44bead0173ab82d","modified":1620444213407},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"12a8988fd684463d882fd7c0e6e7580b1e25d0f2","modified":1620444213407},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1620444213407},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1620444213407},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1620444213407},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1620444213407},{"_id":"public/libs/others/explosion.min.js","hash":"417b68e2cf2c6de2119c57626f4412105a8457f5","modified":1620444213407},{"_id":"public/libs/others/snow.js","hash":"7f3b1ad2f64d4473210a2c3218893649c73c980e","modified":1620444213407},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1620444213408},{"_id":"public/libs/others/text.js","hash":"1791782cde0d1e4197f2ed58ecb7dd6aefddd169","modified":1620444213408},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1620444213408},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1620444213408},{"_id":"public/libs/others/fireworks.js","hash":"53981959bc6def4a85bbbb41b07e4b1474a2124d","modified":1620444213408},{"_id":"public/libs/codeBlock/codeBlockFunction.js","hash":"46461d28c901acee0676eb08cd097273ba44c706","modified":1620444213409},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1620444213409},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1620444213409},{"_id":"public/css/matery.css","hash":"c1fb234e5995df657e1ee642b646429bb5b9d404","modified":1620444213409},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1620444213409},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1620444213409},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1620444213409},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1620444213409},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1620444213410},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1620444213410},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1620444213410},{"_id":"public/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1620444213410},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1620444213410},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1620444213410},{"_id":"public/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1620444213410},{"_id":"public/libs/valine/Valine.min.js","hash":"4e34802ccbb59f1daa58a62241ff57f923e50600","modified":1620444213411},{"_id":"public/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1620444213411},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1620444213411},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"28bdb33c9eb609c2f30d431df1a4cf8ca70bf841","modified":1620444213411},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1620444213411},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1620444213411},{"_id":"public/libs/materialize/materialize.min.css","hash":"4d46df5f22cbc24eefa76228c7ee308dc3585594","modified":1620444213412},{"_id":"public/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1620444213412},{"_id":"public/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1620444213412},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1620444213412},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1620444213412},{"_id":"public/favicon.png","hash":"425b74a532f97dbb0c3fd2023c7017bc0f3378af","modified":1620444213412},{"_id":"public/medias/avatars/0xbird.png","hash":"f9d597dfcb49e1e2be06138b24028291f5638610","modified":1620444213413},{"_id":"public/medias/avatars/avatar.jpg","hash":"425b74a532f97dbb0c3fd2023c7017bc0f3378af","modified":1620444213414},{"_id":"public/medias/avatars/lyn-draw.jpg","hash":"837d5d5df4dcb086d2da114d0d85084b4ec18768","modified":1620444213414},{"_id":"public/medias/avatars/lzh.png","hash":"8ffcbf19d6b38b891dbe408d9a4e9513b56f247e","modified":1620444213414},{"_id":"public/medias/avatars/mashiro.jpg","hash":"250e911c16eeb6acb1e6214ad3e6a3d762850a8e","modified":1620444213414},{"_id":"public/medias/featureimages/16.jpg","hash":"0d8315876e8285abec48ce71797a14734fdc980c","modified":1620444213415},{"_id":"public/medias/featureimages/17.jpg","hash":"5f27406bd8661bef44291601edc2784b5af63c23","modified":1620444213415},{"_id":"public/medias/avatars/qianqian.png","hash":"fed254c4e7eb58ee22d647acb83f1d08f4508f8f","modified":1620444213415},{"_id":"public/medias/featureimages/2.jpg","hash":"c86ede693175156922041c5cdb31b9f1432a0e8a","modified":1620444213415},{"_id":"public/medias/featureimages/6.jpg","hash":"7bdf83e0822794a7294fe554c5d21edda1e0c28f","modified":1620444213416},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1620444213417},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1620444213417},{"_id":"public/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1620444213417},{"_id":"public/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/1577631145598.png","hash":"751cb3e759131eaedd78acaa308340e9ee632a85","modified":1620444213417},{"_id":"public/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/20171126014938900.png","hash":"6749588f5c40f746e98b60782f2abd91320530d6","modified":1620444213418},{"_id":"public/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/20171126015037602.png","hash":"48268e57f013068c03d7b6d7ed8c537091b4a742","modified":1620444213418},{"_id":"public/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/20171126015051216.png","hash":"c6c8e5f01a36fdd4fb025702045e8df4ac728ba2","modified":1620444213418},{"_id":"public/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps30.jpg","hash":"708640653a2ed4fdf313a48e7a9f75a371cfd5e1","modified":1620444213420},{"_id":"public/medias/avatars/jitao.jpg","hash":"5934b9baccebccbc2be2ead5d84ad32dd41f9559","modified":1620444213824},{"_id":"public/medias/avatars/zhangyi.jpg","hash":"c9130036aac9a7ac8d62e33550a9d64896cdc364","modified":1620444213824},{"_id":"public/medias/featureimages/1.jpg","hash":"e177d97cfbb0071d2ac15e99d15666cf09d5eacb","modified":1620444213825},{"_id":"public/medias/featureimages/20.jpg","hash":"6dcacca5f1d93dec5c12cab74516e415243c0a64","modified":1620444213825},{"_id":"public/medias/featureimages/25.jpg","hash":"35a945ed6f2f8a0d055f9da6e90b974b7f30c5b0","modified":1620444213826},{"_id":"public/medias/featureimages/26.jpg","hash":"7e6241a0793404fb3668b1030795e5031e0f1ba7","modified":1620444213826},{"_id":"public/medias/reward/alipay.jpg","hash":"b2fff64a89f74ad9788d0b077c3b2f41c6a42e2a","modified":1620444213827},{"_id":"public/medias/music/avatars/daoshu.jpg","hash":"eee120fdf5ccbe86aa7d51826c4c773e76e6357f","modified":1620444213827},{"_id":"public/2021/04/27/docker/2.png","hash":"8f1de86f61b690790ce76c801d719a9e7da3e09b","modified":1620444213827},{"_id":"public/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/format2.png","hash":"70d60bc318ebf4ff639ff3967b10ef2e66215880","modified":1620444213828},{"_id":"public/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps25.jpg","hash":"e22f4d750fbfc3e46ce0bc7012f2a5889ae17aa0","modified":1620444213829},{"_id":"public/medias/avatars/jingjing.jpg","hash":"bfcab0139edb2509de984cb0a9b156879c355158","modified":1620444214077},{"_id":"public/medias/featureimages/10.jpg","hash":"6339e06736ff6618d97cca389d7887439c87415a","modified":1620444214077},{"_id":"public/medias/featureimages/15.jpg","hash":"18cc714b6693d0336c1bbaef47ed79cc8a1d95e7","modified":1620444214079},{"_id":"public/medias/featureimages/11.jpg","hash":"3fa19adaa3c19d58e34be573f1c3233c9b57b242","modified":1620444214079},{"_id":"public/medias/featureimages/19.jpg","hash":"7a07b854a602cb9c8fa0db80ebd2c9b989f3de22","modified":1620444214081},{"_id":"public/medias/featureimages/18.jpg","hash":"5efc3856cd2da8863e9c808005c3724c09843c3c","modified":1620444214082},{"_id":"public/medias/featureimages/7.jpg","hash":"d41c54ff1c41f5bfd4ccf5af303229059577c351","modified":1620444214082},{"_id":"public/medias/featureimages/12.jpg","hash":"c72b487cf410eb99697ac6e416b1db9c10fa92ce","modified":1620444214083},{"_id":"public/medias/featureimages/21.jpg","hash":"c04a6292dc85cc47a9ec370e1bee81e0e7e65652","modified":1620444214084},{"_id":"public/medias/featureimages/3.jpg","hash":"447bf84c1d9bd71491545922c8735b5b41e2121f","modified":1620444214084},{"_id":"public/medias/featureimages/13.jpg","hash":"575cb26b73b220a3fea685108812466fb8b68e62","modified":1620444214084},{"_id":"public/medias/featureimages/24.jpg","hash":"44d047bc0d29d6ae3e1d65b6cb95143d0d1b6ec2","modified":1620444214085},{"_id":"public/2020/01/21/http-yu-https-yuan-li/1.png","hash":"f2d3c68d23427b2e3d71ad615152c31a765671d5","modified":1620444214085},{"_id":"public/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps27.jpg","hash":"a394438a6c7e468cd8219aaa7371bc72761ba44c","modified":1620444214086},{"_id":"public/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps8.png","hash":"ab504c5866cbfcbd778f3316b5e3c14ffb682544","modified":1620444214086},{"_id":"public/2020/01/20/wang-luo-qi-ceng-jia-gou/OSIModel.png","hash":"b924a1e05f41a6f4e2e2f29a02d7ce1b477e2d82","modified":1620444214086},{"_id":"public/medias/banner/0.jpg","hash":"4d6f31f86966584360bcdbfecb6f6a2ec94f944d","modified":1620444214243},{"_id":"public/medias/banner/2.jpg","hash":"c2980f75f2c047d0957e3c8227b3f8d84e67f752","modified":1620444214243},{"_id":"public/medias/banner/1.jpg","hash":"cd3fc47d2042a3277e4b375ad084365abdc28f5d","modified":1620444214243},{"_id":"public/medias/banner/6.jpg","hash":"5be9274e63d6ac02607e3d659fd32532291385fa","modified":1620444214244},{"_id":"public/medias/featureimages/0.jpg","hash":"39a1cb44e4ab3006577fefcbeecaddd1a2f62cfa","modified":1620444214244},{"_id":"public/medias/featureimages/14.jpg","hash":"f515cb01de6d2b1981f50f0487e9b5beb99baf43","modified":1620444214245},{"_id":"public/medias/featureimages/22.jpg","hash":"43d1db28c3f3f953c5fd399fd959f6e92ee88fe7","modified":1620444214246},{"_id":"public/medias/banner/5.jpg","hash":"6f5795e2fa01a6a7f09e3419941a0fc147ea83c5","modified":1620444214246},{"_id":"public/medias/featureimages/27.jpg","hash":"f4d026ea224b9d216357d4b42fbe9f002bcaa2b0","modified":1620444214247},{"_id":"public/medias/featureimages/8.jpg","hash":"4cedcb5a87fa5fbc1f343c9180d4e52bb4331220","modified":1620444214248},{"_id":"public/medias/banner/4.jpg","hash":"73bae0e6812c46509b91e3155bd12ce8640b245a","modified":1620444214248},{"_id":"public/medias/featureimages/5.jpg","hash":"4c001e19790f5ac73259138ad1713338ea34c664","modified":1620444214249},{"_id":"public/medias/featureimages/23.jpg","hash":"8cc1c127ca8ff09d4a07f5c3b845ef2340a1106f","modified":1620444214338},{"_id":"public/medias/banner/3.jpg","hash":"5c494c93ad30b8f71c7865b42b3cf613279a914e","modified":1620444214339},{"_id":"public/medias/featureimages/9.jpg","hash":"1829b3464d5715136d3feec2849c7716541e83ed","modified":1620444214340},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1620444214342},{"_id":"public/2020/02/29/dui-mysql-zhi-xing-yin-qing-innodb-de-ren-shi/授权声明.pdf","hash":"8acb1b5242efdebb2c430d72d8eb272b449b7a9c","modified":1620444214396},{"_id":"public/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577537632508.png","hash":"906a7f80eadb1abf054ae0f254b2d4f870a6c97e","modified":1620444214792},{"_id":"public/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577538377340.png","hash":"9a179032690f01f7fc4ee28cdcfe80731a48a199","modified":1620444214803},{"_id":"public/2020/07/06/mapreduce-de-liu-cheng-ji-you-hua/wps3.png","hash":"596ff295bf17379d5d1c86811cc36cf33d316503","modified":1620444214815},{"_id":"public/2020/07/06/mapreduce-de-liu-cheng-ji-you-hua/wps4.png","hash":"c1ba25e9810f61a0013307536c350300e6170ceb","modified":1620444214815},{"_id":"public/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps8.png","hash":"6af7514eca5798dc05b26c752fd8ef4f87d5fd72","modified":1620444214827},{"_id":"public/2020/02/29/dui-mysql-zhi-xing-yin-qing-innodb-de-ren-shi/0300000000_1.3.0.435.publish_release.exe","hash":"ef3020a0b65d516597b3c0049d9d6694e906509c","modified":1620444215503}],"Category":[{"name":"tool","_id":"ckof6ml8a0007vkvyqmjbkce5"},{"name":"大数据","_id":"ckof6ml8y000dvkvyqj8q0t64"},{"name":"计算机网络","_id":"ckof6mlab000pvkvy98b5sd5r"},{"name":"java","_id":"ckof6mlaw0010vkvyi7mvvvg9"},{"name":"数据库","_id":"ckof6mlbd001avkvyg6pbz26v"},{"name":"数据结构","_id":"ckof6mldi002bvkvy3855rwdh"}],"Data":[{"_id":"musics","data":[]}],"Page":[{"title":"404","date":"2019-07-19T08:41:10.000Z","type":"404","layout":"404","description":"你触及到了博主知识的边界 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2019-07-19 16:41:10\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你触及到了博主知识的边界 :(\"\n---\n","updated":"2019-12-27T13:40:47.770Z","path":"404.html","comments":1,"_id":"ckof6mk8d0000vkvyd3bw8br7","content":"","site":{"data":{"musics":[]}},"excerpt":"","more":""},{"title":"about","date":"2019-12-19T08:41:10.000Z","type":"about","layout":"about","_content":"\n\n# 教育经历\n* <b>硕士 控制工程</b>\n  重庆大学\n  2018/09 - 现在\n* <b>本科 自动化</b>\n  重庆科技学院\n  2014/09 - 2018/06\n\n# 联系方式\n* <b>电子邮箱</b>\n  1653319002@qq.com\n* <b>地址</b>\n  重庆市沙坪坝区沙正街174号\n* <b>QQ</b>\n  1653319002","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-12-19 16:41:10\ntype: \"about\"\nlayout: \"about\"\n---\n\n\n# 教育经历\n* <b>硕士 控制工程</b>\n  重庆大学\n  2018/09 - 现在\n* <b>本科 自动化</b>\n  重庆科技学院\n  2014/09 - 2018/06\n\n# 联系方式\n* <b>电子邮箱</b>\n  1653319002@qq.com\n* <b>地址</b>\n  重庆市沙坪坝区沙正街174号\n* <b>QQ</b>\n  1653319002","updated":"2019-12-27T13:48:50.567Z","path":"about/index.html","comments":1,"_id":"ckof6ml790002vkvy0kom8bb9","content":"<h1 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h1><ul>\n<li><b>硕士 控制工程</b><br>重庆大学<br>2018/09 - 现在</li>\n<li><b>本科 自动化</b><br>重庆科技学院<br>2014/09 - 2018/06</li>\n</ul>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:1653319002@qq.com\" target=\"_blank\" rel=\"noopener\">1653319002@qq.com</a></li>\n<li><b>地址</b><br>重庆市沙坪坝区沙正街174号</li>\n<li><b>QQ</b><br>1653319002</li>\n</ul>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h1 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h1><ul>\n<li><b>硕士 控制工程</b><br>重庆大学<br>2018/09 - 现在</li>\n<li><b>本科 自动化</b><br>重庆科技学院<br>2014/09 - 2018/06</li>\n</ul>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li><b>电子邮箱</b><br><a href=\"mailto:1653319002@qq.com\" target=\"_blank\" rel=\"noopener\">1653319002@qq.com</a></li>\n<li><b>地址</b><br>重庆市沙坪坝区沙正街174号</li>\n<li><b>QQ</b><br>1653319002</li>\n</ul>\n"},{"title":"archives","date":"2019-07-19T08:39:20.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2019-07-19 16:39:20\ntype: \"archives\"\nlayout: \"archives\"\n---","updated":"2019-12-27T00:54:34.929Z","path":"archives/index.html","comments":1,"_id":"ckof6ml7f0004vkvyhu54j3w6","content":"","site":{"data":{"musics":[]}},"excerpt":"","more":""},{"title":"categories","date":"2019-07-19T08:39:20.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-07-19 16:39:20\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2019-12-27T00:54:34.929Z","path":"categories/index.html","comments":1,"_id":"ckof6ml7p0006vkvycmhkx9wh","content":"","site":{"data":{"musics":[]}},"excerpt":"","more":""},{"title":"contact","date":"2019-07-26T09:17:02.000Z","type":"contact","layout":"contact","_content":"\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言，或者加我联系方式：\n* QQ：**1653319002**\n* 微信：**LH199612311121**\n\n我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。\n**当然不介意小改改加我哦~~**\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**tigerLuHai\n* **地址：**tigerLuHai.github.io","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2019-07-26 17:17:02\ntype: \"contact\"\nlayout: \"contact\"\n---\n\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言，或者加我联系方式：\n* QQ：**1653319002**\n* 微信：**LH199612311121**\n\n我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。\n**当然不介意小改改加我哦~~**\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**tigerLuHai\n* **地址：**tigerLuHai.github.io","updated":"2020-02-06T01:52:00.079Z","path":"contact/index.html","comments":1,"_id":"ckof6ml8h0009vkvyqa0krc25","content":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加我联系方式：</p>\n<ul>\n<li>QQ：<strong>1653319002</strong></li>\n<li>微信：<strong>LH199612311121</strong></li>\n</ul>\n<p>我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。<br><strong>当然不介意小改改加我哦~~</strong></p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>tigerLuHai</li>\n<li><strong>地址：</strong>tigerLuHai.github.io</li>\n</ul>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加我联系方式：</p>\n<ul>\n<li>QQ：<strong>1653319002</strong></li>\n<li>微信：<strong>LH199612311121</strong></li>\n</ul>\n<p>我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。<br><strong>当然不介意小改改加我哦~~</strong></p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>tigerLuHai</li>\n<li><strong>地址：</strong>tigerLuHai.github.io</li>\n</ul>\n"},{"title":"tags","date":"2019-07-19T08:40:27.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-07-19 16:40:27\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2019-12-27T00:54:34.929Z","path":"tags/index.html","comments":1,"_id":"ckof6ml8t000bvkvyqefh8b4f","content":"","site":{"data":{"musics":[]}},"excerpt":"","more":""}],"Post":[{"title":"FastDFS分布式文件系统安装使用教程","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-28T08:21:52.000Z","password":null,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=479553545&auto=1&height=66\"></iframe></div>\n\n# FastDFS分布式文件系统安装使用教程\n\n### 使用场景\n分布式文件系统用于**海量**文件存储及传输访问的瓶颈问题，对海量视频的管理、对**海量**图片的管理等,FastDFS与其他分布式文件系统相比的一个显著优点就是特别**适合大量小文件(图片等)的存储,因为它在存储时没有对文件切片分割.**\n\n### 主流的分布式文件系统\n\n#### ①NFS\n\n![1577523021175](FastDFS分布式文件系统安装使用教程/1577523021175.png)\n\n#### ②GFS\n\n![1577523108700](FastDFS分布式文件系统安装使用教程/1577523108700.png)\n\n#### ③HDFS\n\n![1577523192987](FastDFS分布式文件系统安装使用教程/1577523192987.png)\n\n#### ④FastDFS\n\nFastDFS是用c语言编写的一款开源的分布式文件系统，它是由淘宝资深架构师余庆编写并开源。FastDFS专为互联 网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很 容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。\n\n**FastDFS架构包括 Tracker server和Storageserver。客户端请求Tracker server进行文件上传、下载，通过Tracker server调度最终由Storage server完成文件上传和下载。** \n\n### 安装 \n\n#### 服务器环境\n\n- CentOS6.9(CenttOS安装过程一致)\n\n\n- IP: 192.168.1.21,192.168.1.23,192.168.1.24,192.168.1.25\n\n#### 安装Linux基本环境\n\n参见Hadoop的安装使用教程中Linux环境搭建\n\n#### 安装gcc环境(FastDFS是由c语言编写)\n\n```shell\nyum install gcc-c++\n```\n\n#### 安装 libevent\n\n```shell\nyum -y install libevent\n```\n\n#### 安装 libfastcommon\n\n```shell\n# 将 libfastcommonV1.0.7.tar.gz 拷贝至/usr/local/下\ncd /usr/local\ntar -zxvf libfastcommonV1.0.7.tar.gz\ncd libfastcommon-1.0.7\n./make.sh\n./make.sh install\n```\n\n注意：**libfastcommon 安装好后会自动将库文件拷贝至/usr/lib64 下，由于 FastDFS 程序引用 usr/lib 目录所以需要将/usr/lib64 下的库文件拷贝至/usr/lib 下。**\n\n需要拷贝的文件\n\n![1577524769079](FastDFS分布式文件系统安装使用教程/1577524769079.png)\n\n#### tracker 编译安装\n\n```shell\n# 将 FastDFS_v5.05.tar.gz 拷贝至/usr/local/下\ntar -zxvf FastDFS_v5.05.tar.gz\ncd FastDFS\n./make.sh 编译\n./make.sh install 安装\n```\n\n安装成功将安装目录下的 conf 下的文件拷贝到/etc/fdfs/下。\n\n```shell\ncp -r /usr/local/FastDFS/conf/ /etc/fdfs/\n```\n\n##### 配置\n\n安装成功后进入/etc/fdfs目录\n\n![1577525471795](FastDFS分布式文件系统安装使用教程/1577525471795.png)\n\n拷贝一份新的 tracker 配置文件：\n\n```shell\ncp tracker.conf.sample tracker.conf\n```\n\n修改 tracker.conf\n\n```shell\nvi tracker.conf\n\nbase_path=/home/yuqing/FastDFS #数据(日志等)存储路径,自己设置\nhttp.server_port=80 #配置 http 端口：\n```\n\n##### 启动\n\n```shell\n/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf start\n```\n\n查看端口\n\n```shell\nnetstat -nltp\n```\n\n![1577535905825](FastDFS分布式文件系统安装使用教程/1577535905825.png)\n\n#### storage 安装\n\n- 安装 libevent\n- 安装 libfastcommon\n- 编译安装(与tracker相同)\n\n##### 配置\n\n```shell\nvi storage.conf\n\ngroup_name=group1 #分组,同一分组为设置冗余防止宕机不可用\nbase_path=/home/yuqing/FastDFS #数据存储路径,自己设置\nstore_path0=/home/yuqing/FastDFS #文件存储路径,自己设置\ntracker_server=192.168.101.3:22122 #配置 tracker 服务器:IP\ntracker_server=192.168.1.21:22122 #如果有多个则配置多个 tracker\nhttp.server_port=80\n```\n\n##### 启动\n\n```shell\n/usr/bin/fdfs_storaged /etc/fdfs/storage.conf start\n```\n\n##### 分发配置\n\n将FastDFS分发到各个节点,并修改配置,分发脚本如下\n\n```shell\n#!/bin/bash\npcount=$#\nif((pcount=0));then\necho no args;\nexit;\nfi\np1=$1\nfname=`basename $p1`\necho fname=$fname\npdir=`cd -P $(dirname $p1);pwd`\necho pdir=$pdir\n\nuser=`whoami`\necho user=$user\nfor((host=1;host<4;host++));do\necho ------------salve$host-------------\nrsync -rvl $pdir/$fname $user@slave$host:$pdir\ndone\n```\n\n### 利用可通过/usr/bin/fdfs_test 程序测试\n\n修改/etc/fdfs/client.conf\n\ntracker_server 根据自己部署虚拟机的情况配置\n\n```shell\nbase_path = /home/yuqing/fastdfs\ntracker-server=192.168.1.21:22122\n```\n\n使用格式：\n\n```shell\n/usr/bin/fdfs_test 客户端配置文件地址 upload 上传文件\n```\n\n比如将/home 下的图片上传到 FastDFS 中：\n\n```shell\n/usr/bin/fdfs_test /etc/fdfs/client.conf upload /home/tomcat.png\n```\n\n打印日志如下:\n\n```html\nThis is FastDFS client test program v5.05\n\nCopyright (C) 2008, Happy Fish / YuQing\n\nFastDFS may be copied only under the terms of the GNU General\nPublic License V3, which may be found in the FastDFS source kit.\nPlease visit the FastDFS Home Page http://www.csource.org/ \nfor more detail.\n\n[2019-12-28 20:13:02] DEBUG - base_path=/home/fastdfs, connect_timeout=30, network_timeout=60, tracker_server_count=1, anti_steal_token=0, anti_steal_secret_key length=0, use_connection_pool=0, g_connection_pool_max_idle_time=3600s, use_storage_id=0, storage server id count: 0\n\ntracker_query_storage_store_list_without_group: \n        server 1. group_name=, ip_addr=192.168.1.24, port=23000\n\ngroup_name=group1, ip_addr=192.168.1.24, port=23000\nstorage_upload_by_filename\ngroup_name=group1, remote_filename=M00/00/00/wKgBGF4HRs6AOwJJAAId77F78II587.png\nsource ip address: 192.168.1.24\nfile timestamp=2019-12-28 20:13:02\nfile size=138735\nfile crc32=2977689730\nexample file url: http://192.168.1.24/group1/M00/00/00/wKgBGF4HRs6AOwJJAAId77F78II587.png\nstorage_upload_slave_by_filename\ngroup_name=group1, remote_filename=M00/00/00/wKgBGF4HRs6AOwJJAAId77F78II587_big.png\nsource ip address: 192.168.1.24\nfile timestamp=2019-12-28 20:13:02\nfile size=138735\nfile crc32=2977689730\n```\n\nhttp://192.168.1.24/group1/M00/00/00/wKgBGF4HRs6AOwJJAAId77F78II587.png\n就是文件的下载路径。对应服务器的base_path/fdfs_storage/data/00/00/wKgBGF4HRs6AOwJJAAId77F78II587.png文件\n\n现在还没有和 nginx 整合无法使用 http 下载。\n\n### Nginx整合FastDFS\n\n#### FastDFS-nginx-module\n\n将 FastDFS-nginx-module_v1.16.tar.gz 传 至 fastDFS 的 storage 服 务 器 的\n\n/usr/local/下，执行如下命令：\n\n```shell\ncd /usr/local\ntar -zxvf FastDFS-nginx-module_v1.16.tar.gz\ncd FastDFS-nginx-module/src\nvi config\n```\n\n![1577536510714](FastDFS分布式文件系统安装使用教程/1577536510714.png)\n\n将/usr/local修改为/usr，注意这里有三场，不要改漏了。\n\n将 FastDFS-nginx-module/src 下的 mod_FastDFS.conf 拷贝至/etc/fdfs/下\n\n```shell\ncp mod_FastDFS.conf /etc/fdfs/\nvi /etc/fdfs/mod_FastDFS.conf\n\nbase_path=/home/FastDFS # 保持和之前安装时一致\ntracker_server=192.168.1.21:22122\nurl_have_group_name=true #url 中包含 group 名称\nstore_path0=/home/fastdfs/fdfs_storage #指定文件存储路径,和之前一致\n```\n\n将 libfdfsclient.so 拷贝至/usr/lib 下\n\n```shell\ncp /usr/lib64/libfdfsclient.so /usr/lib/\n```\n\n创建 nginx/client 目录\n\n```shell\nmkdir -p /var/temp/nginx/client\n```\n\n\n\n#### 安装nginx\n\n详细教程可见nginx使用感悟\n\n将 nginx-1.8.0.tar.gz 拷贝到/usr/local 下\n\n解压 nginx-1.8.0.tar.gz\n\n进入 nginx-1.8.0 目录，执行如下配置命令：\n\n```shell\n./configure --add-module=/usr/local/FastDFS-nginx-module/src\nmake make install\n```\n\n\n\n在nginx中增加如下虚拟机配置:\n\nstorage配置:\n\n```xml\nserver {\n listen 80;\n server_name 192.168.1.23; 本机ip\n location /group1/M00/{\n root /home/FastDFS/fdfs_storage/data;  #以自己配置的地址为准\n ngx_FastDFS_module;\n } }\n```\n\ntracker配置:\n\n```xml\n#storage 群 group1 组\nupstream storage_server_group1{\n server 192.168.1.23:80 weight=10;\nserver 192.168.1.24:80 weight=10;\n }\n #storage 群 group2 组\nupstream storage_server_group2{\n server 192.168.1.25:80 weight=10;\n }\n server {\nlisten 80;\nserver_name ccc.test.com;\nlocation /group1{\nproxy_redirect off;\nproxy_set_header Host $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_pass http://storage_server_group1;\n}\nlocation /group2{\nproxy_redirect off;\nproxy_set_header Host $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_pass http://storage_server_group2; } }\n```\n\n#### 测试\n\n使用浏览器 http 访问文件，这里访问上传图片测试的文件：\n\n访问 storage：http://192.168.1.24/group1/M00/00/00/wKgBGF4HRs6AOwJJAAId77F78II587.png\n\n![1577537632508](FastDFS分布式文件系统安装使用教程/1577537632508.png)\n\nip 地址改为 192.168.1.24也可以访问到文件，因为同一个分组的 storage 文件互相同步。\n\n### 编写java代码上传下载文件\n\n**SpringBoot测试方案**\n\n引入依赖\n\n```xml\n<dependency>\n    <groupId>net.oschina.zcx7878</groupId>\n    <artifactId>fastdfs-client-java</artifactId>\n    <version>1.27.0.0</version>\n</dependency>\n```\n\n\n\n```java\n@SpringBootTest\n@RunWith(SpringRunner.class)\npublic class TestFastDFS {\n\n    @Test\n    public void upload() throws IOException, MyException {\n        //加载fastdfs-client.properties配置文件\n        ClientGlobal.initByProperties(\"config/fastdfs-client.properties\");\n\n        //定义TrackerClient,用于请求TrackerClient\n        TrackerClient trackerClient = new TrackerClient();\n        //创建TrackerServer\n        TrackerServer trackerServer = trackerClient.getConnection();\n        //通过TrackerServer获取storeServer\n        StorageServer storeServer = trackerClient.getStoreStorage(trackerServer);\n        //通过TrackerServer and storeServer 创建storageClient1\n        StorageClient1 storageClient1 = new StorageClient1(trackerServer, storeServer);\n        //fileId group1/M00/00/00/wKgBF13ebJuALXhqAAI6t5YoKLQ94..log\n        String fileId = storageClient1.upload_file1(\"C:\\\\Users\\\\tiger\\\\Pictures\\\\Feedback\\\\{A687785D-19C3-4B2E-A00A-2667141271EB}\\\\Capture001.png\", \".png\", null);\n\n        System.out.println(fileId);\n        //获取tracker客户端\n    }\n\n    @Test\n    public void download() throws IOException, MyException {\n        //加载fastdfs-client.properties配置文件\n        ClientGlobal.initByProperties(\"config/fastdfs-client.properties\");\n\n        //定义TrackerClient,用于请求TrackerClient\n        TrackerClient trackerClient = new TrackerClient();\n        //创建TrackerServer\n        TrackerServer trackerServer = trackerClient.getConnection();\n        //通过TrackerServer获取storeServer\n        StorageServer storeServer = trackerClient.getStoreStorage(trackerServer);\n        //通过TrackerServer and storeServer 创建storageClient1\n        StorageClient1 storageClient1 = new StorageClient1(trackerServer, storeServer);\n        //fileId group1/M00/00/00/wKgBF13ebJuALXhqAAI6t5YoKLQ94..log\n        byte[] bytes = storageClient1.download_file1(\"group1/M00/00/00/wKgBF13ebJuALXhqAAI6t5YoKLQ94..log\");\n        FileOutputStream fos = new FileOutputStream(new File(\"hello\"));\n        fos.write(bytes);\n    }\n}\n```\n\nconfig/fastdfs-client.properties\n\n```properties\nfastdfs.connect_timeout_in_seconds = 5\nfastdfs.network_timeout_in_seconds = 30\nfastdfs.charset = UTF-8\nfastdfs.tracker_servers = 192.168.1.21:22122\n```\n\n运行upload得到路径\n\n```\ngroup1/M00/00/00/wKgBGF4HUZiAOKLgAB7xNcvo_Vw00..png\n根据自己配置的路径可以得到访问的http协议路径为:\nhttp://192.168.1.21/group1/M00/00/00/wKgBGF4HUZiAOKLgAB7xNcvo_Vw00..png\n```\n\n效果如下\n\n![1577538377340](FastDFS分布式文件系统安装使用教程/1577538377340.png)\n\n### 总结\n\n**FastDFS相对于HDFS等分布式文件的优势在于它不切分文件,所以下载文件的时候没有拼装文件的过程,而且可以锁定一台机器进行网络I/O,所以速度很快.不过正所谓这也是它的缺点,这导致它不能用于存储大文件.所以FastDFS适合存储大量图片小视频之类的文件.**\n\n### 安装过程遇到的一些问题\n\n①安装nginx No rule to make target \"/usr/local/fastdfs-nginx-module/src/ngx_http_fastdfs_module.c\", needed by objs/addon/src/ngx_http_fastdfs_module.o . Stop. 修改fastdfs-nginx-module/src/config文件中的路径,删除local(注意一共有三个)\n\n②nginx安装cp: `conf/koi-win' and `/usr/local/nginx/conf/koi-win' are the same file 解决 将./configure --prefix=/usr/local/nginx 改为 ./configure --prefix=/usr/local/nginx --conf-path=/usr/local/nginx/nginx.conf\n\n③nginx编码严格.直接复制会出现nginx: [emerg] unknown directive \" \" in /usr/local/nginx-1.12.0-storage/conf/nginx.conf:49）：所以需要手动输入nginx.conf","source":"_posts/FastDFS分布式文件系统安装使用教程.md","raw":"---\ntitle: FastDFS分布式文件系统安装使用教程\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-28 16:21:52\npassword:\nsummary:\ntags:\ncategories:\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=479553545&auto=1&height=66\"></iframe></div>\n\n# FastDFS分布式文件系统安装使用教程\n\n### 使用场景\n分布式文件系统用于**海量**文件存储及传输访问的瓶颈问题，对海量视频的管理、对**海量**图片的管理等,FastDFS与其他分布式文件系统相比的一个显著优点就是特别**适合大量小文件(图片等)的存储,因为它在存储时没有对文件切片分割.**\n\n### 主流的分布式文件系统\n\n#### ①NFS\n\n![1577523021175](FastDFS分布式文件系统安装使用教程/1577523021175.png)\n\n#### ②GFS\n\n![1577523108700](FastDFS分布式文件系统安装使用教程/1577523108700.png)\n\n#### ③HDFS\n\n![1577523192987](FastDFS分布式文件系统安装使用教程/1577523192987.png)\n\n#### ④FastDFS\n\nFastDFS是用c语言编写的一款开源的分布式文件系统，它是由淘宝资深架构师余庆编写并开源。FastDFS专为互联 网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很 容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。\n\n**FastDFS架构包括 Tracker server和Storageserver。客户端请求Tracker server进行文件上传、下载，通过Tracker server调度最终由Storage server完成文件上传和下载。** \n\n### 安装 \n\n#### 服务器环境\n\n- CentOS6.9(CenttOS安装过程一致)\n\n\n- IP: 192.168.1.21,192.168.1.23,192.168.1.24,192.168.1.25\n\n#### 安装Linux基本环境\n\n参见Hadoop的安装使用教程中Linux环境搭建\n\n#### 安装gcc环境(FastDFS是由c语言编写)\n\n```shell\nyum install gcc-c++\n```\n\n#### 安装 libevent\n\n```shell\nyum -y install libevent\n```\n\n#### 安装 libfastcommon\n\n```shell\n# 将 libfastcommonV1.0.7.tar.gz 拷贝至/usr/local/下\ncd /usr/local\ntar -zxvf libfastcommonV1.0.7.tar.gz\ncd libfastcommon-1.0.7\n./make.sh\n./make.sh install\n```\n\n注意：**libfastcommon 安装好后会自动将库文件拷贝至/usr/lib64 下，由于 FastDFS 程序引用 usr/lib 目录所以需要将/usr/lib64 下的库文件拷贝至/usr/lib 下。**\n\n需要拷贝的文件\n\n![1577524769079](FastDFS分布式文件系统安装使用教程/1577524769079.png)\n\n#### tracker 编译安装\n\n```shell\n# 将 FastDFS_v5.05.tar.gz 拷贝至/usr/local/下\ntar -zxvf FastDFS_v5.05.tar.gz\ncd FastDFS\n./make.sh 编译\n./make.sh install 安装\n```\n\n安装成功将安装目录下的 conf 下的文件拷贝到/etc/fdfs/下。\n\n```shell\ncp -r /usr/local/FastDFS/conf/ /etc/fdfs/\n```\n\n##### 配置\n\n安装成功后进入/etc/fdfs目录\n\n![1577525471795](FastDFS分布式文件系统安装使用教程/1577525471795.png)\n\n拷贝一份新的 tracker 配置文件：\n\n```shell\ncp tracker.conf.sample tracker.conf\n```\n\n修改 tracker.conf\n\n```shell\nvi tracker.conf\n\nbase_path=/home/yuqing/FastDFS #数据(日志等)存储路径,自己设置\nhttp.server_port=80 #配置 http 端口：\n```\n\n##### 启动\n\n```shell\n/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf start\n```\n\n查看端口\n\n```shell\nnetstat -nltp\n```\n\n![1577535905825](FastDFS分布式文件系统安装使用教程/1577535905825.png)\n\n#### storage 安装\n\n- 安装 libevent\n- 安装 libfastcommon\n- 编译安装(与tracker相同)\n\n##### 配置\n\n```shell\nvi storage.conf\n\ngroup_name=group1 #分组,同一分组为设置冗余防止宕机不可用\nbase_path=/home/yuqing/FastDFS #数据存储路径,自己设置\nstore_path0=/home/yuqing/FastDFS #文件存储路径,自己设置\ntracker_server=192.168.101.3:22122 #配置 tracker 服务器:IP\ntracker_server=192.168.1.21:22122 #如果有多个则配置多个 tracker\nhttp.server_port=80\n```\n\n##### 启动\n\n```shell\n/usr/bin/fdfs_storaged /etc/fdfs/storage.conf start\n```\n\n##### 分发配置\n\n将FastDFS分发到各个节点,并修改配置,分发脚本如下\n\n```shell\n#!/bin/bash\npcount=$#\nif((pcount=0));then\necho no args;\nexit;\nfi\np1=$1\nfname=`basename $p1`\necho fname=$fname\npdir=`cd -P $(dirname $p1);pwd`\necho pdir=$pdir\n\nuser=`whoami`\necho user=$user\nfor((host=1;host<4;host++));do\necho ------------salve$host-------------\nrsync -rvl $pdir/$fname $user@slave$host:$pdir\ndone\n```\n\n### 利用可通过/usr/bin/fdfs_test 程序测试\n\n修改/etc/fdfs/client.conf\n\ntracker_server 根据自己部署虚拟机的情况配置\n\n```shell\nbase_path = /home/yuqing/fastdfs\ntracker-server=192.168.1.21:22122\n```\n\n使用格式：\n\n```shell\n/usr/bin/fdfs_test 客户端配置文件地址 upload 上传文件\n```\n\n比如将/home 下的图片上传到 FastDFS 中：\n\n```shell\n/usr/bin/fdfs_test /etc/fdfs/client.conf upload /home/tomcat.png\n```\n\n打印日志如下:\n\n```html\nThis is FastDFS client test program v5.05\n\nCopyright (C) 2008, Happy Fish / YuQing\n\nFastDFS may be copied only under the terms of the GNU General\nPublic License V3, which may be found in the FastDFS source kit.\nPlease visit the FastDFS Home Page http://www.csource.org/ \nfor more detail.\n\n[2019-12-28 20:13:02] DEBUG - base_path=/home/fastdfs, connect_timeout=30, network_timeout=60, tracker_server_count=1, anti_steal_token=0, anti_steal_secret_key length=0, use_connection_pool=0, g_connection_pool_max_idle_time=3600s, use_storage_id=0, storage server id count: 0\n\ntracker_query_storage_store_list_without_group: \n        server 1. group_name=, ip_addr=192.168.1.24, port=23000\n\ngroup_name=group1, ip_addr=192.168.1.24, port=23000\nstorage_upload_by_filename\ngroup_name=group1, remote_filename=M00/00/00/wKgBGF4HRs6AOwJJAAId77F78II587.png\nsource ip address: 192.168.1.24\nfile timestamp=2019-12-28 20:13:02\nfile size=138735\nfile crc32=2977689730\nexample file url: http://192.168.1.24/group1/M00/00/00/wKgBGF4HRs6AOwJJAAId77F78II587.png\nstorage_upload_slave_by_filename\ngroup_name=group1, remote_filename=M00/00/00/wKgBGF4HRs6AOwJJAAId77F78II587_big.png\nsource ip address: 192.168.1.24\nfile timestamp=2019-12-28 20:13:02\nfile size=138735\nfile crc32=2977689730\n```\n\nhttp://192.168.1.24/group1/M00/00/00/wKgBGF4HRs6AOwJJAAId77F78II587.png\n就是文件的下载路径。对应服务器的base_path/fdfs_storage/data/00/00/wKgBGF4HRs6AOwJJAAId77F78II587.png文件\n\n现在还没有和 nginx 整合无法使用 http 下载。\n\n### Nginx整合FastDFS\n\n#### FastDFS-nginx-module\n\n将 FastDFS-nginx-module_v1.16.tar.gz 传 至 fastDFS 的 storage 服 务 器 的\n\n/usr/local/下，执行如下命令：\n\n```shell\ncd /usr/local\ntar -zxvf FastDFS-nginx-module_v1.16.tar.gz\ncd FastDFS-nginx-module/src\nvi config\n```\n\n![1577536510714](FastDFS分布式文件系统安装使用教程/1577536510714.png)\n\n将/usr/local修改为/usr，注意这里有三场，不要改漏了。\n\n将 FastDFS-nginx-module/src 下的 mod_FastDFS.conf 拷贝至/etc/fdfs/下\n\n```shell\ncp mod_FastDFS.conf /etc/fdfs/\nvi /etc/fdfs/mod_FastDFS.conf\n\nbase_path=/home/FastDFS # 保持和之前安装时一致\ntracker_server=192.168.1.21:22122\nurl_have_group_name=true #url 中包含 group 名称\nstore_path0=/home/fastdfs/fdfs_storage #指定文件存储路径,和之前一致\n```\n\n将 libfdfsclient.so 拷贝至/usr/lib 下\n\n```shell\ncp /usr/lib64/libfdfsclient.so /usr/lib/\n```\n\n创建 nginx/client 目录\n\n```shell\nmkdir -p /var/temp/nginx/client\n```\n\n\n\n#### 安装nginx\n\n详细教程可见nginx使用感悟\n\n将 nginx-1.8.0.tar.gz 拷贝到/usr/local 下\n\n解压 nginx-1.8.0.tar.gz\n\n进入 nginx-1.8.0 目录，执行如下配置命令：\n\n```shell\n./configure --add-module=/usr/local/FastDFS-nginx-module/src\nmake make install\n```\n\n\n\n在nginx中增加如下虚拟机配置:\n\nstorage配置:\n\n```xml\nserver {\n listen 80;\n server_name 192.168.1.23; 本机ip\n location /group1/M00/{\n root /home/FastDFS/fdfs_storage/data;  #以自己配置的地址为准\n ngx_FastDFS_module;\n } }\n```\n\ntracker配置:\n\n```xml\n#storage 群 group1 组\nupstream storage_server_group1{\n server 192.168.1.23:80 weight=10;\nserver 192.168.1.24:80 weight=10;\n }\n #storage 群 group2 组\nupstream storage_server_group2{\n server 192.168.1.25:80 weight=10;\n }\n server {\nlisten 80;\nserver_name ccc.test.com;\nlocation /group1{\nproxy_redirect off;\nproxy_set_header Host $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_pass http://storage_server_group1;\n}\nlocation /group2{\nproxy_redirect off;\nproxy_set_header Host $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_pass http://storage_server_group2; } }\n```\n\n#### 测试\n\n使用浏览器 http 访问文件，这里访问上传图片测试的文件：\n\n访问 storage：http://192.168.1.24/group1/M00/00/00/wKgBGF4HRs6AOwJJAAId77F78II587.png\n\n![1577537632508](FastDFS分布式文件系统安装使用教程/1577537632508.png)\n\nip 地址改为 192.168.1.24也可以访问到文件，因为同一个分组的 storage 文件互相同步。\n\n### 编写java代码上传下载文件\n\n**SpringBoot测试方案**\n\n引入依赖\n\n```xml\n<dependency>\n    <groupId>net.oschina.zcx7878</groupId>\n    <artifactId>fastdfs-client-java</artifactId>\n    <version>1.27.0.0</version>\n</dependency>\n```\n\n\n\n```java\n@SpringBootTest\n@RunWith(SpringRunner.class)\npublic class TestFastDFS {\n\n    @Test\n    public void upload() throws IOException, MyException {\n        //加载fastdfs-client.properties配置文件\n        ClientGlobal.initByProperties(\"config/fastdfs-client.properties\");\n\n        //定义TrackerClient,用于请求TrackerClient\n        TrackerClient trackerClient = new TrackerClient();\n        //创建TrackerServer\n        TrackerServer trackerServer = trackerClient.getConnection();\n        //通过TrackerServer获取storeServer\n        StorageServer storeServer = trackerClient.getStoreStorage(trackerServer);\n        //通过TrackerServer and storeServer 创建storageClient1\n        StorageClient1 storageClient1 = new StorageClient1(trackerServer, storeServer);\n        //fileId group1/M00/00/00/wKgBF13ebJuALXhqAAI6t5YoKLQ94..log\n        String fileId = storageClient1.upload_file1(\"C:\\\\Users\\\\tiger\\\\Pictures\\\\Feedback\\\\{A687785D-19C3-4B2E-A00A-2667141271EB}\\\\Capture001.png\", \".png\", null);\n\n        System.out.println(fileId);\n        //获取tracker客户端\n    }\n\n    @Test\n    public void download() throws IOException, MyException {\n        //加载fastdfs-client.properties配置文件\n        ClientGlobal.initByProperties(\"config/fastdfs-client.properties\");\n\n        //定义TrackerClient,用于请求TrackerClient\n        TrackerClient trackerClient = new TrackerClient();\n        //创建TrackerServer\n        TrackerServer trackerServer = trackerClient.getConnection();\n        //通过TrackerServer获取storeServer\n        StorageServer storeServer = trackerClient.getStoreStorage(trackerServer);\n        //通过TrackerServer and storeServer 创建storageClient1\n        StorageClient1 storageClient1 = new StorageClient1(trackerServer, storeServer);\n        //fileId group1/M00/00/00/wKgBF13ebJuALXhqAAI6t5YoKLQ94..log\n        byte[] bytes = storageClient1.download_file1(\"group1/M00/00/00/wKgBF13ebJuALXhqAAI6t5YoKLQ94..log\");\n        FileOutputStream fos = new FileOutputStream(new File(\"hello\"));\n        fos.write(bytes);\n    }\n}\n```\n\nconfig/fastdfs-client.properties\n\n```properties\nfastdfs.connect_timeout_in_seconds = 5\nfastdfs.network_timeout_in_seconds = 30\nfastdfs.charset = UTF-8\nfastdfs.tracker_servers = 192.168.1.21:22122\n```\n\n运行upload得到路径\n\n```\ngroup1/M00/00/00/wKgBGF4HUZiAOKLgAB7xNcvo_Vw00..png\n根据自己配置的路径可以得到访问的http协议路径为:\nhttp://192.168.1.21/group1/M00/00/00/wKgBGF4HUZiAOKLgAB7xNcvo_Vw00..png\n```\n\n效果如下\n\n![1577538377340](FastDFS分布式文件系统安装使用教程/1577538377340.png)\n\n### 总结\n\n**FastDFS相对于HDFS等分布式文件的优势在于它不切分文件,所以下载文件的时候没有拼装文件的过程,而且可以锁定一台机器进行网络I/O,所以速度很快.不过正所谓这也是它的缺点,这导致它不能用于存储大文件.所以FastDFS适合存储大量图片小视频之类的文件.**\n\n### 安装过程遇到的一些问题\n\n①安装nginx No rule to make target \"/usr/local/fastdfs-nginx-module/src/ngx_http_fastdfs_module.c\", needed by objs/addon/src/ngx_http_fastdfs_module.o . Stop. 修改fastdfs-nginx-module/src/config文件中的路径,删除local(注意一共有三个)\n\n②nginx安装cp: `conf/koi-win' and `/usr/local/nginx/conf/koi-win' are the same file 解决 将./configure --prefix=/usr/local/nginx 改为 ./configure --prefix=/usr/local/nginx --conf-path=/usr/local/nginx/nginx.conf\n\n③nginx编码严格.直接复制会出现nginx: [emerg] unknown directive \" \" in /usr/local/nginx-1.12.0-storage/conf/nginx.conf:49）：所以需要手动输入nginx.conf","slug":"FastDFS分布式文件系统安装使用教程","published":1,"updated":"2021-04-29T10:45:45.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6ml710001vkvy617zrmuh","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=479553545&auto=1&height=66\"></iframe></div>\n\n<h1 id=\"FastDFS分布式文件系统安装使用教程\"><a href=\"#FastDFS分布式文件系统安装使用教程\" class=\"headerlink\" title=\"FastDFS分布式文件系统安装使用教程\"></a>FastDFS分布式文件系统安装使用教程</h1><h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>分布式文件系统用于<strong>海量</strong>文件存储及传输访问的瓶颈问题，对海量视频的管理、对<strong>海量</strong>图片的管理等,FastDFS与其他分布式文件系统相比的一个显著优点就是特别<strong>适合大量小文件(图片等)的存储,因为它在存储时没有对文件切片分割.</strong></p>\n<h3 id=\"主流的分布式文件系统\"><a href=\"#主流的分布式文件系统\" class=\"headerlink\" title=\"主流的分布式文件系统\"></a>主流的分布式文件系统</h3><h4 id=\"①NFS\"><a href=\"#①NFS\" class=\"headerlink\" title=\"①NFS\"></a>①NFS</h4><p><img src=\"/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577523021175.png\" alt=\"1577523021175\"></p>\n<h4 id=\"②GFS\"><a href=\"#②GFS\" class=\"headerlink\" title=\"②GFS\"></a>②GFS</h4><p><img src=\"/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577523108700.png\" alt=\"1577523108700\"></p>\n<h4 id=\"③HDFS\"><a href=\"#③HDFS\" class=\"headerlink\" title=\"③HDFS\"></a>③HDFS</h4><p><img src=\"/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577523192987.png\" alt=\"1577523192987\"></p>\n<h4 id=\"④FastDFS\"><a href=\"#④FastDFS\" class=\"headerlink\" title=\"④FastDFS\"></a>④FastDFS</h4><p>FastDFS是用c语言编写的一款开源的分布式文件系统，它是由淘宝资深架构师余庆编写并开源。FastDFS专为互联 网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很 容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p>\n<p><strong>FastDFS架构包括 Tracker server和Storageserver。客户端请求Tracker server进行文件上传、下载，通过Tracker server调度最终由Storage server完成文件上传和下载。</strong> </p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><h4 id=\"服务器环境\"><a href=\"#服务器环境\" class=\"headerlink\" title=\"服务器环境\"></a>服务器环境</h4><ul>\n<li>CentOS6.9(CenttOS安装过程一致)</li>\n</ul>\n<ul>\n<li>IP: 192.168.1.21,192.168.1.23,192.168.1.24,192.168.1.25</li>\n</ul>\n<h4 id=\"安装Linux基本环境\"><a href=\"#安装Linux基本环境\" class=\"headerlink\" title=\"安装Linux基本环境\"></a>安装Linux基本环境</h4><p>参见Hadoop的安装使用教程中Linux环境搭建</p>\n<h4 id=\"安装gcc环境-FastDFS是由c语言编写\"><a href=\"#安装gcc环境-FastDFS是由c语言编写\" class=\"headerlink\" title=\"安装gcc环境(FastDFS是由c语言编写)\"></a>安装gcc环境(FastDFS是由c语言编写)</h4><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">yum install gcc-c++<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"安装-libevent\"><a href=\"#安装-libevent\" class=\"headerlink\" title=\"安装 libevent\"></a>安装 libevent</h4><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">yum -y install libevent<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"安装-libfastcommon\"><a href=\"#安装-libfastcommon\" class=\"headerlink\" title=\"安装 libfastcommon\"></a>安装 libfastcommon</h4><pre class=\"line-numbers language-shell\"><code class=\"language-shell\"># 将 libfastcommonV1.0.7.tar.gz 拷贝至/usr/local/下\ncd /usr/local\ntar -zxvf libfastcommonV1.0.7.tar.gz\ncd libfastcommon-1.0.7\n./make.sh\n./make.sh install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意：<strong>libfastcommon 安装好后会自动将库文件拷贝至/usr/lib64 下，由于 FastDFS 程序引用 usr/lib 目录所以需要将/usr/lib64 下的库文件拷贝至/usr/lib 下。</strong></p>\n<p>需要拷贝的文件</p>\n<p><img src=\"/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577524769079.png\" alt=\"1577524769079\"></p>\n<h4 id=\"tracker-编译安装\"><a href=\"#tracker-编译安装\" class=\"headerlink\" title=\"tracker 编译安装\"></a>tracker 编译安装</h4><pre class=\"line-numbers language-shell\"><code class=\"language-shell\"># 将 FastDFS_v5.05.tar.gz 拷贝至/usr/local/下\ntar -zxvf FastDFS_v5.05.tar.gz\ncd FastDFS\n./make.sh 编译\n./make.sh install 安装<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>安装成功将安装目录下的 conf 下的文件拷贝到/etc/fdfs/下。</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">cp -r /usr/local/FastDFS/conf/ /etc/fdfs/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h5><p>安装成功后进入/etc/fdfs目录</p>\n<p><img src=\"/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577525471795.png\" alt=\"1577525471795\"></p>\n<p>拷贝一份新的 tracker 配置文件：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">cp tracker.conf.sample tracker.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>修改 tracker.conf</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">vi tracker.conf\n\nbase_path=/home/yuqing/FastDFS #数据(日志等)存储路径,自己设置\nhttp.server_port=80 #配置 http 端口：<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h5><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>查看端口</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">netstat -nltp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577535905825.png\" alt=\"1577535905825\"></p>\n<h4 id=\"storage-安装\"><a href=\"#storage-安装\" class=\"headerlink\" title=\"storage 安装\"></a>storage 安装</h4><ul>\n<li>安装 libevent</li>\n<li>安装 libfastcommon</li>\n<li>编译安装(与tracker相同)</li>\n</ul>\n<h5 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h5><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">vi storage.conf\n\ngroup_name=group1 #分组,同一分组为设置冗余防止宕机不可用\nbase_path=/home/yuqing/FastDFS #数据存储路径,自己设置\nstore_path0=/home/yuqing/FastDFS #文件存储路径,自己设置\ntracker_server=192.168.101.3:22122 #配置 tracker 服务器:IP\ntracker_server=192.168.1.21:22122 #如果有多个则配置多个 tracker\nhttp.server_port=80<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"启动-1\"><a href=\"#启动-1\" class=\"headerlink\" title=\"启动\"></a>启动</h5><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">/usr/bin/fdfs_storaged /etc/fdfs/storage.conf start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"分发配置\"><a href=\"#分发配置\" class=\"headerlink\" title=\"分发配置\"></a>分发配置</h5><p>将FastDFS分发到各个节点,并修改配置,分发脚本如下</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">#!/bin/bash\npcount=$#\nif((pcount=0));then\necho no args;\nexit;\nfi\np1=$1\nfname=`basename $p1`\necho fname=$fname\npdir=`cd -P $(dirname $p1);pwd`\necho pdir=$pdir\n\nuser=`whoami`\necho user=$user\nfor((host=1;host<4;host++));do\necho ------------salve$host-------------\nrsync -rvl $pdir/$fname $user@slave$host:$pdir\ndone<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"利用可通过-usr-bin-fdfs-test-程序测试\"><a href=\"#利用可通过-usr-bin-fdfs-test-程序测试\" class=\"headerlink\" title=\"利用可通过/usr/bin/fdfs_test 程序测试\"></a>利用可通过/usr/bin/fdfs_test 程序测试</h3><p>修改/etc/fdfs/client.conf</p>\n<p>tracker_server 根据自己部署虚拟机的情况配置</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">base_path = /home/yuqing/fastdfs\ntracker-server=192.168.1.21:22122<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>使用格式：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">/usr/bin/fdfs_test 客户端配置文件地址 upload 上传文件<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>比如将/home 下的图片上传到 FastDFS 中：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">/usr/bin/fdfs_test /etc/fdfs/client.conf upload /home/tomcat.png<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>打印日志如下:</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">This is FastDFS client test program v5.05\n\nCopyright (C) 2008, Happy Fish / YuQing\n\nFastDFS may be copied only under the terms of the GNU General\nPublic License V3, which may be found in the FastDFS source kit.\nPlease visit the FastDFS Home Page http://www.csource.org/ \nfor more detail.\n\n[2019-12-28 20:13:02] DEBUG - base_path=/home/fastdfs, connect_timeout=30, network_timeout=60, tracker_server_count=1, anti_steal_token=0, anti_steal_secret_key length=0, use_connection_pool=0, g_connection_pool_max_idle_time=3600s, use_storage_id=0, storage server id count: 0\n\ntracker_query_storage_store_list_without_group: \n        server 1. group_name=, ip_addr=192.168.1.24, port=23000\n\ngroup_name=group1, ip_addr=192.168.1.24, port=23000\nstorage_upload_by_filename\ngroup_name=group1, remote_filename=M00/00/00/wKgBGF4HRs6AOwJJAAId77F78II587.png\nsource ip address: 192.168.1.24\nfile timestamp=2019-12-28 20:13:02\nfile size=138735\nfile crc32=2977689730\nexample file url: http://192.168.1.24/group1/M00/00/00/wKgBGF4HRs6AOwJJAAId77F78II587.png\nstorage_upload_slave_by_filename\ngroup_name=group1, remote_filename=M00/00/00/wKgBGF4HRs6AOwJJAAId77F78II587_big.png\nsource ip address: 192.168.1.24\nfile timestamp=2019-12-28 20:13:02\nfile size=138735\nfile crc32=2977689730<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"http://192.168.1.24/group1/M00/00/00/wKgBGF4HRs6AOwJJAAId77F78II587.png\" target=\"_blank\" rel=\"noopener\">http://192.168.1.24/group1/M00/00/00/wKgBGF4HRs6AOwJJAAId77F78II587.png</a><br>就是文件的下载路径。对应服务器的base_path/fdfs_storage/data/00/00/wKgBGF4HRs6AOwJJAAId77F78II587.png文件</p>\n<p>现在还没有和 nginx 整合无法使用 http 下载。</p>\n<h3 id=\"Nginx整合FastDFS\"><a href=\"#Nginx整合FastDFS\" class=\"headerlink\" title=\"Nginx整合FastDFS\"></a>Nginx整合FastDFS</h3><h4 id=\"FastDFS-nginx-module\"><a href=\"#FastDFS-nginx-module\" class=\"headerlink\" title=\"FastDFS-nginx-module\"></a>FastDFS-nginx-module</h4><p>将 FastDFS-nginx-module_v1.16.tar.gz 传 至 fastDFS 的 storage 服 务 器 的</p>\n<p>/usr/local/下，执行如下命令：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">cd /usr/local\ntar -zxvf FastDFS-nginx-module_v1.16.tar.gz\ncd FastDFS-nginx-module/src\nvi config<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577536510714.png\" alt=\"1577536510714\"></p>\n<p>将/usr/local修改为/usr，注意这里有三场，不要改漏了。</p>\n<p>将 FastDFS-nginx-module/src 下的 mod_FastDFS.conf 拷贝至/etc/fdfs/下</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">cp mod_FastDFS.conf /etc/fdfs/\nvi /etc/fdfs/mod_FastDFS.conf\n\nbase_path=/home/FastDFS # 保持和之前安装时一致\ntracker_server=192.168.1.21:22122\nurl_have_group_name=true #url 中包含 group 名称\nstore_path0=/home/fastdfs/fdfs_storage #指定文件存储路径,和之前一致<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>将 libfdfsclient.so 拷贝至/usr/lib 下</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">cp /usr/lib64/libfdfsclient.so /usr/lib/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>创建 nginx/client 目录</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">mkdir -p /var/temp/nginx/client<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h4><p>详细教程可见nginx使用感悟</p>\n<p>将 nginx-1.8.0.tar.gz 拷贝到/usr/local 下</p>\n<p>解压 nginx-1.8.0.tar.gz</p>\n<p>进入 nginx-1.8.0 目录，执行如下配置命令：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">./configure --add-module=/usr/local/FastDFS-nginx-module/src\nmake make install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>在nginx中增加如下虚拟机配置:</p>\n<p>storage配置:</p>\n<pre class=\"line-numbers language-xml\"><code class=\"language-xml\">server {\n listen 80;\n server_name 192.168.1.23; 本机ip\n location /group1/M00/{\n root /home/FastDFS/fdfs_storage/data;  #以自己配置的地址为准\n ngx_FastDFS_module;\n } }<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>tracker配置:</p>\n<pre class=\"line-numbers language-xml\"><code class=\"language-xml\">#storage 群 group1 组\nupstream storage_server_group1{\n server 192.168.1.23:80 weight=10;\nserver 192.168.1.24:80 weight=10;\n }\n #storage 群 group2 组\nupstream storage_server_group2{\n server 192.168.1.25:80 weight=10;\n }\n server {\nlisten 80;\nserver_name ccc.test.com;\nlocation /group1{\nproxy_redirect off;\nproxy_set_header Host $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_pass http://storage_server_group1;\n}\nlocation /group2{\nproxy_redirect off;\nproxy_set_header Host $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_pass http://storage_server_group2; } }<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>使用浏览器 http 访问文件，这里访问上传图片测试的文件：</p>\n<p>访问 storage：<a href=\"http://192.168.1.24/group1/M00/00/00/wKgBGF4HRs6AOwJJAAId77F78II587.png\" target=\"_blank\" rel=\"noopener\">http://192.168.1.24/group1/M00/00/00/wKgBGF4HRs6AOwJJAAId77F78II587.png</a></p>\n<p><img src=\"/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577537632508.png\" alt=\"1577537632508\"></p>\n<p>ip 地址改为 192.168.1.24也可以访问到文件，因为同一个分组的 storage 文件互相同步。</p>\n<h3 id=\"编写java代码上传下载文件\"><a href=\"#编写java代码上传下载文件\" class=\"headerlink\" title=\"编写java代码上传下载文件\"></a>编写java代码上传下载文件</h3><p><strong>SpringBoot测试方案</strong></p>\n<p>引入依赖</p>\n<pre class=\"line-numbers language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>net.oschina.zcx7878<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>fastdfs-client-java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.27.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SpringBootTest</span>\n<span class=\"token annotation punctuation\">@RunWith</span><span class=\"token punctuation\">(</span>SpringRunner<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestFastDFS</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">upload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">,</span> MyException <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//加载fastdfs-client.properties配置文件</span>\n        ClientGlobal<span class=\"token punctuation\">.</span><span class=\"token function\">initByProperties</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config/fastdfs-client.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//定义TrackerClient,用于请求TrackerClient</span>\n        TrackerClient trackerClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TrackerClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//创建TrackerServer</span>\n        TrackerServer trackerServer <span class=\"token operator\">=</span> trackerClient<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//通过TrackerServer获取storeServer</span>\n        StorageServer storeServer <span class=\"token operator\">=</span> trackerClient<span class=\"token punctuation\">.</span><span class=\"token function\">getStoreStorage</span><span class=\"token punctuation\">(</span>trackerServer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//通过TrackerServer and storeServer 创建storageClient1</span>\n        StorageClient1 storageClient1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StorageClient1</span><span class=\"token punctuation\">(</span>trackerServer<span class=\"token punctuation\">,</span> storeServer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//fileId group1/M00/00/00/wKgBF13ebJuALXhqAAI6t5YoKLQ94..log</span>\n        String fileId <span class=\"token operator\">=</span> storageClient1<span class=\"token punctuation\">.</span><span class=\"token function\">upload_file1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\\Users\\\\tiger\\\\Pictures\\\\Feedback\\\\{A687785D-19C3-4B2E-A00A-2667141271EB}\\\\Capture001.png\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".png\"</span><span class=\"token punctuation\">,</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>fileId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//获取tracker客户端</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">download</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">,</span> MyException <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//加载fastdfs-client.properties配置文件</span>\n        ClientGlobal<span class=\"token punctuation\">.</span><span class=\"token function\">initByProperties</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"config/fastdfs-client.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//定义TrackerClient,用于请求TrackerClient</span>\n        TrackerClient trackerClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TrackerClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//创建TrackerServer</span>\n        TrackerServer trackerServer <span class=\"token operator\">=</span> trackerClient<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//通过TrackerServer获取storeServer</span>\n        StorageServer storeServer <span class=\"token operator\">=</span> trackerClient<span class=\"token punctuation\">.</span><span class=\"token function\">getStoreStorage</span><span class=\"token punctuation\">(</span>trackerServer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//通过TrackerServer and storeServer 创建storageClient1</span>\n        StorageClient1 storageClient1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StorageClient1</span><span class=\"token punctuation\">(</span>trackerServer<span class=\"token punctuation\">,</span> storeServer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//fileId group1/M00/00/00/wKgBF13ebJuALXhqAAI6t5YoKLQ94..log</span>\n        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> storageClient1<span class=\"token punctuation\">.</span><span class=\"token function\">download_file1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"group1/M00/00/00/wKgBF13ebJuALXhqAAI6t5YoKLQ94..log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        FileOutputStream fos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        fos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>config/fastdfs-client.properties</p>\n<pre class=\"line-numbers language-properties\"><code class=\"language-properties\"><span class=\"token attr-name\">fastdfs.connect_timeout_in_seconds</span> <span class=\"token punctuation\">=</span> <span class=\"token attr-value\">5</span>\n<span class=\"token attr-name\">fastdfs.network_timeout_in_seconds</span> <span class=\"token punctuation\">=</span> <span class=\"token attr-value\">30</span>\n<span class=\"token attr-name\">fastdfs.charset</span> <span class=\"token punctuation\">=</span> <span class=\"token attr-value\">UTF-8</span>\n<span class=\"token attr-name\">fastdfs.tracker_servers</span> <span class=\"token punctuation\">=</span> <span class=\"token attr-value\">192.168.1.21:22122</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>运行upload得到路径</p>\n<pre><code>group1/M00/00/00/wKgBGF4HUZiAOKLgAB7xNcvo_Vw00..png\n根据自己配置的路径可以得到访问的http协议路径为:\nhttp://192.168.1.21/group1/M00/00/00/wKgBGF4HUZiAOKLgAB7xNcvo_Vw00..png</code></pre><p>效果如下</p>\n<p><img src=\"/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577538377340.png\" alt=\"1577538377340\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><strong>FastDFS相对于HDFS等分布式文件的优势在于它不切分文件,所以下载文件的时候没有拼装文件的过程,而且可以锁定一台机器进行网络I/O,所以速度很快.不过正所谓这也是它的缺点,这导致它不能用于存储大文件.所以FastDFS适合存储大量图片小视频之类的文件.</strong></p>\n<h3 id=\"安装过程遇到的一些问题\"><a href=\"#安装过程遇到的一些问题\" class=\"headerlink\" title=\"安装过程遇到的一些问题\"></a>安装过程遇到的一些问题</h3><p>①安装nginx No rule to make target “/usr/local/fastdfs-nginx-module/src/ngx_http_fastdfs_module.c”, needed by objs/addon/src/ngx_http_fastdfs_module.o . Stop. 修改fastdfs-nginx-module/src/config文件中的路径,删除local(注意一共有三个)</p>\n<p>②nginx安装cp: <code>conf/koi-win&#39; and</code>/usr/local/nginx/conf/koi-win’ are the same file 解决 将./configure –prefix=/usr/local/nginx 改为 ./configure –prefix=/usr/local/nginx –conf-path=/usr/local/nginx/nginx.conf</p>\n<p>③nginx编码严格.直接复制会出现nginx: [emerg] unknown directive “ “ in /usr/local/nginx-1.12.0-storage/conf/nginx.conf:49）：所以需要手动输入nginx.conf</p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=479553545&auto=1&height=66\"></iframe></div>\n\n<h1 id=\"FastDFS分布式文件系统安装使用教程\"><a href=\"#FastDFS分布式文件系统安装使用教程\" class=\"headerlink\" title=\"FastDFS分布式文件系统安装使用教程\"></a>FastDFS分布式文件系统安装使用教程</h1><h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>分布式文件系统用于<strong>海量</strong>文件存储及传输访问的瓶颈问题，对海量视频的管理、对<strong>海量</strong>图片的管理等,FastDFS与其他分布式文件系统相比的一个显著优点就是特别<strong>适合大量小文件(图片等)的存储,因为它在存储时没有对文件切片分割.</strong></p>\n<h3 id=\"主流的分布式文件系统\"><a href=\"#主流的分布式文件系统\" class=\"headerlink\" title=\"主流的分布式文件系统\"></a>主流的分布式文件系统</h3><h4 id=\"①NFS\"><a href=\"#①NFS\" class=\"headerlink\" title=\"①NFS\"></a>①NFS</h4><p><img src=\"/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577523021175.png\" alt=\"1577523021175\"></p>\n<h4 id=\"②GFS\"><a href=\"#②GFS\" class=\"headerlink\" title=\"②GFS\"></a>②GFS</h4><p><img src=\"/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577523108700.png\" alt=\"1577523108700\"></p>\n<h4 id=\"③HDFS\"><a href=\"#③HDFS\" class=\"headerlink\" title=\"③HDFS\"></a>③HDFS</h4><p><img src=\"/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577523192987.png\" alt=\"1577523192987\"></p>\n<h4 id=\"④FastDFS\"><a href=\"#④FastDFS\" class=\"headerlink\" title=\"④FastDFS\"></a>④FastDFS</h4><p>FastDFS是用c语言编写的一款开源的分布式文件系统，它是由淘宝资深架构师余庆编写并开源。FastDFS专为互联 网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很 容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p>\n<p><strong>FastDFS架构包括 Tracker server和Storageserver。客户端请求Tracker server进行文件上传、下载，通过Tracker server调度最终由Storage server完成文件上传和下载。</strong> </p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><h4 id=\"服务器环境\"><a href=\"#服务器环境\" class=\"headerlink\" title=\"服务器环境\"></a>服务器环境</h4><ul>\n<li>CentOS6.9(CenttOS安装过程一致)</li>\n</ul>\n<ul>\n<li>IP: 192.168.1.21,192.168.1.23,192.168.1.24,192.168.1.25</li>\n</ul>\n<h4 id=\"安装Linux基本环境\"><a href=\"#安装Linux基本环境\" class=\"headerlink\" title=\"安装Linux基本环境\"></a>安装Linux基本环境</h4><p>参见Hadoop的安装使用教程中Linux环境搭建</p>\n<h4 id=\"安装gcc环境-FastDFS是由c语言编写\"><a href=\"#安装gcc环境-FastDFS是由c语言编写\" class=\"headerlink\" title=\"安装gcc环境(FastDFS是由c语言编写)\"></a>安装gcc环境(FastDFS是由c语言编写)</h4><pre><code class=\"shell\">yum install gcc-c++</code></pre>\n<h4 id=\"安装-libevent\"><a href=\"#安装-libevent\" class=\"headerlink\" title=\"安装 libevent\"></a>安装 libevent</h4><pre><code class=\"shell\">yum -y install libevent</code></pre>\n<h4 id=\"安装-libfastcommon\"><a href=\"#安装-libfastcommon\" class=\"headerlink\" title=\"安装 libfastcommon\"></a>安装 libfastcommon</h4><pre><code class=\"shell\"># 将 libfastcommonV1.0.7.tar.gz 拷贝至/usr/local/下\ncd /usr/local\ntar -zxvf libfastcommonV1.0.7.tar.gz\ncd libfastcommon-1.0.7\n./make.sh\n./make.sh install</code></pre>\n<p>注意：<strong>libfastcommon 安装好后会自动将库文件拷贝至/usr/lib64 下，由于 FastDFS 程序引用 usr/lib 目录所以需要将/usr/lib64 下的库文件拷贝至/usr/lib 下。</strong></p>\n<p>需要拷贝的文件</p>\n<p><img src=\"/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577524769079.png\" alt=\"1577524769079\"></p>\n<h4 id=\"tracker-编译安装\"><a href=\"#tracker-编译安装\" class=\"headerlink\" title=\"tracker 编译安装\"></a>tracker 编译安装</h4><pre><code class=\"shell\"># 将 FastDFS_v5.05.tar.gz 拷贝至/usr/local/下\ntar -zxvf FastDFS_v5.05.tar.gz\ncd FastDFS\n./make.sh 编译\n./make.sh install 安装</code></pre>\n<p>安装成功将安装目录下的 conf 下的文件拷贝到/etc/fdfs/下。</p>\n<pre><code class=\"shell\">cp -r /usr/local/FastDFS/conf/ /etc/fdfs/</code></pre>\n<h5 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h5><p>安装成功后进入/etc/fdfs目录</p>\n<p><img src=\"/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577525471795.png\" alt=\"1577525471795\"></p>\n<p>拷贝一份新的 tracker 配置文件：</p>\n<pre><code class=\"shell\">cp tracker.conf.sample tracker.conf</code></pre>\n<p>修改 tracker.conf</p>\n<pre><code class=\"shell\">vi tracker.conf\n\nbase_path=/home/yuqing/FastDFS #数据(日志等)存储路径,自己设置\nhttp.server_port=80 #配置 http 端口：</code></pre>\n<h5 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h5><pre><code class=\"shell\">/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf start</code></pre>\n<p>查看端口</p>\n<pre><code class=\"shell\">netstat -nltp</code></pre>\n<p><img src=\"/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577535905825.png\" alt=\"1577535905825\"></p>\n<h4 id=\"storage-安装\"><a href=\"#storage-安装\" class=\"headerlink\" title=\"storage 安装\"></a>storage 安装</h4><ul>\n<li>安装 libevent</li>\n<li>安装 libfastcommon</li>\n<li>编译安装(与tracker相同)</li>\n</ul>\n<h5 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h5><pre><code class=\"shell\">vi storage.conf\n\ngroup_name=group1 #分组,同一分组为设置冗余防止宕机不可用\nbase_path=/home/yuqing/FastDFS #数据存储路径,自己设置\nstore_path0=/home/yuqing/FastDFS #文件存储路径,自己设置\ntracker_server=192.168.101.3:22122 #配置 tracker 服务器:IP\ntracker_server=192.168.1.21:22122 #如果有多个则配置多个 tracker\nhttp.server_port=80</code></pre>\n<h5 id=\"启动-1\"><a href=\"#启动-1\" class=\"headerlink\" title=\"启动\"></a>启动</h5><pre><code class=\"shell\">/usr/bin/fdfs_storaged /etc/fdfs/storage.conf start</code></pre>\n<h5 id=\"分发配置\"><a href=\"#分发配置\" class=\"headerlink\" title=\"分发配置\"></a>分发配置</h5><p>将FastDFS分发到各个节点,并修改配置,分发脚本如下</p>\n<pre><code class=\"shell\">#!/bin/bash\npcount=$#\nif((pcount=0));then\necho no args;\nexit;\nfi\np1=$1\nfname=`basename $p1`\necho fname=$fname\npdir=`cd -P $(dirname $p1);pwd`\necho pdir=$pdir\n\nuser=`whoami`\necho user=$user\nfor((host=1;host&lt;4;host++));do\necho ------------salve$host-------------\nrsync -rvl $pdir/$fname $user@slave$host:$pdir\ndone</code></pre>\n<h3 id=\"利用可通过-usr-bin-fdfs-test-程序测试\"><a href=\"#利用可通过-usr-bin-fdfs-test-程序测试\" class=\"headerlink\" title=\"利用可通过/usr/bin/fdfs_test 程序测试\"></a>利用可通过/usr/bin/fdfs_test 程序测试</h3><p>修改/etc/fdfs/client.conf</p>\n<p>tracker_server 根据自己部署虚拟机的情况配置</p>\n<pre><code class=\"shell\">base_path = /home/yuqing/fastdfs\ntracker-server=192.168.1.21:22122</code></pre>\n<p>使用格式：</p>\n<pre><code class=\"shell\">/usr/bin/fdfs_test 客户端配置文件地址 upload 上传文件</code></pre>\n<p>比如将/home 下的图片上传到 FastDFS 中：</p>\n<pre><code class=\"shell\">/usr/bin/fdfs_test /etc/fdfs/client.conf upload /home/tomcat.png</code></pre>\n<p>打印日志如下:</p>\n<pre><code class=\"html\">This is FastDFS client test program v5.05\n\nCopyright (C) 2008, Happy Fish / YuQing\n\nFastDFS may be copied only under the terms of the GNU General\nPublic License V3, which may be found in the FastDFS source kit.\nPlease visit the FastDFS Home Page http://www.csource.org/ \nfor more detail.\n\n[2019-12-28 20:13:02] DEBUG - base_path=/home/fastdfs, connect_timeout=30, network_timeout=60, tracker_server_count=1, anti_steal_token=0, anti_steal_secret_key length=0, use_connection_pool=0, g_connection_pool_max_idle_time=3600s, use_storage_id=0, storage server id count: 0\n\ntracker_query_storage_store_list_without_group: \n        server 1. group_name=, ip_addr=192.168.1.24, port=23000\n\ngroup_name=group1, ip_addr=192.168.1.24, port=23000\nstorage_upload_by_filename\ngroup_name=group1, remote_filename=M00/00/00/wKgBGF4HRs6AOwJJAAId77F78II587.png\nsource ip address: 192.168.1.24\nfile timestamp=2019-12-28 20:13:02\nfile size=138735\nfile crc32=2977689730\nexample file url: http://192.168.1.24/group1/M00/00/00/wKgBGF4HRs6AOwJJAAId77F78II587.png\nstorage_upload_slave_by_filename\ngroup_name=group1, remote_filename=M00/00/00/wKgBGF4HRs6AOwJJAAId77F78II587_big.png\nsource ip address: 192.168.1.24\nfile timestamp=2019-12-28 20:13:02\nfile size=138735\nfile crc32=2977689730</code></pre>\n<p><a href=\"http://192.168.1.24/group1/M00/00/00/wKgBGF4HRs6AOwJJAAId77F78II587.png\" target=\"_blank\" rel=\"noopener\">http://192.168.1.24/group1/M00/00/00/wKgBGF4HRs6AOwJJAAId77F78II587.png</a><br>就是文件的下载路径。对应服务器的base_path/fdfs_storage/data/00/00/wKgBGF4HRs6AOwJJAAId77F78II587.png文件</p>\n<p>现在还没有和 nginx 整合无法使用 http 下载。</p>\n<h3 id=\"Nginx整合FastDFS\"><a href=\"#Nginx整合FastDFS\" class=\"headerlink\" title=\"Nginx整合FastDFS\"></a>Nginx整合FastDFS</h3><h4 id=\"FastDFS-nginx-module\"><a href=\"#FastDFS-nginx-module\" class=\"headerlink\" title=\"FastDFS-nginx-module\"></a>FastDFS-nginx-module</h4><p>将 FastDFS-nginx-module_v1.16.tar.gz 传 至 fastDFS 的 storage 服 务 器 的</p>\n<p>/usr/local/下，执行如下命令：</p>\n<pre><code class=\"shell\">cd /usr/local\ntar -zxvf FastDFS-nginx-module_v1.16.tar.gz\ncd FastDFS-nginx-module/src\nvi config</code></pre>\n<p><img src=\"/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577536510714.png\" alt=\"1577536510714\"></p>\n<p>将/usr/local修改为/usr，注意这里有三场，不要改漏了。</p>\n<p>将 FastDFS-nginx-module/src 下的 mod_FastDFS.conf 拷贝至/etc/fdfs/下</p>\n<pre><code class=\"shell\">cp mod_FastDFS.conf /etc/fdfs/\nvi /etc/fdfs/mod_FastDFS.conf\n\nbase_path=/home/FastDFS # 保持和之前安装时一致\ntracker_server=192.168.1.21:22122\nurl_have_group_name=true #url 中包含 group 名称\nstore_path0=/home/fastdfs/fdfs_storage #指定文件存储路径,和之前一致</code></pre>\n<p>将 libfdfsclient.so 拷贝至/usr/lib 下</p>\n<pre><code class=\"shell\">cp /usr/lib64/libfdfsclient.so /usr/lib/</code></pre>\n<p>创建 nginx/client 目录</p>\n<pre><code class=\"shell\">mkdir -p /var/temp/nginx/client</code></pre>\n<h4 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h4><p>详细教程可见nginx使用感悟</p>\n<p>将 nginx-1.8.0.tar.gz 拷贝到/usr/local 下</p>\n<p>解压 nginx-1.8.0.tar.gz</p>\n<p>进入 nginx-1.8.0 目录，执行如下配置命令：</p>\n<pre><code class=\"shell\">./configure --add-module=/usr/local/FastDFS-nginx-module/src\nmake make install</code></pre>\n<p>在nginx中增加如下虚拟机配置:</p>\n<p>storage配置:</p>\n<pre><code class=\"xml\">server {\n listen 80;\n server_name 192.168.1.23; 本机ip\n location /group1/M00/{\n root /home/FastDFS/fdfs_storage/data;  #以自己配置的地址为准\n ngx_FastDFS_module;\n } }</code></pre>\n<p>tracker配置:</p>\n<pre><code class=\"xml\">#storage 群 group1 组\nupstream storage_server_group1{\n server 192.168.1.23:80 weight=10;\nserver 192.168.1.24:80 weight=10;\n }\n #storage 群 group2 组\nupstream storage_server_group2{\n server 192.168.1.25:80 weight=10;\n }\n server {\nlisten 80;\nserver_name ccc.test.com;\nlocation /group1{\nproxy_redirect off;\nproxy_set_header Host $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_pass http://storage_server_group1;\n}\nlocation /group2{\nproxy_redirect off;\nproxy_set_header Host $host;\nproxy_set_header X-Real-IP $remote_addr;\nproxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\nproxy_pass http://storage_server_group2; } }</code></pre>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><p>使用浏览器 http 访问文件，这里访问上传图片测试的文件：</p>\n<p>访问 storage：<a href=\"http://192.168.1.24/group1/M00/00/00/wKgBGF4HRs6AOwJJAAId77F78II587.png\" target=\"_blank\" rel=\"noopener\">http://192.168.1.24/group1/M00/00/00/wKgBGF4HRs6AOwJJAAId77F78II587.png</a></p>\n<p><img src=\"/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577537632508.png\" alt=\"1577537632508\"></p>\n<p>ip 地址改为 192.168.1.24也可以访问到文件，因为同一个分组的 storage 文件互相同步。</p>\n<h3 id=\"编写java代码上传下载文件\"><a href=\"#编写java代码上传下载文件\" class=\"headerlink\" title=\"编写java代码上传下载文件\"></a>编写java代码上传下载文件</h3><p><strong>SpringBoot测试方案</strong></p>\n<p>引入依赖</p>\n<pre><code class=\"xml\">&lt;dependency&gt;\n    &lt;groupId&gt;net.oschina.zcx7878&lt;/groupId&gt;\n    &lt;artifactId&gt;fastdfs-client-java&lt;/artifactId&gt;\n    &lt;version&gt;1.27.0.0&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n<pre><code class=\"java\">@SpringBootTest\n@RunWith(SpringRunner.class)\npublic class TestFastDFS {\n\n    @Test\n    public void upload() throws IOException, MyException {\n        //加载fastdfs-client.properties配置文件\n        ClientGlobal.initByProperties(&quot;config/fastdfs-client.properties&quot;);\n\n        //定义TrackerClient,用于请求TrackerClient\n        TrackerClient trackerClient = new TrackerClient();\n        //创建TrackerServer\n        TrackerServer trackerServer = trackerClient.getConnection();\n        //通过TrackerServer获取storeServer\n        StorageServer storeServer = trackerClient.getStoreStorage(trackerServer);\n        //通过TrackerServer and storeServer 创建storageClient1\n        StorageClient1 storageClient1 = new StorageClient1(trackerServer, storeServer);\n        //fileId group1/M00/00/00/wKgBF13ebJuALXhqAAI6t5YoKLQ94..log\n        String fileId = storageClient1.upload_file1(&quot;C:\\\\Users\\\\tiger\\\\Pictures\\\\Feedback\\\\{A687785D-19C3-4B2E-A00A-2667141271EB}\\\\Capture001.png&quot;, &quot;.png&quot;, null);\n\n        System.out.println(fileId);\n        //获取tracker客户端\n    }\n\n    @Test\n    public void download() throws IOException, MyException {\n        //加载fastdfs-client.properties配置文件\n        ClientGlobal.initByProperties(&quot;config/fastdfs-client.properties&quot;);\n\n        //定义TrackerClient,用于请求TrackerClient\n        TrackerClient trackerClient = new TrackerClient();\n        //创建TrackerServer\n        TrackerServer trackerServer = trackerClient.getConnection();\n        //通过TrackerServer获取storeServer\n        StorageServer storeServer = trackerClient.getStoreStorage(trackerServer);\n        //通过TrackerServer and storeServer 创建storageClient1\n        StorageClient1 storageClient1 = new StorageClient1(trackerServer, storeServer);\n        //fileId group1/M00/00/00/wKgBF13ebJuALXhqAAI6t5YoKLQ94..log\n        byte[] bytes = storageClient1.download_file1(&quot;group1/M00/00/00/wKgBF13ebJuALXhqAAI6t5YoKLQ94..log&quot;);\n        FileOutputStream fos = new FileOutputStream(new File(&quot;hello&quot;));\n        fos.write(bytes);\n    }\n}</code></pre>\n<p>config/fastdfs-client.properties</p>\n<pre><code class=\"properties\">fastdfs.connect_timeout_in_seconds = 5\nfastdfs.network_timeout_in_seconds = 30\nfastdfs.charset = UTF-8\nfastdfs.tracker_servers = 192.168.1.21:22122</code></pre>\n<p>运行upload得到路径</p>\n<pre><code>group1/M00/00/00/wKgBGF4HUZiAOKLgAB7xNcvo_Vw00..png\n根据自己配置的路径可以得到访问的http协议路径为:\nhttp://192.168.1.21/group1/M00/00/00/wKgBGF4HUZiAOKLgAB7xNcvo_Vw00..png</code></pre><p>效果如下</p>\n<p><img src=\"/2019/12/28/fastdfs-fen-bu-shi-wen-jian-xi-tong-an-zhuang-shi-yong-jiao-cheng/1577538377340.png\" alt=\"1577538377340\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><strong>FastDFS相对于HDFS等分布式文件的优势在于它不切分文件,所以下载文件的时候没有拼装文件的过程,而且可以锁定一台机器进行网络I/O,所以速度很快.不过正所谓这也是它的缺点,这导致它不能用于存储大文件.所以FastDFS适合存储大量图片小视频之类的文件.</strong></p>\n<h3 id=\"安装过程遇到的一些问题\"><a href=\"#安装过程遇到的一些问题\" class=\"headerlink\" title=\"安装过程遇到的一些问题\"></a>安装过程遇到的一些问题</h3><p>①安装nginx No rule to make target “/usr/local/fastdfs-nginx-module/src/ngx_http_fastdfs_module.c”, needed by objs/addon/src/ngx_http_fastdfs_module.o . Stop. 修改fastdfs-nginx-module/src/config文件中的路径,删除local(注意一共有三个)</p>\n<p>②nginx安装cp: <code>conf/koi-win&#39; and</code>/usr/local/nginx/conf/koi-win’ are the same file 解决 将./configure –prefix=/usr/local/nginx 改为 ./configure –prefix=/usr/local/nginx –conf-path=/usr/local/nginx/nginx.conf</p>\n<p>③nginx编码严格.直接复制会出现nginx: [emerg] unknown directive “ “ in /usr/local/nginx-1.12.0-storage/conf/nginx.conf:49）：所以需要手动输入nginx.conf</p>\n"},{"title":"ElasticSearch原理及基本使用","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-27T15:00:03.000Z","password":null,"summary":null,"_content":"\n# ElasticSearch基本原理\n\n### ElasticSearch 基本原理\n\n#### 搜索原理\n\nElasticSearch简介\n\n- `ElasticSearch`就是独立的网络上的一个或一组进程节点\n- 它能对外提供搜索服务（使用`http`或`transport`协议），自从`ElasticSearch 7.0`开始，主要支持`http`协议\n- `ElaticSearch`对内其实就是一个数据库\n\n#### 分词\n\n搜索是以词为单位做最基本单位的搜索单元，依赖分词器构建分词，用分词器倒排索引。\n\n![](ElasticSearch原理及基本使用/1.png)\n\n#### 倒排索引\n\n- 正向索引\n\n  ```html\n  对文档中的所有分词进行遍历，获取与 keyword 中分词相同的词，命中一次，这种索引方法需要对每一个文档都进行遍历，性能上不是很好。\n  ```\n\n  ​\n\n  ![](ElasticSearch原理及基本使用/2.png)\n\n  ​\n\n- 倒排索引\n\n  ```html\n  对文档的分词结果进行遍历，如果 keyword 命中该分词，那么通过该分词便可以找到所有含有这个分词的文档，性能相对较高。\n  ```\n\n  ​\n\n  ![](ElasticSearch原理及基本使用/3.png)\n\n  ​\n\n### TF/IDF打分\n\n```html\nTF：词频，这个 document 文档包含了多少个这个词，包含越多表名越相关\nDF：文档频率，包含该词的文档总数目\nIDF：DF 取反\n```\n\n| 单词 ID | 单词     | 文档频率 | 倒排列表（DocID;TF;<POS>）                                   |\n| ------- | -------- | -------- | ------------------------------------------------------------ |\n| 1       | 谷歌     | 5        | （1;1;<1>），（2;1;<1>），（3;2;<1;6>），（4;1;<1>），（5;1;<1>） |\n| 2       | 地图     | 5        | （1;1;<2>），（2;1;<2>），（3;1;<2>），（4;1;<2>），（5;1;<2>） |\n| 3       | 之父     | 4        | （1;1;<3>），（2;1;<3>），（4;1;<3>），（5;1;<3>）           |\n| 4       | 跳槽     | 2        | （1;1;<4>），（4;1;<4>）                                     |\n| 5       | Facebook | 5        | （1;1;<5>），（2;1;<5>），（3;1;<8>），（4;1;<5>），（5;1;<8>） |\n| 6       | 加盟     | 3        | （2;1;<4>），（3;1;<7>），（5;1;<5>）                        |\n| 7       | 创始人   | 1        | （3;1;<3>）                                                  |\n| 8       | 拉斯     | 2        | （3;1;<4>），（5;1;<4>）                                     |\n| 9       | 离开     | 1        | （3;1;<5>）                                                  |\n| 10      | 与       | 1        | （4;1;<6>）                                                  |\n\n### 名词定义\n\n在`ElasticSearch`中的`索引=数据库，类型=表，文档=行数据`，在`ElasticSearch 7.0`逐步的废弃了类型这样一个定义，也就是说索引和类型统称为索引，也就是说在`ElasticSearch 7.0`中只有索引和文档的定义，其中索引相当于索引和类型。\n\n与关系型数据库的名词之间的类比：\n\n| 关系型数据库            | ElasticSearch         |\n| ----------------------- | --------------------- |\n| Database                | Index                 |\n| Table                   | Type                  |\n| Row                     | Document              |\n| Column                  | Field                 |\n| Schema                  | Mapping               |\n| Index                   | Everything is indexed |\n| SQL                     | Query DSL             |\n| SELECT * FROM table ... | GET http://...        |\n| UPDATE table SET ...    | PUT http://...        |\n\n### 分布式原理\n\n#### 分片\n\nElasticSearch 中默认的主分片（num_of_shards）数量为 5，默认的副本（num_of_replicas）个数为 1\n主分片数量一旦设置就不会再改变，但是副本个数可以进行改变\n\n在单集群节点中，如果主分片数量为 1，副本也为 1，那么此时单节点集群的 health 为 yellow，因为单节点必然会存在副本和主分片在同一个节点，会导致该索引的 health 为 yellow。此时可以修改集群的副本个数为 0，则索引和集群的状态会变回到 green 状态。\n\n#### 主从\n\n>单节点集群中，如果创建了一个索引，默认会拥有副本，此时由于副本和主分片在一个节点，则单节点集群的 health 为 yellow。创建索引时，根据未来的扩展性，将主分片个数设置为合适的个数，但也不能太多，因为数量太多，如果数据量没有达到对应的瓶颈，在进行数据聚合时，就需要遍历所有的主分片，才能得到结果。\n>\n>**双节点集群**\n>当新增一个集群节点的，此时节点集群会将副本全部存放到新增的节点上，此时如果索引的副本个数为 1 时，那么此时集群的状态会变成 green。\n>\n>**三节点集群**\n>当继续新增一个集群节点时，此时节点集群会使用负载均衡，将某个索引的主分片会迁移到新增的节点上，会将部分的副本也迁移到新增的节点上\n>\n>**三台节点构成 es 集群**\n>**副本个数为 2 时**\n>此时 es 集群会将副本个数分别存放于另外两个节点之上，这两个节点中并没有改索引的主分片，此时主从分离，读写也分离。es 集群其实是一个对称的结构，es 集群的 master 用来管理所有负载的一个核心节点，也就是说如果要进行写操作，如果要写的索引的主分片就在 master 上，那么就可以直接进行写请求；如果写的索引在另一个节点上，那么 master 会将这个写请求进行转发，转发到要写的主分片所在的节点，由该节点进行写请求。\n>\n>**当关掉此时的 master 节点时**\n>此时 es 集群会进行选举，选举一个新的 master 节点，会比较剩余的节点中的 metadata 是最新的，就会通过 paxos 方式从具备竞争主节点能力的机器中竞选主节点。此时被关掉的 master 上存在的主分片会均匀的分布到剩余的集群节点上，此时由于副本个数为 2，所以集群的状态又会变成 yellow，但是集群对外响应服务的能力还是有的。\n>\n>**三台节点构成 es 集群，并且状态为 green**\n>**PUT 请求**\n>当有操作请求集群进行新建索引操作时，无论请求的是 es 集群的那个节点，都会将该请求转发到 master 节点，因为只有 master 节点知道所有的 metadata 存储的位置，此时 master 会对进行写请求的操作进行识别，如果写请求的 documenId 识别是在 master 节点上，那么由 master 节点进行写操作，如果在 node3 上，就会将该写请求进行转发，转发到 node3，由 node3 完成写请求。写操作完成之后，node3 会异步的将数据改动同步回其对应的副本。\n>**GET 请求**\n>进行读请求时，master 会进行一次路由计算，计算出该读请求属于 R0 副本的操作，假设 master 节点上也存在 R0 副本，假设上一次的操作是在 master 节点上进行，那么 es 集群会根据负载均衡，将该读请求转发到另一个存在 R0 副本的节点上。如果读请求第一次命中在别的节点上，但是由于是读请求，可以由每个节点进行路由操作。\n>**总结**\n>也就是说，master 节点只路由读请求，所有的写请求可以由其命中的节点进行处理，此时整个 es 集群就做到了负载均衡和读写分离。\n\n**思考:为什么es开始的时候特别慢,用一会儿就很快了?**\n\n其实es的数据本来大部分存在磁盘上,操作系统存在一个系统缓存,加载使用后的数据会放在里面,访问速度远远大于直接从磁盘读取.","source":"_posts/ElasticSearch原理及基本使用.md","raw":"---\ntitle: ElasticSearch原理及基本使用\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-27 23:00:03\npassword:\nsummary:\ntags:\ncategories: tool\n---\n\n# ElasticSearch基本原理\n\n### ElasticSearch 基本原理\n\n#### 搜索原理\n\nElasticSearch简介\n\n- `ElasticSearch`就是独立的网络上的一个或一组进程节点\n- 它能对外提供搜索服务（使用`http`或`transport`协议），自从`ElasticSearch 7.0`开始，主要支持`http`协议\n- `ElaticSearch`对内其实就是一个数据库\n\n#### 分词\n\n搜索是以词为单位做最基本单位的搜索单元，依赖分词器构建分词，用分词器倒排索引。\n\n![](ElasticSearch原理及基本使用/1.png)\n\n#### 倒排索引\n\n- 正向索引\n\n  ```html\n  对文档中的所有分词进行遍历，获取与 keyword 中分词相同的词，命中一次，这种索引方法需要对每一个文档都进行遍历，性能上不是很好。\n  ```\n\n  ​\n\n  ![](ElasticSearch原理及基本使用/2.png)\n\n  ​\n\n- 倒排索引\n\n  ```html\n  对文档的分词结果进行遍历，如果 keyword 命中该分词，那么通过该分词便可以找到所有含有这个分词的文档，性能相对较高。\n  ```\n\n  ​\n\n  ![](ElasticSearch原理及基本使用/3.png)\n\n  ​\n\n### TF/IDF打分\n\n```html\nTF：词频，这个 document 文档包含了多少个这个词，包含越多表名越相关\nDF：文档频率，包含该词的文档总数目\nIDF：DF 取反\n```\n\n| 单词 ID | 单词     | 文档频率 | 倒排列表（DocID;TF;<POS>）                                   |\n| ------- | -------- | -------- | ------------------------------------------------------------ |\n| 1       | 谷歌     | 5        | （1;1;<1>），（2;1;<1>），（3;2;<1;6>），（4;1;<1>），（5;1;<1>） |\n| 2       | 地图     | 5        | （1;1;<2>），（2;1;<2>），（3;1;<2>），（4;1;<2>），（5;1;<2>） |\n| 3       | 之父     | 4        | （1;1;<3>），（2;1;<3>），（4;1;<3>），（5;1;<3>）           |\n| 4       | 跳槽     | 2        | （1;1;<4>），（4;1;<4>）                                     |\n| 5       | Facebook | 5        | （1;1;<5>），（2;1;<5>），（3;1;<8>），（4;1;<5>），（5;1;<8>） |\n| 6       | 加盟     | 3        | （2;1;<4>），（3;1;<7>），（5;1;<5>）                        |\n| 7       | 创始人   | 1        | （3;1;<3>）                                                  |\n| 8       | 拉斯     | 2        | （3;1;<4>），（5;1;<4>）                                     |\n| 9       | 离开     | 1        | （3;1;<5>）                                                  |\n| 10      | 与       | 1        | （4;1;<6>）                                                  |\n\n### 名词定义\n\n在`ElasticSearch`中的`索引=数据库，类型=表，文档=行数据`，在`ElasticSearch 7.0`逐步的废弃了类型这样一个定义，也就是说索引和类型统称为索引，也就是说在`ElasticSearch 7.0`中只有索引和文档的定义，其中索引相当于索引和类型。\n\n与关系型数据库的名词之间的类比：\n\n| 关系型数据库            | ElasticSearch         |\n| ----------------------- | --------------------- |\n| Database                | Index                 |\n| Table                   | Type                  |\n| Row                     | Document              |\n| Column                  | Field                 |\n| Schema                  | Mapping               |\n| Index                   | Everything is indexed |\n| SQL                     | Query DSL             |\n| SELECT * FROM table ... | GET http://...        |\n| UPDATE table SET ...    | PUT http://...        |\n\n### 分布式原理\n\n#### 分片\n\nElasticSearch 中默认的主分片（num_of_shards）数量为 5，默认的副本（num_of_replicas）个数为 1\n主分片数量一旦设置就不会再改变，但是副本个数可以进行改变\n\n在单集群节点中，如果主分片数量为 1，副本也为 1，那么此时单节点集群的 health 为 yellow，因为单节点必然会存在副本和主分片在同一个节点，会导致该索引的 health 为 yellow。此时可以修改集群的副本个数为 0，则索引和集群的状态会变回到 green 状态。\n\n#### 主从\n\n>单节点集群中，如果创建了一个索引，默认会拥有副本，此时由于副本和主分片在一个节点，则单节点集群的 health 为 yellow。创建索引时，根据未来的扩展性，将主分片个数设置为合适的个数，但也不能太多，因为数量太多，如果数据量没有达到对应的瓶颈，在进行数据聚合时，就需要遍历所有的主分片，才能得到结果。\n>\n>**双节点集群**\n>当新增一个集群节点的，此时节点集群会将副本全部存放到新增的节点上，此时如果索引的副本个数为 1 时，那么此时集群的状态会变成 green。\n>\n>**三节点集群**\n>当继续新增一个集群节点时，此时节点集群会使用负载均衡，将某个索引的主分片会迁移到新增的节点上，会将部分的副本也迁移到新增的节点上\n>\n>**三台节点构成 es 集群**\n>**副本个数为 2 时**\n>此时 es 集群会将副本个数分别存放于另外两个节点之上，这两个节点中并没有改索引的主分片，此时主从分离，读写也分离。es 集群其实是一个对称的结构，es 集群的 master 用来管理所有负载的一个核心节点，也就是说如果要进行写操作，如果要写的索引的主分片就在 master 上，那么就可以直接进行写请求；如果写的索引在另一个节点上，那么 master 会将这个写请求进行转发，转发到要写的主分片所在的节点，由该节点进行写请求。\n>\n>**当关掉此时的 master 节点时**\n>此时 es 集群会进行选举，选举一个新的 master 节点，会比较剩余的节点中的 metadata 是最新的，就会通过 paxos 方式从具备竞争主节点能力的机器中竞选主节点。此时被关掉的 master 上存在的主分片会均匀的分布到剩余的集群节点上，此时由于副本个数为 2，所以集群的状态又会变成 yellow，但是集群对外响应服务的能力还是有的。\n>\n>**三台节点构成 es 集群，并且状态为 green**\n>**PUT 请求**\n>当有操作请求集群进行新建索引操作时，无论请求的是 es 集群的那个节点，都会将该请求转发到 master 节点，因为只有 master 节点知道所有的 metadata 存储的位置，此时 master 会对进行写请求的操作进行识别，如果写请求的 documenId 识别是在 master 节点上，那么由 master 节点进行写操作，如果在 node3 上，就会将该写请求进行转发，转发到 node3，由 node3 完成写请求。写操作完成之后，node3 会异步的将数据改动同步回其对应的副本。\n>**GET 请求**\n>进行读请求时，master 会进行一次路由计算，计算出该读请求属于 R0 副本的操作，假设 master 节点上也存在 R0 副本，假设上一次的操作是在 master 节点上进行，那么 es 集群会根据负载均衡，将该读请求转发到另一个存在 R0 副本的节点上。如果读请求第一次命中在别的节点上，但是由于是读请求，可以由每个节点进行路由操作。\n>**总结**\n>也就是说，master 节点只路由读请求，所有的写请求可以由其命中的节点进行处理，此时整个 es 集群就做到了负载均衡和读写分离。\n\n**思考:为什么es开始的时候特别慢,用一会儿就很快了?**\n\n其实es的数据本来大部分存在磁盘上,操作系统存在一个系统缓存,加载使用后的数据会放在里面,访问速度远远大于直接从磁盘读取.","slug":"ElasticSearch原理及基本使用","published":1,"updated":"2021-04-29T10:50:22.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6ml7b0003vkvyhhn0ijd9","content":"<h1 id=\"ElasticSearch基本原理\"><a href=\"#ElasticSearch基本原理\" class=\"headerlink\" title=\"ElasticSearch基本原理\"></a>ElasticSearch基本原理</h1><h3 id=\"ElasticSearch-基本原理\"><a href=\"#ElasticSearch-基本原理\" class=\"headerlink\" title=\"ElasticSearch 基本原理\"></a>ElasticSearch 基本原理</h3><h4 id=\"搜索原理\"><a href=\"#搜索原理\" class=\"headerlink\" title=\"搜索原理\"></a>搜索原理</h4><p>ElasticSearch简介</p>\n<ul>\n<li><code>ElasticSearch</code>就是独立的网络上的一个或一组进程节点</li>\n<li>它能对外提供搜索服务（使用<code>http</code>或<code>transport</code>协议），自从<code>ElasticSearch 7.0</code>开始，主要支持<code>http</code>协议</li>\n<li><code>ElaticSearch</code>对内其实就是一个数据库</li>\n</ul>\n<h4 id=\"分词\"><a href=\"#分词\" class=\"headerlink\" title=\"分词\"></a>分词</h4><p>搜索是以词为单位做最基本单位的搜索单元，依赖分词器构建分词，用分词器倒排索引。</p>\n<p><img src=\"/2019/12/27/elasticsearch-yuan-li-ji-ji-ben-shi-yong/1.png\" alt></p>\n<h4 id=\"倒排索引\"><a href=\"#倒排索引\" class=\"headerlink\" title=\"倒排索引\"></a>倒排索引</h4><ul>\n<li><p>正向索引</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">对文档中的所有分词进行遍历，获取与 keyword 中分词相同的词，命中一次，这种索引方法需要对每一个文档都进行遍历，性能上不是很好。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>​</p>\n<p><img src=\"/2019/12/27/elasticsearch-yuan-li-ji-ji-ben-shi-yong/2.png\" alt></p>\n<p>​</p>\n</li>\n<li><p>倒排索引</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">对文档的分词结果进行遍历，如果 keyword 命中该分词，那么通过该分词便可以找到所有含有这个分词的文档，性能相对较高。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>​</p>\n<p><img src=\"/2019/12/27/elasticsearch-yuan-li-ji-ji-ben-shi-yong/3.png\" alt></p>\n<p>​</p>\n</li>\n</ul>\n<h3 id=\"TF-IDF打分\"><a href=\"#TF-IDF打分\" class=\"headerlink\" title=\"TF/IDF打分\"></a>TF/IDF打分</h3><pre class=\"line-numbers language-html\"><code class=\"language-html\">TF：词频，这个 document 文档包含了多少个这个词，包含越多表名越相关\nDF：文档频率，包含该词的文档总数目\nIDF：DF 取反<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<table>\n<thead>\n<tr>\n<th>单词 ID</th>\n<th>单词</th>\n<th>文档频率</th>\n<th>倒排列表（DocID;TF;<pos>）</pos></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>谷歌</td>\n<td>5</td>\n<td>（1;1;&lt;1&gt;），（2;1;&lt;1&gt;），（3;2;&lt;1;6&gt;），（4;1;&lt;1&gt;），（5;1;&lt;1&gt;）</td>\n</tr>\n<tr>\n<td>2</td>\n<td>地图</td>\n<td>5</td>\n<td>（1;1;&lt;2&gt;），（2;1;&lt;2&gt;），（3;1;&lt;2&gt;），（4;1;&lt;2&gt;），（5;1;&lt;2&gt;）</td>\n</tr>\n<tr>\n<td>3</td>\n<td>之父</td>\n<td>4</td>\n<td>（1;1;&lt;3&gt;），（2;1;&lt;3&gt;），（4;1;&lt;3&gt;），（5;1;&lt;3&gt;）</td>\n</tr>\n<tr>\n<td>4</td>\n<td>跳槽</td>\n<td>2</td>\n<td>（1;1;&lt;4&gt;），（4;1;&lt;4&gt;）</td>\n</tr>\n<tr>\n<td>5</td>\n<td>Facebook</td>\n<td>5</td>\n<td>（1;1;&lt;5&gt;），（2;1;&lt;5&gt;），（3;1;&lt;8&gt;），（4;1;&lt;5&gt;），（5;1;&lt;8&gt;）</td>\n</tr>\n<tr>\n<td>6</td>\n<td>加盟</td>\n<td>3</td>\n<td>（2;1;&lt;4&gt;），（3;1;&lt;7&gt;），（5;1;&lt;5&gt;）</td>\n</tr>\n<tr>\n<td>7</td>\n<td>创始人</td>\n<td>1</td>\n<td>（3;1;&lt;3&gt;）</td>\n</tr>\n<tr>\n<td>8</td>\n<td>拉斯</td>\n<td>2</td>\n<td>（3;1;&lt;4&gt;），（5;1;&lt;4&gt;）</td>\n</tr>\n<tr>\n<td>9</td>\n<td>离开</td>\n<td>1</td>\n<td>（3;1;&lt;5&gt;）</td>\n</tr>\n<tr>\n<td>10</td>\n<td>与</td>\n<td>1</td>\n<td>（4;1;&lt;6&gt;）</td>\n</tr>\n</tbody></table>\n<h3 id=\"名词定义\"><a href=\"#名词定义\" class=\"headerlink\" title=\"名词定义\"></a>名词定义</h3><p>在<code>ElasticSearch</code>中的<code>索引=数据库，类型=表，文档=行数据</code>，在<code>ElasticSearch 7.0</code>逐步的废弃了类型这样一个定义，也就是说索引和类型统称为索引，也就是说在<code>ElasticSearch 7.0</code>中只有索引和文档的定义，其中索引相当于索引和类型。</p>\n<p>与关系型数据库的名词之间的类比：</p>\n<table>\n<thead>\n<tr>\n<th>关系型数据库</th>\n<th>ElasticSearch</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Database</td>\n<td>Index</td>\n</tr>\n<tr>\n<td>Table</td>\n<td>Type</td>\n</tr>\n<tr>\n<td>Row</td>\n<td>Document</td>\n</tr>\n<tr>\n<td>Column</td>\n<td>Field</td>\n</tr>\n<tr>\n<td>Schema</td>\n<td>Mapping</td>\n</tr>\n<tr>\n<td>Index</td>\n<td>Everything is indexed</td>\n</tr>\n<tr>\n<td>SQL</td>\n<td>Query DSL</td>\n</tr>\n<tr>\n<td>SELECT * FROM table …</td>\n<td>GET http://…</td>\n</tr>\n<tr>\n<td>UPDATE table SET …</td>\n<td>PUT http://…</td>\n</tr>\n</tbody></table>\n<h3 id=\"分布式原理\"><a href=\"#分布式原理\" class=\"headerlink\" title=\"分布式原理\"></a>分布式原理</h3><h4 id=\"分片\"><a href=\"#分片\" class=\"headerlink\" title=\"分片\"></a>分片</h4><p>ElasticSearch 中默认的主分片（num_of_shards）数量为 5，默认的副本（num_of_replicas）个数为 1<br>主分片数量一旦设置就不会再改变，但是副本个数可以进行改变</p>\n<p>在单集群节点中，如果主分片数量为 1，副本也为 1，那么此时单节点集群的 health 为 yellow，因为单节点必然会存在副本和主分片在同一个节点，会导致该索引的 health 为 yellow。此时可以修改集群的副本个数为 0，则索引和集群的状态会变回到 green 状态。</p>\n<h4 id=\"主从\"><a href=\"#主从\" class=\"headerlink\" title=\"主从\"></a>主从</h4><blockquote>\n<p>单节点集群中，如果创建了一个索引，默认会拥有副本，此时由于副本和主分片在一个节点，则单节点集群的 health 为 yellow。创建索引时，根据未来的扩展性，将主分片个数设置为合适的个数，但也不能太多，因为数量太多，如果数据量没有达到对应的瓶颈，在进行数据聚合时，就需要遍历所有的主分片，才能得到结果。</p>\n<p><strong>双节点集群</strong><br>当新增一个集群节点的，此时节点集群会将副本全部存放到新增的节点上，此时如果索引的副本个数为 1 时，那么此时集群的状态会变成 green。</p>\n<p><strong>三节点集群</strong><br>当继续新增一个集群节点时，此时节点集群会使用负载均衡，将某个索引的主分片会迁移到新增的节点上，会将部分的副本也迁移到新增的节点上</p>\n<p><strong>三台节点构成 es 集群</strong><br><strong>副本个数为 2 时</strong><br>此时 es 集群会将副本个数分别存放于另外两个节点之上，这两个节点中并没有改索引的主分片，此时主从分离，读写也分离。es 集群其实是一个对称的结构，es 集群的 master 用来管理所有负载的一个核心节点，也就是说如果要进行写操作，如果要写的索引的主分片就在 master 上，那么就可以直接进行写请求；如果写的索引在另一个节点上，那么 master 会将这个写请求进行转发，转发到要写的主分片所在的节点，由该节点进行写请求。</p>\n<p><strong>当关掉此时的 master 节点时</strong><br>此时 es 集群会进行选举，选举一个新的 master 节点，会比较剩余的节点中的 metadata 是最新的，就会通过 paxos 方式从具备竞争主节点能力的机器中竞选主节点。此时被关掉的 master 上存在的主分片会均匀的分布到剩余的集群节点上，此时由于副本个数为 2，所以集群的状态又会变成 yellow，但是集群对外响应服务的能力还是有的。</p>\n<p><strong>三台节点构成 es 集群，并且状态为 green</strong><br><strong>PUT 请求</strong><br>当有操作请求集群进行新建索引操作时，无论请求的是 es 集群的那个节点，都会将该请求转发到 master 节点，因为只有 master 节点知道所有的 metadata 存储的位置，此时 master 会对进行写请求的操作进行识别，如果写请求的 documenId 识别是在 master 节点上，那么由 master 节点进行写操作，如果在 node3 上，就会将该写请求进行转发，转发到 node3，由 node3 完成写请求。写操作完成之后，node3 会异步的将数据改动同步回其对应的副本。<br><strong>GET 请求</strong><br>进行读请求时，master 会进行一次路由计算，计算出该读请求属于 R0 副本的操作，假设 master 节点上也存在 R0 副本，假设上一次的操作是在 master 节点上进行，那么 es 集群会根据负载均衡，将该读请求转发到另一个存在 R0 副本的节点上。如果读请求第一次命中在别的节点上，但是由于是读请求，可以由每个节点进行路由操作。<br><strong>总结</strong><br>也就是说，master 节点只路由读请求，所有的写请求可以由其命中的节点进行处理，此时整个 es 集群就做到了负载均衡和读写分离。</p>\n</blockquote>\n<p><strong>思考:为什么es开始的时候特别慢,用一会儿就很快了?</strong></p>\n<p>其实es的数据本来大部分存在磁盘上,操作系统存在一个系统缓存,加载使用后的数据会放在里面,访问速度远远大于直接从磁盘读取.</p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h1 id=\"ElasticSearch基本原理\"><a href=\"#ElasticSearch基本原理\" class=\"headerlink\" title=\"ElasticSearch基本原理\"></a>ElasticSearch基本原理</h1><h3 id=\"ElasticSearch-基本原理\"><a href=\"#ElasticSearch-基本原理\" class=\"headerlink\" title=\"ElasticSearch 基本原理\"></a>ElasticSearch 基本原理</h3><h4 id=\"搜索原理\"><a href=\"#搜索原理\" class=\"headerlink\" title=\"搜索原理\"></a>搜索原理</h4><p>ElasticSearch简介</p>\n<ul>\n<li><code>ElasticSearch</code>就是独立的网络上的一个或一组进程节点</li>\n<li>它能对外提供搜索服务（使用<code>http</code>或<code>transport</code>协议），自从<code>ElasticSearch 7.0</code>开始，主要支持<code>http</code>协议</li>\n<li><code>ElaticSearch</code>对内其实就是一个数据库</li>\n</ul>\n<h4 id=\"分词\"><a href=\"#分词\" class=\"headerlink\" title=\"分词\"></a>分词</h4><p>搜索是以词为单位做最基本单位的搜索单元，依赖分词器构建分词，用分词器倒排索引。</p>\n<p><img src=\"/2019/12/27/elasticsearch-yuan-li-ji-ji-ben-shi-yong/1.png\" alt></p>\n<h4 id=\"倒排索引\"><a href=\"#倒排索引\" class=\"headerlink\" title=\"倒排索引\"></a>倒排索引</h4><ul>\n<li><p>正向索引</p>\n<pre><code class=\"html\">对文档中的所有分词进行遍历，获取与 keyword 中分词相同的词，命中一次，这种索引方法需要对每一个文档都进行遍历，性能上不是很好。</code></pre>\n<p>​</p>\n<p><img src=\"/2019/12/27/elasticsearch-yuan-li-ji-ji-ben-shi-yong/2.png\" alt></p>\n<p>​</p>\n</li>\n<li><p>倒排索引</p>\n<pre><code class=\"html\">对文档的分词结果进行遍历，如果 keyword 命中该分词，那么通过该分词便可以找到所有含有这个分词的文档，性能相对较高。</code></pre>\n<p>​</p>\n<p><img src=\"/2019/12/27/elasticsearch-yuan-li-ji-ji-ben-shi-yong/3.png\" alt></p>\n<p>​</p>\n</li>\n</ul>\n<h3 id=\"TF-IDF打分\"><a href=\"#TF-IDF打分\" class=\"headerlink\" title=\"TF/IDF打分\"></a>TF/IDF打分</h3><pre><code class=\"html\">TF：词频，这个 document 文档包含了多少个这个词，包含越多表名越相关\nDF：文档频率，包含该词的文档总数目\nIDF：DF 取反</code></pre>\n<table>\n<thead>\n<tr>\n<th>单词 ID</th>\n<th>单词</th>\n<th>文档频率</th>\n<th>倒排列表（DocID;TF;<pos>）</pos></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>谷歌</td>\n<td>5</td>\n<td>（1;1;&lt;1&gt;），（2;1;&lt;1&gt;），（3;2;&lt;1;6&gt;），（4;1;&lt;1&gt;），（5;1;&lt;1&gt;）</td>\n</tr>\n<tr>\n<td>2</td>\n<td>地图</td>\n<td>5</td>\n<td>（1;1;&lt;2&gt;），（2;1;&lt;2&gt;），（3;1;&lt;2&gt;），（4;1;&lt;2&gt;），（5;1;&lt;2&gt;）</td>\n</tr>\n<tr>\n<td>3</td>\n<td>之父</td>\n<td>4</td>\n<td>（1;1;&lt;3&gt;），（2;1;&lt;3&gt;），（4;1;&lt;3&gt;），（5;1;&lt;3&gt;）</td>\n</tr>\n<tr>\n<td>4</td>\n<td>跳槽</td>\n<td>2</td>\n<td>（1;1;&lt;4&gt;），（4;1;&lt;4&gt;）</td>\n</tr>\n<tr>\n<td>5</td>\n<td>Facebook</td>\n<td>5</td>\n<td>（1;1;&lt;5&gt;），（2;1;&lt;5&gt;），（3;1;&lt;8&gt;），（4;1;&lt;5&gt;），（5;1;&lt;8&gt;）</td>\n</tr>\n<tr>\n<td>6</td>\n<td>加盟</td>\n<td>3</td>\n<td>（2;1;&lt;4&gt;），（3;1;&lt;7&gt;），（5;1;&lt;5&gt;）</td>\n</tr>\n<tr>\n<td>7</td>\n<td>创始人</td>\n<td>1</td>\n<td>（3;1;&lt;3&gt;）</td>\n</tr>\n<tr>\n<td>8</td>\n<td>拉斯</td>\n<td>2</td>\n<td>（3;1;&lt;4&gt;），（5;1;&lt;4&gt;）</td>\n</tr>\n<tr>\n<td>9</td>\n<td>离开</td>\n<td>1</td>\n<td>（3;1;&lt;5&gt;）</td>\n</tr>\n<tr>\n<td>10</td>\n<td>与</td>\n<td>1</td>\n<td>（4;1;&lt;6&gt;）</td>\n</tr>\n</tbody></table>\n<h3 id=\"名词定义\"><a href=\"#名词定义\" class=\"headerlink\" title=\"名词定义\"></a>名词定义</h3><p>在<code>ElasticSearch</code>中的<code>索引=数据库，类型=表，文档=行数据</code>，在<code>ElasticSearch 7.0</code>逐步的废弃了类型这样一个定义，也就是说索引和类型统称为索引，也就是说在<code>ElasticSearch 7.0</code>中只有索引和文档的定义，其中索引相当于索引和类型。</p>\n<p>与关系型数据库的名词之间的类比：</p>\n<table>\n<thead>\n<tr>\n<th>关系型数据库</th>\n<th>ElasticSearch</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Database</td>\n<td>Index</td>\n</tr>\n<tr>\n<td>Table</td>\n<td>Type</td>\n</tr>\n<tr>\n<td>Row</td>\n<td>Document</td>\n</tr>\n<tr>\n<td>Column</td>\n<td>Field</td>\n</tr>\n<tr>\n<td>Schema</td>\n<td>Mapping</td>\n</tr>\n<tr>\n<td>Index</td>\n<td>Everything is indexed</td>\n</tr>\n<tr>\n<td>SQL</td>\n<td>Query DSL</td>\n</tr>\n<tr>\n<td>SELECT * FROM table …</td>\n<td>GET http://…</td>\n</tr>\n<tr>\n<td>UPDATE table SET …</td>\n<td>PUT http://…</td>\n</tr>\n</tbody></table>\n<h3 id=\"分布式原理\"><a href=\"#分布式原理\" class=\"headerlink\" title=\"分布式原理\"></a>分布式原理</h3><h4 id=\"分片\"><a href=\"#分片\" class=\"headerlink\" title=\"分片\"></a>分片</h4><p>ElasticSearch 中默认的主分片（num_of_shards）数量为 5，默认的副本（num_of_replicas）个数为 1<br>主分片数量一旦设置就不会再改变，但是副本个数可以进行改变</p>\n<p>在单集群节点中，如果主分片数量为 1，副本也为 1，那么此时单节点集群的 health 为 yellow，因为单节点必然会存在副本和主分片在同一个节点，会导致该索引的 health 为 yellow。此时可以修改集群的副本个数为 0，则索引和集群的状态会变回到 green 状态。</p>\n<h4 id=\"主从\"><a href=\"#主从\" class=\"headerlink\" title=\"主从\"></a>主从</h4><blockquote>\n<p>单节点集群中，如果创建了一个索引，默认会拥有副本，此时由于副本和主分片在一个节点，则单节点集群的 health 为 yellow。创建索引时，根据未来的扩展性，将主分片个数设置为合适的个数，但也不能太多，因为数量太多，如果数据量没有达到对应的瓶颈，在进行数据聚合时，就需要遍历所有的主分片，才能得到结果。</p>\n<p><strong>双节点集群</strong><br>当新增一个集群节点的，此时节点集群会将副本全部存放到新增的节点上，此时如果索引的副本个数为 1 时，那么此时集群的状态会变成 green。</p>\n<p><strong>三节点集群</strong><br>当继续新增一个集群节点时，此时节点集群会使用负载均衡，将某个索引的主分片会迁移到新增的节点上，会将部分的副本也迁移到新增的节点上</p>\n<p><strong>三台节点构成 es 集群</strong><br><strong>副本个数为 2 时</strong><br>此时 es 集群会将副本个数分别存放于另外两个节点之上，这两个节点中并没有改索引的主分片，此时主从分离，读写也分离。es 集群其实是一个对称的结构，es 集群的 master 用来管理所有负载的一个核心节点，也就是说如果要进行写操作，如果要写的索引的主分片就在 master 上，那么就可以直接进行写请求；如果写的索引在另一个节点上，那么 master 会将这个写请求进行转发，转发到要写的主分片所在的节点，由该节点进行写请求。</p>\n<p><strong>当关掉此时的 master 节点时</strong><br>此时 es 集群会进行选举，选举一个新的 master 节点，会比较剩余的节点中的 metadata 是最新的，就会通过 paxos 方式从具备竞争主节点能力的机器中竞选主节点。此时被关掉的 master 上存在的主分片会均匀的分布到剩余的集群节点上，此时由于副本个数为 2，所以集群的状态又会变成 yellow，但是集群对外响应服务的能力还是有的。</p>\n<p><strong>三台节点构成 es 集群，并且状态为 green</strong><br><strong>PUT 请求</strong><br>当有操作请求集群进行新建索引操作时，无论请求的是 es 集群的那个节点，都会将该请求转发到 master 节点，因为只有 master 节点知道所有的 metadata 存储的位置，此时 master 会对进行写请求的操作进行识别，如果写请求的 documenId 识别是在 master 节点上，那么由 master 节点进行写操作，如果在 node3 上，就会将该写请求进行转发，转发到 node3，由 node3 完成写请求。写操作完成之后，node3 会异步的将数据改动同步回其对应的副本。<br><strong>GET 请求</strong><br>进行读请求时，master 会进行一次路由计算，计算出该读请求属于 R0 副本的操作，假设 master 节点上也存在 R0 副本，假设上一次的操作是在 master 节点上进行，那么 es 集群会根据负载均衡，将该读请求转发到另一个存在 R0 副本的节点上。如果读请求第一次命中在别的节点上，但是由于是读请求，可以由每个节点进行路由操作。<br><strong>总结</strong><br>也就是说，master 节点只路由读请求，所有的写请求可以由其命中的节点进行处理，此时整个 es 集群就做到了负载均衡和读写分离。</p>\n</blockquote>\n<p><strong>思考:为什么es开始的时候特别慢,用一会儿就很快了?</strong></p>\n<p>其实es的数据本来大部分存在磁盘上,操作系统存在一个系统缓存,加载使用后的数据会放在里面,访问速度远远大于直接从磁盘读取.</p>\n"},{"title":"Flume-大数据采集工具","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-16T13:29:00.000Z","password":null,"summary":null,"_content":"\n# 概述\n\n## Flume定义\n\nFlume是Cloudera提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统。Flume基于流式架构，灵活简单。\n\n## Flume组成架构\n\nFlume组成架构如图所示：\n\n![Flume组成架构](Flume-大数据采集工具/wps2.jpg) \n\n### Agent\n\nAgent是一个JVM进程，它以事件的形式将数据从源头送至目的，是Flume数据传输的基本单元。\n\nAgent主要有3个部分组成，Source、Channel、Sink。\n\n### Source\n\nSource是负责接收数据到Flume Agent的组件。Source组件可以处理各种类型、各种格式的日志数据，包括avro、thrift、exec、jms、spooling directory、netcat、sequence generator、syslog、http、legacy。\n\n###  Channel\n\nChannel是位于Source和Sink之间的缓冲区。因此，Channel允许Source和Sink运作在不同的速率上。Channel是线程安全的，可以同时处理几个Source的写入操作和几个Sink的读取操作。\n\nFlume自带两种Channel：Memory Channel和File Channel。\n\nMemory Channel是内存中的队列。Memory Channel在不需要关心数据丢失的情景下适用。如果需要关心数据丢失，那么Memory Channel就不应该使用，因为程序死亡、机器宕机或者重启都会导致数据丢失。\n\nFile Channel将所有事件写到磁盘。因此在程序关闭或机器宕机的情况下不会丢失数据。\n\n###  Sink\n\nSink不断地轮询Channel中的事件且批量地移除它们，并将这些事件批量写入到存储或索引系统、或者被发送到另一个Flume Agent。\n\nSink是完全事务性的。在从Channel批量删除数据之前，每个Sink用Channel启动一个事务。批量事件一旦成功写出到存储系统或下一个Flume Agent，Sink就利用Channel提交事务。事务一旦被提交，该Channel从自己的内部缓冲区删除事件。\n\nSink组件目的地包括hdfs、logger、avro、thrift、ipc、file、null、HBase、solr、自定义。\n\n###  Event\n\n传输单元，Flume数据传输的基本单元，以事件的形式将数据从源头送至目的地。\n\n## Flume拓扑结构\n\nFlume的拓扑结构如图所示：\n\n![Flume Agent连接](Flume-大数据采集工具/wps4.jpg) \n\n\n\n![单source，多channel、sink](Flume-大数据采集工具/wps5.jpg) \n\n\n\n![Flume负载均衡](Flume-大数据采集工具/wps6.jpg) \n\n![Flume Agent聚合](Flume-大数据采集工具/wps7.jpg) \n\n##  Flume Agent内部原理\n\n![](Flume-大数据采集工具/wps8.png)\n\n# 快速入门\n\n## Flume安装地址\n\n1） Flume官网地址\n\n<http://flume.apache.org/>\n\n2）文档查看地址\n\n<http://flume.apache.org/FlumeUserGuide.html>\n\n3）下载地址\n\nhttp://archive.apache.org/dist/flume/\n\n## 安装部署\n\n**下载安装包解压配置环境变量即可**\n\n1）解压\n\n2)配置jdk路径\n\n```shell\n vi flume-env.sh\n export JAVA_HOME=jdk路径\n```\n\n\n\n## 监控端口数据官方案例\n\n1）案例需求：首先，Flume监控本机44444端口，然后通过telnet工具向本机44444端口发送消息，最后Flume将监听的数据实时显示在控制台。\n\n2）实现步骤：\n\n1．安装telnet工具\n\n将rpm软件包(xinetd-2.3.14-40.el6.x86_64.rpm、telnet-0.17-48.el6.x86_64.rpm和telnet-server-0.17-48.el6.x86_64.rpm)拷入/opt/software文件夹下面。执行RPM软件包安装命令：\n\n```shell\nsudo rpm -ivh xinetd-2.3.14-40.el6.x86_64.rpm\nsudo rpm -ivh telnet-0.17-48.el6.x86_64.rpm\nsudo rpm -ivh telnet-server-0.17-48.el6.x86_64.rpm\n```\n\n2．判断44444端口是否被占用\n\n```shell\nsudo netstat -tunlp | grep 44444\n```\n\n功能描述：netstat命令是一个监控TCP/IP网络的非常有用的工具，它可以显示路由表、实际的网络连接以及每一个网络接口设备的状态信息。 \n\n基本语法：netstat [选项]\n\n选项参数：\n\n​\t-t或--tcp：显示TCP传输协议的连线状况； \n\n​      -u或--udp：显示UDP传输协议的连线状况；\n\n​\t-n或--numeric：直接使用ip地址，而不通过域名服务器； \n\n​\t-l或--listening：显示监控中的服务器的Socket； \n\n​\t-p或--programs：显示正在使用Socket的程序识别码和程序名称；\n\n3．创建Flume Agent配置文件flume-telnet-logger.conf\n\n在flume目录下创建job文件夹并进入job文件夹。\n\n```shell\nmkdir job\n\ncd job/\n\ntouch flume-telnet-logger.conf\n\n# Name the components on this agent\na1.sources = r1\na1.sinks = k1\na1.channels = c1\n\n# Describe/configure the source\na1.sources.r1.type = netcat\na1.sources.r1.bind = localhost\na1.sources.r1.port = 44444\n\n# Describe the sink\na1.sinks.k1.type = logger \n\n# Use a channel which buffers events in memory\na1.channels.c1.type = memory\na1.channels.c1.capacity = 1000\na1.channels.c1.transactionCapacity = 100\n\n# Bind the source and sink to the channel\na1.sources.r1.channels = c1\na1.sinks.k1.channel = c1\n```\n\n4. 先开启flume监听端口\n\n```\n\n```\n\n参数说明：\n\n​\t--conf conf/  ：表示配置文件存储在conf/目录\n\n​\t--name a1\t：表示给agent起名为a1\n\n​\t--conf-file job/flume-telnet.conf ：flume本次启动读取的配置文件是在job文件夹下的flume-telnet.conf文件。\n\n​\t-Dflume.root.logger==INFO,console ：-D表示flume运行时动态修改flume.root.logger参数属性值，并将控制台日志打印级别设置为INFO级别。日志级别包括:log、info、warn、error。\n\n5．使用telnet工具向本机的44444端口发送内容\n\n[atguigu@hadoop102 ~]$ telnet localhost 44444\n\n![](Flume-大数据采集工具/wps11.jpg) \n\n6．在Flume监听页面观察接收数据情况\n\n![](Flume-大数据采集工具/wps28.jpg) \n\n**具体使用时可以根据自己的输入输出去官网查询对一个配置文件书写方式.**\n\n# Flume监控之Ganglia\n\n##  操作Flume测试监控\n\n样式如图：\n\n![](Flume-大数据采集工具/wps27.jpg) \n\n图例说明：\n\n| 字段（图表名称）      | 字段含义                                                     |\n| --------------------- | ------------------------------------------------------------ |\n| EventPutAttemptCount  | source尝试写入channel的事件总数量                            |\n| EventPutSuccessCount  | 成功写入channel且提交的事件总数量                            |\n| EventTakeAttemptCount | sink尝试从channel拉取事件的总数量。这不意味着每次事件都被返回，因为sink拉取的时候channel可能没有任何数据。 |\n| EventTakeSuccessCount | sink成功读取的事件的总数量                                   |\n| StartTime             | channel启动的时间（毫秒）                                    |\n| StopTime              | channel停止的时间（毫秒）                                    |\n| ChannelSize           | 目前channel中事件的总数量                                    |\n| ChannelFillPercentage | channel占用百分比                                            |\n| ChannelCapacity       | channel的容量                                                |","source":"_posts/Flume-大数据采集工具.md","raw":"---\ntitle: Flume-大数据采集工具\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-16 21:29:00\npassword:\nsummary:\ntags:\ncategories: 大数据\n---\n\n# 概述\n\n## Flume定义\n\nFlume是Cloudera提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统。Flume基于流式架构，灵活简单。\n\n## Flume组成架构\n\nFlume组成架构如图所示：\n\n![Flume组成架构](Flume-大数据采集工具/wps2.jpg) \n\n### Agent\n\nAgent是一个JVM进程，它以事件的形式将数据从源头送至目的，是Flume数据传输的基本单元。\n\nAgent主要有3个部分组成，Source、Channel、Sink。\n\n### Source\n\nSource是负责接收数据到Flume Agent的组件。Source组件可以处理各种类型、各种格式的日志数据，包括avro、thrift、exec、jms、spooling directory、netcat、sequence generator、syslog、http、legacy。\n\n###  Channel\n\nChannel是位于Source和Sink之间的缓冲区。因此，Channel允许Source和Sink运作在不同的速率上。Channel是线程安全的，可以同时处理几个Source的写入操作和几个Sink的读取操作。\n\nFlume自带两种Channel：Memory Channel和File Channel。\n\nMemory Channel是内存中的队列。Memory Channel在不需要关心数据丢失的情景下适用。如果需要关心数据丢失，那么Memory Channel就不应该使用，因为程序死亡、机器宕机或者重启都会导致数据丢失。\n\nFile Channel将所有事件写到磁盘。因此在程序关闭或机器宕机的情况下不会丢失数据。\n\n###  Sink\n\nSink不断地轮询Channel中的事件且批量地移除它们，并将这些事件批量写入到存储或索引系统、或者被发送到另一个Flume Agent。\n\nSink是完全事务性的。在从Channel批量删除数据之前，每个Sink用Channel启动一个事务。批量事件一旦成功写出到存储系统或下一个Flume Agent，Sink就利用Channel提交事务。事务一旦被提交，该Channel从自己的内部缓冲区删除事件。\n\nSink组件目的地包括hdfs、logger、avro、thrift、ipc、file、null、HBase、solr、自定义。\n\n###  Event\n\n传输单元，Flume数据传输的基本单元，以事件的形式将数据从源头送至目的地。\n\n## Flume拓扑结构\n\nFlume的拓扑结构如图所示：\n\n![Flume Agent连接](Flume-大数据采集工具/wps4.jpg) \n\n\n\n![单source，多channel、sink](Flume-大数据采集工具/wps5.jpg) \n\n\n\n![Flume负载均衡](Flume-大数据采集工具/wps6.jpg) \n\n![Flume Agent聚合](Flume-大数据采集工具/wps7.jpg) \n\n##  Flume Agent内部原理\n\n![](Flume-大数据采集工具/wps8.png)\n\n# 快速入门\n\n## Flume安装地址\n\n1） Flume官网地址\n\n<http://flume.apache.org/>\n\n2）文档查看地址\n\n<http://flume.apache.org/FlumeUserGuide.html>\n\n3）下载地址\n\nhttp://archive.apache.org/dist/flume/\n\n## 安装部署\n\n**下载安装包解压配置环境变量即可**\n\n1）解压\n\n2)配置jdk路径\n\n```shell\n vi flume-env.sh\n export JAVA_HOME=jdk路径\n```\n\n\n\n## 监控端口数据官方案例\n\n1）案例需求：首先，Flume监控本机44444端口，然后通过telnet工具向本机44444端口发送消息，最后Flume将监听的数据实时显示在控制台。\n\n2）实现步骤：\n\n1．安装telnet工具\n\n将rpm软件包(xinetd-2.3.14-40.el6.x86_64.rpm、telnet-0.17-48.el6.x86_64.rpm和telnet-server-0.17-48.el6.x86_64.rpm)拷入/opt/software文件夹下面。执行RPM软件包安装命令：\n\n```shell\nsudo rpm -ivh xinetd-2.3.14-40.el6.x86_64.rpm\nsudo rpm -ivh telnet-0.17-48.el6.x86_64.rpm\nsudo rpm -ivh telnet-server-0.17-48.el6.x86_64.rpm\n```\n\n2．判断44444端口是否被占用\n\n```shell\nsudo netstat -tunlp | grep 44444\n```\n\n功能描述：netstat命令是一个监控TCP/IP网络的非常有用的工具，它可以显示路由表、实际的网络连接以及每一个网络接口设备的状态信息。 \n\n基本语法：netstat [选项]\n\n选项参数：\n\n​\t-t或--tcp：显示TCP传输协议的连线状况； \n\n​      -u或--udp：显示UDP传输协议的连线状况；\n\n​\t-n或--numeric：直接使用ip地址，而不通过域名服务器； \n\n​\t-l或--listening：显示监控中的服务器的Socket； \n\n​\t-p或--programs：显示正在使用Socket的程序识别码和程序名称；\n\n3．创建Flume Agent配置文件flume-telnet-logger.conf\n\n在flume目录下创建job文件夹并进入job文件夹。\n\n```shell\nmkdir job\n\ncd job/\n\ntouch flume-telnet-logger.conf\n\n# Name the components on this agent\na1.sources = r1\na1.sinks = k1\na1.channels = c1\n\n# Describe/configure the source\na1.sources.r1.type = netcat\na1.sources.r1.bind = localhost\na1.sources.r1.port = 44444\n\n# Describe the sink\na1.sinks.k1.type = logger \n\n# Use a channel which buffers events in memory\na1.channels.c1.type = memory\na1.channels.c1.capacity = 1000\na1.channels.c1.transactionCapacity = 100\n\n# Bind the source and sink to the channel\na1.sources.r1.channels = c1\na1.sinks.k1.channel = c1\n```\n\n4. 先开启flume监听端口\n\n```\n\n```\n\n参数说明：\n\n​\t--conf conf/  ：表示配置文件存储在conf/目录\n\n​\t--name a1\t：表示给agent起名为a1\n\n​\t--conf-file job/flume-telnet.conf ：flume本次启动读取的配置文件是在job文件夹下的flume-telnet.conf文件。\n\n​\t-Dflume.root.logger==INFO,console ：-D表示flume运行时动态修改flume.root.logger参数属性值，并将控制台日志打印级别设置为INFO级别。日志级别包括:log、info、warn、error。\n\n5．使用telnet工具向本机的44444端口发送内容\n\n[atguigu@hadoop102 ~]$ telnet localhost 44444\n\n![](Flume-大数据采集工具/wps11.jpg) \n\n6．在Flume监听页面观察接收数据情况\n\n![](Flume-大数据采集工具/wps28.jpg) \n\n**具体使用时可以根据自己的输入输出去官网查询对一个配置文件书写方式.**\n\n# Flume监控之Ganglia\n\n##  操作Flume测试监控\n\n样式如图：\n\n![](Flume-大数据采集工具/wps27.jpg) \n\n图例说明：\n\n| 字段（图表名称）      | 字段含义                                                     |\n| --------------------- | ------------------------------------------------------------ |\n| EventPutAttemptCount  | source尝试写入channel的事件总数量                            |\n| EventPutSuccessCount  | 成功写入channel且提交的事件总数量                            |\n| EventTakeAttemptCount | sink尝试从channel拉取事件的总数量。这不意味着每次事件都被返回，因为sink拉取的时候channel可能没有任何数据。 |\n| EventTakeSuccessCount | sink成功读取的事件的总数量                                   |\n| StartTime             | channel启动的时间（毫秒）                                    |\n| StopTime              | channel停止的时间（毫秒）                                    |\n| ChannelSize           | 目前channel中事件的总数量                                    |\n| ChannelFillPercentage | channel占用百分比                                            |\n| ChannelCapacity       | channel的容量                                                |","slug":"Flume-大数据采集工具","published":1,"updated":"2021-04-29T09:53:21.425Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6ml7i0005vkvyk1fszyi5","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><h2 id=\"Flume定义\"><a href=\"#Flume定义\" class=\"headerlink\" title=\"Flume定义\"></a>Flume定义</h2><p>Flume是Cloudera提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统。Flume基于流式架构，灵活简单。</p>\n<h2 id=\"Flume组成架构\"><a href=\"#Flume组成架构\" class=\"headerlink\" title=\"Flume组成架构\"></a>Flume组成架构</h2><p>Flume组成架构如图所示：</p>\n<p><img src=\"/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps2.jpg\" alt=\"Flume组成架构\"> </p>\n<h3 id=\"Agent\"><a href=\"#Agent\" class=\"headerlink\" title=\"Agent\"></a>Agent</h3><p>Agent是一个JVM进程，它以事件的形式将数据从源头送至目的，是Flume数据传输的基本单元。</p>\n<p>Agent主要有3个部分组成，Source、Channel、Sink。</p>\n<h3 id=\"Source\"><a href=\"#Source\" class=\"headerlink\" title=\"Source\"></a>Source</h3><p>Source是负责接收数据到Flume Agent的组件。Source组件可以处理各种类型、各种格式的日志数据，包括avro、thrift、exec、jms、spooling directory、netcat、sequence generator、syslog、http、legacy。</p>\n<h3 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h3><p>Channel是位于Source和Sink之间的缓冲区。因此，Channel允许Source和Sink运作在不同的速率上。Channel是线程安全的，可以同时处理几个Source的写入操作和几个Sink的读取操作。</p>\n<p>Flume自带两种Channel：Memory Channel和File Channel。</p>\n<p>Memory Channel是内存中的队列。Memory Channel在不需要关心数据丢失的情景下适用。如果需要关心数据丢失，那么Memory Channel就不应该使用，因为程序死亡、机器宕机或者重启都会导致数据丢失。</p>\n<p>File Channel将所有事件写到磁盘。因此在程序关闭或机器宕机的情况下不会丢失数据。</p>\n<h3 id=\"Sink\"><a href=\"#Sink\" class=\"headerlink\" title=\"Sink\"></a>Sink</h3><p>Sink不断地轮询Channel中的事件且批量地移除它们，并将这些事件批量写入到存储或索引系统、或者被发送到另一个Flume Agent。</p>\n<p>Sink是完全事务性的。在从Channel批量删除数据之前，每个Sink用Channel启动一个事务。批量事件一旦成功写出到存储系统或下一个Flume Agent，Sink就利用Channel提交事务。事务一旦被提交，该Channel从自己的内部缓冲区删除事件。</p>\n<p>Sink组件目的地包括hdfs、logger、avro、thrift、ipc、file、null、HBase、solr、自定义。</p>\n<h3 id=\"Event\"><a href=\"#Event\" class=\"headerlink\" title=\"Event\"></a>Event</h3><p>传输单元，Flume数据传输的基本单元，以事件的形式将数据从源头送至目的地。</p>\n<h2 id=\"Flume拓扑结构\"><a href=\"#Flume拓扑结构\" class=\"headerlink\" title=\"Flume拓扑结构\"></a>Flume拓扑结构</h2><p>Flume的拓扑结构如图所示：</p>\n<p><img src=\"/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps4.jpg\" alt=\"Flume Agent连接\"> </p>\n<p><img src=\"/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps5.jpg\" alt=\"单source，多channel、sink\"> </p>\n<p><img src=\"/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps6.jpg\" alt=\"Flume负载均衡\"> </p>\n<p><img src=\"/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps7.jpg\" alt=\"Flume Agent聚合\"> </p>\n<h2 id=\"Flume-Agent内部原理\"><a href=\"#Flume-Agent内部原理\" class=\"headerlink\" title=\"Flume Agent内部原理\"></a>Flume Agent内部原理</h2><p><img src=\"/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps8.png\" alt></p>\n<h1 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h1><h2 id=\"Flume安装地址\"><a href=\"#Flume安装地址\" class=\"headerlink\" title=\"Flume安装地址\"></a>Flume安装地址</h2><p>1） Flume官网地址</p>\n<p><a href=\"http://flume.apache.org/\" target=\"_blank\" rel=\"noopener\">http://flume.apache.org/</a></p>\n<p>2）文档查看地址</p>\n<p><a href=\"http://flume.apache.org/FlumeUserGuide.html\" target=\"_blank\" rel=\"noopener\">http://flume.apache.org/FlumeUserGuide.html</a></p>\n<p>3）下载地址</p>\n<p><a href=\"http://archive.apache.org/dist/flume/\" target=\"_blank\" rel=\"noopener\">http://archive.apache.org/dist/flume/</a></p>\n<h2 id=\"安装部署\"><a href=\"#安装部署\" class=\"headerlink\" title=\"安装部署\"></a>安装部署</h2><p><strong>下载安装包解压配置环境变量即可</strong></p>\n<p>1）解压</p>\n<p>2)配置jdk路径</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"> vi flume-env.sh\n export JAVA_HOME=jdk路径<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"监控端口数据官方案例\"><a href=\"#监控端口数据官方案例\" class=\"headerlink\" title=\"监控端口数据官方案例\"></a>监控端口数据官方案例</h2><p>1）案例需求：首先，Flume监控本机44444端口，然后通过telnet工具向本机44444端口发送消息，最后Flume将监听的数据实时显示在控制台。</p>\n<p>2）实现步骤：</p>\n<p>1．安装telnet工具</p>\n<p>将rpm软件包(xinetd-2.3.14-40.el6.x86_64.rpm、telnet-0.17-48.el6.x86_64.rpm和telnet-server-0.17-48.el6.x86_64.rpm)拷入/opt/software文件夹下面。执行RPM软件包安装命令：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">sudo rpm -ivh xinetd-2.3.14-40.el6.x86_64.rpm\nsudo rpm -ivh telnet-0.17-48.el6.x86_64.rpm\nsudo rpm -ivh telnet-server-0.17-48.el6.x86_64.rpm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>2．判断44444端口是否被占用</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">sudo netstat -tunlp | grep 44444<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>功能描述：netstat命令是一个监控TCP/IP网络的非常有用的工具，它可以显示路由表、实际的网络连接以及每一个网络接口设备的状态信息。 </p>\n<p>基本语法：netstat [选项]</p>\n<p>选项参数：</p>\n<p>​    -t或–tcp：显示TCP传输协议的连线状况； </p>\n<p>​      -u或–udp：显示UDP传输协议的连线状况；</p>\n<p>​    -n或–numeric：直接使用ip地址，而不通过域名服务器； </p>\n<p>​    -l或–listening：显示监控中的服务器的Socket； </p>\n<p>​    -p或–programs：显示正在使用Socket的程序识别码和程序名称；</p>\n<p>3．创建Flume Agent配置文件flume-telnet-logger.conf</p>\n<p>在flume目录下创建job文件夹并进入job文件夹。</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">mkdir job\n\ncd job/\n\ntouch flume-telnet-logger.conf\n\n# Name the components on this agent\na1.sources = r1\na1.sinks = k1\na1.channels = c1\n\n# Describe/configure the source\na1.sources.r1.type = netcat\na1.sources.r1.bind = localhost\na1.sources.r1.port = 44444\n\n# Describe the sink\na1.sinks.k1.type = logger \n\n# Use a channel which buffers events in memory\na1.channels.c1.type = memory\na1.channels.c1.capacity = 1000\na1.channels.c1.transactionCapacity = 100\n\n# Bind the source and sink to the channel\na1.sources.r1.channels = c1\na1.sinks.k1.channel = c1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ol start=\"4\">\n<li>先开启flume监听端口</li>\n</ol>\n<pre><code></code></pre><p>参数说明：</p>\n<p>​    –conf conf/  ：表示配置文件存储在conf/目录</p>\n<p>​    –name a1    ：表示给agent起名为a1</p>\n<p>​    –conf-file job/flume-telnet.conf ：flume本次启动读取的配置文件是在job文件夹下的flume-telnet.conf文件。</p>\n<p>​    -Dflume.root.logger==INFO,console ：-D表示flume运行时动态修改flume.root.logger参数属性值，并将控制台日志打印级别设置为INFO级别。日志级别包括:log、info、warn、error。</p>\n<p>5．使用telnet工具向本机的44444端口发送内容</p>\n<p>[atguigu@hadoop102 ~]$ telnet localhost 44444</p>\n<p><img src=\"/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps11.jpg\" alt> </p>\n<p>6．在Flume监听页面观察接收数据情况</p>\n<p><img src=\"/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps28.jpg\" alt> </p>\n<p><strong>具体使用时可以根据自己的输入输出去官网查询对一个配置文件书写方式.</strong></p>\n<h1 id=\"Flume监控之Ganglia\"><a href=\"#Flume监控之Ganglia\" class=\"headerlink\" title=\"Flume监控之Ganglia\"></a>Flume监控之Ganglia</h1><h2 id=\"操作Flume测试监控\"><a href=\"#操作Flume测试监控\" class=\"headerlink\" title=\"操作Flume测试监控\"></a>操作Flume测试监控</h2><p>样式如图：</p>\n<p><img src=\"/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps27.jpg\" alt> </p>\n<p>图例说明：</p>\n<table>\n<thead>\n<tr>\n<th>字段（图表名称）</th>\n<th>字段含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>EventPutAttemptCount</td>\n<td>source尝试写入channel的事件总数量</td>\n</tr>\n<tr>\n<td>EventPutSuccessCount</td>\n<td>成功写入channel且提交的事件总数量</td>\n</tr>\n<tr>\n<td>EventTakeAttemptCount</td>\n<td>sink尝试从channel拉取事件的总数量。这不意味着每次事件都被返回，因为sink拉取的时候channel可能没有任何数据。</td>\n</tr>\n<tr>\n<td>EventTakeSuccessCount</td>\n<td>sink成功读取的事件的总数量</td>\n</tr>\n<tr>\n<td>StartTime</td>\n<td>channel启动的时间（毫秒）</td>\n</tr>\n<tr>\n<td>StopTime</td>\n<td>channel停止的时间（毫秒）</td>\n</tr>\n<tr>\n<td>ChannelSize</td>\n<td>目前channel中事件的总数量</td>\n</tr>\n<tr>\n<td>ChannelFillPercentage</td>\n<td>channel占用百分比</td>\n</tr>\n<tr>\n<td>ChannelCapacity</td>\n<td>channel的容量</td>\n</tr>\n</tbody></table>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><h2 id=\"Flume定义\"><a href=\"#Flume定义\" class=\"headerlink\" title=\"Flume定义\"></a>Flume定义</h2><p>Flume是Cloudera提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统。Flume基于流式架构，灵活简单。</p>\n<h2 id=\"Flume组成架构\"><a href=\"#Flume组成架构\" class=\"headerlink\" title=\"Flume组成架构\"></a>Flume组成架构</h2><p>Flume组成架构如图所示：</p>\n<p><img src=\"/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps2.jpg\" alt=\"Flume组成架构\"> </p>\n<h3 id=\"Agent\"><a href=\"#Agent\" class=\"headerlink\" title=\"Agent\"></a>Agent</h3><p>Agent是一个JVM进程，它以事件的形式将数据从源头送至目的，是Flume数据传输的基本单元。</p>\n<p>Agent主要有3个部分组成，Source、Channel、Sink。</p>\n<h3 id=\"Source\"><a href=\"#Source\" class=\"headerlink\" title=\"Source\"></a>Source</h3><p>Source是负责接收数据到Flume Agent的组件。Source组件可以处理各种类型、各种格式的日志数据，包括avro、thrift、exec、jms、spooling directory、netcat、sequence generator、syslog、http、legacy。</p>\n<h3 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h3><p>Channel是位于Source和Sink之间的缓冲区。因此，Channel允许Source和Sink运作在不同的速率上。Channel是线程安全的，可以同时处理几个Source的写入操作和几个Sink的读取操作。</p>\n<p>Flume自带两种Channel：Memory Channel和File Channel。</p>\n<p>Memory Channel是内存中的队列。Memory Channel在不需要关心数据丢失的情景下适用。如果需要关心数据丢失，那么Memory Channel就不应该使用，因为程序死亡、机器宕机或者重启都会导致数据丢失。</p>\n<p>File Channel将所有事件写到磁盘。因此在程序关闭或机器宕机的情况下不会丢失数据。</p>\n<h3 id=\"Sink\"><a href=\"#Sink\" class=\"headerlink\" title=\"Sink\"></a>Sink</h3><p>Sink不断地轮询Channel中的事件且批量地移除它们，并将这些事件批量写入到存储或索引系统、或者被发送到另一个Flume Agent。</p>\n<p>Sink是完全事务性的。在从Channel批量删除数据之前，每个Sink用Channel启动一个事务。批量事件一旦成功写出到存储系统或下一个Flume Agent，Sink就利用Channel提交事务。事务一旦被提交，该Channel从自己的内部缓冲区删除事件。</p>\n<p>Sink组件目的地包括hdfs、logger、avro、thrift、ipc、file、null、HBase、solr、自定义。</p>\n<h3 id=\"Event\"><a href=\"#Event\" class=\"headerlink\" title=\"Event\"></a>Event</h3><p>传输单元，Flume数据传输的基本单元，以事件的形式将数据从源头送至目的地。</p>\n<h2 id=\"Flume拓扑结构\"><a href=\"#Flume拓扑结构\" class=\"headerlink\" title=\"Flume拓扑结构\"></a>Flume拓扑结构</h2><p>Flume的拓扑结构如图所示：</p>\n<p><img src=\"/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps4.jpg\" alt=\"Flume Agent连接\"> </p>\n<p><img src=\"/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps5.jpg\" alt=\"单source，多channel、sink\"> </p>\n<p><img src=\"/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps6.jpg\" alt=\"Flume负载均衡\"> </p>\n<p><img src=\"/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps7.jpg\" alt=\"Flume Agent聚合\"> </p>\n<h2 id=\"Flume-Agent内部原理\"><a href=\"#Flume-Agent内部原理\" class=\"headerlink\" title=\"Flume Agent内部原理\"></a>Flume Agent内部原理</h2><p><img src=\"/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps8.png\" alt></p>\n<h1 id=\"快速入门\"><a href=\"#快速入门\" class=\"headerlink\" title=\"快速入门\"></a>快速入门</h1><h2 id=\"Flume安装地址\"><a href=\"#Flume安装地址\" class=\"headerlink\" title=\"Flume安装地址\"></a>Flume安装地址</h2><p>1） Flume官网地址</p>\n<p><a href=\"http://flume.apache.org/\" target=\"_blank\" rel=\"noopener\">http://flume.apache.org/</a></p>\n<p>2）文档查看地址</p>\n<p><a href=\"http://flume.apache.org/FlumeUserGuide.html\" target=\"_blank\" rel=\"noopener\">http://flume.apache.org/FlumeUserGuide.html</a></p>\n<p>3）下载地址</p>\n<p><a href=\"http://archive.apache.org/dist/flume/\" target=\"_blank\" rel=\"noopener\">http://archive.apache.org/dist/flume/</a></p>\n<h2 id=\"安装部署\"><a href=\"#安装部署\" class=\"headerlink\" title=\"安装部署\"></a>安装部署</h2><p><strong>下载安装包解压配置环境变量即可</strong></p>\n<p>1）解压</p>\n<p>2)配置jdk路径</p>\n<pre><code class=\"shell\"> vi flume-env.sh\n export JAVA_HOME=jdk路径</code></pre>\n<h2 id=\"监控端口数据官方案例\"><a href=\"#监控端口数据官方案例\" class=\"headerlink\" title=\"监控端口数据官方案例\"></a>监控端口数据官方案例</h2><p>1）案例需求：首先，Flume监控本机44444端口，然后通过telnet工具向本机44444端口发送消息，最后Flume将监听的数据实时显示在控制台。</p>\n<p>2）实现步骤：</p>\n<p>1．安装telnet工具</p>\n<p>将rpm软件包(xinetd-2.3.14-40.el6.x86_64.rpm、telnet-0.17-48.el6.x86_64.rpm和telnet-server-0.17-48.el6.x86_64.rpm)拷入/opt/software文件夹下面。执行RPM软件包安装命令：</p>\n<pre><code class=\"shell\">sudo rpm -ivh xinetd-2.3.14-40.el6.x86_64.rpm\nsudo rpm -ivh telnet-0.17-48.el6.x86_64.rpm\nsudo rpm -ivh telnet-server-0.17-48.el6.x86_64.rpm</code></pre>\n<p>2．判断44444端口是否被占用</p>\n<pre><code class=\"shell\">sudo netstat -tunlp | grep 44444</code></pre>\n<p>功能描述：netstat命令是一个监控TCP/IP网络的非常有用的工具，它可以显示路由表、实际的网络连接以及每一个网络接口设备的状态信息。 </p>\n<p>基本语法：netstat [选项]</p>\n<p>选项参数：</p>\n<p>​    -t或–tcp：显示TCP传输协议的连线状况； </p>\n<p>​      -u或–udp：显示UDP传输协议的连线状况；</p>\n<p>​    -n或–numeric：直接使用ip地址，而不通过域名服务器； </p>\n<p>​    -l或–listening：显示监控中的服务器的Socket； </p>\n<p>​    -p或–programs：显示正在使用Socket的程序识别码和程序名称；</p>\n<p>3．创建Flume Agent配置文件flume-telnet-logger.conf</p>\n<p>在flume目录下创建job文件夹并进入job文件夹。</p>\n<pre><code class=\"shell\">mkdir job\n\ncd job/\n\ntouch flume-telnet-logger.conf\n\n# Name the components on this agent\na1.sources = r1\na1.sinks = k1\na1.channels = c1\n\n# Describe/configure the source\na1.sources.r1.type = netcat\na1.sources.r1.bind = localhost\na1.sources.r1.port = 44444\n\n# Describe the sink\na1.sinks.k1.type = logger \n\n# Use a channel which buffers events in memory\na1.channels.c1.type = memory\na1.channels.c1.capacity = 1000\na1.channels.c1.transactionCapacity = 100\n\n# Bind the source and sink to the channel\na1.sources.r1.channels = c1\na1.sinks.k1.channel = c1</code></pre>\n<ol start=\"4\">\n<li>先开启flume监听端口</li>\n</ol>\n<pre><code></code></pre><p>参数说明：</p>\n<p>​    –conf conf/  ：表示配置文件存储在conf/目录</p>\n<p>​    –name a1    ：表示给agent起名为a1</p>\n<p>​    –conf-file job/flume-telnet.conf ：flume本次启动读取的配置文件是在job文件夹下的flume-telnet.conf文件。</p>\n<p>​    -Dflume.root.logger==INFO,console ：-D表示flume运行时动态修改flume.root.logger参数属性值，并将控制台日志打印级别设置为INFO级别。日志级别包括:log、info、warn、error。</p>\n<p>5．使用telnet工具向本机的44444端口发送内容</p>\n<p>[atguigu@hadoop102 ~]$ telnet localhost 44444</p>\n<p><img src=\"/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps11.jpg\" alt> </p>\n<p>6．在Flume监听页面观察接收数据情况</p>\n<p><img src=\"/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps28.jpg\" alt> </p>\n<p><strong>具体使用时可以根据自己的输入输出去官网查询对一个配置文件书写方式.</strong></p>\n<h1 id=\"Flume监控之Ganglia\"><a href=\"#Flume监控之Ganglia\" class=\"headerlink\" title=\"Flume监控之Ganglia\"></a>Flume监控之Ganglia</h1><h2 id=\"操作Flume测试监控\"><a href=\"#操作Flume测试监控\" class=\"headerlink\" title=\"操作Flume测试监控\"></a>操作Flume测试监控</h2><p>样式如图：</p>\n<p><img src=\"/2020/01/16/flume-da-shu-ju-cai-ji-gong-ju/wps27.jpg\" alt> </p>\n<p>图例说明：</p>\n<table>\n<thead>\n<tr>\n<th>字段（图表名称）</th>\n<th>字段含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>EventPutAttemptCount</td>\n<td>source尝试写入channel的事件总数量</td>\n</tr>\n<tr>\n<td>EventPutSuccessCount</td>\n<td>成功写入channel且提交的事件总数量</td>\n</tr>\n<tr>\n<td>EventTakeAttemptCount</td>\n<td>sink尝试从channel拉取事件的总数量。这不意味着每次事件都被返回，因为sink拉取的时候channel可能没有任何数据。</td>\n</tr>\n<tr>\n<td>EventTakeSuccessCount</td>\n<td>sink成功读取的事件的总数量</td>\n</tr>\n<tr>\n<td>StartTime</td>\n<td>channel启动的时间（毫秒）</td>\n</tr>\n<tr>\n<td>StopTime</td>\n<td>channel停止的时间（毫秒）</td>\n</tr>\n<tr>\n<td>ChannelSize</td>\n<td>目前channel中事件的总数量</td>\n</tr>\n<tr>\n<td>ChannelFillPercentage</td>\n<td>channel占用百分比</td>\n</tr>\n<tr>\n<td>ChannelCapacity</td>\n<td>channel的容量</td>\n</tr>\n</tbody></table>\n"},{"title":"HBase建立二级索引的几种方式","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-16T13:35:01.000Z","password":null,"summary":null,"img":"/medias/featureimages/hbase.png","_content":"\n### **为什么需要HBse二级索引**\n\n**HBase里面只有rowkey作为一级索引，** 如果要对库里的非rowkey字段进行数据检索和查询， 往往要通过MapReduce/Spark等分布式计算框架进行，硬件资源消耗和时间延迟都会比较高。\n\n**只依赖rowkey作为索引,最高可以支持数据量为十万级的数据快速响应.**为了HBase的数据查询更高效、适应更多的场景， **诸如使用非rowkey字段检索也能做到秒级响应，或者支持各个字段进行模糊查询和多字段组合查询等**， 因此需要在HBase上面构建二级索引， 以满足现实中更复杂多样的业务需求。\n\n#### 1.MapReduce方案\n\n自己编写MapReduce实现二级索引,相对成本较高,但是可以将MapReduce的并发特性运用起来,相对开发成本较高,而且以来开发人员代码水平.\n\n#### 2.Phoenix\n\n**Apache Phoenix：** 功能围绕着SQL on hbase，支持和兼容多个hbase版本， 二级索引只是其中一块功能。 二级索引的创建和管理直接有SQL语法支持，使用起来很简便， 该项目目前社区活跃度和版本更新迭代情况都比较好。\n\n**ApachePhoenix在目前开源的方案中，是一个比较优的选择。主打SQL on HBase ， 基于SQL能完成HBase的CRUD操作，支持JDBC协议**。 Apache Phoenix在Hadoop生态里面位置：\n\n**Phoenix二级索引特点：**\n\nCovered Indexes(覆盖索引) ：把关注的数据字段也附在索引表上，只需要通过索引表就能返回所要查询的数据（列）， 所以索引的列必须包含所需查询的列(SELECT的列和WHRER的列)。\n\nFunctional indexes(函数索引)： 索引不局限于列，支持任意的表达式来创建索引。\n\nGlobal indexes(全局索引)：适用于读多写少场景。通过维护全局索引表，所有的更新和写操作都会引起索引的更新，写入性能受到影响。 在读数据时，Phoenix SQL会基于索引字段，执行快速查询。\n\nLocal indexes(本地索引)：适用于写多读少场景。 在数据写入时，索引数据和表数据都会存储在本地。在数据读取时， 由于无法预先确定region的位置，所以在读取数据时需要检查每个region（以找到索引数据），会带来一定性能（网络）开销。\n\n**该方案可适用于数量级百万甚至千万.**\n\n#### 3.ElasticSearch\n\n总所周知,ElasticSearch是一个基于Lucene开发的分布式搜索引擎,可以做到对亿级数据实现快速查询,我们只需要将需要建立二级索引的字段与rowkey放入elasticsearch中,需要使用时,先在elasticsearch中通过字段查询到对应的rowkey,再利用hbase自身的rowkey索引搜索到对应的数据,**该方案可以实现亿级数据的快速响应**,是一种冷热分离思想的运用,","source":"_posts/HBase建立二级索引的几种方式.md","raw":"---\ntitle: HBase建立二级索引的几种方式\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-16 21:35:01\npassword:\nsummary:\ntags:\nimg: /medias/featureimages/hbase.png\ncategories: 大数据\n---\n\n### **为什么需要HBse二级索引**\n\n**HBase里面只有rowkey作为一级索引，** 如果要对库里的非rowkey字段进行数据检索和查询， 往往要通过MapReduce/Spark等分布式计算框架进行，硬件资源消耗和时间延迟都会比较高。\n\n**只依赖rowkey作为索引,最高可以支持数据量为十万级的数据快速响应.**为了HBase的数据查询更高效、适应更多的场景， **诸如使用非rowkey字段检索也能做到秒级响应，或者支持各个字段进行模糊查询和多字段组合查询等**， 因此需要在HBase上面构建二级索引， 以满足现实中更复杂多样的业务需求。\n\n#### 1.MapReduce方案\n\n自己编写MapReduce实现二级索引,相对成本较高,但是可以将MapReduce的并发特性运用起来,相对开发成本较高,而且以来开发人员代码水平.\n\n#### 2.Phoenix\n\n**Apache Phoenix：** 功能围绕着SQL on hbase，支持和兼容多个hbase版本， 二级索引只是其中一块功能。 二级索引的创建和管理直接有SQL语法支持，使用起来很简便， 该项目目前社区活跃度和版本更新迭代情况都比较好。\n\n**ApachePhoenix在目前开源的方案中，是一个比较优的选择。主打SQL on HBase ， 基于SQL能完成HBase的CRUD操作，支持JDBC协议**。 Apache Phoenix在Hadoop生态里面位置：\n\n**Phoenix二级索引特点：**\n\nCovered Indexes(覆盖索引) ：把关注的数据字段也附在索引表上，只需要通过索引表就能返回所要查询的数据（列）， 所以索引的列必须包含所需查询的列(SELECT的列和WHRER的列)。\n\nFunctional indexes(函数索引)： 索引不局限于列，支持任意的表达式来创建索引。\n\nGlobal indexes(全局索引)：适用于读多写少场景。通过维护全局索引表，所有的更新和写操作都会引起索引的更新，写入性能受到影响。 在读数据时，Phoenix SQL会基于索引字段，执行快速查询。\n\nLocal indexes(本地索引)：适用于写多读少场景。 在数据写入时，索引数据和表数据都会存储在本地。在数据读取时， 由于无法预先确定region的位置，所以在读取数据时需要检查每个region（以找到索引数据），会带来一定性能（网络）开销。\n\n**该方案可适用于数量级百万甚至千万.**\n\n#### 3.ElasticSearch\n\n总所周知,ElasticSearch是一个基于Lucene开发的分布式搜索引擎,可以做到对亿级数据实现快速查询,我们只需要将需要建立二级索引的字段与rowkey放入elasticsearch中,需要使用时,先在elasticsearch中通过字段查询到对应的rowkey,再利用hbase自身的rowkey索引搜索到对应的数据,**该方案可以实现亿级数据的快速响应**,是一种冷热分离思想的运用,","slug":"HBase建立二级索引的几种方式","published":1,"updated":"2020-02-28T05:13:59.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6ml8f0008vkvy7zu57itt","content":"<h3 id=\"为什么需要HBse二级索引\"><a href=\"#为什么需要HBse二级索引\" class=\"headerlink\" title=\"为什么需要HBse二级索引\"></a><strong>为什么需要HBse二级索引</strong></h3><p><strong>HBase里面只有rowkey作为一级索引，</strong> 如果要对库里的非rowkey字段进行数据检索和查询， 往往要通过MapReduce/Spark等分布式计算框架进行，硬件资源消耗和时间延迟都会比较高。</p>\n<p><strong>只依赖rowkey作为索引,最高可以支持数据量为十万级的数据快速响应.</strong>为了HBase的数据查询更高效、适应更多的场景， <strong>诸如使用非rowkey字段检索也能做到秒级响应，或者支持各个字段进行模糊查询和多字段组合查询等</strong>， 因此需要在HBase上面构建二级索引， 以满足现实中更复杂多样的业务需求。</p>\n<h4 id=\"1-MapReduce方案\"><a href=\"#1-MapReduce方案\" class=\"headerlink\" title=\"1.MapReduce方案\"></a>1.MapReduce方案</h4><p>自己编写MapReduce实现二级索引,相对成本较高,但是可以将MapReduce的并发特性运用起来,相对开发成本较高,而且以来开发人员代码水平.</p>\n<h4 id=\"2-Phoenix\"><a href=\"#2-Phoenix\" class=\"headerlink\" title=\"2.Phoenix\"></a>2.Phoenix</h4><p><strong>Apache Phoenix：</strong> 功能围绕着SQL on hbase，支持和兼容多个hbase版本， 二级索引只是其中一块功能。 二级索引的创建和管理直接有SQL语法支持，使用起来很简便， 该项目目前社区活跃度和版本更新迭代情况都比较好。</p>\n<p><strong>ApachePhoenix在目前开源的方案中，是一个比较优的选择。主打SQL on HBase ， 基于SQL能完成HBase的CRUD操作，支持JDBC协议</strong>。 Apache Phoenix在Hadoop生态里面位置：</p>\n<p><strong>Phoenix二级索引特点：</strong></p>\n<p>Covered Indexes(覆盖索引) ：把关注的数据字段也附在索引表上，只需要通过索引表就能返回所要查询的数据（列）， 所以索引的列必须包含所需查询的列(SELECT的列和WHRER的列)。</p>\n<p>Functional indexes(函数索引)： 索引不局限于列，支持任意的表达式来创建索引。</p>\n<p>Global indexes(全局索引)：适用于读多写少场景。通过维护全局索引表，所有的更新和写操作都会引起索引的更新，写入性能受到影响。 在读数据时，Phoenix SQL会基于索引字段，执行快速查询。</p>\n<p>Local indexes(本地索引)：适用于写多读少场景。 在数据写入时，索引数据和表数据都会存储在本地。在数据读取时， 由于无法预先确定region的位置，所以在读取数据时需要检查每个region（以找到索引数据），会带来一定性能（网络）开销。</p>\n<p><strong>该方案可适用于数量级百万甚至千万.</strong></p>\n<h4 id=\"3-ElasticSearch\"><a href=\"#3-ElasticSearch\" class=\"headerlink\" title=\"3.ElasticSearch\"></a>3.ElasticSearch</h4><p>总所周知,ElasticSearch是一个基于Lucene开发的分布式搜索引擎,可以做到对亿级数据实现快速查询,我们只需要将需要建立二级索引的字段与rowkey放入elasticsearch中,需要使用时,先在elasticsearch中通过字段查询到对应的rowkey,再利用hbase自身的rowkey索引搜索到对应的数据,<strong>该方案可以实现亿级数据的快速响应</strong>,是一种冷热分离思想的运用,</p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h3 id=\"为什么需要HBse二级索引\"><a href=\"#为什么需要HBse二级索引\" class=\"headerlink\" title=\"为什么需要HBse二级索引\"></a><strong>为什么需要HBse二级索引</strong></h3><p><strong>HBase里面只有rowkey作为一级索引，</strong> 如果要对库里的非rowkey字段进行数据检索和查询， 往往要通过MapReduce/Spark等分布式计算框架进行，硬件资源消耗和时间延迟都会比较高。</p>\n<p><strong>只依赖rowkey作为索引,最高可以支持数据量为十万级的数据快速响应.</strong>为了HBase的数据查询更高效、适应更多的场景， <strong>诸如使用非rowkey字段检索也能做到秒级响应，或者支持各个字段进行模糊查询和多字段组合查询等</strong>， 因此需要在HBase上面构建二级索引， 以满足现实中更复杂多样的业务需求。</p>\n<h4 id=\"1-MapReduce方案\"><a href=\"#1-MapReduce方案\" class=\"headerlink\" title=\"1.MapReduce方案\"></a>1.MapReduce方案</h4><p>自己编写MapReduce实现二级索引,相对成本较高,但是可以将MapReduce的并发特性运用起来,相对开发成本较高,而且以来开发人员代码水平.</p>\n<h4 id=\"2-Phoenix\"><a href=\"#2-Phoenix\" class=\"headerlink\" title=\"2.Phoenix\"></a>2.Phoenix</h4><p><strong>Apache Phoenix：</strong> 功能围绕着SQL on hbase，支持和兼容多个hbase版本， 二级索引只是其中一块功能。 二级索引的创建和管理直接有SQL语法支持，使用起来很简便， 该项目目前社区活跃度和版本更新迭代情况都比较好。</p>\n<p><strong>ApachePhoenix在目前开源的方案中，是一个比较优的选择。主打SQL on HBase ， 基于SQL能完成HBase的CRUD操作，支持JDBC协议</strong>。 Apache Phoenix在Hadoop生态里面位置：</p>\n<p><strong>Phoenix二级索引特点：</strong></p>\n<p>Covered Indexes(覆盖索引) ：把关注的数据字段也附在索引表上，只需要通过索引表就能返回所要查询的数据（列）， 所以索引的列必须包含所需查询的列(SELECT的列和WHRER的列)。</p>\n<p>Functional indexes(函数索引)： 索引不局限于列，支持任意的表达式来创建索引。</p>\n<p>Global indexes(全局索引)：适用于读多写少场景。通过维护全局索引表，所有的更新和写操作都会引起索引的更新，写入性能受到影响。 在读数据时，Phoenix SQL会基于索引字段，执行快速查询。</p>\n<p>Local indexes(本地索引)：适用于写多读少场景。 在数据写入时，索引数据和表数据都会存储在本地。在数据读取时， 由于无法预先确定region的位置，所以在读取数据时需要检查每个region（以找到索引数据），会带来一定性能（网络）开销。</p>\n<p><strong>该方案可适用于数量级百万甚至千万.</strong></p>\n<h4 id=\"3-ElasticSearch\"><a href=\"#3-ElasticSearch\" class=\"headerlink\" title=\"3.ElasticSearch\"></a>3.ElasticSearch</h4><p>总所周知,ElasticSearch是一个基于Lucene开发的分布式搜索引擎,可以做到对亿级数据实现快速查询,我们只需要将需要建立二级索引的字段与rowkey放入elasticsearch中,需要使用时,先在elasticsearch中通过字段查询到对应的rowkey,再利用hbase自身的rowkey索引搜索到对应的数据,<strong>该方案可以实现亿级数据的快速响应</strong>,是一种冷热分离思想的运用,</p>\n"},{"title":"HBase的rowkey设计的理解","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-16T13:23:20.000Z","password":null,"summary":null,"img":"/medias/featureimages/hbase.png","_content":"\nHBase是三维有序存储的，通过rowkey（行键），column key（column family和qualifier）和TimeStamp（时间戳）这个三个维度可以对HBase中的数据进行快速定位。\n\nHBase中rowkey可以唯一标识一行记录，在HBase查询的时候，有以下几种方式：\n\n1. 通过get方式，指定rowkey获取唯一一条记录\n2. 通过scan方式，设置startRow和stopRow参数进行范围匹配\n3. 全表扫描，即直接扫描整张表中所有行记录\n\n## rowkey长度原则\n\nrowkey是一个二进制码流，可以是任意字符串，最大长度 *64kb* ，实际应用中一般为10-100bytes，以 `byte[]` 形式保存，一般设计成定长。\n\n建议越短越好，不要超过16个字节，原因如下：\n\n1. 数据的持久化文件HFile中是按照KeyValue存储的，如果rowkey过长，比如超过100字节，1000w行数据，光rowkey就要占用100*1000w=10亿个字节，将近1G数据，这样会极大影响HFile的存储效率；\n2. MemStore将缓存部分数据到内存，如果rowkey字段过长，内存的有效利用率就会降低，系统不能缓存更多的数据，这样会降低检索效率。\n3. 目前操作系统都是64位系统，内存8字节对齐，控制在16个字节，8字节的整数倍利用了操作系统的最佳特性。\n\n## rowkey散列原则\n\n如果rowkey按照时间戳的方式递增，不要将时间放在二进制码的前面，建议将rowkey的高位作为散列字段，由程序随机生成，低位放时间字段，这样将提高数据均衡分布在每个RegionServer，以实现负载均衡的几率。如果没有散列字段，首字段直接是时间信息，所有的数据都会集中在一个RegionServer上，这样在数据检索的时候负载会集中在个别的RegionServer上，造成热点问题，会降低查询效率。\n\n## rowkey唯一原则\n\n必须在设计上保证其唯一性，rowkey是按照字典顺序排序存储的，因此，设计rowkey的时候，要充分利用这个排序的特点，将经常读取的数据存储到一块，将最近可能会被访问的数据放到一块。\n\n## 什么是热点\n\nHBase中的行是按照rowkey的字典顺序排序的，这种设计优化了scan操作，可以将相关的行以及会被一起读取的行存取在临近位置，便于scan。然而糟糕的rowkey设计是热点的源头。 热点发生在大量的client直接访问集群的一个或极少数个节点（访问可能是读，写或者其他操作）。大量访问会使热点region所在的单个机器超出自身承受能力，引起性能下降甚至region不可用，这也会影响同一个RegionServer上的其他region，由于主机无法服务其他region的请求。 设计良好的数据访问模式以使集群被充分，均衡的利用。\n\n为了避免写热点，设计rowkey使得不同行在同一个region，但是在更多数据情况下，数据应该被写入集群的多个region，而不是一个。\n\n下面是一些常见的避免热点的方法以及它们的优缺点：\n\n#### 加盐\n\n这里所说的加盐不是密码学中的加盐，而是在rowkey的前面增加随机数，具体就是给rowkey分配一个随机前缀以使得它和之前的rowkey的开头不同。分配的前缀种类数量应该和你想使用数据分散到不同的region的数量一致。加盐之后的rowkey就会根据随机生成的前缀分散到各个region上，以避免热点。\n\n#### 哈希\n\n哈希会使同一行永远用一个前缀加盐。哈希也可以使负载分散到整个集群，但是读却是可以预测的。使用确定的哈希可以让客户端重构完整的rowkey，可以使用get操作准确获取某一个行数据\n\n#### 反转\n\n第三种防止热点的方法时反转固定长度或者数字格式的rowkey。这样可以使得rowkey中经常改变的部分（最没有意义的部分）放在前面。这样可以有效的随机rowkey，但是牺牲了rowkey的有序性。\n\n反转rowkey的例子以手机号为rowkey，可以将手机号反转后的字符串作为rowkey，这样的就避免了以手机号那样比较固定开头导致热点问题\n\n#### 时间戳反转\n\n一个常见的数据处理问题是快速获取数据的最近版本，使用反转的时间戳作为rowkey的一部分对这个问题十分有用，可以用 `Long.Max_Value - timestamp` 追加到key的末尾，例如 `[key][reverse_timestamp]` , `[key]` 的最新值可以通过scan [key]获得[key]的第一条记录，因为HBase中rowkey是有序的，第一条记录是最后录入的数据。\n\n比如需要保存一个用户的操作记录，按照操作时间倒序排序，在设计rowkey的时候，可以这样设计\n\n[userId反转][Long.Max_Value - timestamp]，在查询用户的所有操作记录数据的时候，直接指定反转后的userId，startRow是[userId反转][000000000000],stopRow是[userId反转][Long.Max_Value - timestamp]\n\n如果需要查询某段时间的操作记录，startRow是[user反转][Long.Max_Value - 起始时间]，stopRow是[userId反转][Long.Max_Value - 结束时间]\n\n其他一些建议\n\n- 尽量减少行和列的大小在HBase中，value永远和它的key一起传输的。当具体的值在系统间传输时，它的rowkey，列名，时间戳也会一起传输。如果你的rowkey和列名很大，甚至可以和具体的值相比较，那么你将会遇到一些有趣的问题。HBase storefiles中的索引（有助于随机访问）最终占据了HBase分配的大量内存，因为具体的值和它的key很大。可以增加block大小使得storefiles索引再更大的时间间隔增加，或者修改表的模式以减小rowkey和列名的大小。压缩也有助于更大的索引。\n- 列族尽可能越短越好，最好是一个字符\n- 冗长的属性名虽然可读性好，但是更短的属性名存储在HBase中会更好","source":"_posts/HBase的rowkey设计的理解.md","raw":"---\ntitle: HBase的rowkey设计的理解\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-16 21:23:20\npassword:\nsummary:\ntags:\nimg: /medias/featureimages/hbase.png\ncategories: 大数据\n---\n\nHBase是三维有序存储的，通过rowkey（行键），column key（column family和qualifier）和TimeStamp（时间戳）这个三个维度可以对HBase中的数据进行快速定位。\n\nHBase中rowkey可以唯一标识一行记录，在HBase查询的时候，有以下几种方式：\n\n1. 通过get方式，指定rowkey获取唯一一条记录\n2. 通过scan方式，设置startRow和stopRow参数进行范围匹配\n3. 全表扫描，即直接扫描整张表中所有行记录\n\n## rowkey长度原则\n\nrowkey是一个二进制码流，可以是任意字符串，最大长度 *64kb* ，实际应用中一般为10-100bytes，以 `byte[]` 形式保存，一般设计成定长。\n\n建议越短越好，不要超过16个字节，原因如下：\n\n1. 数据的持久化文件HFile中是按照KeyValue存储的，如果rowkey过长，比如超过100字节，1000w行数据，光rowkey就要占用100*1000w=10亿个字节，将近1G数据，这样会极大影响HFile的存储效率；\n2. MemStore将缓存部分数据到内存，如果rowkey字段过长，内存的有效利用率就会降低，系统不能缓存更多的数据，这样会降低检索效率。\n3. 目前操作系统都是64位系统，内存8字节对齐，控制在16个字节，8字节的整数倍利用了操作系统的最佳特性。\n\n## rowkey散列原则\n\n如果rowkey按照时间戳的方式递增，不要将时间放在二进制码的前面，建议将rowkey的高位作为散列字段，由程序随机生成，低位放时间字段，这样将提高数据均衡分布在每个RegionServer，以实现负载均衡的几率。如果没有散列字段，首字段直接是时间信息，所有的数据都会集中在一个RegionServer上，这样在数据检索的时候负载会集中在个别的RegionServer上，造成热点问题，会降低查询效率。\n\n## rowkey唯一原则\n\n必须在设计上保证其唯一性，rowkey是按照字典顺序排序存储的，因此，设计rowkey的时候，要充分利用这个排序的特点，将经常读取的数据存储到一块，将最近可能会被访问的数据放到一块。\n\n## 什么是热点\n\nHBase中的行是按照rowkey的字典顺序排序的，这种设计优化了scan操作，可以将相关的行以及会被一起读取的行存取在临近位置，便于scan。然而糟糕的rowkey设计是热点的源头。 热点发生在大量的client直接访问集群的一个或极少数个节点（访问可能是读，写或者其他操作）。大量访问会使热点region所在的单个机器超出自身承受能力，引起性能下降甚至region不可用，这也会影响同一个RegionServer上的其他region，由于主机无法服务其他region的请求。 设计良好的数据访问模式以使集群被充分，均衡的利用。\n\n为了避免写热点，设计rowkey使得不同行在同一个region，但是在更多数据情况下，数据应该被写入集群的多个region，而不是一个。\n\n下面是一些常见的避免热点的方法以及它们的优缺点：\n\n#### 加盐\n\n这里所说的加盐不是密码学中的加盐，而是在rowkey的前面增加随机数，具体就是给rowkey分配一个随机前缀以使得它和之前的rowkey的开头不同。分配的前缀种类数量应该和你想使用数据分散到不同的region的数量一致。加盐之后的rowkey就会根据随机生成的前缀分散到各个region上，以避免热点。\n\n#### 哈希\n\n哈希会使同一行永远用一个前缀加盐。哈希也可以使负载分散到整个集群，但是读却是可以预测的。使用确定的哈希可以让客户端重构完整的rowkey，可以使用get操作准确获取某一个行数据\n\n#### 反转\n\n第三种防止热点的方法时反转固定长度或者数字格式的rowkey。这样可以使得rowkey中经常改变的部分（最没有意义的部分）放在前面。这样可以有效的随机rowkey，但是牺牲了rowkey的有序性。\n\n反转rowkey的例子以手机号为rowkey，可以将手机号反转后的字符串作为rowkey，这样的就避免了以手机号那样比较固定开头导致热点问题\n\n#### 时间戳反转\n\n一个常见的数据处理问题是快速获取数据的最近版本，使用反转的时间戳作为rowkey的一部分对这个问题十分有用，可以用 `Long.Max_Value - timestamp` 追加到key的末尾，例如 `[key][reverse_timestamp]` , `[key]` 的最新值可以通过scan [key]获得[key]的第一条记录，因为HBase中rowkey是有序的，第一条记录是最后录入的数据。\n\n比如需要保存一个用户的操作记录，按照操作时间倒序排序，在设计rowkey的时候，可以这样设计\n\n[userId反转][Long.Max_Value - timestamp]，在查询用户的所有操作记录数据的时候，直接指定反转后的userId，startRow是[userId反转][000000000000],stopRow是[userId反转][Long.Max_Value - timestamp]\n\n如果需要查询某段时间的操作记录，startRow是[user反转][Long.Max_Value - 起始时间]，stopRow是[userId反转][Long.Max_Value - 结束时间]\n\n其他一些建议\n\n- 尽量减少行和列的大小在HBase中，value永远和它的key一起传输的。当具体的值在系统间传输时，它的rowkey，列名，时间戳也会一起传输。如果你的rowkey和列名很大，甚至可以和具体的值相比较，那么你将会遇到一些有趣的问题。HBase storefiles中的索引（有助于随机访问）最终占据了HBase分配的大量内存，因为具体的值和它的key很大。可以增加block大小使得storefiles索引再更大的时间间隔增加，或者修改表的模式以减小rowkey和列名的大小。压缩也有助于更大的索引。\n- 列族尽可能越短越好，最好是一个字符\n- 冗长的属性名虽然可读性好，但是更短的属性名存储在HBase中会更好","slug":"HBase的rowkey设计的理解","published":1,"updated":"2020-02-26T02:13:38.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6ml8p000avkvyegbe6uh8","content":"<p>HBase是三维有序存储的，通过rowkey（行键），column key（column family和qualifier）和TimeStamp（时间戳）这个三个维度可以对HBase中的数据进行快速定位。</p>\n<p>HBase中rowkey可以唯一标识一行记录，在HBase查询的时候，有以下几种方式：</p>\n<ol>\n<li>通过get方式，指定rowkey获取唯一一条记录</li>\n<li>通过scan方式，设置startRow和stopRow参数进行范围匹配</li>\n<li>全表扫描，即直接扫描整张表中所有行记录</li>\n</ol>\n<h2 id=\"rowkey长度原则\"><a href=\"#rowkey长度原则\" class=\"headerlink\" title=\"rowkey长度原则\"></a>rowkey长度原则</h2><p>rowkey是一个二进制码流，可以是任意字符串，最大长度 <em>64kb</em> ，实际应用中一般为10-100bytes，以 <code>byte[]</code> 形式保存，一般设计成定长。</p>\n<p>建议越短越好，不要超过16个字节，原因如下：</p>\n<ol>\n<li>数据的持久化文件HFile中是按照KeyValue存储的，如果rowkey过长，比如超过100字节，1000w行数据，光rowkey就要占用100*1000w=10亿个字节，将近1G数据，这样会极大影响HFile的存储效率；</li>\n<li>MemStore将缓存部分数据到内存，如果rowkey字段过长，内存的有效利用率就会降低，系统不能缓存更多的数据，这样会降低检索效率。</li>\n<li>目前操作系统都是64位系统，内存8字节对齐，控制在16个字节，8字节的整数倍利用了操作系统的最佳特性。</li>\n</ol>\n<h2 id=\"rowkey散列原则\"><a href=\"#rowkey散列原则\" class=\"headerlink\" title=\"rowkey散列原则\"></a>rowkey散列原则</h2><p>如果rowkey按照时间戳的方式递增，不要将时间放在二进制码的前面，建议将rowkey的高位作为散列字段，由程序随机生成，低位放时间字段，这样将提高数据均衡分布在每个RegionServer，以实现负载均衡的几率。如果没有散列字段，首字段直接是时间信息，所有的数据都会集中在一个RegionServer上，这样在数据检索的时候负载会集中在个别的RegionServer上，造成热点问题，会降低查询效率。</p>\n<h2 id=\"rowkey唯一原则\"><a href=\"#rowkey唯一原则\" class=\"headerlink\" title=\"rowkey唯一原则\"></a>rowkey唯一原则</h2><p>必须在设计上保证其唯一性，rowkey是按照字典顺序排序存储的，因此，设计rowkey的时候，要充分利用这个排序的特点，将经常读取的数据存储到一块，将最近可能会被访问的数据放到一块。</p>\n<h2 id=\"什么是热点\"><a href=\"#什么是热点\" class=\"headerlink\" title=\"什么是热点\"></a>什么是热点</h2><p>HBase中的行是按照rowkey的字典顺序排序的，这种设计优化了scan操作，可以将相关的行以及会被一起读取的行存取在临近位置，便于scan。然而糟糕的rowkey设计是热点的源头。 热点发生在大量的client直接访问集群的一个或极少数个节点（访问可能是读，写或者其他操作）。大量访问会使热点region所在的单个机器超出自身承受能力，引起性能下降甚至region不可用，这也会影响同一个RegionServer上的其他region，由于主机无法服务其他region的请求。 设计良好的数据访问模式以使集群被充分，均衡的利用。</p>\n<p>为了避免写热点，设计rowkey使得不同行在同一个region，但是在更多数据情况下，数据应该被写入集群的多个region，而不是一个。</p>\n<p>下面是一些常见的避免热点的方法以及它们的优缺点：</p>\n<h4 id=\"加盐\"><a href=\"#加盐\" class=\"headerlink\" title=\"加盐\"></a>加盐</h4><p>这里所说的加盐不是密码学中的加盐，而是在rowkey的前面增加随机数，具体就是给rowkey分配一个随机前缀以使得它和之前的rowkey的开头不同。分配的前缀种类数量应该和你想使用数据分散到不同的region的数量一致。加盐之后的rowkey就会根据随机生成的前缀分散到各个region上，以避免热点。</p>\n<h4 id=\"哈希\"><a href=\"#哈希\" class=\"headerlink\" title=\"哈希\"></a>哈希</h4><p>哈希会使同一行永远用一个前缀加盐。哈希也可以使负载分散到整个集群，但是读却是可以预测的。使用确定的哈希可以让客户端重构完整的rowkey，可以使用get操作准确获取某一个行数据</p>\n<h4 id=\"反转\"><a href=\"#反转\" class=\"headerlink\" title=\"反转\"></a>反转</h4><p>第三种防止热点的方法时反转固定长度或者数字格式的rowkey。这样可以使得rowkey中经常改变的部分（最没有意义的部分）放在前面。这样可以有效的随机rowkey，但是牺牲了rowkey的有序性。</p>\n<p>反转rowkey的例子以手机号为rowkey，可以将手机号反转后的字符串作为rowkey，这样的就避免了以手机号那样比较固定开头导致热点问题</p>\n<h4 id=\"时间戳反转\"><a href=\"#时间戳反转\" class=\"headerlink\" title=\"时间戳反转\"></a>时间戳反转</h4><p>一个常见的数据处理问题是快速获取数据的最近版本，使用反转的时间戳作为rowkey的一部分对这个问题十分有用，可以用 <code>Long.Max_Value - timestamp</code> 追加到key的末尾，例如 <code>[key][reverse_timestamp]</code> , <code>[key]</code> 的最新值可以通过scan [key]获得[key]的第一条记录，因为HBase中rowkey是有序的，第一条记录是最后录入的数据。</p>\n<p>比如需要保存一个用户的操作记录，按照操作时间倒序排序，在设计rowkey的时候，可以这样设计</p>\n<p>[userId反转][Long.Max_Value - timestamp]，在查询用户的所有操作记录数据的时候，直接指定反转后的userId，startRow是[userId反转][000000000000],stopRow是[userId反转][Long.Max_Value - timestamp]</p>\n<p>如果需要查询某段时间的操作记录，startRow是[user反转][Long.Max_Value - 起始时间]，stopRow是[userId反转][Long.Max_Value - 结束时间]</p>\n<p>其他一些建议</p>\n<ul>\n<li>尽量减少行和列的大小在HBase中，value永远和它的key一起传输的。当具体的值在系统间传输时，它的rowkey，列名，时间戳也会一起传输。如果你的rowkey和列名很大，甚至可以和具体的值相比较，那么你将会遇到一些有趣的问题。HBase storefiles中的索引（有助于随机访问）最终占据了HBase分配的大量内存，因为具体的值和它的key很大。可以增加block大小使得storefiles索引再更大的时间间隔增加，或者修改表的模式以减小rowkey和列名的大小。压缩也有助于更大的索引。</li>\n<li>列族尽可能越短越好，最好是一个字符</li>\n<li>冗长的属性名虽然可读性好，但是更短的属性名存储在HBase中会更好</li>\n</ul>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<p>HBase是三维有序存储的，通过rowkey（行键），column key（column family和qualifier）和TimeStamp（时间戳）这个三个维度可以对HBase中的数据进行快速定位。</p>\n<p>HBase中rowkey可以唯一标识一行记录，在HBase查询的时候，有以下几种方式：</p>\n<ol>\n<li>通过get方式，指定rowkey获取唯一一条记录</li>\n<li>通过scan方式，设置startRow和stopRow参数进行范围匹配</li>\n<li>全表扫描，即直接扫描整张表中所有行记录</li>\n</ol>\n<h2 id=\"rowkey长度原则\"><a href=\"#rowkey长度原则\" class=\"headerlink\" title=\"rowkey长度原则\"></a>rowkey长度原则</h2><p>rowkey是一个二进制码流，可以是任意字符串，最大长度 <em>64kb</em> ，实际应用中一般为10-100bytes，以 <code>byte[]</code> 形式保存，一般设计成定长。</p>\n<p>建议越短越好，不要超过16个字节，原因如下：</p>\n<ol>\n<li>数据的持久化文件HFile中是按照KeyValue存储的，如果rowkey过长，比如超过100字节，1000w行数据，光rowkey就要占用100*1000w=10亿个字节，将近1G数据，这样会极大影响HFile的存储效率；</li>\n<li>MemStore将缓存部分数据到内存，如果rowkey字段过长，内存的有效利用率就会降低，系统不能缓存更多的数据，这样会降低检索效率。</li>\n<li>目前操作系统都是64位系统，内存8字节对齐，控制在16个字节，8字节的整数倍利用了操作系统的最佳特性。</li>\n</ol>\n<h2 id=\"rowkey散列原则\"><a href=\"#rowkey散列原则\" class=\"headerlink\" title=\"rowkey散列原则\"></a>rowkey散列原则</h2><p>如果rowkey按照时间戳的方式递增，不要将时间放在二进制码的前面，建议将rowkey的高位作为散列字段，由程序随机生成，低位放时间字段，这样将提高数据均衡分布在每个RegionServer，以实现负载均衡的几率。如果没有散列字段，首字段直接是时间信息，所有的数据都会集中在一个RegionServer上，这样在数据检索的时候负载会集中在个别的RegionServer上，造成热点问题，会降低查询效率。</p>\n<h2 id=\"rowkey唯一原则\"><a href=\"#rowkey唯一原则\" class=\"headerlink\" title=\"rowkey唯一原则\"></a>rowkey唯一原则</h2><p>必须在设计上保证其唯一性，rowkey是按照字典顺序排序存储的，因此，设计rowkey的时候，要充分利用这个排序的特点，将经常读取的数据存储到一块，将最近可能会被访问的数据放到一块。</p>\n<h2 id=\"什么是热点\"><a href=\"#什么是热点\" class=\"headerlink\" title=\"什么是热点\"></a>什么是热点</h2><p>HBase中的行是按照rowkey的字典顺序排序的，这种设计优化了scan操作，可以将相关的行以及会被一起读取的行存取在临近位置，便于scan。然而糟糕的rowkey设计是热点的源头。 热点发生在大量的client直接访问集群的一个或极少数个节点（访问可能是读，写或者其他操作）。大量访问会使热点region所在的单个机器超出自身承受能力，引起性能下降甚至region不可用，这也会影响同一个RegionServer上的其他region，由于主机无法服务其他region的请求。 设计良好的数据访问模式以使集群被充分，均衡的利用。</p>\n<p>为了避免写热点，设计rowkey使得不同行在同一个region，但是在更多数据情况下，数据应该被写入集群的多个region，而不是一个。</p>\n<p>下面是一些常见的避免热点的方法以及它们的优缺点：</p>\n<h4 id=\"加盐\"><a href=\"#加盐\" class=\"headerlink\" title=\"加盐\"></a>加盐</h4><p>这里所说的加盐不是密码学中的加盐，而是在rowkey的前面增加随机数，具体就是给rowkey分配一个随机前缀以使得它和之前的rowkey的开头不同。分配的前缀种类数量应该和你想使用数据分散到不同的region的数量一致。加盐之后的rowkey就会根据随机生成的前缀分散到各个region上，以避免热点。</p>\n<h4 id=\"哈希\"><a href=\"#哈希\" class=\"headerlink\" title=\"哈希\"></a>哈希</h4><p>哈希会使同一行永远用一个前缀加盐。哈希也可以使负载分散到整个集群，但是读却是可以预测的。使用确定的哈希可以让客户端重构完整的rowkey，可以使用get操作准确获取某一个行数据</p>\n<h4 id=\"反转\"><a href=\"#反转\" class=\"headerlink\" title=\"反转\"></a>反转</h4><p>第三种防止热点的方法时反转固定长度或者数字格式的rowkey。这样可以使得rowkey中经常改变的部分（最没有意义的部分）放在前面。这样可以有效的随机rowkey，但是牺牲了rowkey的有序性。</p>\n<p>反转rowkey的例子以手机号为rowkey，可以将手机号反转后的字符串作为rowkey，这样的就避免了以手机号那样比较固定开头导致热点问题</p>\n<h4 id=\"时间戳反转\"><a href=\"#时间戳反转\" class=\"headerlink\" title=\"时间戳反转\"></a>时间戳反转</h4><p>一个常见的数据处理问题是快速获取数据的最近版本，使用反转的时间戳作为rowkey的一部分对这个问题十分有用，可以用 <code>Long.Max_Value - timestamp</code> 追加到key的末尾，例如 <code>[key][reverse_timestamp]</code> , <code>[key]</code> 的最新值可以通过scan [key]获得[key]的第一条记录，因为HBase中rowkey是有序的，第一条记录是最后录入的数据。</p>\n<p>比如需要保存一个用户的操作记录，按照操作时间倒序排序，在设计rowkey的时候，可以这样设计</p>\n<p>[userId反转][Long.Max_Value - timestamp]，在查询用户的所有操作记录数据的时候，直接指定反转后的userId，startRow是[userId反转][000000000000],stopRow是[userId反转][Long.Max_Value - timestamp]</p>\n<p>如果需要查询某段时间的操作记录，startRow是[user反转][Long.Max_Value - 起始时间]，stopRow是[userId反转][Long.Max_Value - 结束时间]</p>\n<p>其他一些建议</p>\n<ul>\n<li>尽量减少行和列的大小在HBase中，value永远和它的key一起传输的。当具体的值在系统间传输时，它的rowkey，列名，时间戳也会一起传输。如果你的rowkey和列名很大，甚至可以和具体的值相比较，那么你将会遇到一些有趣的问题。HBase storefiles中的索引（有助于随机访问）最终占据了HBase分配的大量内存，因为具体的值和它的key很大。可以增加block大小使得storefiles索引再更大的时间间隔增加，或者修改表的模式以减小rowkey和列名的大小。压缩也有助于更大的索引。</li>\n<li>列族尽可能越短越好，最好是一个字符</li>\n<li>冗长的属性名虽然可读性好，但是更短的属性名存储在HBase中会更好</li>\n</ul>\n"},{"title":"HTTP与HTTPS原理","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-21T04:14:30.000Z","password":null,"summary":null,"_content":"\n### 概述\n\nHTTP 是一个无状态的协议。无状态是指客户机（Web 浏览器）和服务器之间不需要建立持久的连接，这意味着当一个客户端向服务器端发出请求，然后服务器返回响应(response)，连接就被关闭了，在服务器端不保留连接的有关信息.HTTP 遵循请求(Request)/应答(Response)模型。客户机（浏览器）向服务器发送请求，服务器处理请求并返回适当的应答。所有 HTTP 连接都被构造成一套请求和应答。\n\n### 传输流程\n\n#### 地址解析\n\n如用客户端浏览器请求这个页面： http://localhost.com:8080/index.htm 从中分解出协议名、主机名、端口、对象路径等部分，对于我们的这个地址，解析得到的结果如下：\n\n- 协议名： http\n- 主机名： localhost.com\n- 端口： 8080\n- 对象路径： /index.htm\n\n在这一步，需要域名系统 DNS 解析域名 localhost.com,得主机的 IP 地址。\n\n#### 封装 HTTP 请求数据包\n\n把以上部分结合本机自己的信息，封装成一个 HTTP 请求数据包\n\n#### 封装成 TCP 包并建立连接\n\n封装成 TCP 包，建立 TCP 连接（TCP 的三次握手）\n\n#### 客户机发送请求命令\n\n建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是 MIME 信息包括请求修饰符、客户机信息和可能的内容。\n\n#### 服务器响应\n\n服务器接到请求后，给予相应的响应信息， 其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是 MIME 信息包括服务器信息、实体信息和可能的内容。\n\n#### 服务器关闭 TCP 连接\n\n服务器关闭 TCP 连接： 一般情况下，一旦 Web 服务器向浏览器发送了请求数据，它就要关闭 TCP 连接，然后如果浏览器或者服务器在其头信息加入了这行代码 Connection:keep-alive， TCP 连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。\n\n![](HTTP与HTTPS原理/1.png)\n\n#### HTTP响应状态\n\n- 1XX\n\n![](HTTP与HTTPS原理/2.png)\n\n- 2XX\n\n![](HTTP与HTTPS原理/3.png)\n\n- 3XX\n\n![](HTTP与HTTPS原理/4.png)\n\n- 4XX\n\n![](HTTP与HTTPS原理/5.png)\n\n- 5XX\n\n![](HTTP与HTTPS原理/6.png)\n\n### 小插曲：301和302有啥区别\n\n官方说法：\n\n> 301，302 都是HTTP状态的编码，都代表着某个URL发生了转移，不同之处在于： 301 redirect: 301 代表永久性转移(Permanently Moved)。 302 redirect: 302 代表暂时性转移(Temporarily Moved )。\n\n现实中的差异：\n\n- **对于用户**：\n\n301，302对用户来说没有区别，他们看到效果只是一个跳转，浏览器中旧的URL变成了新的URL。页面跳到了这个新的url指向的地方。\n\n- **对于引擎及站长**：\n\n1. 302：302转向可能会有URL规范化及网址劫持的问题。可能被搜索引擎判为可疑转向，甚至认为是作弊\n\n**网址劫持**： 302重定向和网址劫持（URL hijacking）有什么关系呢？这要从搜索引擎如何处理302转向说起。从定义来说，从网址A做一个302重定向到网址B时，主机服务器的隐含意思是网址A随时有可能改主意，重新显示本身的内容或转向其他的地方。大部分的搜索引擎在大部分情况下，当收到302重定向时，一般只要去抓取目标网址就可以了，也就是说网址B。 实际上如果搜索引擎在遇到302转向时，百分之百的都抓取目标网址B的话，就不用担心网址URL劫持了。问题就在于，有的时候搜索引擎，尤其是Google，并不能总是抓取目标网址。为什么呢？比如说，有的时候A网址很短，但是它做了一个302重定向到B网址，而B网址是一个很长的乱七八糟的URL网址，甚至还有可能包含一些问号之类的参数。很自然的，A网址更加用户友好，而B网址既难看，又不用户友好。这时Google很有可能会仍然显示网址A。\n\n由于搜索引擎排名算法只是程序而不是人，在遇到302重定向的时候，并不能像人一样的去准确判定哪一个网址更适当，这就造成了网址URL劫持的可能性。也就是说，一个不道德的人在他自己的网址A做一个302重定向到你的网址B，出于某种原因， Google搜索结果所显示的仍然是网址A，但是所用的网页内容却是你的网址B上的内容，这种情况就叫做网址URL劫持。你辛辛苦苦所写的内容就这样被别人偷走了。\n\n1. 301：当网页A用301重定向转到网页B时，搜索引擎可以肯定网页A永久的改变位置，或者说实际上不存了，搜索引擎就会把网页B当作唯一有效目标。 **301的好处是**: 第一， 没有网址规范化问题。 第二， 也很重要的，网页A的PR网页级别会传到网页B。\n\n### HTTPS\n\nHTTPS（全称： Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP 通道，简单讲是 HTTP 的安全版。**即 HTTP 下加入 SSL 层**， HTTPS 的安全基础是 SSL。其所用的端口号是 **443**。 过程大致如下：\n\n#### 建立连接获取证书\n\nSSL 客户端通过 TCP 和服务器建立连接之后（443 端口），并且在一般的 tcp 连接协商（握手）过程中请求证书。即客户端发出一个消息给服务器，这个消息里面包含了自己可实现的算法列表和其它一些需要的消息， SSL 的服务器端会回应一个数据包，这里面确定了这次通信所需要的算法，然后服务器向客户端返回证书。（**证书里面包含了服务器信息：域名。申请证书的公司，公共秘钥**）\n\n#### 证书验证\n\nClient 在收到服务器返回的证书后，判断签发这个证书的公共签发机构，并使用这个机构的公共秘钥确认签名是否有效，客户端还会确保证书中列出的域名就是它正在连接的域名。\n\n#### 数据加密和传输\n\n如果确认证书有效，那么生成对称秘钥并使用服务器的公共秘钥进行加密。然后发送给服务器，服务器使用它的私钥对它进行解密，这样两台计算机可以开始进行对称加密进行通信。\n\n","source":"_posts/HTTP与HTTPS原理.md","raw":"---\ntitle: HTTP与HTTPS原理\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-21 12:14:30\npassword:\nsummary:\ntags:\ncategories: 计算机网络\n---\n\n### 概述\n\nHTTP 是一个无状态的协议。无状态是指客户机（Web 浏览器）和服务器之间不需要建立持久的连接，这意味着当一个客户端向服务器端发出请求，然后服务器返回响应(response)，连接就被关闭了，在服务器端不保留连接的有关信息.HTTP 遵循请求(Request)/应答(Response)模型。客户机（浏览器）向服务器发送请求，服务器处理请求并返回适当的应答。所有 HTTP 连接都被构造成一套请求和应答。\n\n### 传输流程\n\n#### 地址解析\n\n如用客户端浏览器请求这个页面： http://localhost.com:8080/index.htm 从中分解出协议名、主机名、端口、对象路径等部分，对于我们的这个地址，解析得到的结果如下：\n\n- 协议名： http\n- 主机名： localhost.com\n- 端口： 8080\n- 对象路径： /index.htm\n\n在这一步，需要域名系统 DNS 解析域名 localhost.com,得主机的 IP 地址。\n\n#### 封装 HTTP 请求数据包\n\n把以上部分结合本机自己的信息，封装成一个 HTTP 请求数据包\n\n#### 封装成 TCP 包并建立连接\n\n封装成 TCP 包，建立 TCP 连接（TCP 的三次握手）\n\n#### 客户机发送请求命令\n\n建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是 MIME 信息包括请求修饰符、客户机信息和可能的内容。\n\n#### 服务器响应\n\n服务器接到请求后，给予相应的响应信息， 其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是 MIME 信息包括服务器信息、实体信息和可能的内容。\n\n#### 服务器关闭 TCP 连接\n\n服务器关闭 TCP 连接： 一般情况下，一旦 Web 服务器向浏览器发送了请求数据，它就要关闭 TCP 连接，然后如果浏览器或者服务器在其头信息加入了这行代码 Connection:keep-alive， TCP 连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。\n\n![](HTTP与HTTPS原理/1.png)\n\n#### HTTP响应状态\n\n- 1XX\n\n![](HTTP与HTTPS原理/2.png)\n\n- 2XX\n\n![](HTTP与HTTPS原理/3.png)\n\n- 3XX\n\n![](HTTP与HTTPS原理/4.png)\n\n- 4XX\n\n![](HTTP与HTTPS原理/5.png)\n\n- 5XX\n\n![](HTTP与HTTPS原理/6.png)\n\n### 小插曲：301和302有啥区别\n\n官方说法：\n\n> 301，302 都是HTTP状态的编码，都代表着某个URL发生了转移，不同之处在于： 301 redirect: 301 代表永久性转移(Permanently Moved)。 302 redirect: 302 代表暂时性转移(Temporarily Moved )。\n\n现实中的差异：\n\n- **对于用户**：\n\n301，302对用户来说没有区别，他们看到效果只是一个跳转，浏览器中旧的URL变成了新的URL。页面跳到了这个新的url指向的地方。\n\n- **对于引擎及站长**：\n\n1. 302：302转向可能会有URL规范化及网址劫持的问题。可能被搜索引擎判为可疑转向，甚至认为是作弊\n\n**网址劫持**： 302重定向和网址劫持（URL hijacking）有什么关系呢？这要从搜索引擎如何处理302转向说起。从定义来说，从网址A做一个302重定向到网址B时，主机服务器的隐含意思是网址A随时有可能改主意，重新显示本身的内容或转向其他的地方。大部分的搜索引擎在大部分情况下，当收到302重定向时，一般只要去抓取目标网址就可以了，也就是说网址B。 实际上如果搜索引擎在遇到302转向时，百分之百的都抓取目标网址B的话，就不用担心网址URL劫持了。问题就在于，有的时候搜索引擎，尤其是Google，并不能总是抓取目标网址。为什么呢？比如说，有的时候A网址很短，但是它做了一个302重定向到B网址，而B网址是一个很长的乱七八糟的URL网址，甚至还有可能包含一些问号之类的参数。很自然的，A网址更加用户友好，而B网址既难看，又不用户友好。这时Google很有可能会仍然显示网址A。\n\n由于搜索引擎排名算法只是程序而不是人，在遇到302重定向的时候，并不能像人一样的去准确判定哪一个网址更适当，这就造成了网址URL劫持的可能性。也就是说，一个不道德的人在他自己的网址A做一个302重定向到你的网址B，出于某种原因， Google搜索结果所显示的仍然是网址A，但是所用的网页内容却是你的网址B上的内容，这种情况就叫做网址URL劫持。你辛辛苦苦所写的内容就这样被别人偷走了。\n\n1. 301：当网页A用301重定向转到网页B时，搜索引擎可以肯定网页A永久的改变位置，或者说实际上不存了，搜索引擎就会把网页B当作唯一有效目标。 **301的好处是**: 第一， 没有网址规范化问题。 第二， 也很重要的，网页A的PR网页级别会传到网页B。\n\n### HTTPS\n\nHTTPS（全称： Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP 通道，简单讲是 HTTP 的安全版。**即 HTTP 下加入 SSL 层**， HTTPS 的安全基础是 SSL。其所用的端口号是 **443**。 过程大致如下：\n\n#### 建立连接获取证书\n\nSSL 客户端通过 TCP 和服务器建立连接之后（443 端口），并且在一般的 tcp 连接协商（握手）过程中请求证书。即客户端发出一个消息给服务器，这个消息里面包含了自己可实现的算法列表和其它一些需要的消息， SSL 的服务器端会回应一个数据包，这里面确定了这次通信所需要的算法，然后服务器向客户端返回证书。（**证书里面包含了服务器信息：域名。申请证书的公司，公共秘钥**）\n\n#### 证书验证\n\nClient 在收到服务器返回的证书后，判断签发这个证书的公共签发机构，并使用这个机构的公共秘钥确认签名是否有效，客户端还会确保证书中列出的域名就是它正在连接的域名。\n\n#### 数据加密和传输\n\n如果确认证书有效，那么生成对称秘钥并使用服务器的公共秘钥进行加密。然后发送给服务器，服务器使用它的私钥对它进行解密，这样两台计算机可以开始进行对称加密进行通信。\n\n","slug":"HTTP与HTTPS原理","published":1,"updated":"2020-02-26T05:17:19.915Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6ml8w000cvkvyk4a6wtmc","content":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>HTTP 是一个无状态的协议。无状态是指客户机（Web 浏览器）和服务器之间不需要建立持久的连接，这意味着当一个客户端向服务器端发出请求，然后服务器返回响应(response)，连接就被关闭了，在服务器端不保留连接的有关信息.HTTP 遵循请求(Request)/应答(Response)模型。客户机（浏览器）向服务器发送请求，服务器处理请求并返回适当的应答。所有 HTTP 连接都被构造成一套请求和应答。</p>\n<h3 id=\"传输流程\"><a href=\"#传输流程\" class=\"headerlink\" title=\"传输流程\"></a>传输流程</h3><h4 id=\"地址解析\"><a href=\"#地址解析\" class=\"headerlink\" title=\"地址解析\"></a>地址解析</h4><p>如用客户端浏览器请求这个页面： <a href=\"http://localhost.com:8080/index.htm\" target=\"_blank\" rel=\"noopener\">http://localhost.com:8080/index.htm</a> 从中分解出协议名、主机名、端口、对象路径等部分，对于我们的这个地址，解析得到的结果如下：</p>\n<ul>\n<li>协议名： http</li>\n<li>主机名： localhost.com</li>\n<li>端口： 8080</li>\n<li>对象路径： /index.htm</li>\n</ul>\n<p>在这一步，需要域名系统 DNS 解析域名 localhost.com,得主机的 IP 地址。</p>\n<h4 id=\"封装-HTTP-请求数据包\"><a href=\"#封装-HTTP-请求数据包\" class=\"headerlink\" title=\"封装 HTTP 请求数据包\"></a>封装 HTTP 请求数据包</h4><p>把以上部分结合本机自己的信息，封装成一个 HTTP 请求数据包</p>\n<h4 id=\"封装成-TCP-包并建立连接\"><a href=\"#封装成-TCP-包并建立连接\" class=\"headerlink\" title=\"封装成 TCP 包并建立连接\"></a>封装成 TCP 包并建立连接</h4><p>封装成 TCP 包，建立 TCP 连接（TCP 的三次握手）</p>\n<h4 id=\"客户机发送请求命令\"><a href=\"#客户机发送请求命令\" class=\"headerlink\" title=\"客户机发送请求命令\"></a>客户机发送请求命令</h4><p>建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是 MIME 信息包括请求修饰符、客户机信息和可能的内容。</p>\n<h4 id=\"服务器响应\"><a href=\"#服务器响应\" class=\"headerlink\" title=\"服务器响应\"></a>服务器响应</h4><p>服务器接到请求后，给予相应的响应信息， 其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是 MIME 信息包括服务器信息、实体信息和可能的内容。</p>\n<h4 id=\"服务器关闭-TCP-连接\"><a href=\"#服务器关闭-TCP-连接\" class=\"headerlink\" title=\"服务器关闭 TCP 连接\"></a>服务器关闭 TCP 连接</h4><p>服务器关闭 TCP 连接： 一般情况下，一旦 Web 服务器向浏览器发送了请求数据，它就要关闭 TCP 连接，然后如果浏览器或者服务器在其头信息加入了这行代码 Connection:keep-alive， TCP 连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。</p>\n<p><img src=\"/2020/01/21/http-yu-https-yuan-li/1.png\" alt></p>\n<h4 id=\"HTTP响应状态\"><a href=\"#HTTP响应状态\" class=\"headerlink\" title=\"HTTP响应状态\"></a>HTTP响应状态</h4><ul>\n<li>1XX</li>\n</ul>\n<p><img src=\"/2020/01/21/http-yu-https-yuan-li/2.png\" alt></p>\n<ul>\n<li>2XX</li>\n</ul>\n<p><img src=\"/2020/01/21/http-yu-https-yuan-li/3.png\" alt></p>\n<ul>\n<li>3XX</li>\n</ul>\n<p><img src=\"/2020/01/21/http-yu-https-yuan-li/4.png\" alt></p>\n<ul>\n<li>4XX</li>\n</ul>\n<p><img src=\"/2020/01/21/http-yu-https-yuan-li/5.png\" alt></p>\n<ul>\n<li>5XX</li>\n</ul>\n<p><img src=\"/2020/01/21/http-yu-https-yuan-li/6.png\" alt></p>\n<h3 id=\"小插曲：301和302有啥区别\"><a href=\"#小插曲：301和302有啥区别\" class=\"headerlink\" title=\"小插曲：301和302有啥区别\"></a>小插曲：301和302有啥区别</h3><p>官方说法：</p>\n<blockquote>\n<p>301，302 都是HTTP状态的编码，都代表着某个URL发生了转移，不同之处在于： 301 redirect: 301 代表永久性转移(Permanently Moved)。 302 redirect: 302 代表暂时性转移(Temporarily Moved )。</p>\n</blockquote>\n<p>现实中的差异：</p>\n<ul>\n<li><strong>对于用户</strong>：</li>\n</ul>\n<p>301，302对用户来说没有区别，他们看到效果只是一个跳转，浏览器中旧的URL变成了新的URL。页面跳到了这个新的url指向的地方。</p>\n<ul>\n<li><strong>对于引擎及站长</strong>：</li>\n</ul>\n<ol>\n<li>302：302转向可能会有URL规范化及网址劫持的问题。可能被搜索引擎判为可疑转向，甚至认为是作弊</li>\n</ol>\n<p><strong>网址劫持</strong>： 302重定向和网址劫持（URL hijacking）有什么关系呢？这要从搜索引擎如何处理302转向说起。从定义来说，从网址A做一个302重定向到网址B时，主机服务器的隐含意思是网址A随时有可能改主意，重新显示本身的内容或转向其他的地方。大部分的搜索引擎在大部分情况下，当收到302重定向时，一般只要去抓取目标网址就可以了，也就是说网址B。 实际上如果搜索引擎在遇到302转向时，百分之百的都抓取目标网址B的话，就不用担心网址URL劫持了。问题就在于，有的时候搜索引擎，尤其是Google，并不能总是抓取目标网址。为什么呢？比如说，有的时候A网址很短，但是它做了一个302重定向到B网址，而B网址是一个很长的乱七八糟的URL网址，甚至还有可能包含一些问号之类的参数。很自然的，A网址更加用户友好，而B网址既难看，又不用户友好。这时Google很有可能会仍然显示网址A。</p>\n<p>由于搜索引擎排名算法只是程序而不是人，在遇到302重定向的时候，并不能像人一样的去准确判定哪一个网址更适当，这就造成了网址URL劫持的可能性。也就是说，一个不道德的人在他自己的网址A做一个302重定向到你的网址B，出于某种原因， Google搜索结果所显示的仍然是网址A，但是所用的网页内容却是你的网址B上的内容，这种情况就叫做网址URL劫持。你辛辛苦苦所写的内容就这样被别人偷走了。</p>\n<ol>\n<li>301：当网页A用301重定向转到网页B时，搜索引擎可以肯定网页A永久的改变位置，或者说实际上不存了，搜索引擎就会把网页B当作唯一有效目标。 <strong>301的好处是</strong>: 第一， 没有网址规范化问题。 第二， 也很重要的，网页A的PR网页级别会传到网页B。</li>\n</ol>\n<h3 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h3><p>HTTPS（全称： Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP 通道，简单讲是 HTTP 的安全版。<strong>即 HTTP 下加入 SSL 层</strong>， HTTPS 的安全基础是 SSL。其所用的端口号是 <strong>443</strong>。 过程大致如下：</p>\n<h4 id=\"建立连接获取证书\"><a href=\"#建立连接获取证书\" class=\"headerlink\" title=\"建立连接获取证书\"></a>建立连接获取证书</h4><p>SSL 客户端通过 TCP 和服务器建立连接之后（443 端口），并且在一般的 tcp 连接协商（握手）过程中请求证书。即客户端发出一个消息给服务器，这个消息里面包含了自己可实现的算法列表和其它一些需要的消息， SSL 的服务器端会回应一个数据包，这里面确定了这次通信所需要的算法，然后服务器向客户端返回证书。（<strong>证书里面包含了服务器信息：域名。申请证书的公司，公共秘钥</strong>）</p>\n<h4 id=\"证书验证\"><a href=\"#证书验证\" class=\"headerlink\" title=\"证书验证\"></a>证书验证</h4><p>Client 在收到服务器返回的证书后，判断签发这个证书的公共签发机构，并使用这个机构的公共秘钥确认签名是否有效，客户端还会确保证书中列出的域名就是它正在连接的域名。</p>\n<h4 id=\"数据加密和传输\"><a href=\"#数据加密和传输\" class=\"headerlink\" title=\"数据加密和传输\"></a>数据加密和传输</h4><p>如果确认证书有效，那么生成对称秘钥并使用服务器的公共秘钥进行加密。然后发送给服务器，服务器使用它的私钥对它进行解密，这样两台计算机可以开始进行对称加密进行通信。</p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>HTTP 是一个无状态的协议。无状态是指客户机（Web 浏览器）和服务器之间不需要建立持久的连接，这意味着当一个客户端向服务器端发出请求，然后服务器返回响应(response)，连接就被关闭了，在服务器端不保留连接的有关信息.HTTP 遵循请求(Request)/应答(Response)模型。客户机（浏览器）向服务器发送请求，服务器处理请求并返回适当的应答。所有 HTTP 连接都被构造成一套请求和应答。</p>\n<h3 id=\"传输流程\"><a href=\"#传输流程\" class=\"headerlink\" title=\"传输流程\"></a>传输流程</h3><h4 id=\"地址解析\"><a href=\"#地址解析\" class=\"headerlink\" title=\"地址解析\"></a>地址解析</h4><p>如用客户端浏览器请求这个页面： <a href=\"http://localhost.com:8080/index.htm\" target=\"_blank\" rel=\"noopener\">http://localhost.com:8080/index.htm</a> 从中分解出协议名、主机名、端口、对象路径等部分，对于我们的这个地址，解析得到的结果如下：</p>\n<ul>\n<li>协议名： http</li>\n<li>主机名： localhost.com</li>\n<li>端口： 8080</li>\n<li>对象路径： /index.htm</li>\n</ul>\n<p>在这一步，需要域名系统 DNS 解析域名 localhost.com,得主机的 IP 地址。</p>\n<h4 id=\"封装-HTTP-请求数据包\"><a href=\"#封装-HTTP-请求数据包\" class=\"headerlink\" title=\"封装 HTTP 请求数据包\"></a>封装 HTTP 请求数据包</h4><p>把以上部分结合本机自己的信息，封装成一个 HTTP 请求数据包</p>\n<h4 id=\"封装成-TCP-包并建立连接\"><a href=\"#封装成-TCP-包并建立连接\" class=\"headerlink\" title=\"封装成 TCP 包并建立连接\"></a>封装成 TCP 包并建立连接</h4><p>封装成 TCP 包，建立 TCP 连接（TCP 的三次握手）</p>\n<h4 id=\"客户机发送请求命令\"><a href=\"#客户机发送请求命令\" class=\"headerlink\" title=\"客户机发送请求命令\"></a>客户机发送请求命令</h4><p>建立连接后，客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是 MIME 信息包括请求修饰符、客户机信息和可能的内容。</p>\n<h4 id=\"服务器响应\"><a href=\"#服务器响应\" class=\"headerlink\" title=\"服务器响应\"></a>服务器响应</h4><p>服务器接到请求后，给予相应的响应信息， 其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是 MIME 信息包括服务器信息、实体信息和可能的内容。</p>\n<h4 id=\"服务器关闭-TCP-连接\"><a href=\"#服务器关闭-TCP-连接\" class=\"headerlink\" title=\"服务器关闭 TCP 连接\"></a>服务器关闭 TCP 连接</h4><p>服务器关闭 TCP 连接： 一般情况下，一旦 Web 服务器向浏览器发送了请求数据，它就要关闭 TCP 连接，然后如果浏览器或者服务器在其头信息加入了这行代码 Connection:keep-alive， TCP 连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。</p>\n<p><img src=\"/2020/01/21/http-yu-https-yuan-li/1.png\" alt></p>\n<h4 id=\"HTTP响应状态\"><a href=\"#HTTP响应状态\" class=\"headerlink\" title=\"HTTP响应状态\"></a>HTTP响应状态</h4><ul>\n<li>1XX</li>\n</ul>\n<p><img src=\"/2020/01/21/http-yu-https-yuan-li/2.png\" alt></p>\n<ul>\n<li>2XX</li>\n</ul>\n<p><img src=\"/2020/01/21/http-yu-https-yuan-li/3.png\" alt></p>\n<ul>\n<li>3XX</li>\n</ul>\n<p><img src=\"/2020/01/21/http-yu-https-yuan-li/4.png\" alt></p>\n<ul>\n<li>4XX</li>\n</ul>\n<p><img src=\"/2020/01/21/http-yu-https-yuan-li/5.png\" alt></p>\n<ul>\n<li>5XX</li>\n</ul>\n<p><img src=\"/2020/01/21/http-yu-https-yuan-li/6.png\" alt></p>\n<h3 id=\"小插曲：301和302有啥区别\"><a href=\"#小插曲：301和302有啥区别\" class=\"headerlink\" title=\"小插曲：301和302有啥区别\"></a>小插曲：301和302有啥区别</h3><p>官方说法：</p>\n<blockquote>\n<p>301，302 都是HTTP状态的编码，都代表着某个URL发生了转移，不同之处在于： 301 redirect: 301 代表永久性转移(Permanently Moved)。 302 redirect: 302 代表暂时性转移(Temporarily Moved )。</p>\n</blockquote>\n<p>现实中的差异：</p>\n<ul>\n<li><strong>对于用户</strong>：</li>\n</ul>\n<p>301，302对用户来说没有区别，他们看到效果只是一个跳转，浏览器中旧的URL变成了新的URL。页面跳到了这个新的url指向的地方。</p>\n<ul>\n<li><strong>对于引擎及站长</strong>：</li>\n</ul>\n<ol>\n<li>302：302转向可能会有URL规范化及网址劫持的问题。可能被搜索引擎判为可疑转向，甚至认为是作弊</li>\n</ol>\n<p><strong>网址劫持</strong>： 302重定向和网址劫持（URL hijacking）有什么关系呢？这要从搜索引擎如何处理302转向说起。从定义来说，从网址A做一个302重定向到网址B时，主机服务器的隐含意思是网址A随时有可能改主意，重新显示本身的内容或转向其他的地方。大部分的搜索引擎在大部分情况下，当收到302重定向时，一般只要去抓取目标网址就可以了，也就是说网址B。 实际上如果搜索引擎在遇到302转向时，百分之百的都抓取目标网址B的话，就不用担心网址URL劫持了。问题就在于，有的时候搜索引擎，尤其是Google，并不能总是抓取目标网址。为什么呢？比如说，有的时候A网址很短，但是它做了一个302重定向到B网址，而B网址是一个很长的乱七八糟的URL网址，甚至还有可能包含一些问号之类的参数。很自然的，A网址更加用户友好，而B网址既难看，又不用户友好。这时Google很有可能会仍然显示网址A。</p>\n<p>由于搜索引擎排名算法只是程序而不是人，在遇到302重定向的时候，并不能像人一样的去准确判定哪一个网址更适当，这就造成了网址URL劫持的可能性。也就是说，一个不道德的人在他自己的网址A做一个302重定向到你的网址B，出于某种原因， Google搜索结果所显示的仍然是网址A，但是所用的网页内容却是你的网址B上的内容，这种情况就叫做网址URL劫持。你辛辛苦苦所写的内容就这样被别人偷走了。</p>\n<ol>\n<li>301：当网页A用301重定向转到网页B时，搜索引擎可以肯定网页A永久的改变位置，或者说实际上不存了，搜索引擎就会把网页B当作唯一有效目标。 <strong>301的好处是</strong>: 第一， 没有网址规范化问题。 第二， 也很重要的，网页A的PR网页级别会传到网页B。</li>\n</ol>\n<h3 id=\"HTTPS\"><a href=\"#HTTPS\" class=\"headerlink\" title=\"HTTPS\"></a>HTTPS</h3><p>HTTPS（全称： Hypertext Transfer Protocol over Secure Socket Layer），是以安全为目标的HTTP 通道，简单讲是 HTTP 的安全版。<strong>即 HTTP 下加入 SSL 层</strong>， HTTPS 的安全基础是 SSL。其所用的端口号是 <strong>443</strong>。 过程大致如下：</p>\n<h4 id=\"建立连接获取证书\"><a href=\"#建立连接获取证书\" class=\"headerlink\" title=\"建立连接获取证书\"></a>建立连接获取证书</h4><p>SSL 客户端通过 TCP 和服务器建立连接之后（443 端口），并且在一般的 tcp 连接协商（握手）过程中请求证书。即客户端发出一个消息给服务器，这个消息里面包含了自己可实现的算法列表和其它一些需要的消息， SSL 的服务器端会回应一个数据包，这里面确定了这次通信所需要的算法，然后服务器向客户端返回证书。（<strong>证书里面包含了服务器信息：域名。申请证书的公司，公共秘钥</strong>）</p>\n<h4 id=\"证书验证\"><a href=\"#证书验证\" class=\"headerlink\" title=\"证书验证\"></a>证书验证</h4><p>Client 在收到服务器返回的证书后，判断签发这个证书的公共签发机构，并使用这个机构的公共秘钥确认签名是否有效，客户端还会确保证书中列出的域名就是它正在连接的域名。</p>\n<h4 id=\"数据加密和传输\"><a href=\"#数据加密和传输\" class=\"headerlink\" title=\"数据加密和传输\"></a>数据加密和传输</h4><p>如果确认证书有效，那么生成对称秘钥并使用服务器的公共秘钥进行加密。然后发送给服务器，服务器使用它的私钥对它进行解密，这样两台计算机可以开始进行对称加密进行通信。</p>\n"},{"title":"HTTP请求方法的幂等性","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-02-02T13:21:03.000Z","password":null,"summary":null,"_content":"\n## 怎么理解幂等性\n\nHTTP幂等方法，是指无论调用多少次都不会有不同结果的 HTTP 方法。不管你调用一次，还是调用一百次，一千次，结果都是相同的。\n\n还是以之前的博文的例子为例。\n\n```html\nGET     /tickets       # 获取ticket列表\nGET     /tickets/12    # 查看某个具体的ticket\nPOST    /tickets       # 新建一个ticket\nPUT     /tickets/12    # 更新ticket 12\nPATCH   /tickets/12    # 更新ticket 12\nDELETE  /tickets/12    # 删除ticekt 12\n```\n\n### HTTP GET方法\n\nHTTP GET方法，用于获取资源，不管调用多少次接口，结果都不会改变，所以是幂等的。\n\n```html\nGET     /tickets       # 获取ticket列表\nGET     /tickets/12    # 查看某个具体的ticket\n```\n\n只是查询数据，不会影响到资源的变化，因此我们认为它幂等。\n\n值得注意，幂等性指的是作用于结果而非资源本身。怎么理解呢？例如，这个HTTP GET方法可能会每次得到不同的返回内容，但并不影响资源。\n\n可能你会问有这种情况么？当然有咯。例如，我们有一个接口获取当前时间，我们就应该设计成\n\n```html\nGET     /service_time # 获取服务器当前时间\n```\n\n它本身不会对资源本身产生影响，因此满足幂等性。\n\n### HTTP POST方法\n\nHTTP POST方法是一个非幂等方法，因为调用多次，都将产生新的资源。\n\n```\nPOST    /tickets       # 新建一个ticket\n```\n\n因为它会对资源本身产生影响，每次调用都会有新的资源产生，因此不满足幂等性。\n\n### HTTP PUT方法\n\nHTTP PUT方法是不是幂等的呢？我们来看下\n\n```html\nPUT     /tickets/12    # 更新ticket 12\n```\n\n因为它直接把实体部分的数据替换到服务器的资源，我们多次调用它，只会产生一次影响，但是有相同结果的 HTTP 方法，所以满足幂等性。\n\n### HTTP PATCH方法\n\nHTTP PATCH方法是非幂等的。HTTP POST方法和HTTP PUT方法可能比较好理解，但是HTTP PATCH方法只是更新部分资源，怎么是非幂等的呢?\n\n因为，PATCH提供的实体则需要根据程序或其它协议的定义，解析后在服务器上执行，以此来修改服务器上的资源。换句话说，PATCH请求是会执行某个程序的，如果重复提交，程序可能执行多次，对服务器上的资源就可能造成额外的影响，这就可以解释它为什么是非幂等的了。\n\n可能你还不能理解这点。我们举个例子\n\n```html\nPATCH   /tickets/12    # 更新ticket 12\n```\n\n此时，我们服务端对方法的处理是，当调用一次方法，更新部分字段，将这条ticket记录的操作记录加一，这次，每次调用的资源是不是变了呢，所以它是有可能是非幂等的操作。\n\n### HTTP DELETE方法\n\nHTTP DELETE方法用于删除资源，会将资源删除。\n\n```html\nDELETE  /tickets/12    # 删除ticekt 12\n```\n\n调用一次和多次对资源产生影响是相同的，所以也满足幂等性。\n\n## 如何设计符合幂等性的高质量RESTful API\n\n### HTTP GET方法 vs HTTP POST方法\n\n也许，你会想起一个面试题。HTTP请求的GET与POST方式有什么区别？你可能会回答到：GET方式通过URL提交数据，数据在URL中可以看到；POST方式，数据放置在HTML HEADER内提交。但是，我们现在从RESTful的资源角度来看待问题，HTTP GET方法是幂等的，所以它适合作为查询操作，HTTP POST方法是非幂等的，所以用来表示新增操作。\n\n但是，也有例外，我们有的时候可能需要把查询方法改造成HTTP POST方法。比如，超长（1k）的GET URL使用POST方法来替代，因为GET受到URL长度的限制。虽然，它不符合幂等性，但是它是一种折中的方案。\n\n### HTTP POST方法 vs HTTP PUT方法\n\n对于HTTP POST方法和TTP PUT方法，我们一般的理解是POST表示创建资源，PUT表示更新资源。当然，这个是正确的理解。\n\n但是，实际上，两个方法都用于创建资源，更为本质的差别是在幂等性。HTTP POST方法是非幂等，所以用来表示创建资源，HTTP PUT方法是幂等的，因此表示更新资源更加贴切。\n\n### HTTP PUT方法 vs HTTP PATCH方法\n\n此时，你看会有另外一个问题。HTTP PUT方法和HTTP PATCH方法，都是用来表述更新资源，它们之间有什么区别呢？我们一般的理解是PUT表示更新全部资源，PATCH表示更新部分资源。首先，这个是我们遵守的第一准则。根据上面的描述，PATCH方法是非幂等的，因此我们在设计我们服务端的RESTful API的时候，也需要考虑。如果，我们想要明确的告诉调用者我们的资源是幂等的，我的设计更倾向于使用HTTP PUT方法","source":"_posts/HTTP请求方法的幂等性.md","raw":"---\ntitle: HTTP请求方法的幂等性\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-02-02 21:21:03\npassword:\nsummary:\ntags:\ncategories: 计算机网络\n---\n\n## 怎么理解幂等性\n\nHTTP幂等方法，是指无论调用多少次都不会有不同结果的 HTTP 方法。不管你调用一次，还是调用一百次，一千次，结果都是相同的。\n\n还是以之前的博文的例子为例。\n\n```html\nGET     /tickets       # 获取ticket列表\nGET     /tickets/12    # 查看某个具体的ticket\nPOST    /tickets       # 新建一个ticket\nPUT     /tickets/12    # 更新ticket 12\nPATCH   /tickets/12    # 更新ticket 12\nDELETE  /tickets/12    # 删除ticekt 12\n```\n\n### HTTP GET方法\n\nHTTP GET方法，用于获取资源，不管调用多少次接口，结果都不会改变，所以是幂等的。\n\n```html\nGET     /tickets       # 获取ticket列表\nGET     /tickets/12    # 查看某个具体的ticket\n```\n\n只是查询数据，不会影响到资源的变化，因此我们认为它幂等。\n\n值得注意，幂等性指的是作用于结果而非资源本身。怎么理解呢？例如，这个HTTP GET方法可能会每次得到不同的返回内容，但并不影响资源。\n\n可能你会问有这种情况么？当然有咯。例如，我们有一个接口获取当前时间，我们就应该设计成\n\n```html\nGET     /service_time # 获取服务器当前时间\n```\n\n它本身不会对资源本身产生影响，因此满足幂等性。\n\n### HTTP POST方法\n\nHTTP POST方法是一个非幂等方法，因为调用多次，都将产生新的资源。\n\n```\nPOST    /tickets       # 新建一个ticket\n```\n\n因为它会对资源本身产生影响，每次调用都会有新的资源产生，因此不满足幂等性。\n\n### HTTP PUT方法\n\nHTTP PUT方法是不是幂等的呢？我们来看下\n\n```html\nPUT     /tickets/12    # 更新ticket 12\n```\n\n因为它直接把实体部分的数据替换到服务器的资源，我们多次调用它，只会产生一次影响，但是有相同结果的 HTTP 方法，所以满足幂等性。\n\n### HTTP PATCH方法\n\nHTTP PATCH方法是非幂等的。HTTP POST方法和HTTP PUT方法可能比较好理解，但是HTTP PATCH方法只是更新部分资源，怎么是非幂等的呢?\n\n因为，PATCH提供的实体则需要根据程序或其它协议的定义，解析后在服务器上执行，以此来修改服务器上的资源。换句话说，PATCH请求是会执行某个程序的，如果重复提交，程序可能执行多次，对服务器上的资源就可能造成额外的影响，这就可以解释它为什么是非幂等的了。\n\n可能你还不能理解这点。我们举个例子\n\n```html\nPATCH   /tickets/12    # 更新ticket 12\n```\n\n此时，我们服务端对方法的处理是，当调用一次方法，更新部分字段，将这条ticket记录的操作记录加一，这次，每次调用的资源是不是变了呢，所以它是有可能是非幂等的操作。\n\n### HTTP DELETE方法\n\nHTTP DELETE方法用于删除资源，会将资源删除。\n\n```html\nDELETE  /tickets/12    # 删除ticekt 12\n```\n\n调用一次和多次对资源产生影响是相同的，所以也满足幂等性。\n\n## 如何设计符合幂等性的高质量RESTful API\n\n### HTTP GET方法 vs HTTP POST方法\n\n也许，你会想起一个面试题。HTTP请求的GET与POST方式有什么区别？你可能会回答到：GET方式通过URL提交数据，数据在URL中可以看到；POST方式，数据放置在HTML HEADER内提交。但是，我们现在从RESTful的资源角度来看待问题，HTTP GET方法是幂等的，所以它适合作为查询操作，HTTP POST方法是非幂等的，所以用来表示新增操作。\n\n但是，也有例外，我们有的时候可能需要把查询方法改造成HTTP POST方法。比如，超长（1k）的GET URL使用POST方法来替代，因为GET受到URL长度的限制。虽然，它不符合幂等性，但是它是一种折中的方案。\n\n### HTTP POST方法 vs HTTP PUT方法\n\n对于HTTP POST方法和TTP PUT方法，我们一般的理解是POST表示创建资源，PUT表示更新资源。当然，这个是正确的理解。\n\n但是，实际上，两个方法都用于创建资源，更为本质的差别是在幂等性。HTTP POST方法是非幂等，所以用来表示创建资源，HTTP PUT方法是幂等的，因此表示更新资源更加贴切。\n\n### HTTP PUT方法 vs HTTP PATCH方法\n\n此时，你看会有另外一个问题。HTTP PUT方法和HTTP PATCH方法，都是用来表述更新资源，它们之间有什么区别呢？我们一般的理解是PUT表示更新全部资源，PATCH表示更新部分资源。首先，这个是我们遵守的第一准则。根据上面的描述，PATCH方法是非幂等的，因此我们在设计我们服务端的RESTful API的时候，也需要考虑。如果，我们想要明确的告诉调用者我们的资源是幂等的，我的设计更倾向于使用HTTP PUT方法","slug":"HTTP请求方法的幂等性","published":1,"updated":"2021-04-29T09:33:11.261Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6ml95000evkvykbwu7uhp","content":"<h2 id=\"怎么理解幂等性\"><a href=\"#怎么理解幂等性\" class=\"headerlink\" title=\"怎么理解幂等性\"></a>怎么理解幂等性</h2><p>HTTP幂等方法，是指无论调用多少次都不会有不同结果的 HTTP 方法。不管你调用一次，还是调用一百次，一千次，结果都是相同的。</p>\n<p>还是以之前的博文的例子为例。</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">GET     /tickets       # 获取ticket列表\nGET     /tickets/12    # 查看某个具体的ticket\nPOST    /tickets       # 新建一个ticket\nPUT     /tickets/12    # 更新ticket 12\nPATCH   /tickets/12    # 更新ticket 12\nDELETE  /tickets/12    # 删除ticekt 12<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"HTTP-GET方法\"><a href=\"#HTTP-GET方法\" class=\"headerlink\" title=\"HTTP GET方法\"></a>HTTP GET方法</h3><p>HTTP GET方法，用于获取资源，不管调用多少次接口，结果都不会改变，所以是幂等的。</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">GET     /tickets       # 获取ticket列表\nGET     /tickets/12    # 查看某个具体的ticket<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>只是查询数据，不会影响到资源的变化，因此我们认为它幂等。</p>\n<p>值得注意，幂等性指的是作用于结果而非资源本身。怎么理解呢？例如，这个HTTP GET方法可能会每次得到不同的返回内容，但并不影响资源。</p>\n<p>可能你会问有这种情况么？当然有咯。例如，我们有一个接口获取当前时间，我们就应该设计成</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">GET     /service_time # 获取服务器当前时间<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>它本身不会对资源本身产生影响，因此满足幂等性。</p>\n<h3 id=\"HTTP-POST方法\"><a href=\"#HTTP-POST方法\" class=\"headerlink\" title=\"HTTP POST方法\"></a>HTTP POST方法</h3><p>HTTP POST方法是一个非幂等方法，因为调用多次，都将产生新的资源。</p>\n<pre><code>POST    /tickets       # 新建一个ticket</code></pre><p>因为它会对资源本身产生影响，每次调用都会有新的资源产生，因此不满足幂等性。</p>\n<h3 id=\"HTTP-PUT方法\"><a href=\"#HTTP-PUT方法\" class=\"headerlink\" title=\"HTTP PUT方法\"></a>HTTP PUT方法</h3><p>HTTP PUT方法是不是幂等的呢？我们来看下</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">PUT     /tickets/12    # 更新ticket 12<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>因为它直接把实体部分的数据替换到服务器的资源，我们多次调用它，只会产生一次影响，但是有相同结果的 HTTP 方法，所以满足幂等性。</p>\n<h3 id=\"HTTP-PATCH方法\"><a href=\"#HTTP-PATCH方法\" class=\"headerlink\" title=\"HTTP PATCH方法\"></a>HTTP PATCH方法</h3><p>HTTP PATCH方法是非幂等的。HTTP POST方法和HTTP PUT方法可能比较好理解，但是HTTP PATCH方法只是更新部分资源，怎么是非幂等的呢?</p>\n<p>因为，PATCH提供的实体则需要根据程序或其它协议的定义，解析后在服务器上执行，以此来修改服务器上的资源。换句话说，PATCH请求是会执行某个程序的，如果重复提交，程序可能执行多次，对服务器上的资源就可能造成额外的影响，这就可以解释它为什么是非幂等的了。</p>\n<p>可能你还不能理解这点。我们举个例子</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">PATCH   /tickets/12    # 更新ticket 12<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>此时，我们服务端对方法的处理是，当调用一次方法，更新部分字段，将这条ticket记录的操作记录加一，这次，每次调用的资源是不是变了呢，所以它是有可能是非幂等的操作。</p>\n<h3 id=\"HTTP-DELETE方法\"><a href=\"#HTTP-DELETE方法\" class=\"headerlink\" title=\"HTTP DELETE方法\"></a>HTTP DELETE方法</h3><p>HTTP DELETE方法用于删除资源，会将资源删除。</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">DELETE  /tickets/12    # 删除ticekt 12<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>调用一次和多次对资源产生影响是相同的，所以也满足幂等性。</p>\n<h2 id=\"如何设计符合幂等性的高质量RESTful-API\"><a href=\"#如何设计符合幂等性的高质量RESTful-API\" class=\"headerlink\" title=\"如何设计符合幂等性的高质量RESTful API\"></a>如何设计符合幂等性的高质量RESTful API</h2><h3 id=\"HTTP-GET方法-vs-HTTP-POST方法\"><a href=\"#HTTP-GET方法-vs-HTTP-POST方法\" class=\"headerlink\" title=\"HTTP GET方法 vs HTTP POST方法\"></a>HTTP GET方法 vs HTTP POST方法</h3><p>也许，你会想起一个面试题。HTTP请求的GET与POST方式有什么区别？你可能会回答到：GET方式通过URL提交数据，数据在URL中可以看到；POST方式，数据放置在HTML HEADER内提交。但是，我们现在从RESTful的资源角度来看待问题，HTTP GET方法是幂等的，所以它适合作为查询操作，HTTP POST方法是非幂等的，所以用来表示新增操作。</p>\n<p>但是，也有例外，我们有的时候可能需要把查询方法改造成HTTP POST方法。比如，超长（1k）的GET URL使用POST方法来替代，因为GET受到URL长度的限制。虽然，它不符合幂等性，但是它是一种折中的方案。</p>\n<h3 id=\"HTTP-POST方法-vs-HTTP-PUT方法\"><a href=\"#HTTP-POST方法-vs-HTTP-PUT方法\" class=\"headerlink\" title=\"HTTP POST方法 vs HTTP PUT方法\"></a>HTTP POST方法 vs HTTP PUT方法</h3><p>对于HTTP POST方法和TTP PUT方法，我们一般的理解是POST表示创建资源，PUT表示更新资源。当然，这个是正确的理解。</p>\n<p>但是，实际上，两个方法都用于创建资源，更为本质的差别是在幂等性。HTTP POST方法是非幂等，所以用来表示创建资源，HTTP PUT方法是幂等的，因此表示更新资源更加贴切。</p>\n<h3 id=\"HTTP-PUT方法-vs-HTTP-PATCH方法\"><a href=\"#HTTP-PUT方法-vs-HTTP-PATCH方法\" class=\"headerlink\" title=\"HTTP PUT方法 vs HTTP PATCH方法\"></a>HTTP PUT方法 vs HTTP PATCH方法</h3><p>此时，你看会有另外一个问题。HTTP PUT方法和HTTP PATCH方法，都是用来表述更新资源，它们之间有什么区别呢？我们一般的理解是PUT表示更新全部资源，PATCH表示更新部分资源。首先，这个是我们遵守的第一准则。根据上面的描述，PATCH方法是非幂等的，因此我们在设计我们服务端的RESTful API的时候，也需要考虑。如果，我们想要明确的告诉调用者我们的资源是幂等的，我的设计更倾向于使用HTTP PUT方法</p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h2 id=\"怎么理解幂等性\"><a href=\"#怎么理解幂等性\" class=\"headerlink\" title=\"怎么理解幂等性\"></a>怎么理解幂等性</h2><p>HTTP幂等方法，是指无论调用多少次都不会有不同结果的 HTTP 方法。不管你调用一次，还是调用一百次，一千次，结果都是相同的。</p>\n<p>还是以之前的博文的例子为例。</p>\n<pre><code class=\"html\">GET     /tickets       # 获取ticket列表\nGET     /tickets/12    # 查看某个具体的ticket\nPOST    /tickets       # 新建一个ticket\nPUT     /tickets/12    # 更新ticket 12\nPATCH   /tickets/12    # 更新ticket 12\nDELETE  /tickets/12    # 删除ticekt 12</code></pre>\n<h3 id=\"HTTP-GET方法\"><a href=\"#HTTP-GET方法\" class=\"headerlink\" title=\"HTTP GET方法\"></a>HTTP GET方法</h3><p>HTTP GET方法，用于获取资源，不管调用多少次接口，结果都不会改变，所以是幂等的。</p>\n<pre><code class=\"html\">GET     /tickets       # 获取ticket列表\nGET     /tickets/12    # 查看某个具体的ticket</code></pre>\n<p>只是查询数据，不会影响到资源的变化，因此我们认为它幂等。</p>\n<p>值得注意，幂等性指的是作用于结果而非资源本身。怎么理解呢？例如，这个HTTP GET方法可能会每次得到不同的返回内容，但并不影响资源。</p>\n<p>可能你会问有这种情况么？当然有咯。例如，我们有一个接口获取当前时间，我们就应该设计成</p>\n<pre><code class=\"html\">GET     /service_time # 获取服务器当前时间</code></pre>\n<p>它本身不会对资源本身产生影响，因此满足幂等性。</p>\n<h3 id=\"HTTP-POST方法\"><a href=\"#HTTP-POST方法\" class=\"headerlink\" title=\"HTTP POST方法\"></a>HTTP POST方法</h3><p>HTTP POST方法是一个非幂等方法，因为调用多次，都将产生新的资源。</p>\n<pre><code>POST    /tickets       # 新建一个ticket</code></pre><p>因为它会对资源本身产生影响，每次调用都会有新的资源产生，因此不满足幂等性。</p>\n<h3 id=\"HTTP-PUT方法\"><a href=\"#HTTP-PUT方法\" class=\"headerlink\" title=\"HTTP PUT方法\"></a>HTTP PUT方法</h3><p>HTTP PUT方法是不是幂等的呢？我们来看下</p>\n<pre><code class=\"html\">PUT     /tickets/12    # 更新ticket 12</code></pre>\n<p>因为它直接把实体部分的数据替换到服务器的资源，我们多次调用它，只会产生一次影响，但是有相同结果的 HTTP 方法，所以满足幂等性。</p>\n<h3 id=\"HTTP-PATCH方法\"><a href=\"#HTTP-PATCH方法\" class=\"headerlink\" title=\"HTTP PATCH方法\"></a>HTTP PATCH方法</h3><p>HTTP PATCH方法是非幂等的。HTTP POST方法和HTTP PUT方法可能比较好理解，但是HTTP PATCH方法只是更新部分资源，怎么是非幂等的呢?</p>\n<p>因为，PATCH提供的实体则需要根据程序或其它协议的定义，解析后在服务器上执行，以此来修改服务器上的资源。换句话说，PATCH请求是会执行某个程序的，如果重复提交，程序可能执行多次，对服务器上的资源就可能造成额外的影响，这就可以解释它为什么是非幂等的了。</p>\n<p>可能你还不能理解这点。我们举个例子</p>\n<pre><code class=\"html\">PATCH   /tickets/12    # 更新ticket 12</code></pre>\n<p>此时，我们服务端对方法的处理是，当调用一次方法，更新部分字段，将这条ticket记录的操作记录加一，这次，每次调用的资源是不是变了呢，所以它是有可能是非幂等的操作。</p>\n<h3 id=\"HTTP-DELETE方法\"><a href=\"#HTTP-DELETE方法\" class=\"headerlink\" title=\"HTTP DELETE方法\"></a>HTTP DELETE方法</h3><p>HTTP DELETE方法用于删除资源，会将资源删除。</p>\n<pre><code class=\"html\">DELETE  /tickets/12    # 删除ticekt 12</code></pre>\n<p>调用一次和多次对资源产生影响是相同的，所以也满足幂等性。</p>\n<h2 id=\"如何设计符合幂等性的高质量RESTful-API\"><a href=\"#如何设计符合幂等性的高质量RESTful-API\" class=\"headerlink\" title=\"如何设计符合幂等性的高质量RESTful API\"></a>如何设计符合幂等性的高质量RESTful API</h2><h3 id=\"HTTP-GET方法-vs-HTTP-POST方法\"><a href=\"#HTTP-GET方法-vs-HTTP-POST方法\" class=\"headerlink\" title=\"HTTP GET方法 vs HTTP POST方法\"></a>HTTP GET方法 vs HTTP POST方法</h3><p>也许，你会想起一个面试题。HTTP请求的GET与POST方式有什么区别？你可能会回答到：GET方式通过URL提交数据，数据在URL中可以看到；POST方式，数据放置在HTML HEADER内提交。但是，我们现在从RESTful的资源角度来看待问题，HTTP GET方法是幂等的，所以它适合作为查询操作，HTTP POST方法是非幂等的，所以用来表示新增操作。</p>\n<p>但是，也有例外，我们有的时候可能需要把查询方法改造成HTTP POST方法。比如，超长（1k）的GET URL使用POST方法来替代，因为GET受到URL长度的限制。虽然，它不符合幂等性，但是它是一种折中的方案。</p>\n<h3 id=\"HTTP-POST方法-vs-HTTP-PUT方法\"><a href=\"#HTTP-POST方法-vs-HTTP-PUT方法\" class=\"headerlink\" title=\"HTTP POST方法 vs HTTP PUT方法\"></a>HTTP POST方法 vs HTTP PUT方法</h3><p>对于HTTP POST方法和TTP PUT方法，我们一般的理解是POST表示创建资源，PUT表示更新资源。当然，这个是正确的理解。</p>\n<p>但是，实际上，两个方法都用于创建资源，更为本质的差别是在幂等性。HTTP POST方法是非幂等，所以用来表示创建资源，HTTP PUT方法是幂等的，因此表示更新资源更加贴切。</p>\n<h3 id=\"HTTP-PUT方法-vs-HTTP-PATCH方法\"><a href=\"#HTTP-PUT方法-vs-HTTP-PATCH方法\" class=\"headerlink\" title=\"HTTP PUT方法 vs HTTP PATCH方法\"></a>HTTP PUT方法 vs HTTP PATCH方法</h3><p>此时，你看会有另外一个问题。HTTP PUT方法和HTTP PATCH方法，都是用来表述更新资源，它们之间有什么区别呢？我们一般的理解是PUT表示更新全部资源，PATCH表示更新部分资源。首先，这个是我们遵守的第一准则。根据上面的描述，PATCH方法是非幂等的，因此我们在设计我们服务端的RESTful API的时候，也需要考虑。如果，我们想要明确的告诉调用者我们的资源是幂等的，我的设计更倾向于使用HTTP PUT方法</p>\n"},{"title":"Hadoop之HDFS上传文件源码分析","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-16T13:16:23.000Z","password":null,"summary":null,"_content":"\n\n\n## 概述\n\nhdfs中每个block默认情况下是128M，由于每个块比较大，所以在写数据的过程中是把数据块拆分成一个个的数据包以管道的形式发送的，所以hdfs文件的写入会涉及到客户端、namenode、datanode多个模块的交互。\n\n### 操作代码\n\n```java\nConfiguration conf = new Configuration();  \nFileSystem fs = FileSystem.get(conf);  \nPath file = new Path(\"hdfs://127.0.0.1:9000/example.txt\");  \nFSDataOutputStream outStream = fs.create(file);  \nout.write(\"java api write data\".getBytes(\"UTF-8\"));   \noutStream.close();  \n```\n\n\n通过 FileSystem.get(conf); 来构造了一个FileSystem 实例，这里对应的是DistributedFileSystem，通过调用DistributedFileSystem里面的create方法创建了一个文件，并且返回了这个文件的输出流，用于写入数据。\n\nDistributedFileSystem的create方法有很多重载的方法，最终调用了DistributedFileSystem的下面的这个create方法\n\n```java\n@Override\npublic FSDataOutputStream create(final Path f, final FsPermission permission,\n    final EnumSet<CreateFlag> cflags, final int bufferSize,\n    final short replication, final long blockSize, final Progressable progress,\n    final ChecksumOpt checksumOpt) throws IOException {\n    statistics.incrementWriteOps(1);\n    Path absF = fixRelativePart(f);\n    return new FileSystemLinkResolver<FSDataOutputStream>() {\n      @Override\n      public FSDataOutputStream doCall(final Path p)throws IOException, UnresolvedLinkException {\n        final DFSOutputStream dfsos = dfs.create(getPathName(p), permission,\n                cflags, replication, blockSize, progress, bufferSize,\n                checksumOpt);\n        return dfs.createWrappedOutputStream(dfsos, statistics);\n\n }\n\n      @Override\n      public FSDataOutputStream next(final FileSystem fs, final Path p) throws IOException {\n        return fs.create(p, permission, cflags, bufferSize,replication, blockSize, progress, checksumOpt);\n      }\n\t\t}.resolve(this, absF);\n  }\n\n```\n\n\n在这里，调用了DFSClient的create方法来创建文件\n\n```java\ncreate(String, FsPermission, EnumSet, boolean, short, long, Progressable, int, ChecksumOpt, InetSocketAddress[])\n```\n\n在这里create方法里，通过DFSOutputStream的静态方法newStreamForCreate构建了一个对象，并且返回了一个DFSOutputStream对象。\n\n```java\nstatic DFSOutputStream newStreamForCreate(DFSClient dfsClient, String src,\n      FsPermission masked, EnumSet<CreateFlag> flag, boolean createParent,\n      short replication, long blockSize, Progressable progress, int buffersize,\n      DataChecksum checksum, String[] favoredNodes) throws IOException {\n    TraceScope scope = dfsClient.getPathTraceScope(\"newStreamForCreate\", src);\n    try {\n      HdfsFileStatus stat = null;\n      // Retry the create if we get a RetryStartFileException up to a maximum\n      // number of times\n      boolean shouldRetry = true;\n      int retryCount = CREATE_RETRY_COUNT;\n      while (shouldRetry) {\n        shouldRetry = false;\n        try {\n          //通过调用namenode的create方法来创建文件\n          stat = dfsClient.namenode.create(src, masked, dfsClient.clientName,\n              new EnumSetWritable<CreateFlag>(flag), createParent, replication,\n              blockSize, SUPPORTED_CRYPTO_VERSIONS);\n          break;\n        } catch (RemoteException re) {\n          IOException e = re.unwrapRemoteException(\n              AccessControlException.class,\n              DSQuotaExceededException.class,\n              FileAlreadyExistsException.class,\n              FileNotFoundException.class,\n              ParentNotDirectoryException.class,\n              NSQuotaExceededException.class,\n              RetryStartFileException.class,\n              SafeModeException.class,\n              UnresolvedPathException.class,\n              SnapshotAccessControlException.class,\n              UnknownCryptoProtocolVersionException.class);\n          if (e instanceof RetryStartFileException) {\n            if (retryCount > 0) {\n              shouldRetry = true;\n              retryCount--;\n            } else {\n              throw new IOException(\"Too many retries because of encryption\" +\n                  \" zone operations\", e);\n            }\n          } else {\n            throw e;\n          }\n        }\n      }\n  Preconditions.checkNotNull(stat, \"HdfsFileStatus should not be null!\");\n\n  //构造了一个DFSOutputStream对象，即刚刚创建的文件的输出流.\n  final DFSOutputStream out = new DFSOutputStream(dfsClient, src, stat,\n      flag, progress, checksum, favoredNodes);\n\n //start方法启动了DFSOutputStream的内部类DataStreamer，用于接收要写入的数据包\n  out.start();\n  return out;\n} finally {\n  scope.close();\n  }\n}\n```\n\n通过dfsClient.namenode.create在hdfs的目录树上创建了一个文件，然后通过new DFSOutputStream创建了一个该文件的输出流实例，在DFSOutputStream构造方法中,初始化了用于数据处理的DFSOutputStream类的内部类DataStreamer，用于启动DataStreamer线程,接受客户端写入数据包的请求。\n\nDataStreamer是一个线程，它的启动是通过DFSOutputStream的start方法来启动的\n\n```java\n /** Construct a new output stream for creating a file. */\n  private DFSOutputStream(DFSClient dfsClient, String src, HdfsFileStatus stat,\n      EnumSet<CreateFlag> flag, Progressable progress,\n      DataChecksum checksum, String[] favoredNodes) throws IOException {\n      this(dfsClient, src, progress, stat, checksum);\n      this.shouldSyncBlock = flag.contains(CreateFlag.SYNC_BLOCK);\n      computePacketChunkSize(dfsClient.getConf().writePacketSize, bytesPerChecksum);\n\n      streamer = new DataStreamer(stat, null);\n      if (favoredNodes != null && favoredNodes.length != 0) {\n      \tstreamer.setFavoredNodes(favoredNodes);\n      }\n}\n```\n\n### namenode创建文件\n\n上述dfsClient.namenode.create是调用了客户端和namenode交互的接口ClientProtocol中的create方法来创建文件，之后由ClientProtoco的实现类\norg.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolTranslatorPB中的create方法封装了创建文件所需的信息，通过rpc的方式发送到了namenode来处理。\n\n最终的实现方法是NameNodeRpcServer类的create方法，之后经过FSNamesystem的startFile、startFileInt，最后在方法startFileInternal中实现具体的逻辑。\n\n1.首先检查是否是一个目录，如果是的话抛出异常.\n2.检查是否有写的权限。\n3.检查是否创建父目录\n4.检查create字段，用户是否创建为文件\n5.检查是否覆盖源文件，如果true的话，则删除原来的旧文件。\n\n最后调用了FSDirectory的addFile方法来创建文件。\n\n```java\niip = dir.addFile(parent.getKey(), parent.getValue(), permissions,\n\nreplication, blockSize, holder, clientMachine);\n```\n\n具体的操作就是找到该文件的父目录，然后在父目录的List类型的对象children中添加一条数据。\n\n具体的代码如下：\n\n```java\n private BlocksMapUpdateInfo startFileInternal(FSPermissionChecker pc, \n \tINodesInPath iip, PermissionStatus permissions, String holder,\n \tString clientMachine, boolean create, boolean overwrite, \n \tboolean createParent, short replication, long blockSize, \n \tboolean isLazyPersist, CipherSuite suite, CryptoProtocolVersion version,\n \tEncryptedKeyVersion edek, boolean logRetryEntry)throws IOException {\n    assert hasWriteLock();\n    // Verify that the destination does not exist as a directory already.\n    final INode inode = iip.getLastINode();\n    final String src = iip.getPath();\n    //检查是否存在，并且是不是一个目录\n    if (inode != null && inode.isDirectory()) {\n      throw new FileAlreadyExistsException(src +\n          \" already exists as a directory\");\n    }\n\n    //检查是否有写的权限\n    final INodeFile myFile = INodeFile.valueOf(inode, src, true);\n    if (isPermissionEnabled) {\n      if (overwrite && myFile != null) {\n        dir.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n      /*\n       * To overwrite existing file, need to check 'w' permission \n       * of parent (equals to ancestor in this case)\n       */\n      dir.checkAncestorAccess(pc, iip, FsAction.WRITE);\n    }\n    //是否创建父目录\n    if (!createParent) {\n      dir.verifyParentDir(iip, src);\n    }\n\n    FileEncryptionInfo feInfo = null;\n\n    final EncryptionZone zone = dir.getEZForPath(iip);\n    if (zone != null) {\n      // The path is now within an EZ, but we're missing encryption parameters\n      if (suite == null || edek == null) {\n        throw new RetryStartFileException();\n      }\n      // Path is within an EZ and we have provided encryption parameters.\n      // Make sure that the generated EDEK matches the settings of the EZ.\n      final String ezKeyName = zone.getKeyName();\n      if (!ezKeyName.equals(edek.getEncryptionKeyName())) {\n        throw new RetryStartFileException();\n      }\n      feInfo = new FileEncryptionInfo(suite, version,\n          edek.getEncryptedKeyVersion().getMaterial(),\n          edek.getEncryptedKeyIv(),\n          ezKeyName, edek.getEncryptionKeyVersionName());\n    }\n\n    try {\n      BlocksMapUpdateInfo toRemoveBlocks = null;\n      if (myFile == null) {\n      //是否创建文件\n        if (!create) {\n          throw new FileNotFoundException(\"Can't overwrite non-existent \" +\n              src + \" for client \" + clientMachine);\n        }\n      } else {\n         //是否覆盖\n        if (overwrite) {\n          toRemoveBlocks = new BlocksMapUpdateInfo();\n          List<INode> toRemoveINodes = new ChunkedArrayList<INode>();\n          //删除旧文件\n          long ret = FSDirDeleteOp.delete(dir, iip, toRemoveBlocks,\n                                          toRemoveINodes, now());\n          if (ret >= 0) {\n            iip = INodesInPath.replace(iip, iip.length() - 1, null);\n            FSDirDeleteOp.incrDeletedFileCount(ret);\n            removeLeasesAndINodes(src, toRemoveINodes, true);\n          }\n        } else {\n          // If lease soft limit time is expired, recover the lease\n          recoverLeaseInternal(RecoverLeaseOp.CREATE_FILE,\n              iip, src, holder, clientMachine, false);\n          throw new FileAlreadyExistsException(src + \" for client \" +\n              clientMachine + \" already exists\");\n        }\n      }\n\n      checkFsObjectLimit();\n      INodeFile newNode = null;\n\n      // Always do an implicit mkdirs for parent directory tree.\n      Map.Entry<INodesInPath, String> parent = FSDirMkdirOp\n          .createAncestorDirectories(dir, iip, permissions);\n      if (parent != null) {\n        //具体的操作，创建文件\n        iip = dir.addFile(parent.getKey(), parent.getValue(), permissions,\n            replication, blockSize, holder, clientMachine);\n        newNode = iip != null ? iip.getLastINode().asFile() : null;\n      }\n\n      if (newNode == null) {\n        throw new IOException(\"Unable to add \" + src +  \" to namespace\");\n      }\n      leaseManager.addLease(newNode.getFileUnderConstructionFeature()\n          .getClientName(), src);\n\n      // Set encryption attributes if necessary\n      if (feInfo != null) {\n        dir.setFileEncryptionInfo(src, feInfo);\n        newNode = dir.getInode(newNode.getId()).asFile();\n      }\n\n      setNewINodeStoragePolicy(newNode, iip, isLazyPersist);\n\n      // record file record in log, record new generation stamp\n      getEditLog().logOpenFile(src, newNode, overwrite, logRetryEntry);\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.startFile: added {}\" +\n          \" inode {} holder {}\", src, newNode.getId(), holder);\n      return toRemoveBlocks;\n    } catch (IOException ie) {\n      NameNode.stateChangeLog.warn(\"DIR* NameSystem.startFile: \" + src + \" \" +\n          ie.getMessage());\n      throw ie;\n    }\n```\n","source":"_posts/Hadoop之HDFS上传文件源码分析.md","raw":"---\ntitle: Hadoop之HDFS上传文件源码分析\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-16 21:16:23\npassword:\nsummary:\ntags:\ncategories: 大数据\n---\n\n\n\n## 概述\n\nhdfs中每个block默认情况下是128M，由于每个块比较大，所以在写数据的过程中是把数据块拆分成一个个的数据包以管道的形式发送的，所以hdfs文件的写入会涉及到客户端、namenode、datanode多个模块的交互。\n\n### 操作代码\n\n```java\nConfiguration conf = new Configuration();  \nFileSystem fs = FileSystem.get(conf);  \nPath file = new Path(\"hdfs://127.0.0.1:9000/example.txt\");  \nFSDataOutputStream outStream = fs.create(file);  \nout.write(\"java api write data\".getBytes(\"UTF-8\"));   \noutStream.close();  \n```\n\n\n通过 FileSystem.get(conf); 来构造了一个FileSystem 实例，这里对应的是DistributedFileSystem，通过调用DistributedFileSystem里面的create方法创建了一个文件，并且返回了这个文件的输出流，用于写入数据。\n\nDistributedFileSystem的create方法有很多重载的方法，最终调用了DistributedFileSystem的下面的这个create方法\n\n```java\n@Override\npublic FSDataOutputStream create(final Path f, final FsPermission permission,\n    final EnumSet<CreateFlag> cflags, final int bufferSize,\n    final short replication, final long blockSize, final Progressable progress,\n    final ChecksumOpt checksumOpt) throws IOException {\n    statistics.incrementWriteOps(1);\n    Path absF = fixRelativePart(f);\n    return new FileSystemLinkResolver<FSDataOutputStream>() {\n      @Override\n      public FSDataOutputStream doCall(final Path p)throws IOException, UnresolvedLinkException {\n        final DFSOutputStream dfsos = dfs.create(getPathName(p), permission,\n                cflags, replication, blockSize, progress, bufferSize,\n                checksumOpt);\n        return dfs.createWrappedOutputStream(dfsos, statistics);\n\n }\n\n      @Override\n      public FSDataOutputStream next(final FileSystem fs, final Path p) throws IOException {\n        return fs.create(p, permission, cflags, bufferSize,replication, blockSize, progress, checksumOpt);\n      }\n\t\t}.resolve(this, absF);\n  }\n\n```\n\n\n在这里，调用了DFSClient的create方法来创建文件\n\n```java\ncreate(String, FsPermission, EnumSet, boolean, short, long, Progressable, int, ChecksumOpt, InetSocketAddress[])\n```\n\n在这里create方法里，通过DFSOutputStream的静态方法newStreamForCreate构建了一个对象，并且返回了一个DFSOutputStream对象。\n\n```java\nstatic DFSOutputStream newStreamForCreate(DFSClient dfsClient, String src,\n      FsPermission masked, EnumSet<CreateFlag> flag, boolean createParent,\n      short replication, long blockSize, Progressable progress, int buffersize,\n      DataChecksum checksum, String[] favoredNodes) throws IOException {\n    TraceScope scope = dfsClient.getPathTraceScope(\"newStreamForCreate\", src);\n    try {\n      HdfsFileStatus stat = null;\n      // Retry the create if we get a RetryStartFileException up to a maximum\n      // number of times\n      boolean shouldRetry = true;\n      int retryCount = CREATE_RETRY_COUNT;\n      while (shouldRetry) {\n        shouldRetry = false;\n        try {\n          //通过调用namenode的create方法来创建文件\n          stat = dfsClient.namenode.create(src, masked, dfsClient.clientName,\n              new EnumSetWritable<CreateFlag>(flag), createParent, replication,\n              blockSize, SUPPORTED_CRYPTO_VERSIONS);\n          break;\n        } catch (RemoteException re) {\n          IOException e = re.unwrapRemoteException(\n              AccessControlException.class,\n              DSQuotaExceededException.class,\n              FileAlreadyExistsException.class,\n              FileNotFoundException.class,\n              ParentNotDirectoryException.class,\n              NSQuotaExceededException.class,\n              RetryStartFileException.class,\n              SafeModeException.class,\n              UnresolvedPathException.class,\n              SnapshotAccessControlException.class,\n              UnknownCryptoProtocolVersionException.class);\n          if (e instanceof RetryStartFileException) {\n            if (retryCount > 0) {\n              shouldRetry = true;\n              retryCount--;\n            } else {\n              throw new IOException(\"Too many retries because of encryption\" +\n                  \" zone operations\", e);\n            }\n          } else {\n            throw e;\n          }\n        }\n      }\n  Preconditions.checkNotNull(stat, \"HdfsFileStatus should not be null!\");\n\n  //构造了一个DFSOutputStream对象，即刚刚创建的文件的输出流.\n  final DFSOutputStream out = new DFSOutputStream(dfsClient, src, stat,\n      flag, progress, checksum, favoredNodes);\n\n //start方法启动了DFSOutputStream的内部类DataStreamer，用于接收要写入的数据包\n  out.start();\n  return out;\n} finally {\n  scope.close();\n  }\n}\n```\n\n通过dfsClient.namenode.create在hdfs的目录树上创建了一个文件，然后通过new DFSOutputStream创建了一个该文件的输出流实例，在DFSOutputStream构造方法中,初始化了用于数据处理的DFSOutputStream类的内部类DataStreamer，用于启动DataStreamer线程,接受客户端写入数据包的请求。\n\nDataStreamer是一个线程，它的启动是通过DFSOutputStream的start方法来启动的\n\n```java\n /** Construct a new output stream for creating a file. */\n  private DFSOutputStream(DFSClient dfsClient, String src, HdfsFileStatus stat,\n      EnumSet<CreateFlag> flag, Progressable progress,\n      DataChecksum checksum, String[] favoredNodes) throws IOException {\n      this(dfsClient, src, progress, stat, checksum);\n      this.shouldSyncBlock = flag.contains(CreateFlag.SYNC_BLOCK);\n      computePacketChunkSize(dfsClient.getConf().writePacketSize, bytesPerChecksum);\n\n      streamer = new DataStreamer(stat, null);\n      if (favoredNodes != null && favoredNodes.length != 0) {\n      \tstreamer.setFavoredNodes(favoredNodes);\n      }\n}\n```\n\n### namenode创建文件\n\n上述dfsClient.namenode.create是调用了客户端和namenode交互的接口ClientProtocol中的create方法来创建文件，之后由ClientProtoco的实现类\norg.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolTranslatorPB中的create方法封装了创建文件所需的信息，通过rpc的方式发送到了namenode来处理。\n\n最终的实现方法是NameNodeRpcServer类的create方法，之后经过FSNamesystem的startFile、startFileInt，最后在方法startFileInternal中实现具体的逻辑。\n\n1.首先检查是否是一个目录，如果是的话抛出异常.\n2.检查是否有写的权限。\n3.检查是否创建父目录\n4.检查create字段，用户是否创建为文件\n5.检查是否覆盖源文件，如果true的话，则删除原来的旧文件。\n\n最后调用了FSDirectory的addFile方法来创建文件。\n\n```java\niip = dir.addFile(parent.getKey(), parent.getValue(), permissions,\n\nreplication, blockSize, holder, clientMachine);\n```\n\n具体的操作就是找到该文件的父目录，然后在父目录的List类型的对象children中添加一条数据。\n\n具体的代码如下：\n\n```java\n private BlocksMapUpdateInfo startFileInternal(FSPermissionChecker pc, \n \tINodesInPath iip, PermissionStatus permissions, String holder,\n \tString clientMachine, boolean create, boolean overwrite, \n \tboolean createParent, short replication, long blockSize, \n \tboolean isLazyPersist, CipherSuite suite, CryptoProtocolVersion version,\n \tEncryptedKeyVersion edek, boolean logRetryEntry)throws IOException {\n    assert hasWriteLock();\n    // Verify that the destination does not exist as a directory already.\n    final INode inode = iip.getLastINode();\n    final String src = iip.getPath();\n    //检查是否存在，并且是不是一个目录\n    if (inode != null && inode.isDirectory()) {\n      throw new FileAlreadyExistsException(src +\n          \" already exists as a directory\");\n    }\n\n    //检查是否有写的权限\n    final INodeFile myFile = INodeFile.valueOf(inode, src, true);\n    if (isPermissionEnabled) {\n      if (overwrite && myFile != null) {\n        dir.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n      /*\n       * To overwrite existing file, need to check 'w' permission \n       * of parent (equals to ancestor in this case)\n       */\n      dir.checkAncestorAccess(pc, iip, FsAction.WRITE);\n    }\n    //是否创建父目录\n    if (!createParent) {\n      dir.verifyParentDir(iip, src);\n    }\n\n    FileEncryptionInfo feInfo = null;\n\n    final EncryptionZone zone = dir.getEZForPath(iip);\n    if (zone != null) {\n      // The path is now within an EZ, but we're missing encryption parameters\n      if (suite == null || edek == null) {\n        throw new RetryStartFileException();\n      }\n      // Path is within an EZ and we have provided encryption parameters.\n      // Make sure that the generated EDEK matches the settings of the EZ.\n      final String ezKeyName = zone.getKeyName();\n      if (!ezKeyName.equals(edek.getEncryptionKeyName())) {\n        throw new RetryStartFileException();\n      }\n      feInfo = new FileEncryptionInfo(suite, version,\n          edek.getEncryptedKeyVersion().getMaterial(),\n          edek.getEncryptedKeyIv(),\n          ezKeyName, edek.getEncryptionKeyVersionName());\n    }\n\n    try {\n      BlocksMapUpdateInfo toRemoveBlocks = null;\n      if (myFile == null) {\n      //是否创建文件\n        if (!create) {\n          throw new FileNotFoundException(\"Can't overwrite non-existent \" +\n              src + \" for client \" + clientMachine);\n        }\n      } else {\n         //是否覆盖\n        if (overwrite) {\n          toRemoveBlocks = new BlocksMapUpdateInfo();\n          List<INode> toRemoveINodes = new ChunkedArrayList<INode>();\n          //删除旧文件\n          long ret = FSDirDeleteOp.delete(dir, iip, toRemoveBlocks,\n                                          toRemoveINodes, now());\n          if (ret >= 0) {\n            iip = INodesInPath.replace(iip, iip.length() - 1, null);\n            FSDirDeleteOp.incrDeletedFileCount(ret);\n            removeLeasesAndINodes(src, toRemoveINodes, true);\n          }\n        } else {\n          // If lease soft limit time is expired, recover the lease\n          recoverLeaseInternal(RecoverLeaseOp.CREATE_FILE,\n              iip, src, holder, clientMachine, false);\n          throw new FileAlreadyExistsException(src + \" for client \" +\n              clientMachine + \" already exists\");\n        }\n      }\n\n      checkFsObjectLimit();\n      INodeFile newNode = null;\n\n      // Always do an implicit mkdirs for parent directory tree.\n      Map.Entry<INodesInPath, String> parent = FSDirMkdirOp\n          .createAncestorDirectories(dir, iip, permissions);\n      if (parent != null) {\n        //具体的操作，创建文件\n        iip = dir.addFile(parent.getKey(), parent.getValue(), permissions,\n            replication, blockSize, holder, clientMachine);\n        newNode = iip != null ? iip.getLastINode().asFile() : null;\n      }\n\n      if (newNode == null) {\n        throw new IOException(\"Unable to add \" + src +  \" to namespace\");\n      }\n      leaseManager.addLease(newNode.getFileUnderConstructionFeature()\n          .getClientName(), src);\n\n      // Set encryption attributes if necessary\n      if (feInfo != null) {\n        dir.setFileEncryptionInfo(src, feInfo);\n        newNode = dir.getInode(newNode.getId()).asFile();\n      }\n\n      setNewINodeStoragePolicy(newNode, iip, isLazyPersist);\n\n      // record file record in log, record new generation stamp\n      getEditLog().logOpenFile(src, newNode, overwrite, logRetryEntry);\n      NameNode.stateChangeLog.debug(\"DIR* NameSystem.startFile: added {}\" +\n          \" inode {} holder {}\", src, newNode.getId(), holder);\n      return toRemoveBlocks;\n    } catch (IOException ie) {\n      NameNode.stateChangeLog.warn(\"DIR* NameSystem.startFile: \" + src + \" \" +\n          ie.getMessage());\n      throw ie;\n    }\n```\n","slug":"Hadoop之HDFS上传文件源码分析","published":1,"updated":"2021-04-29T10:19:45.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6ml9b000fvkvy8bbgam2b","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>hdfs中每个block默认情况下是128M，由于每个块比较大，所以在写数据的过程中是把数据块拆分成一个个的数据包以管道的形式发送的，所以hdfs文件的写入会涉及到客户端、namenode、datanode多个模块的交互。</p>\n<h3 id=\"操作代码\"><a href=\"#操作代码\" class=\"headerlink\" title=\"操作代码\"></a>操作代码</h3><pre class=\"line-numbers language-java\"><code class=\"language-java\">Configuration conf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nFileSystem fs <span class=\"token operator\">=</span> FileSystem<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nPath file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hdfs://127.0.0.1:9000/example.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nFSDataOutputStream outStream <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nout<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"java api write data\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \noutStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过 FileSystem.get(conf); 来构造了一个FileSystem 实例，这里对应的是DistributedFileSystem，通过调用DistributedFileSystem里面的create方法创建了一个文件，并且返回了这个文件的输出流，用于写入数据。</p>\n<p>DistributedFileSystem的create方法有很多重载的方法，最终调用了DistributedFileSystem的下面的这个create方法</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> FSDataOutputStream <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> Path f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> FsPermission permission<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">final</span> EnumSet<span class=\"token operator\">&lt;</span>CreateFlag<span class=\"token operator\">></span> cflags<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> bufferSize<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">short</span> replication<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> blockSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> Progressable progress<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">final</span> ChecksumOpt checksumOpt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n    statistics<span class=\"token punctuation\">.</span><span class=\"token function\">incrementWriteOps</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Path absF <span class=\"token operator\">=</span> <span class=\"token function\">fixRelativePart</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileSystemLinkResolver</span><span class=\"token operator\">&lt;</span>FSDataOutputStream<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token annotation punctuation\">@Override</span>\n      <span class=\"token keyword\">public</span> FSDataOutputStream <span class=\"token function\">doCall</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> Path p<span class=\"token punctuation\">)</span><span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">,</span> UnresolvedLinkException <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">final</span> DFSOutputStream dfsos <span class=\"token operator\">=</span> dfs<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token function\">getPathName</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> permission<span class=\"token punctuation\">,</span>\n                cflags<span class=\"token punctuation\">,</span> replication<span class=\"token punctuation\">,</span> blockSize<span class=\"token punctuation\">,</span> progress<span class=\"token punctuation\">,</span> bufferSize<span class=\"token punctuation\">,</span>\n                checksumOpt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> dfs<span class=\"token punctuation\">.</span><span class=\"token function\">createWrappedOutputStream</span><span class=\"token punctuation\">(</span>dfsos<span class=\"token punctuation\">,</span> statistics<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token punctuation\">}</span>\n\n      <span class=\"token annotation punctuation\">@Override</span>\n      <span class=\"token keyword\">public</span> FSDataOutputStream <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> FileSystem fs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> Path p<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> permission<span class=\"token punctuation\">,</span> cflags<span class=\"token punctuation\">,</span> bufferSize<span class=\"token punctuation\">,</span>replication<span class=\"token punctuation\">,</span> blockSize<span class=\"token punctuation\">,</span> progress<span class=\"token punctuation\">,</span> checksumOpt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> absF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在这里，调用了DFSClient的create方法来创建文件</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">,</span> FsPermission<span class=\"token punctuation\">,</span> EnumSet<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">short</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">,</span> Progressable<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> ChecksumOpt<span class=\"token punctuation\">,</span> InetSocketAddress<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在这里create方法里，通过DFSOutputStream的静态方法newStreamForCreate构建了一个对象，并且返回了一个DFSOutputStream对象。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> DFSOutputStream <span class=\"token function\">newStreamForCreate</span><span class=\"token punctuation\">(</span>DFSClient dfsClient<span class=\"token punctuation\">,</span> String src<span class=\"token punctuation\">,</span>\n      FsPermission masked<span class=\"token punctuation\">,</span> EnumSet<span class=\"token operator\">&lt;</span>CreateFlag<span class=\"token operator\">></span> flag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> createParent<span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">short</span> replication<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> blockSize<span class=\"token punctuation\">,</span> Progressable progress<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> buffersize<span class=\"token punctuation\">,</span>\n      DataChecksum checksum<span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> favoredNodes<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n    TraceScope scope <span class=\"token operator\">=</span> dfsClient<span class=\"token punctuation\">.</span><span class=\"token function\">getPathTraceScope</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"newStreamForCreate\"</span><span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      HdfsFileStatus stat <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\" spellcheck=\"true\">// Retry the create if we get a RetryStartFileException up to a maximum</span>\n      <span class=\"token comment\" spellcheck=\"true\">// number of times</span>\n      <span class=\"token keyword\">boolean</span> shouldRetry <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> retryCount <span class=\"token operator\">=</span> CREATE_RETRY_COUNT<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>shouldRetry<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        shouldRetry <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\" spellcheck=\"true\">//通过调用namenode的create方法来创建文件</span>\n          stat <span class=\"token operator\">=</span> dfsClient<span class=\"token punctuation\">.</span>namenode<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> masked<span class=\"token punctuation\">,</span> dfsClient<span class=\"token punctuation\">.</span>clientName<span class=\"token punctuation\">,</span>\n              <span class=\"token keyword\">new</span> <span class=\"token class-name\">EnumSetWritable</span><span class=\"token operator\">&lt;</span>CreateFlag<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> createParent<span class=\"token punctuation\">,</span> replication<span class=\"token punctuation\">,</span>\n              blockSize<span class=\"token punctuation\">,</span> SUPPORTED_CRYPTO_VERSIONS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RemoteException</span> re<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          IOException e <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token function\">unwrapRemoteException</span><span class=\"token punctuation\">(</span>\n              AccessControlException<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n              DSQuotaExceededException<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n              FileAlreadyExistsException<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n              FileNotFoundException<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n              ParentNotDirectoryException<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n              NSQuotaExceededException<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n              RetryStartFileException<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n              SafeModeException<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n              UnresolvedPathException<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n              SnapshotAccessControlException<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>\n              UnknownCryptoProtocolVersionException<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">RetryStartFileException</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>retryCount <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              shouldRetry <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n              retryCount<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Too many retries because of encryption\"</span> <span class=\"token operator\">+</span>\n                  <span class=\"token string\">\" zone operations\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n  Preconditions<span class=\"token punctuation\">.</span><span class=\"token function\">checkNotNull</span><span class=\"token punctuation\">(</span>stat<span class=\"token punctuation\">,</span> <span class=\"token string\">\"HdfsFileStatus should not be null!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">//构造了一个DFSOutputStream对象，即刚刚创建的文件的输出流.</span>\n  <span class=\"token keyword\">final</span> DFSOutputStream out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DFSOutputStream</span><span class=\"token punctuation\">(</span>dfsClient<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> stat<span class=\"token punctuation\">,</span>\n      flag<span class=\"token punctuation\">,</span> progress<span class=\"token punctuation\">,</span> checksum<span class=\"token punctuation\">,</span> favoredNodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token comment\" spellcheck=\"true\">//start方法启动了DFSOutputStream的内部类DataStreamer，用于接收要写入的数据包</span>\n  out<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> out<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n  scope<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过dfsClient.namenode.create在hdfs的目录树上创建了一个文件，然后通过new DFSOutputStream创建了一个该文件的输出流实例，在DFSOutputStream构造方法中,初始化了用于数据处理的DFSOutputStream类的内部类DataStreamer，用于启动DataStreamer线程,接受客户端写入数据包的请求。</p>\n<p>DataStreamer是一个线程，它的启动是通过DFSOutputStream的start方法来启动的</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"> <span class=\"token comment\" spellcheck=\"true\">/** Construct a new output stream for creating a file. */</span>\n  <span class=\"token keyword\">private</span> <span class=\"token function\">DFSOutputStream</span><span class=\"token punctuation\">(</span>DFSClient dfsClient<span class=\"token punctuation\">,</span> String src<span class=\"token punctuation\">,</span> HdfsFileStatus stat<span class=\"token punctuation\">,</span>\n      EnumSet<span class=\"token operator\">&lt;</span>CreateFlag<span class=\"token operator\">></span> flag<span class=\"token punctuation\">,</span> Progressable progress<span class=\"token punctuation\">,</span>\n      DataChecksum checksum<span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> favoredNodes<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>dfsClient<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> progress<span class=\"token punctuation\">,</span> stat<span class=\"token punctuation\">,</span> checksum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>shouldSyncBlock <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>CreateFlag<span class=\"token punctuation\">.</span>SYNC_BLOCK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">computePacketChunkSize</span><span class=\"token punctuation\">(</span>dfsClient<span class=\"token punctuation\">.</span><span class=\"token function\">getConf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>writePacketSize<span class=\"token punctuation\">,</span> bytesPerChecksum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      streamer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataStreamer</span><span class=\"token punctuation\">(</span>stat<span class=\"token punctuation\">,</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>favoredNodes <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> favoredNodes<span class=\"token punctuation\">.</span>length <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          streamer<span class=\"token punctuation\">.</span><span class=\"token function\">setFavoredNodes</span><span class=\"token punctuation\">(</span>favoredNodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"namenode创建文件\"><a href=\"#namenode创建文件\" class=\"headerlink\" title=\"namenode创建文件\"></a>namenode创建文件</h3><p>上述dfsClient.namenode.create是调用了客户端和namenode交互的接口ClientProtocol中的create方法来创建文件，之后由ClientProtoco的实现类<br>org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolTranslatorPB中的create方法封装了创建文件所需的信息，通过rpc的方式发送到了namenode来处理。</p>\n<p>最终的实现方法是NameNodeRpcServer类的create方法，之后经过FSNamesystem的startFile、startFileInt，最后在方法startFileInternal中实现具体的逻辑。</p>\n<p>1.首先检查是否是一个目录，如果是的话抛出异常.<br>2.检查是否有写的权限。<br>3.检查是否创建父目录<br>4.检查create字段，用户是否创建为文件<br>5.检查是否覆盖源文件，如果true的话，则删除原来的旧文件。</p>\n<p>最后调用了FSDirectory的addFile方法来创建文件。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">iip <span class=\"token operator\">=</span> dir<span class=\"token punctuation\">.</span><span class=\"token function\">addFile</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> permissions<span class=\"token punctuation\">,</span>\n\nreplication<span class=\"token punctuation\">,</span> blockSize<span class=\"token punctuation\">,</span> holder<span class=\"token punctuation\">,</span> clientMachine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>具体的操作就是找到该文件的父目录，然后在父目录的List类型的对象children中添加一条数据。</p>\n<p>具体的代码如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"> <span class=\"token keyword\">private</span> BlocksMapUpdateInfo <span class=\"token function\">startFileInternal</span><span class=\"token punctuation\">(</span>FSPermissionChecker pc<span class=\"token punctuation\">,</span> \n     INodesInPath iip<span class=\"token punctuation\">,</span> PermissionStatus permissions<span class=\"token punctuation\">,</span> String holder<span class=\"token punctuation\">,</span>\n     String clientMachine<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> create<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> overwrite<span class=\"token punctuation\">,</span> \n     <span class=\"token keyword\">boolean</span> createParent<span class=\"token punctuation\">,</span> <span class=\"token keyword\">short</span> replication<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> blockSize<span class=\"token punctuation\">,</span> \n     <span class=\"token keyword\">boolean</span> isLazyPersist<span class=\"token punctuation\">,</span> CipherSuite suite<span class=\"token punctuation\">,</span> CryptoProtocolVersion version<span class=\"token punctuation\">,</span>\n     EncryptedKeyVersion edek<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> logRetryEntry<span class=\"token punctuation\">)</span><span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">assert</span> <span class=\"token function\">hasWriteLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Verify that the destination does not exist as a directory already.</span>\n    <span class=\"token keyword\">final</span> INode inode <span class=\"token operator\">=</span> iip<span class=\"token punctuation\">.</span><span class=\"token function\">getLastINode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">final</span> String src <span class=\"token operator\">=</span> iip<span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//检查是否存在，并且是不是一个目录</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inode <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> inode<span class=\"token punctuation\">.</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileAlreadyExistsException</span><span class=\"token punctuation\">(</span>src <span class=\"token operator\">+</span>\n          <span class=\"token string\">\" already exists as a directory\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//检查是否有写的权限</span>\n    <span class=\"token keyword\">final</span> INodeFile myFile <span class=\"token operator\">=</span> INodeFile<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>inode<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isPermissionEnabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>overwrite <span class=\"token operator\">&amp;&amp;</span> myFile <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dir<span class=\"token punctuation\">.</span><span class=\"token function\">checkPathAccess</span><span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">,</span> iip<span class=\"token punctuation\">,</span> FsAction<span class=\"token punctuation\">.</span>WRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\" spellcheck=\"true\">/*\n       * To overwrite existing file, need to check 'w' permission \n       * of parent (equals to ancestor in this case)\n       */</span>\n      dir<span class=\"token punctuation\">.</span><span class=\"token function\">checkAncestorAccess</span><span class=\"token punctuation\">(</span>pc<span class=\"token punctuation\">,</span> iip<span class=\"token punctuation\">,</span> FsAction<span class=\"token punctuation\">.</span>WRITE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">//是否创建父目录</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>createParent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      dir<span class=\"token punctuation\">.</span><span class=\"token function\">verifyParentDir</span><span class=\"token punctuation\">(</span>iip<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    FileEncryptionInfo feInfo <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">final</span> EncryptionZone zone <span class=\"token operator\">=</span> dir<span class=\"token punctuation\">.</span><span class=\"token function\">getEZForPath</span><span class=\"token punctuation\">(</span>iip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>zone <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// The path is now within an EZ, but we're missing encryption parameters</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>suite <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span> edek <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RetryStartFileException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\" spellcheck=\"true\">// Path is within an EZ and we have provided encryption parameters.</span>\n      <span class=\"token comment\" spellcheck=\"true\">// Make sure that the generated EDEK matches the settings of the EZ.</span>\n      <span class=\"token keyword\">final</span> String ezKeyName <span class=\"token operator\">=</span> zone<span class=\"token punctuation\">.</span><span class=\"token function\">getKeyName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ezKeyName<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>edek<span class=\"token punctuation\">.</span><span class=\"token function\">getEncryptionKeyName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RetryStartFileException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      feInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileEncryptionInfo</span><span class=\"token punctuation\">(</span>suite<span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">,</span>\n          edek<span class=\"token punctuation\">.</span><span class=\"token function\">getEncryptedKeyVersion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          edek<span class=\"token punctuation\">.</span><span class=\"token function\">getEncryptedKeyIv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          ezKeyName<span class=\"token punctuation\">,</span> edek<span class=\"token punctuation\">.</span><span class=\"token function\">getEncryptionKeyVersionName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      BlocksMapUpdateInfo toRemoveBlocks <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>myFile <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">//是否创建文件</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>create<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileNotFoundException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Can't overwrite non-existent \"</span> <span class=\"token operator\">+</span>\n              src <span class=\"token operator\">+</span> <span class=\"token string\">\" for client \"</span> <span class=\"token operator\">+</span> clientMachine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token comment\" spellcheck=\"true\">//是否覆盖</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>overwrite<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          toRemoveBlocks <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BlocksMapUpdateInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          List<span class=\"token operator\">&lt;</span>INode<span class=\"token operator\">></span> toRemoveINodes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChunkedArrayList</span><span class=\"token operator\">&lt;</span>INode<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">//删除旧文件</span>\n          <span class=\"token keyword\">long</span> ret <span class=\"token operator\">=</span> FSDirDeleteOp<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> iip<span class=\"token punctuation\">,</span> toRemoveBlocks<span class=\"token punctuation\">,</span>\n                                          toRemoveINodes<span class=\"token punctuation\">,</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            iip <span class=\"token operator\">=</span> INodesInPath<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>iip<span class=\"token punctuation\">,</span> iip<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            FSDirDeleteOp<span class=\"token punctuation\">.</span><span class=\"token function\">incrDeletedFileCount</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">removeLeasesAndINodes</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> toRemoveINodes<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\" spellcheck=\"true\">// If lease soft limit time is expired, recover the lease</span>\n          <span class=\"token function\">recoverLeaseInternal</span><span class=\"token punctuation\">(</span>RecoverLeaseOp<span class=\"token punctuation\">.</span>CREATE_FILE<span class=\"token punctuation\">,</span>\n              iip<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> holder<span class=\"token punctuation\">,</span> clientMachine<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileAlreadyExistsException</span><span class=\"token punctuation\">(</span>src <span class=\"token operator\">+</span> <span class=\"token string\">\" for client \"</span> <span class=\"token operator\">+</span>\n              clientMachine <span class=\"token operator\">+</span> <span class=\"token string\">\" already exists\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">checkFsObjectLimit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      INodeFile newNode <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\" spellcheck=\"true\">// Always do an implicit mkdirs for parent directory tree.</span>\n      Map<span class=\"token punctuation\">.</span>Entry<span class=\"token operator\">&lt;</span>INodesInPath<span class=\"token punctuation\">,</span> String<span class=\"token operator\">></span> parent <span class=\"token operator\">=</span> FSDirMkdirOp\n          <span class=\"token punctuation\">.</span><span class=\"token function\">createAncestorDirectories</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> iip<span class=\"token punctuation\">,</span> permissions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//具体的操作，创建文件</span>\n        iip <span class=\"token operator\">=</span> dir<span class=\"token punctuation\">.</span><span class=\"token function\">addFile</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> permissions<span class=\"token punctuation\">,</span>\n            replication<span class=\"token punctuation\">,</span> blockSize<span class=\"token punctuation\">,</span> holder<span class=\"token punctuation\">,</span> clientMachine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        newNode <span class=\"token operator\">=</span> iip <span class=\"token operator\">!=</span> null <span class=\"token operator\">?</span> iip<span class=\"token punctuation\">.</span><span class=\"token function\">getLastINode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> null<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newNode <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unable to add \"</span> <span class=\"token operator\">+</span> src <span class=\"token operator\">+</span>  <span class=\"token string\">\" to namespace\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      leaseManager<span class=\"token punctuation\">.</span><span class=\"token function\">addLease</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">.</span><span class=\"token function\">getFileUnderConstructionFeature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">getClientName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\" spellcheck=\"true\">// Set encryption attributes if necessary</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>feInfo <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dir<span class=\"token punctuation\">.</span><span class=\"token function\">setFileEncryptionInfo</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> feInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        newNode <span class=\"token operator\">=</span> dir<span class=\"token punctuation\">.</span><span class=\"token function\">getInode</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">setNewINodeStoragePolicy</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">,</span> iip<span class=\"token punctuation\">,</span> isLazyPersist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\" spellcheck=\"true\">// record file record in log, record new generation stamp</span>\n      <span class=\"token function\">getEditLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">logOpenFile</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">,</span> overwrite<span class=\"token punctuation\">,</span> logRetryEntry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      NameNode<span class=\"token punctuation\">.</span>stateChangeLog<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DIR* NameSystem.startFile: added {}\"</span> <span class=\"token operator\">+</span>\n          <span class=\"token string\">\" inode {} holder {}\"</span><span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> newNode<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> holder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> toRemoveBlocks<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> ie<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      NameNode<span class=\"token punctuation\">.</span>stateChangeLog<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DIR* NameSystem.startFile: \"</span> <span class=\"token operator\">+</span> src <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span>\n          ie<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">throw</span> ie<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>hdfs中每个block默认情况下是128M，由于每个块比较大，所以在写数据的过程中是把数据块拆分成一个个的数据包以管道的形式发送的，所以hdfs文件的写入会涉及到客户端、namenode、datanode多个模块的交互。</p>\n<h3 id=\"操作代码\"><a href=\"#操作代码\" class=\"headerlink\" title=\"操作代码\"></a>操作代码</h3><pre><code class=\"java\">Configuration conf = new Configuration();  \nFileSystem fs = FileSystem.get(conf);  \nPath file = new Path(&quot;hdfs://127.0.0.1:9000/example.txt&quot;);  \nFSDataOutputStream outStream = fs.create(file);  \nout.write(&quot;java api write data&quot;.getBytes(&quot;UTF-8&quot;));   \noutStream.close();  </code></pre>\n<p>通过 FileSystem.get(conf); 来构造了一个FileSystem 实例，这里对应的是DistributedFileSystem，通过调用DistributedFileSystem里面的create方法创建了一个文件，并且返回了这个文件的输出流，用于写入数据。</p>\n<p>DistributedFileSystem的create方法有很多重载的方法，最终调用了DistributedFileSystem的下面的这个create方法</p>\n<pre><code class=\"java\">@Override\npublic FSDataOutputStream create(final Path f, final FsPermission permission,\n    final EnumSet&lt;CreateFlag&gt; cflags, final int bufferSize,\n    final short replication, final long blockSize, final Progressable progress,\n    final ChecksumOpt checksumOpt) throws IOException {\n    statistics.incrementWriteOps(1);\n    Path absF = fixRelativePart(f);\n    return new FileSystemLinkResolver&lt;FSDataOutputStream&gt;() {\n      @Override\n      public FSDataOutputStream doCall(final Path p)throws IOException, UnresolvedLinkException {\n        final DFSOutputStream dfsos = dfs.create(getPathName(p), permission,\n                cflags, replication, blockSize, progress, bufferSize,\n                checksumOpt);\n        return dfs.createWrappedOutputStream(dfsos, statistics);\n\n }\n\n      @Override\n      public FSDataOutputStream next(final FileSystem fs, final Path p) throws IOException {\n        return fs.create(p, permission, cflags, bufferSize,replication, blockSize, progress, checksumOpt);\n      }\n        }.resolve(this, absF);\n  }\n</code></pre>\n<p>在这里，调用了DFSClient的create方法来创建文件</p>\n<pre><code class=\"java\">create(String, FsPermission, EnumSet, boolean, short, long, Progressable, int, ChecksumOpt, InetSocketAddress[])</code></pre>\n<p>在这里create方法里，通过DFSOutputStream的静态方法newStreamForCreate构建了一个对象，并且返回了一个DFSOutputStream对象。</p>\n<pre><code class=\"java\">static DFSOutputStream newStreamForCreate(DFSClient dfsClient, String src,\n      FsPermission masked, EnumSet&lt;CreateFlag&gt; flag, boolean createParent,\n      short replication, long blockSize, Progressable progress, int buffersize,\n      DataChecksum checksum, String[] favoredNodes) throws IOException {\n    TraceScope scope = dfsClient.getPathTraceScope(&quot;newStreamForCreate&quot;, src);\n    try {\n      HdfsFileStatus stat = null;\n      // Retry the create if we get a RetryStartFileException up to a maximum\n      // number of times\n      boolean shouldRetry = true;\n      int retryCount = CREATE_RETRY_COUNT;\n      while (shouldRetry) {\n        shouldRetry = false;\n        try {\n          //通过调用namenode的create方法来创建文件\n          stat = dfsClient.namenode.create(src, masked, dfsClient.clientName,\n              new EnumSetWritable&lt;CreateFlag&gt;(flag), createParent, replication,\n              blockSize, SUPPORTED_CRYPTO_VERSIONS);\n          break;\n        } catch (RemoteException re) {\n          IOException e = re.unwrapRemoteException(\n              AccessControlException.class,\n              DSQuotaExceededException.class,\n              FileAlreadyExistsException.class,\n              FileNotFoundException.class,\n              ParentNotDirectoryException.class,\n              NSQuotaExceededException.class,\n              RetryStartFileException.class,\n              SafeModeException.class,\n              UnresolvedPathException.class,\n              SnapshotAccessControlException.class,\n              UnknownCryptoProtocolVersionException.class);\n          if (e instanceof RetryStartFileException) {\n            if (retryCount &gt; 0) {\n              shouldRetry = true;\n              retryCount--;\n            } else {\n              throw new IOException(&quot;Too many retries because of encryption&quot; +\n                  &quot; zone operations&quot;, e);\n            }\n          } else {\n            throw e;\n          }\n        }\n      }\n  Preconditions.checkNotNull(stat, &quot;HdfsFileStatus should not be null!&quot;);\n\n  //构造了一个DFSOutputStream对象，即刚刚创建的文件的输出流.\n  final DFSOutputStream out = new DFSOutputStream(dfsClient, src, stat,\n      flag, progress, checksum, favoredNodes);\n\n //start方法启动了DFSOutputStream的内部类DataStreamer，用于接收要写入的数据包\n  out.start();\n  return out;\n} finally {\n  scope.close();\n  }\n}</code></pre>\n<p>通过dfsClient.namenode.create在hdfs的目录树上创建了一个文件，然后通过new DFSOutputStream创建了一个该文件的输出流实例，在DFSOutputStream构造方法中,初始化了用于数据处理的DFSOutputStream类的内部类DataStreamer，用于启动DataStreamer线程,接受客户端写入数据包的请求。</p>\n<p>DataStreamer是一个线程，它的启动是通过DFSOutputStream的start方法来启动的</p>\n<pre><code class=\"java\"> /** Construct a new output stream for creating a file. */\n  private DFSOutputStream(DFSClient dfsClient, String src, HdfsFileStatus stat,\n      EnumSet&lt;CreateFlag&gt; flag, Progressable progress,\n      DataChecksum checksum, String[] favoredNodes) throws IOException {\n      this(dfsClient, src, progress, stat, checksum);\n      this.shouldSyncBlock = flag.contains(CreateFlag.SYNC_BLOCK);\n      computePacketChunkSize(dfsClient.getConf().writePacketSize, bytesPerChecksum);\n\n      streamer = new DataStreamer(stat, null);\n      if (favoredNodes != null &amp;&amp; favoredNodes.length != 0) {\n          streamer.setFavoredNodes(favoredNodes);\n      }\n}</code></pre>\n<h3 id=\"namenode创建文件\"><a href=\"#namenode创建文件\" class=\"headerlink\" title=\"namenode创建文件\"></a>namenode创建文件</h3><p>上述dfsClient.namenode.create是调用了客户端和namenode交互的接口ClientProtocol中的create方法来创建文件，之后由ClientProtoco的实现类<br>org.apache.hadoop.hdfs.protocolPB.ClientNamenodeProtocolTranslatorPB中的create方法封装了创建文件所需的信息，通过rpc的方式发送到了namenode来处理。</p>\n<p>最终的实现方法是NameNodeRpcServer类的create方法，之后经过FSNamesystem的startFile、startFileInt，最后在方法startFileInternal中实现具体的逻辑。</p>\n<p>1.首先检查是否是一个目录，如果是的话抛出异常.<br>2.检查是否有写的权限。<br>3.检查是否创建父目录<br>4.检查create字段，用户是否创建为文件<br>5.检查是否覆盖源文件，如果true的话，则删除原来的旧文件。</p>\n<p>最后调用了FSDirectory的addFile方法来创建文件。</p>\n<pre><code class=\"java\">iip = dir.addFile(parent.getKey(), parent.getValue(), permissions,\n\nreplication, blockSize, holder, clientMachine);</code></pre>\n<p>具体的操作就是找到该文件的父目录，然后在父目录的List类型的对象children中添加一条数据。</p>\n<p>具体的代码如下：</p>\n<pre><code class=\"java\"> private BlocksMapUpdateInfo startFileInternal(FSPermissionChecker pc, \n     INodesInPath iip, PermissionStatus permissions, String holder,\n     String clientMachine, boolean create, boolean overwrite, \n     boolean createParent, short replication, long blockSize, \n     boolean isLazyPersist, CipherSuite suite, CryptoProtocolVersion version,\n     EncryptedKeyVersion edek, boolean logRetryEntry)throws IOException {\n    assert hasWriteLock();\n    // Verify that the destination does not exist as a directory already.\n    final INode inode = iip.getLastINode();\n    final String src = iip.getPath();\n    //检查是否存在，并且是不是一个目录\n    if (inode != null &amp;&amp; inode.isDirectory()) {\n      throw new FileAlreadyExistsException(src +\n          &quot; already exists as a directory&quot;);\n    }\n\n    //检查是否有写的权限\n    final INodeFile myFile = INodeFile.valueOf(inode, src, true);\n    if (isPermissionEnabled) {\n      if (overwrite &amp;&amp; myFile != null) {\n        dir.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n      /*\n       * To overwrite existing file, need to check &#39;w&#39; permission \n       * of parent (equals to ancestor in this case)\n       */\n      dir.checkAncestorAccess(pc, iip, FsAction.WRITE);\n    }\n    //是否创建父目录\n    if (!createParent) {\n      dir.verifyParentDir(iip, src);\n    }\n\n    FileEncryptionInfo feInfo = null;\n\n    final EncryptionZone zone = dir.getEZForPath(iip);\n    if (zone != null) {\n      // The path is now within an EZ, but we&#39;re missing encryption parameters\n      if (suite == null || edek == null) {\n        throw new RetryStartFileException();\n      }\n      // Path is within an EZ and we have provided encryption parameters.\n      // Make sure that the generated EDEK matches the settings of the EZ.\n      final String ezKeyName = zone.getKeyName();\n      if (!ezKeyName.equals(edek.getEncryptionKeyName())) {\n        throw new RetryStartFileException();\n      }\n      feInfo = new FileEncryptionInfo(suite, version,\n          edek.getEncryptedKeyVersion().getMaterial(),\n          edek.getEncryptedKeyIv(),\n          ezKeyName, edek.getEncryptionKeyVersionName());\n    }\n\n    try {\n      BlocksMapUpdateInfo toRemoveBlocks = null;\n      if (myFile == null) {\n      //是否创建文件\n        if (!create) {\n          throw new FileNotFoundException(&quot;Can&#39;t overwrite non-existent &quot; +\n              src + &quot; for client &quot; + clientMachine);\n        }\n      } else {\n         //是否覆盖\n        if (overwrite) {\n          toRemoveBlocks = new BlocksMapUpdateInfo();\n          List&lt;INode&gt; toRemoveINodes = new ChunkedArrayList&lt;INode&gt;();\n          //删除旧文件\n          long ret = FSDirDeleteOp.delete(dir, iip, toRemoveBlocks,\n                                          toRemoveINodes, now());\n          if (ret &gt;= 0) {\n            iip = INodesInPath.replace(iip, iip.length() - 1, null);\n            FSDirDeleteOp.incrDeletedFileCount(ret);\n            removeLeasesAndINodes(src, toRemoveINodes, true);\n          }\n        } else {\n          // If lease soft limit time is expired, recover the lease\n          recoverLeaseInternal(RecoverLeaseOp.CREATE_FILE,\n              iip, src, holder, clientMachine, false);\n          throw new FileAlreadyExistsException(src + &quot; for client &quot; +\n              clientMachine + &quot; already exists&quot;);\n        }\n      }\n\n      checkFsObjectLimit();\n      INodeFile newNode = null;\n\n      // Always do an implicit mkdirs for parent directory tree.\n      Map.Entry&lt;INodesInPath, String&gt; parent = FSDirMkdirOp\n          .createAncestorDirectories(dir, iip, permissions);\n      if (parent != null) {\n        //具体的操作，创建文件\n        iip = dir.addFile(parent.getKey(), parent.getValue(), permissions,\n            replication, blockSize, holder, clientMachine);\n        newNode = iip != null ? iip.getLastINode().asFile() : null;\n      }\n\n      if (newNode == null) {\n        throw new IOException(&quot;Unable to add &quot; + src +  &quot; to namespace&quot;);\n      }\n      leaseManager.addLease(newNode.getFileUnderConstructionFeature()\n          .getClientName(), src);\n\n      // Set encryption attributes if necessary\n      if (feInfo != null) {\n        dir.setFileEncryptionInfo(src, feInfo);\n        newNode = dir.getInode(newNode.getId()).asFile();\n      }\n\n      setNewINodeStoragePolicy(newNode, iip, isLazyPersist);\n\n      // record file record in log, record new generation stamp\n      getEditLog().logOpenFile(src, newNode, overwrite, logRetryEntry);\n      NameNode.stateChangeLog.debug(&quot;DIR* NameSystem.startFile: added {}&quot; +\n          &quot; inode {} holder {}&quot;, src, newNode.getId(), holder);\n      return toRemoveBlocks;\n    } catch (IOException ie) {\n      NameNode.stateChangeLog.warn(&quot;DIR* NameSystem.startFile: &quot; + src + &quot; &quot; +\n          ie.getMessage());\n      throw ie;\n    }</code></pre>\n"},{"title":"HashMap与ConcurrentHashMap","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-23T12:41:49.000Z","password":null,"summary":null,"_content":"\n## HashMap\n\n众所周知 HashMap 底层是基于 `数组 + 链表` 组成的，不过在 jdk1.7 和 1.8 中具体实现稍有不同。\n\n### Base 1.7\n\n1.7 中的数据结构图：\n\n![](HashMap与ConcurrentHashMap/1.png)\n\n先来看看 1.7 中的实现。\n\n![](HashMap与ConcurrentHashMap/2.png)\n\n这是 HashMap 中比较核心的几个成员变量；看看分别是什么意思？\n\n1. 初始化桶大小，因为底层是数组，所以这是数组默认的大小。\n2. 桶最大值。\n3. 默认的负载因子（0.75）\n4. `table` 真正存放数据的数组。\n5. `Map` 存放数量的大小。\n6. 桶大小，可在初始化时显式指定。\n7. 负载因子，可在初始化时显式指定。\n\n重点解释下负载因子：\n\n由于给定的 HashMap 的容量大小是固定的，比如默认初始化：\n\n```java\npublic HashMap() {\n    this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);\n}\n\npublic HashMap(int initialCapacity, float loadFactor) {\n    if (initialCapacity < 0)\n        throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n                                           initialCapacity);\n    if (initialCapacity > MAXIMUM_CAPACITY)\n        initialCapacity = MAXIMUM_CAPACITY;\n    if (loadFactor <= 0 || Float.isNaN(loadFactor))\n        throw new IllegalArgumentException(\"Illegal load factor: \" +\n                                           loadFactor);\n\n    this.loadFactor = loadFactor;\n    threshold = initialCapacity;\n    init();\n}\n```\n\n给定的默认容量为 16，负载因子为 0.75。Map 在使用过程中不断的往里面存放数据，当数量达到了 `16 * 0.75 = 12` 就需要将当前 16 的容量进行扩容，而扩容这个过程涉及到 rehash、复制数据等操作，所以非常消耗性能。\n\n因此通常建议能提前预估 HashMap 的大小最好，尽量的减少扩容带来的性能损耗。\n\n根据代码可以看到其实真正存放数据的是\n\n`transient Entry<K,V>[] table = (Entry<K,V>[]) EMPTY_TABLE;`\n\n这个数组，那么它又是如何定义的呢？\n\n![](HashMap与ConcurrentHashMap/3.png)\n\nEntry 是 HashMap 中的一个内部类，从他的成员变量很容易看出：\n\n- key 就是写入时的键。\n- value 自然就是值。\n- 开始的时候就提到 HashMap 是由数组和链表组成，所以这个 next 就是用于实现链表结构。\n- hash 存放的是当前 key 的 hashcode。\n\n知晓了基本结构，那来看看其中重要的写入、获取函数：\n\n#### put 方法\n\n```java\npublic V put(K key, V value) {\n    if (table == EMPTY_TABLE) {\n        inflateTable(threshold);\n    }\n    if (key == null)\n        return putForNullKey(value);\n    int hash = hash(key);\n    int i = indexFor(hash, table.length);\n    for (Entry<K,V> e = table[i]; e != null; e = e.next) {\n        Object k;\n        if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {\n            V oldValue = e.value;\n            e.value = value;\n            e.recordAccess(this);\n            return oldValue;\n        }\n    }\n\n    modCount++;\n    addEntry(hash, key, value, i);\n    return null;\n}\n```\n\n- 判断当前数组是否需要初始化。\n- 如果 key 为空，则 put 一个空值进去。\n- 根据 key 计算出 hashcode。\n- 根据计算出的 hashcode 定位出所在桶。\n- 如果桶是一个链表则需要遍历判断里面的 hashcode、key 是否和传入 key 相等，如果相等则进行覆盖，并返回原来的值。\n- 如果桶是空的，说明当前位置没有数据存入；新增一个 Entry 对象写入当前位置。\n\n```java\nvoid addEntry(int hash, K key, V value, int bucketIndex) {\n    if ((size >= threshold) && (null != table[bucketIndex])) {\n        resize(2 * table.length);\n        hash = (null != key) ? hash(key) : 0;\n        bucketIndex = indexFor(hash, table.length);\n    }\n\n    createEntry(hash, key, value, bucketIndex);\n}\n\nvoid createEntry(int hash, K key, V value, int bucketIndex) {\n    Entry<K,V> e = table[bucketIndex];\n    table[bucketIndex] = new Entry<>(hash, key, value, e);\n    size++;\n}\n```\n\n当调用 addEntry 写入 Entry 时需要判断是否需要扩容。\n\n如果需要就进行两倍扩充，并将当前的 key 重新 hash 并定位。\n\n而在 `createEntry` 中会将当前位置的桶传入到新建的桶中，如果当前桶有值就会在位置形成链表。\n\n#### get 方法\n\n再来看看 get 函数：\n\n```java\npublic V get(Object key) {\n    if (key == null)\n        return getForNullKey();\n    Entry<K,V> entry = getEntry(key);\n\n    return null == entry ? null : entry.getValue();\n}\n\nfinal Entry<K,V> getEntry(Object key) {\n    if (size == 0) {\n        return null;\n    }\n\n    int hash = (key == null) ? 0 : hash(key);\n    for (Entry<K,V> e = table[indexFor(hash, table.length)];\n         e != null;\n         e = e.next) {\n        Object k;\n        if (e.hash == hash &&\n            ((k = e.key) == key || (key != null && key.equals(k))))\n            return e;\n    }\n    return null;\n}\n```\n\n- 首先也是根据 key 计算出 hashcode，然后定位到具体的桶中。\n- 判断该位置是否为链表。\n- 不是链表就根据 `key、key 的 hashcode` 是否相等来返回值。\n- 为链表则需要遍历直到 key 及 hashcode 相等时候就返回值。\n- 啥都没取到就直接返回 null 。\n\n### Base 1.8\n\n不知道 1.7 的实现大家看出需要优化的点没有？\n\n其实一个很明显的地方就是：\n\n> 当 Hash 冲突严重时，在桶上形成的链表会变的越来越长，这样在查询时的效率就会越来越低；时间复杂度为 `O(N)`。\n\n因此 1.8 中重点优化了这个查询效率。\n\n1.8 HashMap 结构图：\n\n![](HashMap与ConcurrentHashMap/4.png)\n\n先来看看几个核心的成员变量：\n\n```java\n    static final int DEFAULT_INITIAL_CAPACITY = 1 << 4; // aka 16\n\n    /**\n     * The maximum capacity, used if a higher value is implicitly specified\n     * by either of the constructors with arguments.\n     * MUST be a power of two <= 1<<30.\n     */\n    static final int MAXIMUM_CAPACITY = 1 << 30;\n\n    /**\n     * The load factor used when none specified in constructor.\n     */\n    static final float DEFAULT_LOAD_FACTOR = 0.75f;\n\n    static final int TREEIFY_THRESHOLD = 8;\n    \n    transient Node<K,V>[] table;\n\n    /**\n     * Holds cached entrySet(). Note that AbstractMap fields are used\n     * for keySet() and values().\n     */\n    transient Set<Map.Entry<K,V>> entrySet;\n\n    /**\n     * The number of key-value mappings contained in this map.\n     */\n    transient int size;\n```\n\n和 1.7 大体上都差不多，还是有几个重要的区别：\n\n- `TREEIFY_THRESHOLD` 用于判断是否需要将链表转换为红黑树的阈值。\n- HashEntry 修改为 Node。\n\nNode 的核心组成其实也是和 1.7 中的 HashEntry 一样，存放的都是 `key value hashcode next` 等数据。\n\n再来看看核心方法。\n\n#### put 方法\n\n![](HashMap与ConcurrentHashMap/5.png)\n\n看似要比 1.7 的复杂，我们一步步拆解：\n\n1. 判断当前桶是否为空，空的就需要初始化（resize 中会判断是否进行初始化）。\n2. 根据当前 key 的 hashcode 定位到具体的桶中并判断是否为空，为空表明没有 Hash 冲突就直接在当前位置创建一个新桶即可。\n3. 如果当前桶有值（ Hash 冲突），那么就要比较当前桶中的 `key、key 的 hashcode` 与写入的 key 是否相等，相等就赋值给 `e`,在第 8 步的时候会统一进行赋值及返回。\n4. 如果当前桶为红黑树，那就要按照红黑树的方式写入数据。\n5. 如果是个链表，就需要将当前的 key、value 封装成一个新节点写入到当前桶的后面（形成链表）。\n6. 接着判断当前链表的大小是否大于预设的阈值，大于时就要转换为红黑树。\n7. 如果在遍历过程中找到 key 相同时直接退出遍历。\n8. 如果 `e != null` 就相当于存在相同的 key,那就需要将值覆盖。\n9. 最后判断是否需要进行扩容。\n\n#### get 方法\n\n```java\npublic V get(Object key) {\n    Node<K,V> e;\n    return (e = getNode(hash(key), key)) == null ? null : e.value;\n}\n\nfinal Node<K,V> getNode(int hash, Object key) {\n    Node<K,V>[] tab; Node<K,V> first, e; int n; K k;\n    if ((tab = table) != null && (n = tab.length) > 0 &&\n        (first = tab[(n - 1) & hash]) != null) {\n        if (first.hash == hash && // always check first node\n            ((k = first.key) == key || (key != null && key.equals(k))))\n            return first;\n        if ((e = first.next) != null) {\n            if (first instanceof TreeNode)\n                return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n            do {\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    return e;\n            } while ((e = e.next) != null);\n        }\n    }\n    return null;\n}\n```\n\nget 方法看起来就要简单许多了。\n\n- 首先将 key hash 之后取得所定位的桶。\n- 如果桶为空则直接返回 null 。\n- 否则判断桶的第一个位置(有可能是链表、红黑树)的 key 是否为查询的 key，是就直接返回 value。\n- 如果第一个不匹配，则判断它的下一个是红黑树还是链表。\n- 红黑树就按照树的查找方式返回值。\n- 不然就按照链表的方式遍历匹配返回值。\n\n从这两个核心方法（get/put）可以看出 1.8 中对大链表做了优化，修改为红黑树之后查询效率直接提高到了 `O(logn)`。\n\n但是 HashMap 原有的问题也都存在，比如在并发场景下使用时容易出现死循环。\n\n```java\nfinal HashMap<String, String> map = new HashMap<String, String>();\nfor (int i = 0; i < 1000; i++) {\n    new Thread(new Runnable() {\n        @Override\n        public void run() {\n            map.put(UUID.randomUUID().toString(), \"\");\n        }\n    }).start();\n}\n```\n\n但是为什么呢？简单分析下。\n\n看过上文的还记得在 HashMap 扩容的时候会调用 `resize()` 方法，就是这里的并发操作容易在一个桶上形成环形链表；这样当获取一个不存在的 key 时，计算出的 index 正好是环形链表的下标就会出现死循环。\n\n### 遍历方式\n\n还有一个值得注意的是 HashMap 的遍历方式，通常有以下几种：\n\n```java\nIterator<Map.Entry<String, Integer>> entryIterator = map.entrySet().iterator();\n        while (entryIterator.hasNext()) {\n            Map.Entry<String, Integer> next = entryIterator.next();\n            System.out.println(\"key=\" + next.getKey() + \" value=\" + next.getValue());\n        }\n        \nIterator<String> iterator = map.keySet().iterator();\n        while (iterator.hasNext()){\n            String key = iterator.next();\n            System.out.println(\"key=\" + key + \" value=\" + map.get(key));\n\n        }\n```\n\n`强烈建议`使用第一种 EntrySet 进行遍历。\n\n第一种可以把 key value 同时取出，第二种还得需要通过 key 取一次 value，效率较低。\n\n> 简单总结下 HashMap：无论是 1.7 还是 1.8 其实都能看出 JDK 没有对它做任何的同步操作，所以并发会出问题，甚至出现死循环导致系统不可用。\n\n因此 JDK 推出了专项专用的 ConcurrentHashMap ，该类位于 `java.util.concurrent` 包下，专门用于解决并发问题。\n\n> 坚持看到这里的朋友算是已经把 ConcurrentHashMap 的基础已经打牢了，下面正式开始分析。\n\n## ConcurrentHashMap\n\nConcurrentHashMap 同样也分为 1.7 、1.8 版，两者在实现上略有不同。\n\n### Base 1.7\n\n先来看看 1.7 的实现，下面是他的结构图：\n\n![](HashMap与ConcurrentHashMap/6.png)\n\n如图所示，是由 Segment 数组、HashEntry 组成，和 HashMap 一样，仍然是数组加链表。\n\n它的核心成员变量：\n\n```java\n/**\n  * Segment 数组，存放数据时首先需要定位到具体的 Segment 中。\n*/\nfinal Segment<K,V>[] segments;\n\ntransient Set<K> keySet;\ntransient Set<Map.Entry<K,V>> entrySet;\n```\n\nSegment 是 ConcurrentHashMap 的一个内部类，主要的组成如下：\n\n```java\nstatic final class Segment<K,V> extends ReentrantLock implements Serializable {\n\n    private static final long serialVersionUID = 2249069246763182397L;\n\n    // 和 HashMap 中的 HashEntry 作用一样，真正存放数据的桶\n    transient volatile HashEntry<K,V>[] table;\n\n    transient int count;\n\n    transient int modCount;\n\n    transient int threshold;\n\n    final float loadFactor;\n\n}\n```\n\n看看其中 HashEntry 的组成：\n\n![](HashMap与ConcurrentHashMap/7.png)\n\n和 HashMap 非常类似，唯一的区别就是其中的核心数据如 value ，以及链表都是 volatile 修饰的，保证了获取时的可见性。\n\n原理上来说：ConcurrentHashMap 采用了分段锁技术，其中 Segment 继承于 ReentrantLock。不会像 HashTable 那样不管是 put 还是 get 操作都需要做同步处理，理论上 ConcurrentHashMap 支持 CurrencyLevel (Segment 数组数量)的线程并发。每当一个线程占用锁访问一个 Segment 时，不会影响到其他的 Segment。\n\n下面也来看看核心的 `put get` 方法。\n\n#### put 方法\n\n```java\npublic V put(K key, V value) {\n    Segment<K,V> s;\n    if (value == null)\n        throw new NullPointerException();\n    int hash = hash(key);\n    int j = (hash >>> segmentShift) & segmentMask;\n    if ((s = (Segment<K,V>)UNSAFE.getObject          // nonvolatile; recheck\n         (segments, (j << SSHIFT) + SBASE)) == null) //  in ensureSegment\n        s = ensureSegment(j);\n    return s.put(key, hash, value, false);\n}\n```\n\n首先是通过 key 定位到 Segment，之后在对应的 Segment 中进行具体的 put。\n\n```java\nfinal V put(K key, int hash, V value, boolean onlyIfAbsent) {\n    HashEntry<K,V> node = tryLock() ? null :\n    scanAndLockForPut(key, hash, value);\n    V oldValue;\n    try {\n        HashEntry<K,V>[] tab = table;\n        int index = (tab.length - 1) & hash;\n        HashEntry<K,V> first = entryAt(tab, index);\n        for (HashEntry<K,V> e = first;;) {\n            if (e != null) {\n                K k;\n                if ((k = e.key) == key ||\n                    (e.hash == hash && key.equals(k))) {\n                    oldValue = e.value;\n                    if (!onlyIfAbsent) {\n                        e.value = value;\n                        ++modCount;\n                    }\n                    break;\n                }\n                e = e.next;\n            }\n            else {\n                if (node != null)\n                    node.setNext(first);\n                else\n                    node = new HashEntry<K,V>(hash, key, value, first);\n                int c = count + 1;\n                if (c > threshold && tab.length < MAXIMUM_CAPACITY)\n                    rehash(node);\n                else\n                    setEntryAt(tab, index, node);\n                ++modCount;\n                count = c;\n                oldValue = null;\n                break;\n            }\n        }\n    } finally {\n        unlock();\n    }\n    return oldValue;\n}\n```\n\n虽然 HashEntry 中的 value 是用 volatile 关键词修饰的，但是并不能保证并发的原子性，所以 put 操作时仍然需要加锁处理。\n\n首先第一步的时候会尝试获取锁，如果获取失败肯定就有其他线程存在竞争，则利用 `scanAndLockForPut()` 自旋获取锁。\n\n![](HashMap与ConcurrentHashMap/8.png)\n\n1. 尝试自旋获取锁。\n2. 如果重试的次数达到了 `MAX_SCAN_RETRIES` 则改为阻塞锁获取，保证能获取成功。\n\n![](HashMap与ConcurrentHashMap/9.png)\n\n再结合图看看 put 的流程。\n\n1. 将当前 Segment 中的 table 通过 key 的 hashcode 定位到 HashEntry。\n2. 遍历该 HashEntry，如果不为空则判断传入的 key 和当前遍历的 key 是否相等，相等则覆盖旧的 value。\n3. 不为空则需要新建一个 HashEntry 并加入到 Segment 中，同时会先判断是否需要扩容。\n4. 最后会解除在 1 中所获取当前 Segment 的锁。\n\n#### get 方法\n\n```java\npublic V get(Object key) {\n    Segment<K,V> s; // manually integrate access methods to reduce overhead\n    HashEntry<K,V>[] tab;\n    int h = hash(key);\n    long u = (((h >>> segmentShift) & segmentMask) << SSHIFT) + SBASE;\n    if ((s = (Segment<K,V>)UNSAFE.getObjectVolatile(segments, u)) != null &&\n        (tab = s.table) != null) {\n        for (HashEntry<K,V> e = (HashEntry<K,V>) UNSAFE.getObjectVolatile\n             (tab, ((long)(((tab.length - 1) & h)) << TSHIFT) + TBASE);\n             e != null; e = e.next) {\n            K k;\n            if ((k = e.key) == key || (e.hash == h && key.equals(k)))\n                return e.value;\n        }\n    }\n    return null;\n}\n```\n\nget 逻辑比较简单：\n\n只需要将 Key 通过 Hash 之后定位到具体的 Segment ，再通过一次 Hash 定位到具体的元素上。\n\n由于 HashEntry 中的 value 属性是用 volatile 关键词修饰的，保证了内存可见性，所以每次获取时都是最新值。\n\nConcurrentHashMap 的 get 方法是非常高效的，**因为整个过程都不需要加锁**。\n\n### Base 1.8\n\n1.7 已经解决了并发问题，并且能支持 N 个 Segment 这么多次数的并发，但依然存在 HashMap 在 1.7 版本中的问题。\n\n> 那就是查询遍历链表效率太低。\n\n因此 1.8 做了一些数据结构上的调整。\n\n首先来看下底层的组成结构：\n\n![](HashMap与ConcurrentHashMap/10.png)\n\n看起来是不是和 1.8 HashMap 结构类似？\n\n其中抛弃了原有的 Segment 分段锁，而采用了 `CAS + synchronized` 来保证并发安全性。\n\n![](HashMap与ConcurrentHashMap/11.png)\n\n也将 1.7 中存放数据的 HashEntry 改为 Node，但作用都是相同的。\n\n其中的 `val next` 都用了 volatile 修饰，保证了可见性。\n\n#### put 方法\n\n重点来看看 put 函数：\n\n![](HashMap与ConcurrentHashMap/12.png)\n\n- 根据 key 计算出 hashcode 。\n- 判断是否需要进行初始化。\n- `f` 即为当前 key 定位出的 Node，如果为空表示当前位置可以写入数据，利用 CAS 尝试写入，失败则自旋保证成功。\n- 如果当前位置的 `hashcode == MOVED == -1`,则需要进行扩容。\n- 如果都不满足，则利用 synchronized 锁写入数据。\n- 如果数量大于 `TREEIFY_THRESHOLD` 则要转换为红黑树。\n\n#### get 方法\n\n![](HashMap与ConcurrentHashMap/13.png)\n\n- 根据计算出来的 hashcode 寻址，如果就在桶上那么直接返回值。\n- 如果是红黑树那就按照树的方式获取值。\n- 就不满足那就按照链表的方式遍历获取值。\n\n> 1.8 在 1.7 的数据结构上做了大的改动，采用红黑树之后可以保证查询效率（`O(logn)`），甚至取消了 ReentrantLock 改为了 synchronized，这样可以看出在新版的 JDK 中对 synchronized 优化是很到位的。\n","source":"_posts/HashMap与ConcurrentHashMap.md","raw":"---\ntitle: HashMap与ConcurrentHashMap\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-23 20:41:49\npassword:\nsummary:\ntags:\ncategories: java\n---\n\n## HashMap\n\n众所周知 HashMap 底层是基于 `数组 + 链表` 组成的，不过在 jdk1.7 和 1.8 中具体实现稍有不同。\n\n### Base 1.7\n\n1.7 中的数据结构图：\n\n![](HashMap与ConcurrentHashMap/1.png)\n\n先来看看 1.7 中的实现。\n\n![](HashMap与ConcurrentHashMap/2.png)\n\n这是 HashMap 中比较核心的几个成员变量；看看分别是什么意思？\n\n1. 初始化桶大小，因为底层是数组，所以这是数组默认的大小。\n2. 桶最大值。\n3. 默认的负载因子（0.75）\n4. `table` 真正存放数据的数组。\n5. `Map` 存放数量的大小。\n6. 桶大小，可在初始化时显式指定。\n7. 负载因子，可在初始化时显式指定。\n\n重点解释下负载因子：\n\n由于给定的 HashMap 的容量大小是固定的，比如默认初始化：\n\n```java\npublic HashMap() {\n    this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);\n}\n\npublic HashMap(int initialCapacity, float loadFactor) {\n    if (initialCapacity < 0)\n        throw new IllegalArgumentException(\"Illegal initial capacity: \" +\n                                           initialCapacity);\n    if (initialCapacity > MAXIMUM_CAPACITY)\n        initialCapacity = MAXIMUM_CAPACITY;\n    if (loadFactor <= 0 || Float.isNaN(loadFactor))\n        throw new IllegalArgumentException(\"Illegal load factor: \" +\n                                           loadFactor);\n\n    this.loadFactor = loadFactor;\n    threshold = initialCapacity;\n    init();\n}\n```\n\n给定的默认容量为 16，负载因子为 0.75。Map 在使用过程中不断的往里面存放数据，当数量达到了 `16 * 0.75 = 12` 就需要将当前 16 的容量进行扩容，而扩容这个过程涉及到 rehash、复制数据等操作，所以非常消耗性能。\n\n因此通常建议能提前预估 HashMap 的大小最好，尽量的减少扩容带来的性能损耗。\n\n根据代码可以看到其实真正存放数据的是\n\n`transient Entry<K,V>[] table = (Entry<K,V>[]) EMPTY_TABLE;`\n\n这个数组，那么它又是如何定义的呢？\n\n![](HashMap与ConcurrentHashMap/3.png)\n\nEntry 是 HashMap 中的一个内部类，从他的成员变量很容易看出：\n\n- key 就是写入时的键。\n- value 自然就是值。\n- 开始的时候就提到 HashMap 是由数组和链表组成，所以这个 next 就是用于实现链表结构。\n- hash 存放的是当前 key 的 hashcode。\n\n知晓了基本结构，那来看看其中重要的写入、获取函数：\n\n#### put 方法\n\n```java\npublic V put(K key, V value) {\n    if (table == EMPTY_TABLE) {\n        inflateTable(threshold);\n    }\n    if (key == null)\n        return putForNullKey(value);\n    int hash = hash(key);\n    int i = indexFor(hash, table.length);\n    for (Entry<K,V> e = table[i]; e != null; e = e.next) {\n        Object k;\n        if (e.hash == hash && ((k = e.key) == key || key.equals(k))) {\n            V oldValue = e.value;\n            e.value = value;\n            e.recordAccess(this);\n            return oldValue;\n        }\n    }\n\n    modCount++;\n    addEntry(hash, key, value, i);\n    return null;\n}\n```\n\n- 判断当前数组是否需要初始化。\n- 如果 key 为空，则 put 一个空值进去。\n- 根据 key 计算出 hashcode。\n- 根据计算出的 hashcode 定位出所在桶。\n- 如果桶是一个链表则需要遍历判断里面的 hashcode、key 是否和传入 key 相等，如果相等则进行覆盖，并返回原来的值。\n- 如果桶是空的，说明当前位置没有数据存入；新增一个 Entry 对象写入当前位置。\n\n```java\nvoid addEntry(int hash, K key, V value, int bucketIndex) {\n    if ((size >= threshold) && (null != table[bucketIndex])) {\n        resize(2 * table.length);\n        hash = (null != key) ? hash(key) : 0;\n        bucketIndex = indexFor(hash, table.length);\n    }\n\n    createEntry(hash, key, value, bucketIndex);\n}\n\nvoid createEntry(int hash, K key, V value, int bucketIndex) {\n    Entry<K,V> e = table[bucketIndex];\n    table[bucketIndex] = new Entry<>(hash, key, value, e);\n    size++;\n}\n```\n\n当调用 addEntry 写入 Entry 时需要判断是否需要扩容。\n\n如果需要就进行两倍扩充，并将当前的 key 重新 hash 并定位。\n\n而在 `createEntry` 中会将当前位置的桶传入到新建的桶中，如果当前桶有值就会在位置形成链表。\n\n#### get 方法\n\n再来看看 get 函数：\n\n```java\npublic V get(Object key) {\n    if (key == null)\n        return getForNullKey();\n    Entry<K,V> entry = getEntry(key);\n\n    return null == entry ? null : entry.getValue();\n}\n\nfinal Entry<K,V> getEntry(Object key) {\n    if (size == 0) {\n        return null;\n    }\n\n    int hash = (key == null) ? 0 : hash(key);\n    for (Entry<K,V> e = table[indexFor(hash, table.length)];\n         e != null;\n         e = e.next) {\n        Object k;\n        if (e.hash == hash &&\n            ((k = e.key) == key || (key != null && key.equals(k))))\n            return e;\n    }\n    return null;\n}\n```\n\n- 首先也是根据 key 计算出 hashcode，然后定位到具体的桶中。\n- 判断该位置是否为链表。\n- 不是链表就根据 `key、key 的 hashcode` 是否相等来返回值。\n- 为链表则需要遍历直到 key 及 hashcode 相等时候就返回值。\n- 啥都没取到就直接返回 null 。\n\n### Base 1.8\n\n不知道 1.7 的实现大家看出需要优化的点没有？\n\n其实一个很明显的地方就是：\n\n> 当 Hash 冲突严重时，在桶上形成的链表会变的越来越长，这样在查询时的效率就会越来越低；时间复杂度为 `O(N)`。\n\n因此 1.8 中重点优化了这个查询效率。\n\n1.8 HashMap 结构图：\n\n![](HashMap与ConcurrentHashMap/4.png)\n\n先来看看几个核心的成员变量：\n\n```java\n    static final int DEFAULT_INITIAL_CAPACITY = 1 << 4; // aka 16\n\n    /**\n     * The maximum capacity, used if a higher value is implicitly specified\n     * by either of the constructors with arguments.\n     * MUST be a power of two <= 1<<30.\n     */\n    static final int MAXIMUM_CAPACITY = 1 << 30;\n\n    /**\n     * The load factor used when none specified in constructor.\n     */\n    static final float DEFAULT_LOAD_FACTOR = 0.75f;\n\n    static final int TREEIFY_THRESHOLD = 8;\n    \n    transient Node<K,V>[] table;\n\n    /**\n     * Holds cached entrySet(). Note that AbstractMap fields are used\n     * for keySet() and values().\n     */\n    transient Set<Map.Entry<K,V>> entrySet;\n\n    /**\n     * The number of key-value mappings contained in this map.\n     */\n    transient int size;\n```\n\n和 1.7 大体上都差不多，还是有几个重要的区别：\n\n- `TREEIFY_THRESHOLD` 用于判断是否需要将链表转换为红黑树的阈值。\n- HashEntry 修改为 Node。\n\nNode 的核心组成其实也是和 1.7 中的 HashEntry 一样，存放的都是 `key value hashcode next` 等数据。\n\n再来看看核心方法。\n\n#### put 方法\n\n![](HashMap与ConcurrentHashMap/5.png)\n\n看似要比 1.7 的复杂，我们一步步拆解：\n\n1. 判断当前桶是否为空，空的就需要初始化（resize 中会判断是否进行初始化）。\n2. 根据当前 key 的 hashcode 定位到具体的桶中并判断是否为空，为空表明没有 Hash 冲突就直接在当前位置创建一个新桶即可。\n3. 如果当前桶有值（ Hash 冲突），那么就要比较当前桶中的 `key、key 的 hashcode` 与写入的 key 是否相等，相等就赋值给 `e`,在第 8 步的时候会统一进行赋值及返回。\n4. 如果当前桶为红黑树，那就要按照红黑树的方式写入数据。\n5. 如果是个链表，就需要将当前的 key、value 封装成一个新节点写入到当前桶的后面（形成链表）。\n6. 接着判断当前链表的大小是否大于预设的阈值，大于时就要转换为红黑树。\n7. 如果在遍历过程中找到 key 相同时直接退出遍历。\n8. 如果 `e != null` 就相当于存在相同的 key,那就需要将值覆盖。\n9. 最后判断是否需要进行扩容。\n\n#### get 方法\n\n```java\npublic V get(Object key) {\n    Node<K,V> e;\n    return (e = getNode(hash(key), key)) == null ? null : e.value;\n}\n\nfinal Node<K,V> getNode(int hash, Object key) {\n    Node<K,V>[] tab; Node<K,V> first, e; int n; K k;\n    if ((tab = table) != null && (n = tab.length) > 0 &&\n        (first = tab[(n - 1) & hash]) != null) {\n        if (first.hash == hash && // always check first node\n            ((k = first.key) == key || (key != null && key.equals(k))))\n            return first;\n        if ((e = first.next) != null) {\n            if (first instanceof TreeNode)\n                return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n            do {\n                if (e.hash == hash &&\n                    ((k = e.key) == key || (key != null && key.equals(k))))\n                    return e;\n            } while ((e = e.next) != null);\n        }\n    }\n    return null;\n}\n```\n\nget 方法看起来就要简单许多了。\n\n- 首先将 key hash 之后取得所定位的桶。\n- 如果桶为空则直接返回 null 。\n- 否则判断桶的第一个位置(有可能是链表、红黑树)的 key 是否为查询的 key，是就直接返回 value。\n- 如果第一个不匹配，则判断它的下一个是红黑树还是链表。\n- 红黑树就按照树的查找方式返回值。\n- 不然就按照链表的方式遍历匹配返回值。\n\n从这两个核心方法（get/put）可以看出 1.8 中对大链表做了优化，修改为红黑树之后查询效率直接提高到了 `O(logn)`。\n\n但是 HashMap 原有的问题也都存在，比如在并发场景下使用时容易出现死循环。\n\n```java\nfinal HashMap<String, String> map = new HashMap<String, String>();\nfor (int i = 0; i < 1000; i++) {\n    new Thread(new Runnable() {\n        @Override\n        public void run() {\n            map.put(UUID.randomUUID().toString(), \"\");\n        }\n    }).start();\n}\n```\n\n但是为什么呢？简单分析下。\n\n看过上文的还记得在 HashMap 扩容的时候会调用 `resize()` 方法，就是这里的并发操作容易在一个桶上形成环形链表；这样当获取一个不存在的 key 时，计算出的 index 正好是环形链表的下标就会出现死循环。\n\n### 遍历方式\n\n还有一个值得注意的是 HashMap 的遍历方式，通常有以下几种：\n\n```java\nIterator<Map.Entry<String, Integer>> entryIterator = map.entrySet().iterator();\n        while (entryIterator.hasNext()) {\n            Map.Entry<String, Integer> next = entryIterator.next();\n            System.out.println(\"key=\" + next.getKey() + \" value=\" + next.getValue());\n        }\n        \nIterator<String> iterator = map.keySet().iterator();\n        while (iterator.hasNext()){\n            String key = iterator.next();\n            System.out.println(\"key=\" + key + \" value=\" + map.get(key));\n\n        }\n```\n\n`强烈建议`使用第一种 EntrySet 进行遍历。\n\n第一种可以把 key value 同时取出，第二种还得需要通过 key 取一次 value，效率较低。\n\n> 简单总结下 HashMap：无论是 1.7 还是 1.8 其实都能看出 JDK 没有对它做任何的同步操作，所以并发会出问题，甚至出现死循环导致系统不可用。\n\n因此 JDK 推出了专项专用的 ConcurrentHashMap ，该类位于 `java.util.concurrent` 包下，专门用于解决并发问题。\n\n> 坚持看到这里的朋友算是已经把 ConcurrentHashMap 的基础已经打牢了，下面正式开始分析。\n\n## ConcurrentHashMap\n\nConcurrentHashMap 同样也分为 1.7 、1.8 版，两者在实现上略有不同。\n\n### Base 1.7\n\n先来看看 1.7 的实现，下面是他的结构图：\n\n![](HashMap与ConcurrentHashMap/6.png)\n\n如图所示，是由 Segment 数组、HashEntry 组成，和 HashMap 一样，仍然是数组加链表。\n\n它的核心成员变量：\n\n```java\n/**\n  * Segment 数组，存放数据时首先需要定位到具体的 Segment 中。\n*/\nfinal Segment<K,V>[] segments;\n\ntransient Set<K> keySet;\ntransient Set<Map.Entry<K,V>> entrySet;\n```\n\nSegment 是 ConcurrentHashMap 的一个内部类，主要的组成如下：\n\n```java\nstatic final class Segment<K,V> extends ReentrantLock implements Serializable {\n\n    private static final long serialVersionUID = 2249069246763182397L;\n\n    // 和 HashMap 中的 HashEntry 作用一样，真正存放数据的桶\n    transient volatile HashEntry<K,V>[] table;\n\n    transient int count;\n\n    transient int modCount;\n\n    transient int threshold;\n\n    final float loadFactor;\n\n}\n```\n\n看看其中 HashEntry 的组成：\n\n![](HashMap与ConcurrentHashMap/7.png)\n\n和 HashMap 非常类似，唯一的区别就是其中的核心数据如 value ，以及链表都是 volatile 修饰的，保证了获取时的可见性。\n\n原理上来说：ConcurrentHashMap 采用了分段锁技术，其中 Segment 继承于 ReentrantLock。不会像 HashTable 那样不管是 put 还是 get 操作都需要做同步处理，理论上 ConcurrentHashMap 支持 CurrencyLevel (Segment 数组数量)的线程并发。每当一个线程占用锁访问一个 Segment 时，不会影响到其他的 Segment。\n\n下面也来看看核心的 `put get` 方法。\n\n#### put 方法\n\n```java\npublic V put(K key, V value) {\n    Segment<K,V> s;\n    if (value == null)\n        throw new NullPointerException();\n    int hash = hash(key);\n    int j = (hash >>> segmentShift) & segmentMask;\n    if ((s = (Segment<K,V>)UNSAFE.getObject          // nonvolatile; recheck\n         (segments, (j << SSHIFT) + SBASE)) == null) //  in ensureSegment\n        s = ensureSegment(j);\n    return s.put(key, hash, value, false);\n}\n```\n\n首先是通过 key 定位到 Segment，之后在对应的 Segment 中进行具体的 put。\n\n```java\nfinal V put(K key, int hash, V value, boolean onlyIfAbsent) {\n    HashEntry<K,V> node = tryLock() ? null :\n    scanAndLockForPut(key, hash, value);\n    V oldValue;\n    try {\n        HashEntry<K,V>[] tab = table;\n        int index = (tab.length - 1) & hash;\n        HashEntry<K,V> first = entryAt(tab, index);\n        for (HashEntry<K,V> e = first;;) {\n            if (e != null) {\n                K k;\n                if ((k = e.key) == key ||\n                    (e.hash == hash && key.equals(k))) {\n                    oldValue = e.value;\n                    if (!onlyIfAbsent) {\n                        e.value = value;\n                        ++modCount;\n                    }\n                    break;\n                }\n                e = e.next;\n            }\n            else {\n                if (node != null)\n                    node.setNext(first);\n                else\n                    node = new HashEntry<K,V>(hash, key, value, first);\n                int c = count + 1;\n                if (c > threshold && tab.length < MAXIMUM_CAPACITY)\n                    rehash(node);\n                else\n                    setEntryAt(tab, index, node);\n                ++modCount;\n                count = c;\n                oldValue = null;\n                break;\n            }\n        }\n    } finally {\n        unlock();\n    }\n    return oldValue;\n}\n```\n\n虽然 HashEntry 中的 value 是用 volatile 关键词修饰的，但是并不能保证并发的原子性，所以 put 操作时仍然需要加锁处理。\n\n首先第一步的时候会尝试获取锁，如果获取失败肯定就有其他线程存在竞争，则利用 `scanAndLockForPut()` 自旋获取锁。\n\n![](HashMap与ConcurrentHashMap/8.png)\n\n1. 尝试自旋获取锁。\n2. 如果重试的次数达到了 `MAX_SCAN_RETRIES` 则改为阻塞锁获取，保证能获取成功。\n\n![](HashMap与ConcurrentHashMap/9.png)\n\n再结合图看看 put 的流程。\n\n1. 将当前 Segment 中的 table 通过 key 的 hashcode 定位到 HashEntry。\n2. 遍历该 HashEntry，如果不为空则判断传入的 key 和当前遍历的 key 是否相等，相等则覆盖旧的 value。\n3. 不为空则需要新建一个 HashEntry 并加入到 Segment 中，同时会先判断是否需要扩容。\n4. 最后会解除在 1 中所获取当前 Segment 的锁。\n\n#### get 方法\n\n```java\npublic V get(Object key) {\n    Segment<K,V> s; // manually integrate access methods to reduce overhead\n    HashEntry<K,V>[] tab;\n    int h = hash(key);\n    long u = (((h >>> segmentShift) & segmentMask) << SSHIFT) + SBASE;\n    if ((s = (Segment<K,V>)UNSAFE.getObjectVolatile(segments, u)) != null &&\n        (tab = s.table) != null) {\n        for (HashEntry<K,V> e = (HashEntry<K,V>) UNSAFE.getObjectVolatile\n             (tab, ((long)(((tab.length - 1) & h)) << TSHIFT) + TBASE);\n             e != null; e = e.next) {\n            K k;\n            if ((k = e.key) == key || (e.hash == h && key.equals(k)))\n                return e.value;\n        }\n    }\n    return null;\n}\n```\n\nget 逻辑比较简单：\n\n只需要将 Key 通过 Hash 之后定位到具体的 Segment ，再通过一次 Hash 定位到具体的元素上。\n\n由于 HashEntry 中的 value 属性是用 volatile 关键词修饰的，保证了内存可见性，所以每次获取时都是最新值。\n\nConcurrentHashMap 的 get 方法是非常高效的，**因为整个过程都不需要加锁**。\n\n### Base 1.8\n\n1.7 已经解决了并发问题，并且能支持 N 个 Segment 这么多次数的并发，但依然存在 HashMap 在 1.7 版本中的问题。\n\n> 那就是查询遍历链表效率太低。\n\n因此 1.8 做了一些数据结构上的调整。\n\n首先来看下底层的组成结构：\n\n![](HashMap与ConcurrentHashMap/10.png)\n\n看起来是不是和 1.8 HashMap 结构类似？\n\n其中抛弃了原有的 Segment 分段锁，而采用了 `CAS + synchronized` 来保证并发安全性。\n\n![](HashMap与ConcurrentHashMap/11.png)\n\n也将 1.7 中存放数据的 HashEntry 改为 Node，但作用都是相同的。\n\n其中的 `val next` 都用了 volatile 修饰，保证了可见性。\n\n#### put 方法\n\n重点来看看 put 函数：\n\n![](HashMap与ConcurrentHashMap/12.png)\n\n- 根据 key 计算出 hashcode 。\n- 判断是否需要进行初始化。\n- `f` 即为当前 key 定位出的 Node，如果为空表示当前位置可以写入数据，利用 CAS 尝试写入，失败则自旋保证成功。\n- 如果当前位置的 `hashcode == MOVED == -1`,则需要进行扩容。\n- 如果都不满足，则利用 synchronized 锁写入数据。\n- 如果数量大于 `TREEIFY_THRESHOLD` 则要转换为红黑树。\n\n#### get 方法\n\n![](HashMap与ConcurrentHashMap/13.png)\n\n- 根据计算出来的 hashcode 寻址，如果就在桶上那么直接返回值。\n- 如果是红黑树那就按照树的方式获取值。\n- 就不满足那就按照链表的方式遍历获取值。\n\n> 1.8 在 1.7 的数据结构上做了大的改动，采用红黑树之后可以保证查询效率（`O(logn)`），甚至取消了 ReentrantLock 改为了 synchronized，这样可以看出在新版的 JDK 中对 synchronized 优化是很到位的。\n","slug":"HashMap与ConcurrentHashMap","published":1,"updated":"2021-04-29T09:42:09.555Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6ml9k000ivkvymowpuy72","content":"<h2 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h2><p>众所周知 HashMap 底层是基于 <code>数组 + 链表</code> 组成的，不过在 jdk1.7 和 1.8 中具体实现稍有不同。</p>\n<h3 id=\"Base-1-7\"><a href=\"#Base-1-7\" class=\"headerlink\" title=\"Base 1.7\"></a>Base 1.7</h3><p>1.7 中的数据结构图：</p>\n<p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/1.png\" alt></p>\n<p>先来看看 1.7 中的实现。</p>\n<p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/2.png\" alt></p>\n<p>这是 HashMap 中比较核心的几个成员变量；看看分别是什么意思？</p>\n<ol>\n<li>初始化桶大小，因为底层是数组，所以这是数组默认的大小。</li>\n<li>桶最大值。</li>\n<li>默认的负载因子（0.75）</li>\n<li><code>table</code> 真正存放数据的数组。</li>\n<li><code>Map</code> 存放数量的大小。</li>\n<li>桶大小，可在初始化时显式指定。</li>\n<li>负载因子，可在初始化时显式指定。</li>\n</ol>\n<p>重点解释下负载因子：</p>\n<p>由于给定的 HashMap 的容量大小是固定的，比如默认初始化：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token function\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>DEFAULT_INITIAL_CAPACITY<span class=\"token punctuation\">,</span> DEFAULT_LOAD_FACTOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token function\">HashMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> initialCapacity<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> loadFactor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initialCapacity <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Illegal initial capacity: \"</span> <span class=\"token operator\">+</span>\n                                           initialCapacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initialCapacity <span class=\"token operator\">></span> MAXIMUM_CAPACITY<span class=\"token punctuation\">)</span>\n        initialCapacity <span class=\"token operator\">=</span> MAXIMUM_CAPACITY<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loadFactor <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> Float<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>loadFactor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Illegal load factor: \"</span> <span class=\"token operator\">+</span>\n                                           loadFactor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loadFactor <span class=\"token operator\">=</span> loadFactor<span class=\"token punctuation\">;</span>\n    threshold <span class=\"token operator\">=</span> initialCapacity<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>给定的默认容量为 16，负载因子为 0.75。Map 在使用过程中不断的往里面存放数据，当数量达到了 <code>16 * 0.75 = 12</code> 就需要将当前 16 的容量进行扩容，而扩容这个过程涉及到 rehash、复制数据等操作，所以非常消耗性能。</p>\n<p>因此通常建议能提前预估 HashMap 的大小最好，尽量的减少扩容带来的性能损耗。</p>\n<p>根据代码可以看到其实真正存放数据的是</p>\n<p><code>transient Entry&lt;K,V&gt;[] table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE;</code></p>\n<p>这个数组，那么它又是如何定义的呢？</p>\n<p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/3.png\" alt></p>\n<p>Entry 是 HashMap 中的一个内部类，从他的成员变量很容易看出：</p>\n<ul>\n<li>key 就是写入时的键。</li>\n<li>value 自然就是值。</li>\n<li>开始的时候就提到 HashMap 是由数组和链表组成，所以这个 next 就是用于实现链表结构。</li>\n<li>hash 存放的是当前 key 的 hashcode。</li>\n</ul>\n<p>知晓了基本结构，那来看看其中重要的写入、获取函数：</p>\n<h4 id=\"put-方法\"><a href=\"#put-方法\" class=\"headerlink\" title=\"put 方法\"></a>put 方法</h4><pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> V <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>K key<span class=\"token punctuation\">,</span> V value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>table <span class=\"token operator\">==</span> EMPTY_TABLE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">inflateTable</span><span class=\"token punctuation\">(</span>threshold<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">putForNullKey</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> hash <span class=\"token operator\">=</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token function\">indexFor</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> table<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Entry<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> e <span class=\"token operator\">=</span> table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> e <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">;</span> e <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Object k<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            V oldValue <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n            e<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">recordAccess</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> oldValue<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">addEntry</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>判断当前数组是否需要初始化。</li>\n<li>如果 key 为空，则 put 一个空值进去。</li>\n<li>根据 key 计算出 hashcode。</li>\n<li>根据计算出的 hashcode 定位出所在桶。</li>\n<li>如果桶是一个链表则需要遍历判断里面的 hashcode、key 是否和传入 key 相等，如果相等则进行覆盖，并返回原来的值。</li>\n<li>如果桶是空的，说明当前位置没有数据存入；新增一个 Entry 对象写入当前位置。</li>\n</ul>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">void</span> <span class=\"token function\">addEntry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> K key<span class=\"token punctuation\">,</span> V value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bucketIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">>=</span> threshold<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>null <span class=\"token operator\">!=</span> table<span class=\"token punctuation\">[</span>bucketIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> table<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hash <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>null <span class=\"token operator\">!=</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        bucketIndex <span class=\"token operator\">=</span> <span class=\"token function\">indexFor</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> table<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">createEntry</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> bucketIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">createEntry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> K key<span class=\"token punctuation\">,</span> V value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bucketIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Entry<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> e <span class=\"token operator\">=</span> table<span class=\"token punctuation\">[</span>bucketIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    table<span class=\"token punctuation\">[</span>bucketIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当调用 addEntry 写入 Entry 时需要判断是否需要扩容。</p>\n<p>如果需要就进行两倍扩充，并将当前的 key 重新 hash 并定位。</p>\n<p>而在 <code>createEntry</code> 中会将当前位置的桶传入到新建的桶中，如果当前桶有值就会在位置形成链表。</p>\n<h4 id=\"get-方法\"><a href=\"#get-方法\" class=\"headerlink\" title=\"get 方法\"></a>get 方法</h4><p>再来看看 get 函数：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> V <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>Object key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">getForNullKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Entry<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> entry <span class=\"token operator\">=</span> <span class=\"token function\">getEntry</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> null <span class=\"token operator\">==</span> entry <span class=\"token operator\">?</span> null <span class=\"token operator\">:</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">final</span> Entry<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> <span class=\"token function\">getEntry</span><span class=\"token punctuation\">(</span>Object key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> hash <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Entry<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> e <span class=\"token operator\">=</span> table<span class=\"token punctuation\">[</span><span class=\"token function\">indexFor</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> table<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n         e <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">;</span>\n         e <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Object k<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>首先也是根据 key 计算出 hashcode，然后定位到具体的桶中。</li>\n<li>判断该位置是否为链表。</li>\n<li>不是链表就根据 <code>key、key 的 hashcode</code> 是否相等来返回值。</li>\n<li>为链表则需要遍历直到 key 及 hashcode 相等时候就返回值。</li>\n<li>啥都没取到就直接返回 null 。</li>\n</ul>\n<h3 id=\"Base-1-8\"><a href=\"#Base-1-8\" class=\"headerlink\" title=\"Base 1.8\"></a>Base 1.8</h3><p>不知道 1.7 的实现大家看出需要优化的点没有？</p>\n<p>其实一个很明显的地方就是：</p>\n<blockquote>\n<p>当 Hash 冲突严重时，在桶上形成的链表会变的越来越长，这样在查询时的效率就会越来越低；时间复杂度为 <code>O(N)</code>。</p>\n</blockquote>\n<p>因此 1.8 中重点优化了这个查询效率。</p>\n<p>1.8 HashMap 结构图：</p>\n<p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/4.png\" alt></p>\n<p>先来看看几个核心的成员变量：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> DEFAULT_INITIAL_CAPACITY <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// aka 16</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * The maximum capacity, used if a higher value is implicitly specified\n     * by either of the constructors with arguments.\n     * MUST be a power of two &lt;= 1&lt;&lt;30.\n     */</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> MAXIMUM_CAPACITY <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * The load factor used when none specified in constructor.\n     */</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">float</span> DEFAULT_LOAD_FACTOR <span class=\"token operator\">=</span> <span class=\"token number\">0.75f</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> TREEIFY_THRESHOLD <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">transient</span> Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> table<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * Holds cached entrySet(). Note that AbstractMap fields are used\n     * for keySet() and values().\n     */</span>\n    <span class=\"token keyword\">transient</span> Set<span class=\"token operator\">&lt;</span>Map<span class=\"token punctuation\">.</span>Entry<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">>></span> entrySet<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * The number of key-value mappings contained in this map.\n     */</span>\n    <span class=\"token keyword\">transient</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>和 1.7 大体上都差不多，还是有几个重要的区别：</p>\n<ul>\n<li><code>TREEIFY_THRESHOLD</code> 用于判断是否需要将链表转换为红黑树的阈值。</li>\n<li>HashEntry 修改为 Node。</li>\n</ul>\n<p>Node 的核心组成其实也是和 1.7 中的 HashEntry 一样，存放的都是 <code>key value hashcode next</code> 等数据。</p>\n<p>再来看看核心方法。</p>\n<h4 id=\"put-方法-1\"><a href=\"#put-方法-1\" class=\"headerlink\" title=\"put 方法\"></a>put 方法</h4><p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/5.png\" alt></p>\n<p>看似要比 1.7 的复杂，我们一步步拆解：</p>\n<ol>\n<li>判断当前桶是否为空，空的就需要初始化（resize 中会判断是否进行初始化）。</li>\n<li>根据当前 key 的 hashcode 定位到具体的桶中并判断是否为空，为空表明没有 Hash 冲突就直接在当前位置创建一个新桶即可。</li>\n<li>如果当前桶有值（ Hash 冲突），那么就要比较当前桶中的 <code>key、key 的 hashcode</code> 与写入的 key 是否相等，相等就赋值给 <code>e</code>,在第 8 步的时候会统一进行赋值及返回。</li>\n<li>如果当前桶为红黑树，那就要按照红黑树的方式写入数据。</li>\n<li>如果是个链表，就需要将当前的 key、value 封装成一个新节点写入到当前桶的后面（形成链表）。</li>\n<li>接着判断当前链表的大小是否大于预设的阈值，大于时就要转换为红黑树。</li>\n<li>如果在遍历过程中找到 key 相同时直接退出遍历。</li>\n<li>如果 <code>e != null</code> 就相当于存在相同的 key,那就需要将值覆盖。</li>\n<li>最后判断是否需要进行扩容。</li>\n</ol>\n<h4 id=\"get-方法-1\"><a href=\"#get-方法-1\" class=\"headerlink\" title=\"get 方法\"></a>get 方法</h4><pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> V <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>Object key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> e<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> <span class=\"token function\">getNode</span><span class=\"token punctuation\">(</span><span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> null <span class=\"token operator\">?</span> null <span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">final</span> Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> <span class=\"token function\">getNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> Object key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">;</span> Node<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> first<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span> K k<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token punctuation\">(</span>first <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> hash<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span> <span class=\"token comment\" spellcheck=\"true\">// always check first node</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> first<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> first<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> first<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>first <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TreeNode</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTreeNode</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span>\n                    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>get 方法看起来就要简单许多了。</p>\n<ul>\n<li>首先将 key hash 之后取得所定位的桶。</li>\n<li>如果桶为空则直接返回 null 。</li>\n<li>否则判断桶的第一个位置(有可能是链表、红黑树)的 key 是否为查询的 key，是就直接返回 value。</li>\n<li>如果第一个不匹配，则判断它的下一个是红黑树还是链表。</li>\n<li>红黑树就按照树的查找方式返回值。</li>\n<li>不然就按照链表的方式遍历匹配返回值。</li>\n</ul>\n<p>从这两个核心方法（get/put）可以看出 1.8 中对大链表做了优化，修改为红黑树之后查询效率直接提高到了 <code>O(logn)</code>。</p>\n<p>但是 HashMap 原有的问题也都存在，比如在并发场景下使用时容易出现死循环。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> HashMap<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> String<span class=\"token operator\">></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>但是为什么呢？简单分析下。</p>\n<p>看过上文的还记得在 HashMap 扩容的时候会调用 <code>resize()</code> 方法，就是这里的并发操作容易在一个桶上形成环形链表；这样当获取一个不存在的 key 时，计算出的 index 正好是环形链表的下标就会出现死循环。</p>\n<h3 id=\"遍历方式\"><a href=\"#遍历方式\" class=\"headerlink\" title=\"遍历方式\"></a>遍历方式</h3><p>还有一个值得注意的是 HashMap 的遍历方式，通常有以下几种：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">Iterator<span class=\"token operator\">&lt;</span>Map<span class=\"token punctuation\">.</span>Entry<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Integer<span class=\"token operator\">>></span> entryIterator <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>entryIterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Map<span class=\"token punctuation\">.</span>Entry<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Integer<span class=\"token operator\">></span> next <span class=\"token operator\">=</span> entryIterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key=\"</span> <span class=\"token operator\">+</span> next<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" value=\"</span> <span class=\"token operator\">+</span> next<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\nIterator<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> iterator <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            String key <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key=\"</span> <span class=\"token operator\">+</span> key <span class=\"token operator\">+</span> <span class=\"token string\">\" value=\"</span> <span class=\"token operator\">+</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>强烈建议</code>使用第一种 EntrySet 进行遍历。</p>\n<p>第一种可以把 key value 同时取出，第二种还得需要通过 key 取一次 value，效率较低。</p>\n<blockquote>\n<p>简单总结下 HashMap：无论是 1.7 还是 1.8 其实都能看出 JDK 没有对它做任何的同步操作，所以并发会出问题，甚至出现死循环导致系统不可用。</p>\n</blockquote>\n<p>因此 JDK 推出了专项专用的 ConcurrentHashMap ，该类位于 <code>java.util.concurrent</code> 包下，专门用于解决并发问题。</p>\n<blockquote>\n<p>坚持看到这里的朋友算是已经把 ConcurrentHashMap 的基础已经打牢了，下面正式开始分析。</p>\n</blockquote>\n<h2 id=\"ConcurrentHashMap\"><a href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"></a>ConcurrentHashMap</h2><p>ConcurrentHashMap 同样也分为 1.7 、1.8 版，两者在实现上略有不同。</p>\n<h3 id=\"Base-1-7-1\"><a href=\"#Base-1-7-1\" class=\"headerlink\" title=\"Base 1.7\"></a>Base 1.7</h3><p>先来看看 1.7 的实现，下面是他的结构图：</p>\n<p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/6.png\" alt></p>\n<p>如图所示，是由 Segment 数组、HashEntry 组成，和 HashMap 一样，仍然是数组加链表。</p>\n<p>它的核心成员变量：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">/**\n  * Segment 数组，存放数据时首先需要定位到具体的 Segment 中。\n*/</span>\n<span class=\"token keyword\">final</span> Segment<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> segments<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">transient</span> Set<span class=\"token operator\">&lt;</span>K<span class=\"token operator\">></span> keySet<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">transient</span> Set<span class=\"token operator\">&lt;</span>Map<span class=\"token punctuation\">.</span>Entry<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">>></span> entrySet<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Segment 是 ConcurrentHashMap 的一个内部类，主要的组成如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Segment</span><span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ReentrantLock</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> 2249069246763182397L<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 和 HashMap 中的 HashEntry 作用一样，真正存放数据的桶</span>\n    <span class=\"token keyword\">transient</span> <span class=\"token keyword\">volatile</span> HashEntry<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> table<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">transient</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">transient</span> <span class=\"token keyword\">int</span> modCount<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">transient</span> <span class=\"token keyword\">int</span> threshold<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">final</span> <span class=\"token keyword\">float</span> loadFactor<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>看看其中 HashEntry 的组成：</p>\n<p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/7.png\" alt></p>\n<p>和 HashMap 非常类似，唯一的区别就是其中的核心数据如 value ，以及链表都是 volatile 修饰的，保证了获取时的可见性。</p>\n<p>原理上来说：ConcurrentHashMap 采用了分段锁技术，其中 Segment 继承于 ReentrantLock。不会像 HashTable 那样不管是 put 还是 get 操作都需要做同步处理，理论上 ConcurrentHashMap 支持 CurrencyLevel (Segment 数组数量)的线程并发。每当一个线程占用锁访问一个 Segment 时，不会影响到其他的 Segment。</p>\n<p>下面也来看看核心的 <code>put get</code> 方法。</p>\n<h4 id=\"put-方法-2\"><a href=\"#put-方法-2\" class=\"headerlink\" title=\"put 方法\"></a>put 方法</h4><pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> V <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>K key<span class=\"token punctuation\">,</span> V value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Segment<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> hash <span class=\"token operator\">=</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hash <span class=\"token operator\">>>></span> segmentShift<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> segmentMask<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Segment<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>UNSAFE<span class=\"token punctuation\">.</span>getObject          <span class=\"token comment\" spellcheck=\"true\">// nonvolatile; recheck</span>\n         <span class=\"token punctuation\">(</span>segments<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;&lt;</span> SSHIFT<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> SBASE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//  in ensureSegment</span>\n        s <span class=\"token operator\">=</span> <span class=\"token function\">ensureSegment</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>首先是通过 key 定位到 Segment，之后在对应的 Segment 中进行具体的 put。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> V <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>K key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> V value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> onlyIfAbsent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    HashEntry<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> node <span class=\"token operator\">=</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> null <span class=\"token operator\">:</span>\n    <span class=\"token function\">scanAndLockForPut</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> hash<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    V oldValue<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        HashEntry<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> hash<span class=\"token punctuation\">;</span>\n        HashEntry<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> first <span class=\"token operator\">=</span> <span class=\"token function\">entryAt</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>HashEntry<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> e <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                K k<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span>\n                    <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> hash <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    oldValue <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>onlyIfAbsent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        e<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n                        <span class=\"token operator\">++</span>modCount<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                e <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span>\n                    node<span class=\"token punctuation\">.</span><span class=\"token function\">setNext</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span>\n                    node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashEntry</span><span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">></span> threshold <span class=\"token operator\">&amp;&amp;</span> tab<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> MAXIMUM_CAPACITY<span class=\"token punctuation\">)</span>\n                    <span class=\"token function\">rehash</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span>\n                    <span class=\"token function\">setEntryAt</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">++</span>modCount<span class=\"token punctuation\">;</span>\n                count <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n                oldValue <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> oldValue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>虽然 HashEntry 中的 value 是用 volatile 关键词修饰的，但是并不能保证并发的原子性，所以 put 操作时仍然需要加锁处理。</p>\n<p>首先第一步的时候会尝试获取锁，如果获取失败肯定就有其他线程存在竞争，则利用 <code>scanAndLockForPut()</code> 自旋获取锁。</p>\n<p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/8.png\" alt></p>\n<ol>\n<li>尝试自旋获取锁。</li>\n<li>如果重试的次数达到了 <code>MAX_SCAN_RETRIES</code> 则改为阻塞锁获取，保证能获取成功。</li>\n</ol>\n<p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/9.png\" alt></p>\n<p>再结合图看看 put 的流程。</p>\n<ol>\n<li>将当前 Segment 中的 table 通过 key 的 hashcode 定位到 HashEntry。</li>\n<li>遍历该 HashEntry，如果不为空则判断传入的 key 和当前遍历的 key 是否相等，相等则覆盖旧的 value。</li>\n<li>不为空则需要新建一个 HashEntry 并加入到 Segment 中，同时会先判断是否需要扩容。</li>\n<li>最后会解除在 1 中所获取当前 Segment 的锁。</li>\n</ol>\n<h4 id=\"get-方法-2\"><a href=\"#get-方法-2\" class=\"headerlink\" title=\"get 方法\"></a>get 方法</h4><pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> V <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>Object key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Segment<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> s<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// manually integrate access methods to reduce overhead</span>\n    HashEntry<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> h <span class=\"token operator\">=</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> u <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>h <span class=\"token operator\">>>></span> segmentShift<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> segmentMask<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> SSHIFT<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> SBASE<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Segment<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>UNSAFE<span class=\"token punctuation\">.</span><span class=\"token function\">getObjectVolatile</span><span class=\"token punctuation\">(</span>segments<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span>\n        <span class=\"token punctuation\">(</span>tab <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>HashEntry<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>HashEntry<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> UNSAFE<span class=\"token punctuation\">.</span><span class=\"token function\">getObjectVolatile</span>\n             <span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> TSHIFT<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> TBASE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             e <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">;</span> e <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            K k<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>hash <span class=\"token operator\">==</span> h <span class=\"token operator\">&amp;&amp;</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>get 逻辑比较简单：</p>\n<p>只需要将 Key 通过 Hash 之后定位到具体的 Segment ，再通过一次 Hash 定位到具体的元素上。</p>\n<p>由于 HashEntry 中的 value 属性是用 volatile 关键词修饰的，保证了内存可见性，所以每次获取时都是最新值。</p>\n<p>ConcurrentHashMap 的 get 方法是非常高效的，<strong>因为整个过程都不需要加锁</strong>。</p>\n<h3 id=\"Base-1-8-1\"><a href=\"#Base-1-8-1\" class=\"headerlink\" title=\"Base 1.8\"></a>Base 1.8</h3><p>1.7 已经解决了并发问题，并且能支持 N 个 Segment 这么多次数的并发，但依然存在 HashMap 在 1.7 版本中的问题。</p>\n<blockquote>\n<p>那就是查询遍历链表效率太低。</p>\n</blockquote>\n<p>因此 1.8 做了一些数据结构上的调整。</p>\n<p>首先来看下底层的组成结构：</p>\n<p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/10.png\" alt></p>\n<p>看起来是不是和 1.8 HashMap 结构类似？</p>\n<p>其中抛弃了原有的 Segment 分段锁，而采用了 <code>CAS + synchronized</code> 来保证并发安全性。</p>\n<p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/11.png\" alt></p>\n<p>也将 1.7 中存放数据的 HashEntry 改为 Node，但作用都是相同的。</p>\n<p>其中的 <code>val next</code> 都用了 volatile 修饰，保证了可见性。</p>\n<h4 id=\"put-方法-3\"><a href=\"#put-方法-3\" class=\"headerlink\" title=\"put 方法\"></a>put 方法</h4><p>重点来看看 put 函数：</p>\n<p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/12.png\" alt></p>\n<ul>\n<li>根据 key 计算出 hashcode 。</li>\n<li>判断是否需要进行初始化。</li>\n<li><code>f</code> 即为当前 key 定位出的 Node，如果为空表示当前位置可以写入数据，利用 CAS 尝试写入，失败则自旋保证成功。</li>\n<li>如果当前位置的 <code>hashcode == MOVED == -1</code>,则需要进行扩容。</li>\n<li>如果都不满足，则利用 synchronized 锁写入数据。</li>\n<li>如果数量大于 <code>TREEIFY_THRESHOLD</code> 则要转换为红黑树。</li>\n</ul>\n<h4 id=\"get-方法-3\"><a href=\"#get-方法-3\" class=\"headerlink\" title=\"get 方法\"></a>get 方法</h4><p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/13.png\" alt></p>\n<ul>\n<li>根据计算出来的 hashcode 寻址，如果就在桶上那么直接返回值。</li>\n<li>如果是红黑树那就按照树的方式获取值。</li>\n<li>就不满足那就按照链表的方式遍历获取值。</li>\n</ul>\n<blockquote>\n<p>1.8 在 1.7 的数据结构上做了大的改动，采用红黑树之后可以保证查询效率（<code>O(logn)</code>），甚至取消了 ReentrantLock 改为了 synchronized，这样可以看出在新版的 JDK 中对 synchronized 优化是很到位的。</p>\n</blockquote>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h2 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h2><p>众所周知 HashMap 底层是基于 <code>数组 + 链表</code> 组成的，不过在 jdk1.7 和 1.8 中具体实现稍有不同。</p>\n<h3 id=\"Base-1-7\"><a href=\"#Base-1-7\" class=\"headerlink\" title=\"Base 1.7\"></a>Base 1.7</h3><p>1.7 中的数据结构图：</p>\n<p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/1.png\" alt></p>\n<p>先来看看 1.7 中的实现。</p>\n<p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/2.png\" alt></p>\n<p>这是 HashMap 中比较核心的几个成员变量；看看分别是什么意思？</p>\n<ol>\n<li>初始化桶大小，因为底层是数组，所以这是数组默认的大小。</li>\n<li>桶最大值。</li>\n<li>默认的负载因子（0.75）</li>\n<li><code>table</code> 真正存放数据的数组。</li>\n<li><code>Map</code> 存放数量的大小。</li>\n<li>桶大小，可在初始化时显式指定。</li>\n<li>负载因子，可在初始化时显式指定。</li>\n</ol>\n<p>重点解释下负载因子：</p>\n<p>由于给定的 HashMap 的容量大小是固定的，比如默认初始化：</p>\n<pre><code class=\"java\">public HashMap() {\n    this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);\n}\n\npublic HashMap(int initialCapacity, float loadFactor) {\n    if (initialCapacity &lt; 0)\n        throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; +\n                                           initialCapacity);\n    if (initialCapacity &gt; MAXIMUM_CAPACITY)\n        initialCapacity = MAXIMUM_CAPACITY;\n    if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))\n        throw new IllegalArgumentException(&quot;Illegal load factor: &quot; +\n                                           loadFactor);\n\n    this.loadFactor = loadFactor;\n    threshold = initialCapacity;\n    init();\n}</code></pre>\n<p>给定的默认容量为 16，负载因子为 0.75。Map 在使用过程中不断的往里面存放数据，当数量达到了 <code>16 * 0.75 = 12</code> 就需要将当前 16 的容量进行扩容，而扩容这个过程涉及到 rehash、复制数据等操作，所以非常消耗性能。</p>\n<p>因此通常建议能提前预估 HashMap 的大小最好，尽量的减少扩容带来的性能损耗。</p>\n<p>根据代码可以看到其实真正存放数据的是</p>\n<p><code>transient Entry&lt;K,V&gt;[] table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE;</code></p>\n<p>这个数组，那么它又是如何定义的呢？</p>\n<p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/3.png\" alt></p>\n<p>Entry 是 HashMap 中的一个内部类，从他的成员变量很容易看出：</p>\n<ul>\n<li>key 就是写入时的键。</li>\n<li>value 自然就是值。</li>\n<li>开始的时候就提到 HashMap 是由数组和链表组成，所以这个 next 就是用于实现链表结构。</li>\n<li>hash 存放的是当前 key 的 hashcode。</li>\n</ul>\n<p>知晓了基本结构，那来看看其中重要的写入、获取函数：</p>\n<h4 id=\"put-方法\"><a href=\"#put-方法\" class=\"headerlink\" title=\"put 方法\"></a>put 方法</h4><pre><code class=\"java\">public V put(K key, V value) {\n    if (table == EMPTY_TABLE) {\n        inflateTable(threshold);\n    }\n    if (key == null)\n        return putForNullKey(value);\n    int hash = hash(key);\n    int i = indexFor(hash, table.length);\n    for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) {\n        Object k;\n        if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) {\n            V oldValue = e.value;\n            e.value = value;\n            e.recordAccess(this);\n            return oldValue;\n        }\n    }\n\n    modCount++;\n    addEntry(hash, key, value, i);\n    return null;\n}</code></pre>\n<ul>\n<li>判断当前数组是否需要初始化。</li>\n<li>如果 key 为空，则 put 一个空值进去。</li>\n<li>根据 key 计算出 hashcode。</li>\n<li>根据计算出的 hashcode 定位出所在桶。</li>\n<li>如果桶是一个链表则需要遍历判断里面的 hashcode、key 是否和传入 key 相等，如果相等则进行覆盖，并返回原来的值。</li>\n<li>如果桶是空的，说明当前位置没有数据存入；新增一个 Entry 对象写入当前位置。</li>\n</ul>\n<pre><code class=\"java\">void addEntry(int hash, K key, V value, int bucketIndex) {\n    if ((size &gt;= threshold) &amp;&amp; (null != table[bucketIndex])) {\n        resize(2 * table.length);\n        hash = (null != key) ? hash(key) : 0;\n        bucketIndex = indexFor(hash, table.length);\n    }\n\n    createEntry(hash, key, value, bucketIndex);\n}\n\nvoid createEntry(int hash, K key, V value, int bucketIndex) {\n    Entry&lt;K,V&gt; e = table[bucketIndex];\n    table[bucketIndex] = new Entry&lt;&gt;(hash, key, value, e);\n    size++;\n}</code></pre>\n<p>当调用 addEntry 写入 Entry 时需要判断是否需要扩容。</p>\n<p>如果需要就进行两倍扩充，并将当前的 key 重新 hash 并定位。</p>\n<p>而在 <code>createEntry</code> 中会将当前位置的桶传入到新建的桶中，如果当前桶有值就会在位置形成链表。</p>\n<h4 id=\"get-方法\"><a href=\"#get-方法\" class=\"headerlink\" title=\"get 方法\"></a>get 方法</h4><p>再来看看 get 函数：</p>\n<pre><code class=\"java\">public V get(Object key) {\n    if (key == null)\n        return getForNullKey();\n    Entry&lt;K,V&gt; entry = getEntry(key);\n\n    return null == entry ? null : entry.getValue();\n}\n\nfinal Entry&lt;K,V&gt; getEntry(Object key) {\n    if (size == 0) {\n        return null;\n    }\n\n    int hash = (key == null) ? 0 : hash(key);\n    for (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];\n         e != null;\n         e = e.next) {\n        Object k;\n        if (e.hash == hash &amp;&amp;\n            ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))\n            return e;\n    }\n    return null;\n}</code></pre>\n<ul>\n<li>首先也是根据 key 计算出 hashcode，然后定位到具体的桶中。</li>\n<li>判断该位置是否为链表。</li>\n<li>不是链表就根据 <code>key、key 的 hashcode</code> 是否相等来返回值。</li>\n<li>为链表则需要遍历直到 key 及 hashcode 相等时候就返回值。</li>\n<li>啥都没取到就直接返回 null 。</li>\n</ul>\n<h3 id=\"Base-1-8\"><a href=\"#Base-1-8\" class=\"headerlink\" title=\"Base 1.8\"></a>Base 1.8</h3><p>不知道 1.7 的实现大家看出需要优化的点没有？</p>\n<p>其实一个很明显的地方就是：</p>\n<blockquote>\n<p>当 Hash 冲突严重时，在桶上形成的链表会变的越来越长，这样在查询时的效率就会越来越低；时间复杂度为 <code>O(N)</code>。</p>\n</blockquote>\n<p>因此 1.8 中重点优化了这个查询效率。</p>\n<p>1.8 HashMap 结构图：</p>\n<p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/4.png\" alt></p>\n<p>先来看看几个核心的成员变量：</p>\n<pre><code class=\"java\">    static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16\n\n    /**\n     * The maximum capacity, used if a higher value is implicitly specified\n     * by either of the constructors with arguments.\n     * MUST be a power of two &lt;= 1&lt;&lt;30.\n     */\n    static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;\n\n    /**\n     * The load factor used when none specified in constructor.\n     */\n    static final float DEFAULT_LOAD_FACTOR = 0.75f;\n\n    static final int TREEIFY_THRESHOLD = 8;\n\n    transient Node&lt;K,V&gt;[] table;\n\n    /**\n     * Holds cached entrySet(). Note that AbstractMap fields are used\n     * for keySet() and values().\n     */\n    transient Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;\n\n    /**\n     * The number of key-value mappings contained in this map.\n     */\n    transient int size;</code></pre>\n<p>和 1.7 大体上都差不多，还是有几个重要的区别：</p>\n<ul>\n<li><code>TREEIFY_THRESHOLD</code> 用于判断是否需要将链表转换为红黑树的阈值。</li>\n<li>HashEntry 修改为 Node。</li>\n</ul>\n<p>Node 的核心组成其实也是和 1.7 中的 HashEntry 一样，存放的都是 <code>key value hashcode next</code> 等数据。</p>\n<p>再来看看核心方法。</p>\n<h4 id=\"put-方法-1\"><a href=\"#put-方法-1\" class=\"headerlink\" title=\"put 方法\"></a>put 方法</h4><p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/5.png\" alt></p>\n<p>看似要比 1.7 的复杂，我们一步步拆解：</p>\n<ol>\n<li>判断当前桶是否为空，空的就需要初始化（resize 中会判断是否进行初始化）。</li>\n<li>根据当前 key 的 hashcode 定位到具体的桶中并判断是否为空，为空表明没有 Hash 冲突就直接在当前位置创建一个新桶即可。</li>\n<li>如果当前桶有值（ Hash 冲突），那么就要比较当前桶中的 <code>key、key 的 hashcode</code> 与写入的 key 是否相等，相等就赋值给 <code>e</code>,在第 8 步的时候会统一进行赋值及返回。</li>\n<li>如果当前桶为红黑树，那就要按照红黑树的方式写入数据。</li>\n<li>如果是个链表，就需要将当前的 key、value 封装成一个新节点写入到当前桶的后面（形成链表）。</li>\n<li>接着判断当前链表的大小是否大于预设的阈值，大于时就要转换为红黑树。</li>\n<li>如果在遍历过程中找到 key 相同时直接退出遍历。</li>\n<li>如果 <code>e != null</code> 就相当于存在相同的 key,那就需要将值覆盖。</li>\n<li>最后判断是否需要进行扩容。</li>\n</ol>\n<h4 id=\"get-方法-1\"><a href=\"#get-方法-1\" class=\"headerlink\" title=\"get 方法\"></a>get 方法</h4><pre><code class=\"java\">public V get(Object key) {\n    Node&lt;K,V&gt; e;\n    return (e = getNode(hash(key), key)) == null ? null : e.value;\n}\n\nfinal Node&lt;K,V&gt; getNode(int hash, Object key) {\n    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;\n    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;\n        (first = tab[(n - 1) &amp; hash]) != null) {\n        if (first.hash == hash &amp;&amp; // always check first node\n            ((k = first.key) == key || (key != null &amp;&amp; key.equals(k))))\n            return first;\n        if ((e = first.next) != null) {\n            if (first instanceof TreeNode)\n                return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);\n            do {\n                if (e.hash == hash &amp;&amp;\n                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))\n                    return e;\n            } while ((e = e.next) != null);\n        }\n    }\n    return null;\n}</code></pre>\n<p>get 方法看起来就要简单许多了。</p>\n<ul>\n<li>首先将 key hash 之后取得所定位的桶。</li>\n<li>如果桶为空则直接返回 null 。</li>\n<li>否则判断桶的第一个位置(有可能是链表、红黑树)的 key 是否为查询的 key，是就直接返回 value。</li>\n<li>如果第一个不匹配，则判断它的下一个是红黑树还是链表。</li>\n<li>红黑树就按照树的查找方式返回值。</li>\n<li>不然就按照链表的方式遍历匹配返回值。</li>\n</ul>\n<p>从这两个核心方法（get/put）可以看出 1.8 中对大链表做了优化，修改为红黑树之后查询效率直接提高到了 <code>O(logn)</code>。</p>\n<p>但是 HashMap 原有的问题也都存在，比如在并发场景下使用时容易出现死循环。</p>\n<pre><code class=\"java\">final HashMap&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();\nfor (int i = 0; i &lt; 1000; i++) {\n    new Thread(new Runnable() {\n        @Override\n        public void run() {\n            map.put(UUID.randomUUID().toString(), &quot;&quot;);\n        }\n    }).start();\n}</code></pre>\n<p>但是为什么呢？简单分析下。</p>\n<p>看过上文的还记得在 HashMap 扩容的时候会调用 <code>resize()</code> 方法，就是这里的并发操作容易在一个桶上形成环形链表；这样当获取一个不存在的 key 时，计算出的 index 正好是环形链表的下标就会出现死循环。</p>\n<h3 id=\"遍历方式\"><a href=\"#遍历方式\" class=\"headerlink\" title=\"遍历方式\"></a>遍历方式</h3><p>还有一个值得注意的是 HashMap 的遍历方式，通常有以下几种：</p>\n<pre><code class=\"java\">Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; entryIterator = map.entrySet().iterator();\n        while (entryIterator.hasNext()) {\n            Map.Entry&lt;String, Integer&gt; next = entryIterator.next();\n            System.out.println(&quot;key=&quot; + next.getKey() + &quot; value=&quot; + next.getValue());\n        }\n\nIterator&lt;String&gt; iterator = map.keySet().iterator();\n        while (iterator.hasNext()){\n            String key = iterator.next();\n            System.out.println(&quot;key=&quot; + key + &quot; value=&quot; + map.get(key));\n\n        }</code></pre>\n<p><code>强烈建议</code>使用第一种 EntrySet 进行遍历。</p>\n<p>第一种可以把 key value 同时取出，第二种还得需要通过 key 取一次 value，效率较低。</p>\n<blockquote>\n<p>简单总结下 HashMap：无论是 1.7 还是 1.8 其实都能看出 JDK 没有对它做任何的同步操作，所以并发会出问题，甚至出现死循环导致系统不可用。</p>\n</blockquote>\n<p>因此 JDK 推出了专项专用的 ConcurrentHashMap ，该类位于 <code>java.util.concurrent</code> 包下，专门用于解决并发问题。</p>\n<blockquote>\n<p>坚持看到这里的朋友算是已经把 ConcurrentHashMap 的基础已经打牢了，下面正式开始分析。</p>\n</blockquote>\n<h2 id=\"ConcurrentHashMap\"><a href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"></a>ConcurrentHashMap</h2><p>ConcurrentHashMap 同样也分为 1.7 、1.8 版，两者在实现上略有不同。</p>\n<h3 id=\"Base-1-7-1\"><a href=\"#Base-1-7-1\" class=\"headerlink\" title=\"Base 1.7\"></a>Base 1.7</h3><p>先来看看 1.7 的实现，下面是他的结构图：</p>\n<p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/6.png\" alt></p>\n<p>如图所示，是由 Segment 数组、HashEntry 组成，和 HashMap 一样，仍然是数组加链表。</p>\n<p>它的核心成员变量：</p>\n<pre><code class=\"java\">/**\n  * Segment 数组，存放数据时首先需要定位到具体的 Segment 中。\n*/\nfinal Segment&lt;K,V&gt;[] segments;\n\ntransient Set&lt;K&gt; keySet;\ntransient Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</code></pre>\n<p>Segment 是 ConcurrentHashMap 的一个内部类，主要的组成如下：</p>\n<pre><code class=\"java\">static final class Segment&lt;K,V&gt; extends ReentrantLock implements Serializable {\n\n    private static final long serialVersionUID = 2249069246763182397L;\n\n    // 和 HashMap 中的 HashEntry 作用一样，真正存放数据的桶\n    transient volatile HashEntry&lt;K,V&gt;[] table;\n\n    transient int count;\n\n    transient int modCount;\n\n    transient int threshold;\n\n    final float loadFactor;\n\n}</code></pre>\n<p>看看其中 HashEntry 的组成：</p>\n<p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/7.png\" alt></p>\n<p>和 HashMap 非常类似，唯一的区别就是其中的核心数据如 value ，以及链表都是 volatile 修饰的，保证了获取时的可见性。</p>\n<p>原理上来说：ConcurrentHashMap 采用了分段锁技术，其中 Segment 继承于 ReentrantLock。不会像 HashTable 那样不管是 put 还是 get 操作都需要做同步处理，理论上 ConcurrentHashMap 支持 CurrencyLevel (Segment 数组数量)的线程并发。每当一个线程占用锁访问一个 Segment 时，不会影响到其他的 Segment。</p>\n<p>下面也来看看核心的 <code>put get</code> 方法。</p>\n<h4 id=\"put-方法-2\"><a href=\"#put-方法-2\" class=\"headerlink\" title=\"put 方法\"></a>put 方法</h4><pre><code class=\"java\">public V put(K key, V value) {\n    Segment&lt;K,V&gt; s;\n    if (value == null)\n        throw new NullPointerException();\n    int hash = hash(key);\n    int j = (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;\n    if ((s = (Segment&lt;K,V&gt;)UNSAFE.getObject          // nonvolatile; recheck\n         (segments, (j &lt;&lt; SSHIFT) + SBASE)) == null) //  in ensureSegment\n        s = ensureSegment(j);\n    return s.put(key, hash, value, false);\n}</code></pre>\n<p>首先是通过 key 定位到 Segment，之后在对应的 Segment 中进行具体的 put。</p>\n<pre><code class=\"java\">final V put(K key, int hash, V value, boolean onlyIfAbsent) {\n    HashEntry&lt;K,V&gt; node = tryLock() ? null :\n    scanAndLockForPut(key, hash, value);\n    V oldValue;\n    try {\n        HashEntry&lt;K,V&gt;[] tab = table;\n        int index = (tab.length - 1) &amp; hash;\n        HashEntry&lt;K,V&gt; first = entryAt(tab, index);\n        for (HashEntry&lt;K,V&gt; e = first;;) {\n            if (e != null) {\n                K k;\n                if ((k = e.key) == key ||\n                    (e.hash == hash &amp;&amp; key.equals(k))) {\n                    oldValue = e.value;\n                    if (!onlyIfAbsent) {\n                        e.value = value;\n                        ++modCount;\n                    }\n                    break;\n                }\n                e = e.next;\n            }\n            else {\n                if (node != null)\n                    node.setNext(first);\n                else\n                    node = new HashEntry&lt;K,V&gt;(hash, key, value, first);\n                int c = count + 1;\n                if (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)\n                    rehash(node);\n                else\n                    setEntryAt(tab, index, node);\n                ++modCount;\n                count = c;\n                oldValue = null;\n                break;\n            }\n        }\n    } finally {\n        unlock();\n    }\n    return oldValue;\n}</code></pre>\n<p>虽然 HashEntry 中的 value 是用 volatile 关键词修饰的，但是并不能保证并发的原子性，所以 put 操作时仍然需要加锁处理。</p>\n<p>首先第一步的时候会尝试获取锁，如果获取失败肯定就有其他线程存在竞争，则利用 <code>scanAndLockForPut()</code> 自旋获取锁。</p>\n<p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/8.png\" alt></p>\n<ol>\n<li>尝试自旋获取锁。</li>\n<li>如果重试的次数达到了 <code>MAX_SCAN_RETRIES</code> 则改为阻塞锁获取，保证能获取成功。</li>\n</ol>\n<p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/9.png\" alt></p>\n<p>再结合图看看 put 的流程。</p>\n<ol>\n<li>将当前 Segment 中的 table 通过 key 的 hashcode 定位到 HashEntry。</li>\n<li>遍历该 HashEntry，如果不为空则判断传入的 key 和当前遍历的 key 是否相等，相等则覆盖旧的 value。</li>\n<li>不为空则需要新建一个 HashEntry 并加入到 Segment 中，同时会先判断是否需要扩容。</li>\n<li>最后会解除在 1 中所获取当前 Segment 的锁。</li>\n</ol>\n<h4 id=\"get-方法-2\"><a href=\"#get-方法-2\" class=\"headerlink\" title=\"get 方法\"></a>get 方法</h4><pre><code class=\"java\">public V get(Object key) {\n    Segment&lt;K,V&gt; s; // manually integrate access methods to reduce overhead\n    HashEntry&lt;K,V&gt;[] tab;\n    int h = hash(key);\n    long u = (((h &gt;&gt;&gt; segmentShift) &amp; segmentMask) &lt;&lt; SSHIFT) + SBASE;\n    if ((s = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(segments, u)) != null &amp;&amp;\n        (tab = s.table) != null) {\n        for (HashEntry&lt;K,V&gt; e = (HashEntry&lt;K,V&gt;) UNSAFE.getObjectVolatile\n             (tab, ((long)(((tab.length - 1) &amp; h)) &lt;&lt; TSHIFT) + TBASE);\n             e != null; e = e.next) {\n            K k;\n            if ((k = e.key) == key || (e.hash == h &amp;&amp; key.equals(k)))\n                return e.value;\n        }\n    }\n    return null;\n}</code></pre>\n<p>get 逻辑比较简单：</p>\n<p>只需要将 Key 通过 Hash 之后定位到具体的 Segment ，再通过一次 Hash 定位到具体的元素上。</p>\n<p>由于 HashEntry 中的 value 属性是用 volatile 关键词修饰的，保证了内存可见性，所以每次获取时都是最新值。</p>\n<p>ConcurrentHashMap 的 get 方法是非常高效的，<strong>因为整个过程都不需要加锁</strong>。</p>\n<h3 id=\"Base-1-8-1\"><a href=\"#Base-1-8-1\" class=\"headerlink\" title=\"Base 1.8\"></a>Base 1.8</h3><p>1.7 已经解决了并发问题，并且能支持 N 个 Segment 这么多次数的并发，但依然存在 HashMap 在 1.7 版本中的问题。</p>\n<blockquote>\n<p>那就是查询遍历链表效率太低。</p>\n</blockquote>\n<p>因此 1.8 做了一些数据结构上的调整。</p>\n<p>首先来看下底层的组成结构：</p>\n<p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/10.png\" alt></p>\n<p>看起来是不是和 1.8 HashMap 结构类似？</p>\n<p>其中抛弃了原有的 Segment 分段锁，而采用了 <code>CAS + synchronized</code> 来保证并发安全性。</p>\n<p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/11.png\" alt></p>\n<p>也将 1.7 中存放数据的 HashEntry 改为 Node，但作用都是相同的。</p>\n<p>其中的 <code>val next</code> 都用了 volatile 修饰，保证了可见性。</p>\n<h4 id=\"put-方法-3\"><a href=\"#put-方法-3\" class=\"headerlink\" title=\"put 方法\"></a>put 方法</h4><p>重点来看看 put 函数：</p>\n<p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/12.png\" alt></p>\n<ul>\n<li>根据 key 计算出 hashcode 。</li>\n<li>判断是否需要进行初始化。</li>\n<li><code>f</code> 即为当前 key 定位出的 Node，如果为空表示当前位置可以写入数据，利用 CAS 尝试写入，失败则自旋保证成功。</li>\n<li>如果当前位置的 <code>hashcode == MOVED == -1</code>,则需要进行扩容。</li>\n<li>如果都不满足，则利用 synchronized 锁写入数据。</li>\n<li>如果数量大于 <code>TREEIFY_THRESHOLD</code> 则要转换为红黑树。</li>\n</ul>\n<h4 id=\"get-方法-3\"><a href=\"#get-方法-3\" class=\"headerlink\" title=\"get 方法\"></a>get 方法</h4><p><img src=\"/2020/01/23/hashmap-yu-concurrenthashmap/13.png\" alt></p>\n<ul>\n<li>根据计算出来的 hashcode 寻址，如果就在桶上那么直接返回值。</li>\n<li>如果是红黑树那就按照树的方式获取值。</li>\n<li>就不满足那就按照链表的方式遍历获取值。</li>\n</ul>\n<blockquote>\n<p>1.8 在 1.7 的数据结构上做了大的改动，采用红黑树之后可以保证查询效率（<code>O(logn)</code>），甚至取消了 ReentrantLock 改为了 synchronized，这样可以看出在新版的 JDK 中对 synchronized 优化是很到位的。</p>\n</blockquote>\n"},{"title":"Hadoop集群搭建与简单使用","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-01T06:13:08.000Z","password":null,"summary":null,"_content":"\n# Hadoop集群搭建与简单使用\n\n首先需要搭建一个linux的集群,可以参见我的博客[linux集群搭建](https://tigerluhai.github.io/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/)\n\n> Hadoop的运行是基于java的,所以需要先安装JDK,而且JDK版本必须高于1.7\n\n### 安装JDK\n\n（1）查询是否安装Java软件：\n\n```shell\n rpm -qa | grep java\n```\n\n（2）如果安装的版本低于1.7，卸载该JDK：\n\n ```shell\nsudo rpm -e 软件包\n ```\n\n（3）查看JDK安装路径：\n\n```shell\n which(or whereis) java\n```\n\n（4）解压JDK：\n\n```shell\ntar -zxvf 安装包名 -C 目标路径\n```\n\n（5）配置JDK环境：\n\n```shell\nvi /etc/profile\n\n在文件末尾加上\n#JAVA_HOME\nexport JAVA_HOME=/opt/module/jdk1.8.0_144\nexport PATH=$PATH:$JAVA_HOME/bin\n```\n\n**修改后需要立即生效需要运行如下命令:**\n\n```shell\nsource /etc/profile\n```\n\n（6）测试JDK安装是否成功：\n\n```shell\njava -version\n```\n\n### 安装Hadoop\n\n（1）解压hadoop安装包到指定位置\n\n```shell\ntar -zxvf 安装包 -C 指定目录\n```\n\n（2）添加环境变量\n\n```shell\nvi /etc/profile\n\n在文件末尾加上\n#HADOOP_HOME\nexport HADOOP_HOME=/opt/module/hadoop-3.1.2\nexport PATH=$PATH:$HADOOP_HOME/bin\nexport PATH=$PATH:$HADOOP_HOME/sbin\n```\n\n(3)修改配置文件\n\n- 集群部署规划\n\n|      | master        | slave1                  | slave2       | slave3                 |\n| ---- | ---------------- | -------------------------- | ------------------------- | ------------------------- |\n| HDFS | NameNodeDataNode | SecondaryNameNode DataNode               | DataNode |DataNode|\n| YARN | NodeManager      | ResourceManager | NodeManager               |NodeManager|\n\n- 核心配置文件\n\n配置core-site.xml\n\n```xml\nvi core-site.xml\n\n# 在该文件中编写如下配置\n<!-- 指定HDFS中NameNode的地址 -->\n<property>\n\t<name>fs.defaultFS</name>\n    <value>hdfs://master:9000</value>\n</property>\n<!-- 指定Hadoop运行时产生文件的存储目录 -->\n<property>\n\t<name>hadoop.tmp.dir</name>\n\t<value>/opt/module/hadoop-3.1.2/data/tmp</value>\n</property>\n```\n\n- HDFS配置文件\n\n配置hadoop-env.sh\n\n```shell\n vi hadoop-env.sh\n\nexport JAVA_HOME=/opt/module/jdk1.8.0_144\n```\n\n配置hdfs-site.xml\n\n```xml\nvi hdfs-site.xml\n\n<!--配置副本数量-->\n<property>\n\t\t<name>dfs.replication</name>\n\t\t<value>3</value>\n</property>\n<!-- 指定Hadoop辅助名称节点主机配置 -->\n<property>\n      <name>dfs.namenode.secondary.http-address</name>\n      <value>slave1:50090</value>\n</property>\n\n```\n\n注意:文件副本数量不只是dfs.replication决定,而是min(datanode节点数,dfs.replication)\n\n- YARN配置文件\n\n配置yarn-env.sh\n\n```shell\n vi yarn-env.sh\n\nexport JAVA_HOME=/opt/module/jdk1.8.0_144\n```\n\n- 配置yarn-site.xml\n\n```xml\n vi yarn-site.xml\n\n<!-- Reducer获取数据的方式 -->\n<property>\n\t<name>yarn.nodemanager.aux-services</name>\n\t<value>mapreduce_shuffle</value>\n</property>\n<!-- 指定YARN的ResourceManager的地址 -->\n<property>\n\t<name>yarn.resourcemanager.hostname</name>\n\t<value>slave2</value>\n</property>\n```\n\n- MapReduce配置文件\n\n```shell\nvi mapred-env.sh\n\nexport JAVA_HOME=/opt/module/jdk1.8.0_144\n```\n\n**注意：hadoop3之前的版本,mapreduce会继承hadoop的配置,所以可以不用配置这一项,但是3以后的版本必须配置,否则运行mapreduce时会报环境出错。**\n\n- 配置mapred-site.xml\n\n```xml\ncp mapred-site.xml.template mapred-site.xml\nvi mapred-site.xml\n\n<!-- 指定MR运行在Yarn上 -->\n<property>\n\t\t<name>mapreduce.framework.name</name>\n\t\t<value>yarn</value>\n</property>\n```\n\n（4）在集群上分发配置好的Hadoop配置文件\n\n编写分发脚本\n\n```shell\nvi /usr/local/bin/xsync\n\n#!/bin/bash\npcount=$#\nif((pcount=0));then\necho no args;\nexit;\nfi\np1=$1\nfname=`basename $p1`\necho fname=$fname\npdir=`cd -P $(dirname $p1);pwd`\necho pdir=$pdir\n\nuser=`whoami`\necho user=$user\nfor((host=1;host<4;host++));do\necho ------------salve$host-------------\nrsync -rvl $pdir/$fname $user@slave$host:$pdir\ndone\n```\n\n ```shell\nxsync /opt/module/hadoop-3.1.2/\n ```\n\n### 集群单节点启动\n\n（1）如果集群是第一次启动，需要**格式化NameNode**\n\n```shell\nhadoop namenode -format\n```\n\n（2）在master上启动NameNode\n\n```shell\nhadoop-daemon.sh start namenode\n```\n\n查看节点启动状态\n\n```shell\n jps\n```\n\n**注意:jps用于查看java进程,namenode和datanode都是java进程**\n\n（3）在master,slave1,slave2以及slave3上分别启动DataNode\n\n```shell\nhadoop-daemon.sh start datanode\n```\n\n```shell\n jps\n \n3461 NameNode\n3608 Jps\n3561 DataNode\n```\n\n思考：每次都一个一个节点启动，如果节点数太多怎么办？\n\n### 群起集群\n\n1.\t配置slaves\n\n```shell\nvi /opt/module/hadoop-3.1.2/etc/hadoop/slaves\n\n在该文件中增加如下内容：\nmaster\nslave1\nslave2\nslave3\n```\n\n**注意：该文件中添加的内容结尾不允许有空格，文件中不允许有空行。**\n\n同步所有节点配置文件\n\n```shell\n xsync slaves\n```\n\n2.\t启动集群\n\n（1）如果集群是第一次启动，需要格式化NameNode（注意格式化之前，一定要先停止上次启动的所有namenode和datanode进程，然后再删除data和log数据）\n\n```shell\nhdfs namenode -format\n```\n\n（2）启动HDFS\n\n```shell\nstart-dfs.sh\n```\n\n（3）启动YARN\n\n```shell\nstart-yarn.sh\n```\n\n**注意：NameNode和ResourceManger如果不是同一台机器，不能在NameNode上启动 YARN，应该在ResouceManager所在的机器上启动YARN。**\n\n### 集群基本操作\n\n- -ls: 显示目录信息\n\n```shell\nhadoop fs -ls /\n```\n\n- mkdir：在HDFS上创建目录\n\n```shell\n hadoop fs -mkdir -p /parent/test\n```\n\n- moveFromLocal：从本地剪切粘贴到HDFS\n\n```shell\nhadoop fs  -moveFromLocal  ./kongming.txt  /parent/test\n```\n\n- appendToFile：追加一个文件到已经存在的文件末尾\n\n```shell\n hadoop fs -appendToFile liubei.txt /parent/test/kongming.txt\n```\n\n- cat：显示文件内容\n\n```shell\nhadoop fs -cat /parent/test/kongming.txt\n```\n\n- chgrp 、-chmod、-chown：Linux文件系统中的用法一样，修改文件所属权限\n- copyFromLocal：从本地文件系统中拷贝文件到HDFS路径去\n\n```shell\n hadoop fs -copyFromLocal README.txt /\n```\n\n- copyToLocal：从HDFS拷贝到本地\n\n```shell\n hadoop fs -copyToLocal /parent/test/kongming.txt ./\n```\n\n- cp ：从HDFS的一个路径拷贝到HDFS的另一个路径\n\n```shell\nhadoop fs -cp /parent/test/kongming.txt  /zhuge.txt\n```\n\n- mv：在HDFS目录中移动文件\n\n```shell\nhadoop fs -mv /zhuge.txt /parent/test/\n```\n\n- get：等同于copyToLocal，就是从HDFS下载文件到本地\n\n```shell\nhadoop fs -get /parent/test/kongming.txt ./\n```\n\n- getmerge：合并下载多个文件，比如HDFS的目录 /parent/test//test下有多个文件:log.1, log.2,log.3,...\n\n```shell\nhadoop fs -getmerge /parent/test/test/* ./zaiyiqi.txt\n```\n\n- put：等同于copyFromLocal\n\n```shell\n hadoop fs -put ./zaiyiqi.txt /\n```\n\n- tail：显示一个文件的末尾\n\n\n- rm：删除文件或文件夹\n\n\n- rmdir：删除空目录\n\n\n- du统计文件夹的大小信息\n\n### JAVA代码操作HDFS\n\n```java\nLogger logger = LoggerFactory.getLogger(HdfsClient.class);\n\nFileSystem fileSystem;\n\nConfiguration configuration;\n\n@Test\n/**\n     * 测试环境正常\n     */\npublic void HDFS_ENV() throws IOException {\n    Logger logger = LoggerFactory.getLogger(HdfsClient.class);\n    //1.获取hdfs客户端对象\n    Configuration configuration = new Configuration();\n    configuration.set(\"fs.defaultFS\",\"hdfs://master:9000\");\n    FileSystem fileSystem = FileSystem.get(configuration);\n    //2.在hdfs上执行相关操作\n    boolean mkdirs = fileSystem.mkdirs(new Path(\"/client_test_environment\"));\n    //3.关闭资源\n    fileSystem.close();\n\n    System.out.println(mkdirs);\n}\n\n@Before\n/**\n     * 创建fileSystem对象\n     */\npublic void createFileSystem() throws URISyntaxException, IOException, InterruptedException {\n    //1.获取fs对象\n    configuration = new Configuration();\n    fileSystem = FileSystem.get(new URI(\"hdfs://master:9000\"), configuration, \"root\");\n}\n\n@Test\npublic void copyFromLocalFile() throws IOException{\n    //执行上传操作\n    fileSystem.copyFromLocalFile(new Path(\"D:\\\\logs\\\\xc.2019-04-29.log\"),new Path(\"/client_test_environment/\"));\n    //关闭资源\n    fileSystem.close();\n}\n\n\n@Test\npublic void copyToLocalFile() throws IOException{\n    //执行上传操作\n    fileSystem.copyToLocalFile(true,new Path(\"/client_test_environment/xc.2019-04-29.log\"),new Path(\"D:\\\\logs\\\\xc.2019-04-29-back.log\"),false);\n    //关闭资源\n    fileSystem.close();\n}\n\n@Test\npublic void listFiles() throws IOException {\n    //查看文件信息\n    RemoteIterator<LocatedFileStatus> iterator = fileSystem.listFiles(new Path(\"/\"), true);\n    while (iterator.hasNext()){\n        LocatedFileStatus fileStatus = iterator.next();\n        //获取文件名称，文件权限，文件长度，块信息\n        logger.info(fileStatus.getPath().getName());\n        logger.info(fileStatus.getLen()+\"\");\n        logger.info(fileStatus.getPermission()+\"\");\n        BlockLocation[] blockLocations = fileStatus.getBlockLocations();\n        for (BlockLocation blockLocation : blockLocations) {\n            logger.info(blockLocation.toString());\n        }\n        logger.info(\"----------------                    ----------------------\");\n    }\n}\n```\n\n","source":"_posts/Hadoop集群搭建与简单使用.md","raw":"---\ntitle: Hadoop集群搭建与简单使用\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-01 14:13:08\npassword:\nsummary:\ntags:\ncategories: 大数据\n---\n\n# Hadoop集群搭建与简单使用\n\n首先需要搭建一个linux的集群,可以参见我的博客[linux集群搭建](https://tigerluhai.github.io/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/)\n\n> Hadoop的运行是基于java的,所以需要先安装JDK,而且JDK版本必须高于1.7\n\n### 安装JDK\n\n（1）查询是否安装Java软件：\n\n```shell\n rpm -qa | grep java\n```\n\n（2）如果安装的版本低于1.7，卸载该JDK：\n\n ```shell\nsudo rpm -e 软件包\n ```\n\n（3）查看JDK安装路径：\n\n```shell\n which(or whereis) java\n```\n\n（4）解压JDK：\n\n```shell\ntar -zxvf 安装包名 -C 目标路径\n```\n\n（5）配置JDK环境：\n\n```shell\nvi /etc/profile\n\n在文件末尾加上\n#JAVA_HOME\nexport JAVA_HOME=/opt/module/jdk1.8.0_144\nexport PATH=$PATH:$JAVA_HOME/bin\n```\n\n**修改后需要立即生效需要运行如下命令:**\n\n```shell\nsource /etc/profile\n```\n\n（6）测试JDK安装是否成功：\n\n```shell\njava -version\n```\n\n### 安装Hadoop\n\n（1）解压hadoop安装包到指定位置\n\n```shell\ntar -zxvf 安装包 -C 指定目录\n```\n\n（2）添加环境变量\n\n```shell\nvi /etc/profile\n\n在文件末尾加上\n#HADOOP_HOME\nexport HADOOP_HOME=/opt/module/hadoop-3.1.2\nexport PATH=$PATH:$HADOOP_HOME/bin\nexport PATH=$PATH:$HADOOP_HOME/sbin\n```\n\n(3)修改配置文件\n\n- 集群部署规划\n\n|      | master        | slave1                  | slave2       | slave3                 |\n| ---- | ---------------- | -------------------------- | ------------------------- | ------------------------- |\n| HDFS | NameNodeDataNode | SecondaryNameNode DataNode               | DataNode |DataNode|\n| YARN | NodeManager      | ResourceManager | NodeManager               |NodeManager|\n\n- 核心配置文件\n\n配置core-site.xml\n\n```xml\nvi core-site.xml\n\n# 在该文件中编写如下配置\n<!-- 指定HDFS中NameNode的地址 -->\n<property>\n\t<name>fs.defaultFS</name>\n    <value>hdfs://master:9000</value>\n</property>\n<!-- 指定Hadoop运行时产生文件的存储目录 -->\n<property>\n\t<name>hadoop.tmp.dir</name>\n\t<value>/opt/module/hadoop-3.1.2/data/tmp</value>\n</property>\n```\n\n- HDFS配置文件\n\n配置hadoop-env.sh\n\n```shell\n vi hadoop-env.sh\n\nexport JAVA_HOME=/opt/module/jdk1.8.0_144\n```\n\n配置hdfs-site.xml\n\n```xml\nvi hdfs-site.xml\n\n<!--配置副本数量-->\n<property>\n\t\t<name>dfs.replication</name>\n\t\t<value>3</value>\n</property>\n<!-- 指定Hadoop辅助名称节点主机配置 -->\n<property>\n      <name>dfs.namenode.secondary.http-address</name>\n      <value>slave1:50090</value>\n</property>\n\n```\n\n注意:文件副本数量不只是dfs.replication决定,而是min(datanode节点数,dfs.replication)\n\n- YARN配置文件\n\n配置yarn-env.sh\n\n```shell\n vi yarn-env.sh\n\nexport JAVA_HOME=/opt/module/jdk1.8.0_144\n```\n\n- 配置yarn-site.xml\n\n```xml\n vi yarn-site.xml\n\n<!-- Reducer获取数据的方式 -->\n<property>\n\t<name>yarn.nodemanager.aux-services</name>\n\t<value>mapreduce_shuffle</value>\n</property>\n<!-- 指定YARN的ResourceManager的地址 -->\n<property>\n\t<name>yarn.resourcemanager.hostname</name>\n\t<value>slave2</value>\n</property>\n```\n\n- MapReduce配置文件\n\n```shell\nvi mapred-env.sh\n\nexport JAVA_HOME=/opt/module/jdk1.8.0_144\n```\n\n**注意：hadoop3之前的版本,mapreduce会继承hadoop的配置,所以可以不用配置这一项,但是3以后的版本必须配置,否则运行mapreduce时会报环境出错。**\n\n- 配置mapred-site.xml\n\n```xml\ncp mapred-site.xml.template mapred-site.xml\nvi mapred-site.xml\n\n<!-- 指定MR运行在Yarn上 -->\n<property>\n\t\t<name>mapreduce.framework.name</name>\n\t\t<value>yarn</value>\n</property>\n```\n\n（4）在集群上分发配置好的Hadoop配置文件\n\n编写分发脚本\n\n```shell\nvi /usr/local/bin/xsync\n\n#!/bin/bash\npcount=$#\nif((pcount=0));then\necho no args;\nexit;\nfi\np1=$1\nfname=`basename $p1`\necho fname=$fname\npdir=`cd -P $(dirname $p1);pwd`\necho pdir=$pdir\n\nuser=`whoami`\necho user=$user\nfor((host=1;host<4;host++));do\necho ------------salve$host-------------\nrsync -rvl $pdir/$fname $user@slave$host:$pdir\ndone\n```\n\n ```shell\nxsync /opt/module/hadoop-3.1.2/\n ```\n\n### 集群单节点启动\n\n（1）如果集群是第一次启动，需要**格式化NameNode**\n\n```shell\nhadoop namenode -format\n```\n\n（2）在master上启动NameNode\n\n```shell\nhadoop-daemon.sh start namenode\n```\n\n查看节点启动状态\n\n```shell\n jps\n```\n\n**注意:jps用于查看java进程,namenode和datanode都是java进程**\n\n（3）在master,slave1,slave2以及slave3上分别启动DataNode\n\n```shell\nhadoop-daemon.sh start datanode\n```\n\n```shell\n jps\n \n3461 NameNode\n3608 Jps\n3561 DataNode\n```\n\n思考：每次都一个一个节点启动，如果节点数太多怎么办？\n\n### 群起集群\n\n1.\t配置slaves\n\n```shell\nvi /opt/module/hadoop-3.1.2/etc/hadoop/slaves\n\n在该文件中增加如下内容：\nmaster\nslave1\nslave2\nslave3\n```\n\n**注意：该文件中添加的内容结尾不允许有空格，文件中不允许有空行。**\n\n同步所有节点配置文件\n\n```shell\n xsync slaves\n```\n\n2.\t启动集群\n\n（1）如果集群是第一次启动，需要格式化NameNode（注意格式化之前，一定要先停止上次启动的所有namenode和datanode进程，然后再删除data和log数据）\n\n```shell\nhdfs namenode -format\n```\n\n（2）启动HDFS\n\n```shell\nstart-dfs.sh\n```\n\n（3）启动YARN\n\n```shell\nstart-yarn.sh\n```\n\n**注意：NameNode和ResourceManger如果不是同一台机器，不能在NameNode上启动 YARN，应该在ResouceManager所在的机器上启动YARN。**\n\n### 集群基本操作\n\n- -ls: 显示目录信息\n\n```shell\nhadoop fs -ls /\n```\n\n- mkdir：在HDFS上创建目录\n\n```shell\n hadoop fs -mkdir -p /parent/test\n```\n\n- moveFromLocal：从本地剪切粘贴到HDFS\n\n```shell\nhadoop fs  -moveFromLocal  ./kongming.txt  /parent/test\n```\n\n- appendToFile：追加一个文件到已经存在的文件末尾\n\n```shell\n hadoop fs -appendToFile liubei.txt /parent/test/kongming.txt\n```\n\n- cat：显示文件内容\n\n```shell\nhadoop fs -cat /parent/test/kongming.txt\n```\n\n- chgrp 、-chmod、-chown：Linux文件系统中的用法一样，修改文件所属权限\n- copyFromLocal：从本地文件系统中拷贝文件到HDFS路径去\n\n```shell\n hadoop fs -copyFromLocal README.txt /\n```\n\n- copyToLocal：从HDFS拷贝到本地\n\n```shell\n hadoop fs -copyToLocal /parent/test/kongming.txt ./\n```\n\n- cp ：从HDFS的一个路径拷贝到HDFS的另一个路径\n\n```shell\nhadoop fs -cp /parent/test/kongming.txt  /zhuge.txt\n```\n\n- mv：在HDFS目录中移动文件\n\n```shell\nhadoop fs -mv /zhuge.txt /parent/test/\n```\n\n- get：等同于copyToLocal，就是从HDFS下载文件到本地\n\n```shell\nhadoop fs -get /parent/test/kongming.txt ./\n```\n\n- getmerge：合并下载多个文件，比如HDFS的目录 /parent/test//test下有多个文件:log.1, log.2,log.3,...\n\n```shell\nhadoop fs -getmerge /parent/test/test/* ./zaiyiqi.txt\n```\n\n- put：等同于copyFromLocal\n\n```shell\n hadoop fs -put ./zaiyiqi.txt /\n```\n\n- tail：显示一个文件的末尾\n\n\n- rm：删除文件或文件夹\n\n\n- rmdir：删除空目录\n\n\n- du统计文件夹的大小信息\n\n### JAVA代码操作HDFS\n\n```java\nLogger logger = LoggerFactory.getLogger(HdfsClient.class);\n\nFileSystem fileSystem;\n\nConfiguration configuration;\n\n@Test\n/**\n     * 测试环境正常\n     */\npublic void HDFS_ENV() throws IOException {\n    Logger logger = LoggerFactory.getLogger(HdfsClient.class);\n    //1.获取hdfs客户端对象\n    Configuration configuration = new Configuration();\n    configuration.set(\"fs.defaultFS\",\"hdfs://master:9000\");\n    FileSystem fileSystem = FileSystem.get(configuration);\n    //2.在hdfs上执行相关操作\n    boolean mkdirs = fileSystem.mkdirs(new Path(\"/client_test_environment\"));\n    //3.关闭资源\n    fileSystem.close();\n\n    System.out.println(mkdirs);\n}\n\n@Before\n/**\n     * 创建fileSystem对象\n     */\npublic void createFileSystem() throws URISyntaxException, IOException, InterruptedException {\n    //1.获取fs对象\n    configuration = new Configuration();\n    fileSystem = FileSystem.get(new URI(\"hdfs://master:9000\"), configuration, \"root\");\n}\n\n@Test\npublic void copyFromLocalFile() throws IOException{\n    //执行上传操作\n    fileSystem.copyFromLocalFile(new Path(\"D:\\\\logs\\\\xc.2019-04-29.log\"),new Path(\"/client_test_environment/\"));\n    //关闭资源\n    fileSystem.close();\n}\n\n\n@Test\npublic void copyToLocalFile() throws IOException{\n    //执行上传操作\n    fileSystem.copyToLocalFile(true,new Path(\"/client_test_environment/xc.2019-04-29.log\"),new Path(\"D:\\\\logs\\\\xc.2019-04-29-back.log\"),false);\n    //关闭资源\n    fileSystem.close();\n}\n\n@Test\npublic void listFiles() throws IOException {\n    //查看文件信息\n    RemoteIterator<LocatedFileStatus> iterator = fileSystem.listFiles(new Path(\"/\"), true);\n    while (iterator.hasNext()){\n        LocatedFileStatus fileStatus = iterator.next();\n        //获取文件名称，文件权限，文件长度，块信息\n        logger.info(fileStatus.getPath().getName());\n        logger.info(fileStatus.getLen()+\"\");\n        logger.info(fileStatus.getPermission()+\"\");\n        BlockLocation[] blockLocations = fileStatus.getBlockLocations();\n        for (BlockLocation blockLocation : blockLocations) {\n            logger.info(blockLocation.toString());\n        }\n        logger.info(\"----------------                    ----------------------\");\n    }\n}\n```\n\n","slug":"Hadoop集群搭建与简单使用","published":1,"updated":"2021-04-29T10:55:01.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6ml9m000jvkvy0g4vx5p0","content":"<h1 id=\"Hadoop集群搭建与简单使用\"><a href=\"#Hadoop集群搭建与简单使用\" class=\"headerlink\" title=\"Hadoop集群搭建与简单使用\"></a>Hadoop集群搭建与简单使用</h1><p>首先需要搭建一个linux的集群,可以参见我的博客<a href=\"https://tigerluhai.github.io/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/\">linux集群搭建</a></p>\n<blockquote>\n<p>Hadoop的运行是基于java的,所以需要先安装JDK,而且JDK版本必须高于1.7</p>\n</blockquote>\n<h3 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h3><p>（1）查询是否安装Java软件：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"> rpm -qa | grep java<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（2）如果安装的版本低于1.7，卸载该JDK：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">sudo rpm -e 软件包<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（3）查看JDK安装路径：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"> which(or whereis) java<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（4）解压JDK：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">tar -zxvf 安装包名 -C 目标路径<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（5）配置JDK环境：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">vi /etc/profile\n\n在文件末尾加上\n#JAVA_HOME\nexport JAVA_HOME=/opt/module/jdk1.8.0_144\nexport PATH=$PATH:$JAVA_HOME/bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>修改后需要立即生效需要运行如下命令:</strong></p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">source /etc/profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（6）测试JDK安装是否成功：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">java -version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"安装Hadoop\"><a href=\"#安装Hadoop\" class=\"headerlink\" title=\"安装Hadoop\"></a>安装Hadoop</h3><p>（1）解压hadoop安装包到指定位置</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">tar -zxvf 安装包 -C 指定目录<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（2）添加环境变量</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">vi /etc/profile\n\n在文件末尾加上\n#HADOOP_HOME\nexport HADOOP_HOME=/opt/module/hadoop-3.1.2\nexport PATH=$PATH:$HADOOP_HOME/bin\nexport PATH=$PATH:$HADOOP_HOME/sbin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>(3)修改配置文件</p>\n<ul>\n<li>集群部署规划</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>master</th>\n<th>slave1</th>\n<th>slave2</th>\n<th>slave3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>HDFS</td>\n<td>NameNodeDataNode</td>\n<td>SecondaryNameNode DataNode</td>\n<td>DataNode</td>\n<td>DataNode</td>\n</tr>\n<tr>\n<td>YARN</td>\n<td>NodeManager</td>\n<td>ResourceManager</td>\n<td>NodeManager</td>\n<td>NodeManager</td>\n</tr>\n</tbody></table>\n<ul>\n<li>核心配置文件</li>\n</ul>\n<p>配置core-site.xml</p>\n<pre class=\"line-numbers language-xml\"><code class=\"language-xml\">vi core-site.xml\n\n# 在该文件中编写如下配置\n<span class=\"token comment\" spellcheck=\"true\">&lt;!-- 指定HDFS中NameNode的地址 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>fs.defaultFS<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>hdfs://master:9000<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\" spellcheck=\"true\">&lt;!-- 指定Hadoop运行时产生文件的存储目录 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>hadoop.tmp.dir<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>/opt/module/hadoop-3.1.2/data/tmp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>HDFS配置文件</li>\n</ul>\n<p>配置hadoop-env.sh</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"> vi hadoop-env.sh\n\nexport JAVA_HOME=/opt/module/jdk1.8.0_144<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>配置hdfs-site.xml</p>\n<pre class=\"line-numbers language-xml\"><code class=\"language-xml\">vi hdfs-site.xml\n\n<span class=\"token comment\" spellcheck=\"true\">&lt;!--配置副本数量--></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.replication<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\" spellcheck=\"true\">&lt;!-- 指定Hadoop辅助名称节点主机配置 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.namenode.secondary.http-address<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>slave1:50090<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意:文件副本数量不只是dfs.replication决定,而是min(datanode节点数,dfs.replication)</p>\n<ul>\n<li>YARN配置文件</li>\n</ul>\n<p>配置yarn-env.sh</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"> vi yarn-env.sh\n\nexport JAVA_HOME=/opt/module/jdk1.8.0_144<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>配置yarn-site.xml</li>\n</ul>\n<pre class=\"line-numbers language-xml\"><code class=\"language-xml\"> vi yarn-site.xml\n\n<span class=\"token comment\" spellcheck=\"true\">&lt;!-- Reducer获取数据的方式 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.nodemanager.aux-services<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>mapreduce_shuffle<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\" spellcheck=\"true\">&lt;!-- 指定YARN的ResourceManager的地址 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.resourcemanager.hostname<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>slave2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>MapReduce配置文件</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">vi mapred-env.sh\n\nexport JAVA_HOME=/opt/module/jdk1.8.0_144<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意：hadoop3之前的版本,mapreduce会继承hadoop的配置,所以可以不用配置这一项,但是3以后的版本必须配置,否则运行mapreduce时会报环境出错。</strong></p>\n<ul>\n<li>配置mapred-site.xml</li>\n</ul>\n<pre class=\"line-numbers language-xml\"><code class=\"language-xml\">cp mapred-site.xml.template mapred-site.xml\nvi mapred-site.xml\n\n<span class=\"token comment\" spellcheck=\"true\">&lt;!-- 指定MR运行在Yarn上 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>mapreduce.framework.name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>yarn<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（4）在集群上分发配置好的Hadoop配置文件</p>\n<p>编写分发脚本</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">vi /usr/local/bin/xsync\n\n#!/bin/bash\npcount=$#\nif((pcount=0));then\necho no args;\nexit;\nfi\np1=$1\nfname=`basename $p1`\necho fname=$fname\npdir=`cd -P $(dirname $p1);pwd`\necho pdir=$pdir\n\nuser=`whoami`\necho user=$user\nfor((host=1;host<4;host++));do\necho ------------salve$host-------------\nrsync -rvl $pdir/$fname $user@slave$host:$pdir\ndone<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">xsync /opt/module/hadoop-3.1.2/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"集群单节点启动\"><a href=\"#集群单节点启动\" class=\"headerlink\" title=\"集群单节点启动\"></a>集群单节点启动</h3><p>（1）如果集群是第一次启动，需要<strong>格式化NameNode</strong></p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">hadoop namenode -format<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（2）在master上启动NameNode</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">hadoop-daemon.sh start namenode<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>查看节点启动状态</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"> jps<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>注意:jps用于查看java进程,namenode和datanode都是java进程</strong></p>\n<p>（3）在master,slave1,slave2以及slave3上分别启动DataNode</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">hadoop-daemon.sh start datanode<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"> jps\n\n3461 NameNode\n3608 Jps\n3561 DataNode<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>思考：每次都一个一个节点启动，如果节点数太多怎么办？</p>\n<h3 id=\"群起集群\"><a href=\"#群起集群\" class=\"headerlink\" title=\"群起集群\"></a>群起集群</h3><ol>\n<li>配置slaves</li>\n</ol>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">vi /opt/module/hadoop-3.1.2/etc/hadoop/slaves\n\n在该文件中增加如下内容：\nmaster\nslave1\nslave2\nslave3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>注意：该文件中添加的内容结尾不允许有空格，文件中不允许有空行。</strong></p>\n<p>同步所有节点配置文件</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"> xsync slaves<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol start=\"2\">\n<li>启动集群</li>\n</ol>\n<p>（1）如果集群是第一次启动，需要格式化NameNode（注意格式化之前，一定要先停止上次启动的所有namenode和datanode进程，然后再删除data和log数据）</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">hdfs namenode -format<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（2）启动HDFS</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">start-dfs.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>（3）启动YARN</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">start-yarn.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>注意：NameNode和ResourceManger如果不是同一台机器，不能在NameNode上启动 YARN，应该在ResouceManager所在的机器上启动YARN。</strong></p>\n<h3 id=\"集群基本操作\"><a href=\"#集群基本操作\" class=\"headerlink\" title=\"集群基本操作\"></a>集群基本操作</h3><ul>\n<li>-ls: 显示目录信息</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">hadoop fs -ls /<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>mkdir：在HDFS上创建目录</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"> hadoop fs -mkdir -p /parent/test<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>moveFromLocal：从本地剪切粘贴到HDFS</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">hadoop fs  -moveFromLocal  ./kongming.txt  /parent/test<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>appendToFile：追加一个文件到已经存在的文件末尾</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"> hadoop fs -appendToFile liubei.txt /parent/test/kongming.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>cat：显示文件内容</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">hadoop fs -cat /parent/test/kongming.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>chgrp 、-chmod、-chown：Linux文件系统中的用法一样，修改文件所属权限</li>\n<li>copyFromLocal：从本地文件系统中拷贝文件到HDFS路径去</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"> hadoop fs -copyFromLocal README.txt /<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>copyToLocal：从HDFS拷贝到本地</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"> hadoop fs -copyToLocal /parent/test/kongming.txt ./<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>cp ：从HDFS的一个路径拷贝到HDFS的另一个路径</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">hadoop fs -cp /parent/test/kongming.txt  /zhuge.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>mv：在HDFS目录中移动文件</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">hadoop fs -mv /zhuge.txt /parent/test/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>get：等同于copyToLocal，就是从HDFS下载文件到本地</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">hadoop fs -get /parent/test/kongming.txt ./<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>getmerge：合并下载多个文件，比如HDFS的目录 /parent/test//test下有多个文件:log.1, log.2,log.3,…</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">hadoop fs -getmerge /parent/test/test/* ./zaiyiqi.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>put：等同于copyFromLocal</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"> hadoop fs -put ./zaiyiqi.txt /<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>tail：显示一个文件的末尾</li>\n</ul>\n<ul>\n<li>rm：删除文件或文件夹</li>\n</ul>\n<ul>\n<li>rmdir：删除空目录</li>\n</ul>\n<ul>\n<li>du统计文件夹的大小信息</li>\n</ul>\n<h3 id=\"JAVA代码操作HDFS\"><a href=\"#JAVA代码操作HDFS\" class=\"headerlink\" title=\"JAVA代码操作HDFS\"></a>JAVA代码操作HDFS</h3><pre class=\"line-numbers language-java\"><code class=\"language-java\">Logger logger <span class=\"token operator\">=</span> LoggerFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span>HdfsClient<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nFileSystem fileSystem<span class=\"token punctuation\">;</span>\n\nConfiguration configuration<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token comment\" spellcheck=\"true\">/**\n     * 测试环境正常\n     */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">HDFS_ENV</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n    Logger logger <span class=\"token operator\">=</span> LoggerFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span>HdfsClient<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//1.获取hdfs客户端对象</span>\n    Configuration configuration <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    configuration<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs.defaultFS\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hdfs://master:9000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    FileSystem fileSystem <span class=\"token operator\">=</span> FileSystem<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//2.在hdfs上执行相关操作</span>\n    <span class=\"token keyword\">boolean</span> mkdirs <span class=\"token operator\">=</span> fileSystem<span class=\"token punctuation\">.</span><span class=\"token function\">mkdirs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/client_test_environment\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//3.关闭资源</span>\n    fileSystem<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>mkdirs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Before</span>\n<span class=\"token comment\" spellcheck=\"true\">/**\n     * 创建fileSystem对象\n     */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createFileSystem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> URISyntaxException<span class=\"token punctuation\">,</span> IOException<span class=\"token punctuation\">,</span> InterruptedException <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//1.获取fs对象</span>\n    configuration <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    fileSystem <span class=\"token operator\">=</span> FileSystem<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URI</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hdfs://master:9000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> configuration<span class=\"token punctuation\">,</span> <span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">copyFromLocalFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//执行上传操作</span>\n    fileSystem<span class=\"token punctuation\">.</span><span class=\"token function\">copyFromLocalFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\logs\\\\xc.2019-04-29.log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/client_test_environment/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//关闭资源</span>\n    fileSystem<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">copyToLocalFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//执行上传操作</span>\n    fileSystem<span class=\"token punctuation\">.</span><span class=\"token function\">copyToLocalFile</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/client_test_environment/xc.2019-04-29.log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\logs\\\\xc.2019-04-29-back.log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//关闭资源</span>\n    fileSystem<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//查看文件信息</span>\n    RemoteIterator<span class=\"token operator\">&lt;</span>LocatedFileStatus<span class=\"token operator\">></span> iterator <span class=\"token operator\">=</span> fileSystem<span class=\"token punctuation\">.</span><span class=\"token function\">listFiles</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        LocatedFileStatus fileStatus <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//获取文件名称，文件权限，文件长度，块信息</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>fileStatus<span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>fileStatus<span class=\"token punctuation\">.</span><span class=\"token function\">getLen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>fileStatus<span class=\"token punctuation\">.</span><span class=\"token function\">getPermission</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        BlockLocation<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> blockLocations <span class=\"token operator\">=</span> fileStatus<span class=\"token punctuation\">.</span><span class=\"token function\">getBlockLocations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>BlockLocation blockLocation <span class=\"token operator\">:</span> blockLocations<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>blockLocation<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------                    ----------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h1 id=\"Hadoop集群搭建与简单使用\"><a href=\"#Hadoop集群搭建与简单使用\" class=\"headerlink\" title=\"Hadoop集群搭建与简单使用\"></a>Hadoop集群搭建与简单使用</h1><p>首先需要搭建一个linux的集群,可以参见我的博客<a href=\"https://tigerluhai.github.io/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/\">linux集群搭建</a></p>\n<blockquote>\n<p>Hadoop的运行是基于java的,所以需要先安装JDK,而且JDK版本必须高于1.7</p>\n</blockquote>\n<h3 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h3><p>（1）查询是否安装Java软件：</p>\n<pre><code class=\"shell\"> rpm -qa | grep java</code></pre>\n<p>（2）如果安装的版本低于1.7，卸载该JDK：</p>\n<pre><code class=\"shell\">sudo rpm -e 软件包</code></pre>\n<p>（3）查看JDK安装路径：</p>\n<pre><code class=\"shell\"> which(or whereis) java</code></pre>\n<p>（4）解压JDK：</p>\n<pre><code class=\"shell\">tar -zxvf 安装包名 -C 目标路径</code></pre>\n<p>（5）配置JDK环境：</p>\n<pre><code class=\"shell\">vi /etc/profile\n\n在文件末尾加上\n#JAVA_HOME\nexport JAVA_HOME=/opt/module/jdk1.8.0_144\nexport PATH=$PATH:$JAVA_HOME/bin</code></pre>\n<p><strong>修改后需要立即生效需要运行如下命令:</strong></p>\n<pre><code class=\"shell\">source /etc/profile</code></pre>\n<p>（6）测试JDK安装是否成功：</p>\n<pre><code class=\"shell\">java -version</code></pre>\n<h3 id=\"安装Hadoop\"><a href=\"#安装Hadoop\" class=\"headerlink\" title=\"安装Hadoop\"></a>安装Hadoop</h3><p>（1）解压hadoop安装包到指定位置</p>\n<pre><code class=\"shell\">tar -zxvf 安装包 -C 指定目录</code></pre>\n<p>（2）添加环境变量</p>\n<pre><code class=\"shell\">vi /etc/profile\n\n在文件末尾加上\n#HADOOP_HOME\nexport HADOOP_HOME=/opt/module/hadoop-3.1.2\nexport PATH=$PATH:$HADOOP_HOME/bin\nexport PATH=$PATH:$HADOOP_HOME/sbin</code></pre>\n<p>(3)修改配置文件</p>\n<ul>\n<li>集群部署规划</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>master</th>\n<th>slave1</th>\n<th>slave2</th>\n<th>slave3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>HDFS</td>\n<td>NameNodeDataNode</td>\n<td>SecondaryNameNode DataNode</td>\n<td>DataNode</td>\n<td>DataNode</td>\n</tr>\n<tr>\n<td>YARN</td>\n<td>NodeManager</td>\n<td>ResourceManager</td>\n<td>NodeManager</td>\n<td>NodeManager</td>\n</tr>\n</tbody></table>\n<ul>\n<li>核心配置文件</li>\n</ul>\n<p>配置core-site.xml</p>\n<pre><code class=\"xml\">vi core-site.xml\n\n# 在该文件中编写如下配置\n&lt;!-- 指定HDFS中NameNode的地址 --&gt;\n&lt;property&gt;\n    &lt;name&gt;fs.defaultFS&lt;/name&gt;\n    &lt;value&gt;hdfs://master:9000&lt;/value&gt;\n&lt;/property&gt;\n&lt;!-- 指定Hadoop运行时产生文件的存储目录 --&gt;\n&lt;property&gt;\n    &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;\n    &lt;value&gt;/opt/module/hadoop-3.1.2/data/tmp&lt;/value&gt;\n&lt;/property&gt;</code></pre>\n<ul>\n<li>HDFS配置文件</li>\n</ul>\n<p>配置hadoop-env.sh</p>\n<pre><code class=\"shell\"> vi hadoop-env.sh\n\nexport JAVA_HOME=/opt/module/jdk1.8.0_144</code></pre>\n<p>配置hdfs-site.xml</p>\n<pre><code class=\"xml\">vi hdfs-site.xml\n\n&lt;!--配置副本数量--&gt;\n&lt;property&gt;\n        &lt;name&gt;dfs.replication&lt;/name&gt;\n        &lt;value&gt;3&lt;/value&gt;\n&lt;/property&gt;\n&lt;!-- 指定Hadoop辅助名称节点主机配置 --&gt;\n&lt;property&gt;\n      &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;\n      &lt;value&gt;slave1:50090&lt;/value&gt;\n&lt;/property&gt;\n</code></pre>\n<p>注意:文件副本数量不只是dfs.replication决定,而是min(datanode节点数,dfs.replication)</p>\n<ul>\n<li>YARN配置文件</li>\n</ul>\n<p>配置yarn-env.sh</p>\n<pre><code class=\"shell\"> vi yarn-env.sh\n\nexport JAVA_HOME=/opt/module/jdk1.8.0_144</code></pre>\n<ul>\n<li>配置yarn-site.xml</li>\n</ul>\n<pre><code class=\"xml\"> vi yarn-site.xml\n\n&lt;!-- Reducer获取数据的方式 --&gt;\n&lt;property&gt;\n    &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;\n    &lt;value&gt;mapreduce_shuffle&lt;/value&gt;\n&lt;/property&gt;\n&lt;!-- 指定YARN的ResourceManager的地址 --&gt;\n&lt;property&gt;\n    &lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;\n    &lt;value&gt;slave2&lt;/value&gt;\n&lt;/property&gt;</code></pre>\n<ul>\n<li>MapReduce配置文件</li>\n</ul>\n<pre><code class=\"shell\">vi mapred-env.sh\n\nexport JAVA_HOME=/opt/module/jdk1.8.0_144</code></pre>\n<p><strong>注意：hadoop3之前的版本,mapreduce会继承hadoop的配置,所以可以不用配置这一项,但是3以后的版本必须配置,否则运行mapreduce时会报环境出错。</strong></p>\n<ul>\n<li>配置mapred-site.xml</li>\n</ul>\n<pre><code class=\"xml\">cp mapred-site.xml.template mapred-site.xml\nvi mapred-site.xml\n\n&lt;!-- 指定MR运行在Yarn上 --&gt;\n&lt;property&gt;\n        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;\n        &lt;value&gt;yarn&lt;/value&gt;\n&lt;/property&gt;</code></pre>\n<p>（4）在集群上分发配置好的Hadoop配置文件</p>\n<p>编写分发脚本</p>\n<pre><code class=\"shell\">vi /usr/local/bin/xsync\n\n#!/bin/bash\npcount=$#\nif((pcount=0));then\necho no args;\nexit;\nfi\np1=$1\nfname=`basename $p1`\necho fname=$fname\npdir=`cd -P $(dirname $p1);pwd`\necho pdir=$pdir\n\nuser=`whoami`\necho user=$user\nfor((host=1;host&lt;4;host++));do\necho ------------salve$host-------------\nrsync -rvl $pdir/$fname $user@slave$host:$pdir\ndone</code></pre>\n<pre><code class=\"shell\">xsync /opt/module/hadoop-3.1.2/</code></pre>\n<h3 id=\"集群单节点启动\"><a href=\"#集群单节点启动\" class=\"headerlink\" title=\"集群单节点启动\"></a>集群单节点启动</h3><p>（1）如果集群是第一次启动，需要<strong>格式化NameNode</strong></p>\n<pre><code class=\"shell\">hadoop namenode -format</code></pre>\n<p>（2）在master上启动NameNode</p>\n<pre><code class=\"shell\">hadoop-daemon.sh start namenode</code></pre>\n<p>查看节点启动状态</p>\n<pre><code class=\"shell\"> jps</code></pre>\n<p><strong>注意:jps用于查看java进程,namenode和datanode都是java进程</strong></p>\n<p>（3）在master,slave1,slave2以及slave3上分别启动DataNode</p>\n<pre><code class=\"shell\">hadoop-daemon.sh start datanode</code></pre>\n<pre><code class=\"shell\"> jps\n\n3461 NameNode\n3608 Jps\n3561 DataNode</code></pre>\n<p>思考：每次都一个一个节点启动，如果节点数太多怎么办？</p>\n<h3 id=\"群起集群\"><a href=\"#群起集群\" class=\"headerlink\" title=\"群起集群\"></a>群起集群</h3><ol>\n<li>配置slaves</li>\n</ol>\n<pre><code class=\"shell\">vi /opt/module/hadoop-3.1.2/etc/hadoop/slaves\n\n在该文件中增加如下内容：\nmaster\nslave1\nslave2\nslave3</code></pre>\n<p><strong>注意：该文件中添加的内容结尾不允许有空格，文件中不允许有空行。</strong></p>\n<p>同步所有节点配置文件</p>\n<pre><code class=\"shell\"> xsync slaves</code></pre>\n<ol start=\"2\">\n<li>启动集群</li>\n</ol>\n<p>（1）如果集群是第一次启动，需要格式化NameNode（注意格式化之前，一定要先停止上次启动的所有namenode和datanode进程，然后再删除data和log数据）</p>\n<pre><code class=\"shell\">hdfs namenode -format</code></pre>\n<p>（2）启动HDFS</p>\n<pre><code class=\"shell\">start-dfs.sh</code></pre>\n<p>（3）启动YARN</p>\n<pre><code class=\"shell\">start-yarn.sh</code></pre>\n<p><strong>注意：NameNode和ResourceManger如果不是同一台机器，不能在NameNode上启动 YARN，应该在ResouceManager所在的机器上启动YARN。</strong></p>\n<h3 id=\"集群基本操作\"><a href=\"#集群基本操作\" class=\"headerlink\" title=\"集群基本操作\"></a>集群基本操作</h3><ul>\n<li>-ls: 显示目录信息</li>\n</ul>\n<pre><code class=\"shell\">hadoop fs -ls /</code></pre>\n<ul>\n<li>mkdir：在HDFS上创建目录</li>\n</ul>\n<pre><code class=\"shell\"> hadoop fs -mkdir -p /parent/test</code></pre>\n<ul>\n<li>moveFromLocal：从本地剪切粘贴到HDFS</li>\n</ul>\n<pre><code class=\"shell\">hadoop fs  -moveFromLocal  ./kongming.txt  /parent/test</code></pre>\n<ul>\n<li>appendToFile：追加一个文件到已经存在的文件末尾</li>\n</ul>\n<pre><code class=\"shell\"> hadoop fs -appendToFile liubei.txt /parent/test/kongming.txt</code></pre>\n<ul>\n<li>cat：显示文件内容</li>\n</ul>\n<pre><code class=\"shell\">hadoop fs -cat /parent/test/kongming.txt</code></pre>\n<ul>\n<li>chgrp 、-chmod、-chown：Linux文件系统中的用法一样，修改文件所属权限</li>\n<li>copyFromLocal：从本地文件系统中拷贝文件到HDFS路径去</li>\n</ul>\n<pre><code class=\"shell\"> hadoop fs -copyFromLocal README.txt /</code></pre>\n<ul>\n<li>copyToLocal：从HDFS拷贝到本地</li>\n</ul>\n<pre><code class=\"shell\"> hadoop fs -copyToLocal /parent/test/kongming.txt ./</code></pre>\n<ul>\n<li>cp ：从HDFS的一个路径拷贝到HDFS的另一个路径</li>\n</ul>\n<pre><code class=\"shell\">hadoop fs -cp /parent/test/kongming.txt  /zhuge.txt</code></pre>\n<ul>\n<li>mv：在HDFS目录中移动文件</li>\n</ul>\n<pre><code class=\"shell\">hadoop fs -mv /zhuge.txt /parent/test/</code></pre>\n<ul>\n<li>get：等同于copyToLocal，就是从HDFS下载文件到本地</li>\n</ul>\n<pre><code class=\"shell\">hadoop fs -get /parent/test/kongming.txt ./</code></pre>\n<ul>\n<li>getmerge：合并下载多个文件，比如HDFS的目录 /parent/test//test下有多个文件:log.1, log.2,log.3,…</li>\n</ul>\n<pre><code class=\"shell\">hadoop fs -getmerge /parent/test/test/* ./zaiyiqi.txt</code></pre>\n<ul>\n<li>put：等同于copyFromLocal</li>\n</ul>\n<pre><code class=\"shell\"> hadoop fs -put ./zaiyiqi.txt /</code></pre>\n<ul>\n<li>tail：显示一个文件的末尾</li>\n</ul>\n<ul>\n<li>rm：删除文件或文件夹</li>\n</ul>\n<ul>\n<li>rmdir：删除空目录</li>\n</ul>\n<ul>\n<li>du统计文件夹的大小信息</li>\n</ul>\n<h3 id=\"JAVA代码操作HDFS\"><a href=\"#JAVA代码操作HDFS\" class=\"headerlink\" title=\"JAVA代码操作HDFS\"></a>JAVA代码操作HDFS</h3><pre><code class=\"java\">Logger logger = LoggerFactory.getLogger(HdfsClient.class);\n\nFileSystem fileSystem;\n\nConfiguration configuration;\n\n@Test\n/**\n     * 测试环境正常\n     */\npublic void HDFS_ENV() throws IOException {\n    Logger logger = LoggerFactory.getLogger(HdfsClient.class);\n    //1.获取hdfs客户端对象\n    Configuration configuration = new Configuration();\n    configuration.set(&quot;fs.defaultFS&quot;,&quot;hdfs://master:9000&quot;);\n    FileSystem fileSystem = FileSystem.get(configuration);\n    //2.在hdfs上执行相关操作\n    boolean mkdirs = fileSystem.mkdirs(new Path(&quot;/client_test_environment&quot;));\n    //3.关闭资源\n    fileSystem.close();\n\n    System.out.println(mkdirs);\n}\n\n@Before\n/**\n     * 创建fileSystem对象\n     */\npublic void createFileSystem() throws URISyntaxException, IOException, InterruptedException {\n    //1.获取fs对象\n    configuration = new Configuration();\n    fileSystem = FileSystem.get(new URI(&quot;hdfs://master:9000&quot;), configuration, &quot;root&quot;);\n}\n\n@Test\npublic void copyFromLocalFile() throws IOException{\n    //执行上传操作\n    fileSystem.copyFromLocalFile(new Path(&quot;D:\\\\logs\\\\xc.2019-04-29.log&quot;),new Path(&quot;/client_test_environment/&quot;));\n    //关闭资源\n    fileSystem.close();\n}\n\n\n@Test\npublic void copyToLocalFile() throws IOException{\n    //执行上传操作\n    fileSystem.copyToLocalFile(true,new Path(&quot;/client_test_environment/xc.2019-04-29.log&quot;),new Path(&quot;D:\\\\logs\\\\xc.2019-04-29-back.log&quot;),false);\n    //关闭资源\n    fileSystem.close();\n}\n\n@Test\npublic void listFiles() throws IOException {\n    //查看文件信息\n    RemoteIterator&lt;LocatedFileStatus&gt; iterator = fileSystem.listFiles(new Path(&quot;/&quot;), true);\n    while (iterator.hasNext()){\n        LocatedFileStatus fileStatus = iterator.next();\n        //获取文件名称，文件权限，文件长度，块信息\n        logger.info(fileStatus.getPath().getName());\n        logger.info(fileStatus.getLen()+&quot;&quot;);\n        logger.info(fileStatus.getPermission()+&quot;&quot;);\n        BlockLocation[] blockLocations = fileStatus.getBlockLocations();\n        for (BlockLocation blockLocation : blockLocations) {\n            logger.info(blockLocation.toString());\n        }\n        logger.info(&quot;----------------                    ----------------------&quot;);\n    }\n}</code></pre>\n"},{"title":"Hive-基于MapReduce的数据分析工具","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-16T13:26:01.000Z","password":null,"summary":null,"img":"/medias/featureimages/hive.png","_content":"\n## Hive概述\n\nHive 的底层执行引擎有 ：MapReduce，Tez，Spark- Hive on MapReduce- Hive on Tez- Hive on spark\n\n压缩：GZIP,LZO,Snappy,Bzip2...存储：Textfile，SequenceFile，RcFile，ORC，ParquetUDF：自定义函数\n\n![](Hive-基于MapReduce的数据分析工具/1.png)\n\n> 为什么要使用Hive：简单，容易上手(提供了类SQL的查询语言HQL)为超大数据集设计的计算/存储扩展能力（MR计算,HDFS存储）统一的元数据管理（可与Pretso/Impala/SparkSQL数据共享）\n\n## Hive 的体系结构\n\n### 1.Hive的元数据\n\n![](Hive-基于MapReduce的数据分析工具/2.png)\n\n### 2.HQL 的执行过程\n\n- 解释器、编译器、优化器完成HQL查询语句从词法分析、语法分析、编译、优化以及查询计划（PLAN）的生产，生产的查询计划存储在HDFS中，并在随后有MapReduce调用执行\n\n![](Hive-基于MapReduce的数据分析工具/3.png)\n\n### 3.体系结构\n\n![](Hive-基于MapReduce的数据分析工具/4.png)\n\n![](Hive-基于MapReduce的数据分析工具/5.png)\n\n### 4.Hive 生产环境部署架构\n\n![](Hive-基于MapReduce的数据分析工具/6.png)\n\n## Hive 安装\n\n![](Hive-基于MapReduce的数据分析工具/8.png)\n\n### 1.嵌入入模式(元数据保存在自己维护的dirbe数据库)\n\n```shell\n解压好文件夹后直接进入bin目录执行hive脚本\n${HIVE_HOME}/bin/hive\n```\n\n### 2.本地模式或者远程模式(元数据保存在本地或者远程的mysql库)\n\n修改hive-site.xml\n\n```xml\n<!-- jdbc 参数 -->\n  <property>\n    <name>javax.jdo.option.ConnectionURL</name>\n    <value>jdbc:mysql://localhost:3306/hive</value>\n  </property>\n  <property>\n    <name>javax.jdo.option.ConnectionDriverName</name>\n    <value>com.mysql.jdbc.Driver</value>\n  </property>\n  <property>\n    <name>javax.jdo.option.ConnectionUserName</name>\n    <value>root</value>\n  </property>\n  <property>\n    <name>javax.jdo.option.ConnectionPassword</name>\n    <value>root</value>\n  </property>\n```\n\n## Hive 管理\n\n### 1.cli模式\n\n```shell\n# 进入cli\n${HIVE_HOME}/bin/hive --service cli\n\n# 1. Hive -S进入静默模式，不会打印MapReduce作业调试信息\n# 2. 一般情况下，hive执行SQL都会转换成MapReduce作业进行执行，但是如果是使用select * 则不会转换成mr任务\n${HIVE_HOME}/bin/hive -S\n\n# 不进入交互模式\n${HIVE_HOME}/bin/hive -e {sql语句}\n```\n\n### 2.web管理界面模式(只能做查询)\n\n1. 进入hive的源代码目录的hwi目录 `${HIVE_SRC_HOME}/hwi`\n2. 将其打包编译`mvn package(需要安装mvn环境)`\n3. 将打好的包放入`${HIVE_HOME}/lib/` 目录下\n4. 修改 hive_site.xml\n\n```xml\n<!-- web界面监听的主机地址 -->\n  <property>\n  <name>hive.hwi.listen.host</name>\n  <value>0.0.0.0</value>\n  <description>This is the host address the Hive Web Interface will listen on</description>\n</property>\n \n <!-- web界面监听的端口 -->\n<property>\n  <name>hive.hwi.listen.port</name>\n  <value>9999</value>\n  <description>This is the port the Hive Web Interface will listen on</description>\n</property>\n \n <!-- war包的位置 -->\n<property>\n  <name>hive.hwi.war.file</name>\n  <value>${HIVE_HOME}/lib/hive-hwi-<version>.war</value>\n  <description>This is the WAR file with the jsp content for Hive Web Interface</description>\n</property>\n```\n\n6.拷贝jdk目录下的tools.jar 到hive的lib下\n\n```shell\ncp ${JAVA_HOME}/lib/tools.jar ${HIVE_HOME}/lib\n```\n\n1. 启动web服务\n\n```shell\n${HIVE_HOME}/bin/hive --service hwi\n```\n\n验证：浏览器访问 <http://localhost:9999/hwi/>\n\n### 3.远程连接\n\n```shell\n${HIVE_HOME}/bin/hive --service hiveserver\n```\n\n## 数据类型\n\n### 1.基本数据类型\n\n![](Hive-基于MapReduce的数据分析工具/9.png)\n\n```html\nhive新版本中，新增了两种字符串类型 varchar和char\nvarchar(20) 最大长度是20 ，可伸缩\nchar(20) 固定长度20\n```\n\n### 2.复杂数据类型\n\n![](Hive-基于MapReduce的数据分析工具/10.png)\n\n```sql\ncreate table student1\n( sid int ,\n  sname string,\n  score array<float>\n)\n\ncreate table studetnt2\n( sid int ,\n  sname string,\n  score map<string,float>\n)\n\ncreate table student3\n( sid int ,\n  info struct<name:string,age:int,sex:string>\n)\n```\n\n### 3.时间类型\n\n![](Hive-基于MapReduce的数据分析工具/11.png)\n\n```\ntimestamp 与时区无关，是自从有了unix以来的偏移量\ndate 描述的是特定的日期 YYYY-MM-DD\n```\n\n## 数据模型\n\n### 1.数据存储\n\n- 基于HDFS的默认存储在 `/user/hive/warehouse/` 下\n- 没有专门的数据存储格式\n\n| sid  | sname |\n| ---- | ----- |\n| 1    | Tom   |\n| 2    | Mary  |\n\n这张表在文件中默认存储为文件，使用垂直制表符分割\n\n```html\n1 Tom\n2 Mary\n```\n\n- 存储结构主要包括：数据库 文件 表 视图\n- 可以直接加载文本文件（.txt等）进行数据添加\n- 创建表时，可以指定Hive数据的列分隔符和行分隔符\n- 表\n\n```html\n· Table 内部表\n· Partition 分区表\n· External 外部表\n· Bucket Table 桶表\n```\n\n### 2.详解表\n\n- #### Table 内部表\n\n![](Hive-基于MapReduce的数据分析工具/12.png)\n\n```sql\ncreate table student1\n( sid int ,\n  sname string\n)\nlocation '${目录}' \nrow format  delimited fields terminated by '列分隔符'\n```\n\n- #### 分区表\n\n![](Hive-基于MapReduce的数据分析工具/13.png)\n\n```sql\ncreate table partition_table\n(\n    sid int,\n    sname string\n) \npartitioned by (gender string)\nrow format  delimited fields terminated by ',';\n```\n\n- #### 外部表\n\n![](Hive-基于MapReduce的数据分析工具/14.png)\n\n![](https://user-gold-cdn.xitu.io/2018/12/12/167a101df8d521cd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n```sql\ncreate external table partition_table\n(\n    sid int,\n    sname string\n) \nrow format  delimited fields terminated by ','\nlocation '/input';\n\n-- input 目录中有相关数据\n```\n\n- #### 桶表\n\n![](https://user-gold-cdn.xitu.io/2018/12/12/167a101e0beef1ad?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n![](https://user-gold-cdn.xitu.io/2018/12/12/167a101e0fa30c69?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n```sql\ncreate external table partition_table\n(\n    sid int,\n    sname string\n) \nclustered by({hash的字段}) into {桶的数量} buckets\n\n-- input 目录中有相关数据\n```\n\n### 3.视图\n\n![](Hive-基于MapReduce的数据分析工具/15.png)\n\n![](Hive-基于MapReduce的数据分析工具/16.png)\n\n## Hive 的数据导入\n\n### 使用load语句导入\n\n```sql\nLOAD DATE [LOCAL] INPATH 'filepath' [OVERWRITE] INTO TABLE tablename [PARTITION (partcol1=val1,partcol2=val2)]\n-- [LOCAL] 代表从本地文件系统导入，否则从HDFS中导入\n-- [OVERWRITE] 代表覆盖原有的数据\n-- [PARTITION] 代表分区\n-- 如果filepah是一个文件则导入一个文件的数据，如果是一个目录，则导入该目录下所有的文件\n```\n\n## Hive 调优\n\n```shell\n-- 动态分区，根据插入的记录自动分区\nSET hive.exec.dynamic.partition=true;\nSET hive.exec.dynamic.partition.mode=nonstrict;\n-- 并行执行，子查询可以并行执行\nSET hive.exec.parallel=true;\n-- 计算结束以后将小文件合并\nSET hive.merge.mapredfiles=true;\n-- 如果某个维表小于100000000B（100M),就做MAP关联，不用到reduce阶段\nSET hive.mapjoin.smalltable.filesize=100000000;\n-- 超时时间\nSET mapred.task.timeout=1800000;\n-- 添加自定义jar包\nADD jar viewfs://hadoop-meituan/user/hadoop-hotel/user_upload/gaowenfeng02_hive-udf-zhaoxiang.jar;\n-- 创建UDF\nCREATE TEMPORARY FUNCTION get_tag_list as 'com.meituan.hive.udf.common.ResolveTagUdf';\n\n-- map jvm内存设置3G\n-- SET mapred.map.child.java.opts=\"-Xmx3072m\"; \n-- map task 的内存 约等于4G\n-- SET mapreduce.map.memory.mb=4000;\n-- reduce jvm内存设置3G\n-- SET mapred.reduce.child.java.opts=\"-Xmx3072m\";\n-- reduce task 的内存 约等于4G\n```\n\nHive教程：[www.yiibai.com/hive/](https://www.yiibai.com/hive/)\n\n## ETL的优化\n\nhive.exec.reducers.bytes.per.reducer    这个参数控制一个job会有多少个reducer来处理，依据的是输入文件的总大小。默认1GB。（即每个reduce任务处理的数据量。）\n\nhive.exec.reducers.max     这个参数控制最大的reducer的数量， 如果 input / bytes per reduce > max  则会启动这个参数所指定的reduce个数。  这个并不会影响mapre.reduce.tasks参数的设置。默认的max是999。\n\nmapred.reduce.tasks  这个参数如果指定了，hive就不会用它的estimation函数来自动计算reduce的个数，而是用这个参数来启动reducer。默认是-1.\n\nreduce的个数设置其实对执行效率有很大的影响：1、如果reduce太少： 如果数据量很大，会导致这个reduce异常的慢，从而导致这个任务不能结束，也有可能会OOM2、如果reduce太多： 产生的小文件太多，合并起来代价太高，namenode的内存占用也会增大。\n\n如果我们不指定mapred.reduce.tasks， hive会自动计算需要多少个reducer。计算的公式：  reduce个数 =  InputFileSize   /   bytes per reducer\n\nmapreduce.map.memory.mb    每个Map Task需要的内存量mapreduce.reduce.memory.mb    每个Reduce Task需要的内存量\n\n查看任务执行的日志：XT平台生产运维栏目中，调度管理下的执行日志测试参数：\n\n- -delta 1 -v\n\n测试的表名：ba_hotel_test.topic_log_mt_order_trade_entrance线上的表名：ba_hotel.topic_log_mt_order_trade_entrance测试流量：页面流量，模块流量（某个页面之前前的页面流量一定是大于该页面的流量）\n\n任务流程—测试及上线：测试完再上线，测试包括线下测试和线上测试提交审核，审核通过后就自动上线了在XT平台中，该任务下点执行计划，再进行线上测试\n\nmap、reduce java代码讲解ba_hotel.topic_log_mt_order_trade_entrance.mpt_trackba_hotel.topic_log_mt_order_trade_entrance.patch_trackba_hotel.topic_log_mt_order_trade_entrance.mge_track\n\nba_travel.topic_log_tag_moudlefact_log_tag_pv\n\n优化排查：1.最后一个map少，时间长2.reduce一直在99%，发生了数据倾斜3.job交接时间长，说明碎片多\n\n优化：1.ETL语句执行问题：问Hadoop小客服2.子查询，精简数据3.子查询之间的关联，是否数据倾斜4.参数调高\n","source":"_posts/Hive-基于MapReduce的数据分析工具.md","raw":"---\ntitle: Hive-基于MapReduce的数据分析工具\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-16 21:26:01\npassword:\nsummary:\nimg: /medias/featureimages/hive.png\ntags:\ncategories: 大数据\n---\n\n## Hive概述\n\nHive 的底层执行引擎有 ：MapReduce，Tez，Spark- Hive on MapReduce- Hive on Tez- Hive on spark\n\n压缩：GZIP,LZO,Snappy,Bzip2...存储：Textfile，SequenceFile，RcFile，ORC，ParquetUDF：自定义函数\n\n![](Hive-基于MapReduce的数据分析工具/1.png)\n\n> 为什么要使用Hive：简单，容易上手(提供了类SQL的查询语言HQL)为超大数据集设计的计算/存储扩展能力（MR计算,HDFS存储）统一的元数据管理（可与Pretso/Impala/SparkSQL数据共享）\n\n## Hive 的体系结构\n\n### 1.Hive的元数据\n\n![](Hive-基于MapReduce的数据分析工具/2.png)\n\n### 2.HQL 的执行过程\n\n- 解释器、编译器、优化器完成HQL查询语句从词法分析、语法分析、编译、优化以及查询计划（PLAN）的生产，生产的查询计划存储在HDFS中，并在随后有MapReduce调用执行\n\n![](Hive-基于MapReduce的数据分析工具/3.png)\n\n### 3.体系结构\n\n![](Hive-基于MapReduce的数据分析工具/4.png)\n\n![](Hive-基于MapReduce的数据分析工具/5.png)\n\n### 4.Hive 生产环境部署架构\n\n![](Hive-基于MapReduce的数据分析工具/6.png)\n\n## Hive 安装\n\n![](Hive-基于MapReduce的数据分析工具/8.png)\n\n### 1.嵌入入模式(元数据保存在自己维护的dirbe数据库)\n\n```shell\n解压好文件夹后直接进入bin目录执行hive脚本\n${HIVE_HOME}/bin/hive\n```\n\n### 2.本地模式或者远程模式(元数据保存在本地或者远程的mysql库)\n\n修改hive-site.xml\n\n```xml\n<!-- jdbc 参数 -->\n  <property>\n    <name>javax.jdo.option.ConnectionURL</name>\n    <value>jdbc:mysql://localhost:3306/hive</value>\n  </property>\n  <property>\n    <name>javax.jdo.option.ConnectionDriverName</name>\n    <value>com.mysql.jdbc.Driver</value>\n  </property>\n  <property>\n    <name>javax.jdo.option.ConnectionUserName</name>\n    <value>root</value>\n  </property>\n  <property>\n    <name>javax.jdo.option.ConnectionPassword</name>\n    <value>root</value>\n  </property>\n```\n\n## Hive 管理\n\n### 1.cli模式\n\n```shell\n# 进入cli\n${HIVE_HOME}/bin/hive --service cli\n\n# 1. Hive -S进入静默模式，不会打印MapReduce作业调试信息\n# 2. 一般情况下，hive执行SQL都会转换成MapReduce作业进行执行，但是如果是使用select * 则不会转换成mr任务\n${HIVE_HOME}/bin/hive -S\n\n# 不进入交互模式\n${HIVE_HOME}/bin/hive -e {sql语句}\n```\n\n### 2.web管理界面模式(只能做查询)\n\n1. 进入hive的源代码目录的hwi目录 `${HIVE_SRC_HOME}/hwi`\n2. 将其打包编译`mvn package(需要安装mvn环境)`\n3. 将打好的包放入`${HIVE_HOME}/lib/` 目录下\n4. 修改 hive_site.xml\n\n```xml\n<!-- web界面监听的主机地址 -->\n  <property>\n  <name>hive.hwi.listen.host</name>\n  <value>0.0.0.0</value>\n  <description>This is the host address the Hive Web Interface will listen on</description>\n</property>\n \n <!-- web界面监听的端口 -->\n<property>\n  <name>hive.hwi.listen.port</name>\n  <value>9999</value>\n  <description>This is the port the Hive Web Interface will listen on</description>\n</property>\n \n <!-- war包的位置 -->\n<property>\n  <name>hive.hwi.war.file</name>\n  <value>${HIVE_HOME}/lib/hive-hwi-<version>.war</value>\n  <description>This is the WAR file with the jsp content for Hive Web Interface</description>\n</property>\n```\n\n6.拷贝jdk目录下的tools.jar 到hive的lib下\n\n```shell\ncp ${JAVA_HOME}/lib/tools.jar ${HIVE_HOME}/lib\n```\n\n1. 启动web服务\n\n```shell\n${HIVE_HOME}/bin/hive --service hwi\n```\n\n验证：浏览器访问 <http://localhost:9999/hwi/>\n\n### 3.远程连接\n\n```shell\n${HIVE_HOME}/bin/hive --service hiveserver\n```\n\n## 数据类型\n\n### 1.基本数据类型\n\n![](Hive-基于MapReduce的数据分析工具/9.png)\n\n```html\nhive新版本中，新增了两种字符串类型 varchar和char\nvarchar(20) 最大长度是20 ，可伸缩\nchar(20) 固定长度20\n```\n\n### 2.复杂数据类型\n\n![](Hive-基于MapReduce的数据分析工具/10.png)\n\n```sql\ncreate table student1\n( sid int ,\n  sname string,\n  score array<float>\n)\n\ncreate table studetnt2\n( sid int ,\n  sname string,\n  score map<string,float>\n)\n\ncreate table student3\n( sid int ,\n  info struct<name:string,age:int,sex:string>\n)\n```\n\n### 3.时间类型\n\n![](Hive-基于MapReduce的数据分析工具/11.png)\n\n```\ntimestamp 与时区无关，是自从有了unix以来的偏移量\ndate 描述的是特定的日期 YYYY-MM-DD\n```\n\n## 数据模型\n\n### 1.数据存储\n\n- 基于HDFS的默认存储在 `/user/hive/warehouse/` 下\n- 没有专门的数据存储格式\n\n| sid  | sname |\n| ---- | ----- |\n| 1    | Tom   |\n| 2    | Mary  |\n\n这张表在文件中默认存储为文件，使用垂直制表符分割\n\n```html\n1 Tom\n2 Mary\n```\n\n- 存储结构主要包括：数据库 文件 表 视图\n- 可以直接加载文本文件（.txt等）进行数据添加\n- 创建表时，可以指定Hive数据的列分隔符和行分隔符\n- 表\n\n```html\n· Table 内部表\n· Partition 分区表\n· External 外部表\n· Bucket Table 桶表\n```\n\n### 2.详解表\n\n- #### Table 内部表\n\n![](Hive-基于MapReduce的数据分析工具/12.png)\n\n```sql\ncreate table student1\n( sid int ,\n  sname string\n)\nlocation '${目录}' \nrow format  delimited fields terminated by '列分隔符'\n```\n\n- #### 分区表\n\n![](Hive-基于MapReduce的数据分析工具/13.png)\n\n```sql\ncreate table partition_table\n(\n    sid int,\n    sname string\n) \npartitioned by (gender string)\nrow format  delimited fields terminated by ',';\n```\n\n- #### 外部表\n\n![](Hive-基于MapReduce的数据分析工具/14.png)\n\n![](https://user-gold-cdn.xitu.io/2018/12/12/167a101df8d521cd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n```sql\ncreate external table partition_table\n(\n    sid int,\n    sname string\n) \nrow format  delimited fields terminated by ','\nlocation '/input';\n\n-- input 目录中有相关数据\n```\n\n- #### 桶表\n\n![](https://user-gold-cdn.xitu.io/2018/12/12/167a101e0beef1ad?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n![](https://user-gold-cdn.xitu.io/2018/12/12/167a101e0fa30c69?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n```sql\ncreate external table partition_table\n(\n    sid int,\n    sname string\n) \nclustered by({hash的字段}) into {桶的数量} buckets\n\n-- input 目录中有相关数据\n```\n\n### 3.视图\n\n![](Hive-基于MapReduce的数据分析工具/15.png)\n\n![](Hive-基于MapReduce的数据分析工具/16.png)\n\n## Hive 的数据导入\n\n### 使用load语句导入\n\n```sql\nLOAD DATE [LOCAL] INPATH 'filepath' [OVERWRITE] INTO TABLE tablename [PARTITION (partcol1=val1,partcol2=val2)]\n-- [LOCAL] 代表从本地文件系统导入，否则从HDFS中导入\n-- [OVERWRITE] 代表覆盖原有的数据\n-- [PARTITION] 代表分区\n-- 如果filepah是一个文件则导入一个文件的数据，如果是一个目录，则导入该目录下所有的文件\n```\n\n## Hive 调优\n\n```shell\n-- 动态分区，根据插入的记录自动分区\nSET hive.exec.dynamic.partition=true;\nSET hive.exec.dynamic.partition.mode=nonstrict;\n-- 并行执行，子查询可以并行执行\nSET hive.exec.parallel=true;\n-- 计算结束以后将小文件合并\nSET hive.merge.mapredfiles=true;\n-- 如果某个维表小于100000000B（100M),就做MAP关联，不用到reduce阶段\nSET hive.mapjoin.smalltable.filesize=100000000;\n-- 超时时间\nSET mapred.task.timeout=1800000;\n-- 添加自定义jar包\nADD jar viewfs://hadoop-meituan/user/hadoop-hotel/user_upload/gaowenfeng02_hive-udf-zhaoxiang.jar;\n-- 创建UDF\nCREATE TEMPORARY FUNCTION get_tag_list as 'com.meituan.hive.udf.common.ResolveTagUdf';\n\n-- map jvm内存设置3G\n-- SET mapred.map.child.java.opts=\"-Xmx3072m\"; \n-- map task 的内存 约等于4G\n-- SET mapreduce.map.memory.mb=4000;\n-- reduce jvm内存设置3G\n-- SET mapred.reduce.child.java.opts=\"-Xmx3072m\";\n-- reduce task 的内存 约等于4G\n```\n\nHive教程：[www.yiibai.com/hive/](https://www.yiibai.com/hive/)\n\n## ETL的优化\n\nhive.exec.reducers.bytes.per.reducer    这个参数控制一个job会有多少个reducer来处理，依据的是输入文件的总大小。默认1GB。（即每个reduce任务处理的数据量。）\n\nhive.exec.reducers.max     这个参数控制最大的reducer的数量， 如果 input / bytes per reduce > max  则会启动这个参数所指定的reduce个数。  这个并不会影响mapre.reduce.tasks参数的设置。默认的max是999。\n\nmapred.reduce.tasks  这个参数如果指定了，hive就不会用它的estimation函数来自动计算reduce的个数，而是用这个参数来启动reducer。默认是-1.\n\nreduce的个数设置其实对执行效率有很大的影响：1、如果reduce太少： 如果数据量很大，会导致这个reduce异常的慢，从而导致这个任务不能结束，也有可能会OOM2、如果reduce太多： 产生的小文件太多，合并起来代价太高，namenode的内存占用也会增大。\n\n如果我们不指定mapred.reduce.tasks， hive会自动计算需要多少个reducer。计算的公式：  reduce个数 =  InputFileSize   /   bytes per reducer\n\nmapreduce.map.memory.mb    每个Map Task需要的内存量mapreduce.reduce.memory.mb    每个Reduce Task需要的内存量\n\n查看任务执行的日志：XT平台生产运维栏目中，调度管理下的执行日志测试参数：\n\n- -delta 1 -v\n\n测试的表名：ba_hotel_test.topic_log_mt_order_trade_entrance线上的表名：ba_hotel.topic_log_mt_order_trade_entrance测试流量：页面流量，模块流量（某个页面之前前的页面流量一定是大于该页面的流量）\n\n任务流程—测试及上线：测试完再上线，测试包括线下测试和线上测试提交审核，审核通过后就自动上线了在XT平台中，该任务下点执行计划，再进行线上测试\n\nmap、reduce java代码讲解ba_hotel.topic_log_mt_order_trade_entrance.mpt_trackba_hotel.topic_log_mt_order_trade_entrance.patch_trackba_hotel.topic_log_mt_order_trade_entrance.mge_track\n\nba_travel.topic_log_tag_moudlefact_log_tag_pv\n\n优化排查：1.最后一个map少，时间长2.reduce一直在99%，发生了数据倾斜3.job交接时间长，说明碎片多\n\n优化：1.ETL语句执行问题：问Hadoop小客服2.子查询，精简数据3.子查询之间的关联，是否数据倾斜4.参数调高\n","slug":"Hive-基于MapReduce的数据分析工具","published":1,"updated":"2021-04-29T10:09:43.999Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6ml9r000mvkvyjc3zegir","content":"<h2 id=\"Hive概述\"><a href=\"#Hive概述\" class=\"headerlink\" title=\"Hive概述\"></a>Hive概述</h2><p>Hive 的底层执行引擎有 ：MapReduce，Tez，Spark- Hive on MapReduce- Hive on Tez- Hive on spark</p>\n<p>压缩：GZIP,LZO,Snappy,Bzip2…存储：Textfile，SequenceFile，RcFile，ORC，ParquetUDF：自定义函数</p>\n<p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/1.png\" alt></p>\n<blockquote>\n<p>为什么要使用Hive：简单，容易上手(提供了类SQL的查询语言HQL)为超大数据集设计的计算/存储扩展能力（MR计算,HDFS存储）统一的元数据管理（可与Pretso/Impala/SparkSQL数据共享）</p>\n</blockquote>\n<h2 id=\"Hive-的体系结构\"><a href=\"#Hive-的体系结构\" class=\"headerlink\" title=\"Hive 的体系结构\"></a>Hive 的体系结构</h2><h3 id=\"1-Hive的元数据\"><a href=\"#1-Hive的元数据\" class=\"headerlink\" title=\"1.Hive的元数据\"></a>1.Hive的元数据</h3><p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/2.png\" alt></p>\n<h3 id=\"2-HQL-的执行过程\"><a href=\"#2-HQL-的执行过程\" class=\"headerlink\" title=\"2.HQL 的执行过程\"></a>2.HQL 的执行过程</h3><ul>\n<li>解释器、编译器、优化器完成HQL查询语句从词法分析、语法分析、编译、优化以及查询计划（PLAN）的生产，生产的查询计划存储在HDFS中，并在随后有MapReduce调用执行</li>\n</ul>\n<p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/3.png\" alt></p>\n<h3 id=\"3-体系结构\"><a href=\"#3-体系结构\" class=\"headerlink\" title=\"3.体系结构\"></a>3.体系结构</h3><p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/4.png\" alt></p>\n<p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/5.png\" alt></p>\n<h3 id=\"4-Hive-生产环境部署架构\"><a href=\"#4-Hive-生产环境部署架构\" class=\"headerlink\" title=\"4.Hive 生产环境部署架构\"></a>4.Hive 生产环境部署架构</h3><p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/6.png\" alt></p>\n<h2 id=\"Hive-安装\"><a href=\"#Hive-安装\" class=\"headerlink\" title=\"Hive 安装\"></a>Hive 安装</h2><p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/8.png\" alt></p>\n<h3 id=\"1-嵌入入模式-元数据保存在自己维护的dirbe数据库\"><a href=\"#1-嵌入入模式-元数据保存在自己维护的dirbe数据库\" class=\"headerlink\" title=\"1.嵌入入模式(元数据保存在自己维护的dirbe数据库)\"></a>1.嵌入入模式(元数据保存在自己维护的dirbe数据库)</h3><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">解压好文件夹后直接进入bin目录执行hive脚本\n${HIVE_HOME}/bin/hive<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"2-本地模式或者远程模式-元数据保存在本地或者远程的mysql库\"><a href=\"#2-本地模式或者远程模式-元数据保存在本地或者远程的mysql库\" class=\"headerlink\" title=\"2.本地模式或者远程模式(元数据保存在本地或者远程的mysql库)\"></a>2.本地模式或者远程模式(元数据保存在本地或者远程的mysql库)</h3><p>修改hive-site.xml</p>\n<pre class=\"line-numbers language-xml\"><code class=\"language-xml\"><span class=\"token comment\" spellcheck=\"true\">&lt;!-- jdbc 参数 --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionURL<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>jdbc:mysql://localhost:3306/hive<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionDriverName<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>com.mysql.jdbc.Driver<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionUserName<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>root<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionPassword<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>root<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Hive-管理\"><a href=\"#Hive-管理\" class=\"headerlink\" title=\"Hive 管理\"></a>Hive 管理</h2><h3 id=\"1-cli模式\"><a href=\"#1-cli模式\" class=\"headerlink\" title=\"1.cli模式\"></a>1.cli模式</h3><pre class=\"line-numbers language-shell\"><code class=\"language-shell\"># 进入cli\n${HIVE_HOME}/bin/hive --service cli\n\n# 1. Hive -S进入静默模式，不会打印MapReduce作业调试信息\n# 2. 一般情况下，hive执行SQL都会转换成MapReduce作业进行执行，但是如果是使用select * 则不会转换成mr任务\n${HIVE_HOME}/bin/hive -S\n\n# 不进入交互模式\n${HIVE_HOME}/bin/hive -e {sql语句}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-web管理界面模式-只能做查询\"><a href=\"#2-web管理界面模式-只能做查询\" class=\"headerlink\" title=\"2.web管理界面模式(只能做查询)\"></a>2.web管理界面模式(只能做查询)</h3><ol>\n<li>进入hive的源代码目录的hwi目录 <code>${HIVE_SRC_HOME}/hwi</code></li>\n<li>将其打包编译<code>mvn package(需要安装mvn环境)</code></li>\n<li>将打好的包放入<code>${HIVE_HOME}/lib/</code> 目录下</li>\n<li>修改 hive_site.xml</li>\n</ol>\n<pre class=\"line-numbers language-xml\"><code class=\"language-xml\"><span class=\"token comment\" spellcheck=\"true\">&lt;!-- web界面监听的主机地址 --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>hive.hwi.listen.host<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>0.0.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span>This is the host address the Hive Web Interface will listen on<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\n <span class=\"token comment\" spellcheck=\"true\">&lt;!-- web界面监听的端口 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>hive.hwi.listen.port<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>9999<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span>This is the port the Hive Web Interface will listen on<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\n <span class=\"token comment\" spellcheck=\"true\">&lt;!-- war包的位置 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>hive.hwi.war.file<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>${HIVE_HOME}/lib/hive-hwi-<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>.war<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>description</span><span class=\"token punctuation\">></span></span>This is the WAR file with the jsp content for Hive Web Interface<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>description</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>6.拷贝jdk目录下的tools.jar 到hive的lib下</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">cp ${JAVA_HOME}/lib/tools.jar ${HIVE_HOME}/lib<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>启动web服务</li>\n</ol>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">${HIVE_HOME}/bin/hive --service hwi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>验证：浏览器访问 <a href=\"http://localhost:9999/hwi/\" target=\"_blank\" rel=\"noopener\">http://localhost:9999/hwi/</a></p>\n<h3 id=\"3-远程连接\"><a href=\"#3-远程连接\" class=\"headerlink\" title=\"3.远程连接\"></a>3.远程连接</h3><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">${HIVE_HOME}/bin/hive --service hiveserver<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"1-基本数据类型\"><a href=\"#1-基本数据类型\" class=\"headerlink\" title=\"1.基本数据类型\"></a>1.基本数据类型</h3><p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/9.png\" alt></p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">hive新版本中，新增了两种字符串类型 varchar和char\nvarchar(20) 最大长度是20 ，可伸缩\nchar(20) 固定长度20<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-复杂数据类型\"><a href=\"#2-复杂数据类型\" class=\"headerlink\" title=\"2.复杂数据类型\"></a>2.复杂数据类型</h3><p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/10.png\" alt></p>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> student1\n<span class=\"token punctuation\">(</span> sid <span class=\"token keyword\">int</span> <span class=\"token punctuation\">,</span>\n  sname string<span class=\"token punctuation\">,</span>\n  score array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> studetnt2\n<span class=\"token punctuation\">(</span> sid <span class=\"token keyword\">int</span> <span class=\"token punctuation\">,</span>\n  sname string<span class=\"token punctuation\">,</span>\n  score map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> student3\n<span class=\"token punctuation\">(</span> sid <span class=\"token keyword\">int</span> <span class=\"token punctuation\">,</span>\n  info struct<span class=\"token operator\">&lt;</span>name:string<span class=\"token punctuation\">,</span>age:<span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>sex:string<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3-时间类型\"><a href=\"#3-时间类型\" class=\"headerlink\" title=\"3.时间类型\"></a>3.时间类型</h3><p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/11.png\" alt></p>\n<pre><code>timestamp 与时区无关，是自从有了unix以来的偏移量\ndate 描述的是特定的日期 YYYY-MM-DD</code></pre><h2 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h2><h3 id=\"1-数据存储\"><a href=\"#1-数据存储\" class=\"headerlink\" title=\"1.数据存储\"></a>1.数据存储</h3><ul>\n<li>基于HDFS的默认存储在 <code>/user/hive/warehouse/</code> 下</li>\n<li>没有专门的数据存储格式</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>sid</th>\n<th>sname</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>Tom</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Mary</td>\n</tr>\n</tbody></table>\n<p>这张表在文件中默认存储为文件，使用垂直制表符分割</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">1 Tom\n2 Mary<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>存储结构主要包括：数据库 文件 表 视图</li>\n<li>可以直接加载文本文件（.txt等）进行数据添加</li>\n<li>创建表时，可以指定Hive数据的列分隔符和行分隔符</li>\n<li>表</li>\n</ul>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">· Table 内部表\n· Partition 分区表\n· External 外部表\n· Bucket Table 桶表<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-详解表\"><a href=\"#2-详解表\" class=\"headerlink\" title=\"2.详解表\"></a>2.详解表</h3><ul>\n<li><h4 id=\"Table-内部表\"><a href=\"#Table-内部表\" class=\"headerlink\" title=\"Table 内部表\"></a>Table 内部表</h4></li>\n</ul>\n<p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/12.png\" alt></p>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> student1\n<span class=\"token punctuation\">(</span> sid <span class=\"token keyword\">int</span> <span class=\"token punctuation\">,</span>\n  sname string\n<span class=\"token punctuation\">)</span>\nlocation <span class=\"token string\">'${目录}'</span> \n<span class=\"token keyword\">row</span> format  delimited <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated by</span> <span class=\"token string\">'列分隔符'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><h4 id=\"分区表\"><a href=\"#分区表\" class=\"headerlink\" title=\"分区表\"></a>分区表</h4></li>\n</ul>\n<p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/13.png\" alt></p>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> partition_table\n<span class=\"token punctuation\">(</span>\n    sid <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>\n    sname string\n<span class=\"token punctuation\">)</span> \npartitioned <span class=\"token keyword\">by</span> <span class=\"token punctuation\">(</span>gender string<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">row</span> format  delimited <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated by</span> <span class=\"token string\">','</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><h4 id=\"外部表\"><a href=\"#外部表\" class=\"headerlink\" title=\"外部表\"></a>外部表</h4></li>\n</ul>\n<p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/14.png\" alt></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/12/12/167a101df8d521cd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt></p>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> external <span class=\"token keyword\">table</span> partition_table\n<span class=\"token punctuation\">(</span>\n    sid <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>\n    sname string\n<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">row</span> format  delimited <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated by</span> <span class=\"token string\">','</span>\nlocation <span class=\"token string\">'/input'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">-- input 目录中有相关数据</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><h4 id=\"桶表\"><a href=\"#桶表\" class=\"headerlink\" title=\"桶表\"></a>桶表</h4></li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/12/12/167a101e0beef1ad?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/12/12/167a101e0fa30c69?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt></p>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> external <span class=\"token keyword\">table</span> partition_table\n<span class=\"token punctuation\">(</span>\n    sid <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>\n    sname string\n<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">clustered</span> <span class=\"token keyword\">by</span><span class=\"token punctuation\">(</span>{<span class=\"token keyword\">hash</span>的字段}<span class=\"token punctuation\">)</span> <span class=\"token keyword\">into</span> {桶的数量} buckets\n\n<span class=\"token comment\" spellcheck=\"true\">-- input 目录中有相关数据</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3-视图\"><a href=\"#3-视图\" class=\"headerlink\" title=\"3.视图\"></a>3.视图</h3><p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/15.png\" alt></p>\n<p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/16.png\" alt></p>\n<h2 id=\"Hive-的数据导入\"><a href=\"#Hive-的数据导入\" class=\"headerlink\" title=\"Hive 的数据导入\"></a>Hive 的数据导入</h2><h3 id=\"使用load语句导入\"><a href=\"#使用load语句导入\" class=\"headerlink\" title=\"使用load语句导入\"></a>使用load语句导入</h3><pre class=\"line-numbers language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">LOAD</span> <span class=\"token keyword\">DATE</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">LOCAL</span><span class=\"token punctuation\">]</span> INPATH <span class=\"token string\">'filepath'</span> <span class=\"token punctuation\">[</span>OVERWRITE<span class=\"token punctuation\">]</span> <span class=\"token keyword\">INTO</span> <span class=\"token keyword\">TABLE</span> tablename <span class=\"token punctuation\">[</span><span class=\"token keyword\">PARTITION</span> <span class=\"token punctuation\">(</span>partcol1<span class=\"token operator\">=</span>val1<span class=\"token punctuation\">,</span>partcol2<span class=\"token operator\">=</span>val2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\">-- [LOCAL] 代表从本地文件系统导入，否则从HDFS中导入</span>\n<span class=\"token comment\" spellcheck=\"true\">-- [OVERWRITE] 代表覆盖原有的数据</span>\n<span class=\"token comment\" spellcheck=\"true\">-- [PARTITION] 代表分区</span>\n<span class=\"token comment\" spellcheck=\"true\">-- 如果filepah是一个文件则导入一个文件的数据，如果是一个目录，则导入该目录下所有的文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Hive-调优\"><a href=\"#Hive-调优\" class=\"headerlink\" title=\"Hive 调优\"></a>Hive 调优</h2><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">-- 动态分区，根据插入的记录自动分区\nSET hive.exec.dynamic.partition=true;\nSET hive.exec.dynamic.partition.mode=nonstrict;\n-- 并行执行，子查询可以并行执行\nSET hive.exec.parallel=true;\n-- 计算结束以后将小文件合并\nSET hive.merge.mapredfiles=true;\n-- 如果某个维表小于100000000B（100M),就做MAP关联，不用到reduce阶段\nSET hive.mapjoin.smalltable.filesize=100000000;\n-- 超时时间\nSET mapred.task.timeout=1800000;\n-- 添加自定义jar包\nADD jar viewfs://hadoop-meituan/user/hadoop-hotel/user_upload/gaowenfeng02_hive-udf-zhaoxiang.jar;\n-- 创建UDF\nCREATE TEMPORARY FUNCTION get_tag_list as 'com.meituan.hive.udf.common.ResolveTagUdf';\n\n-- map jvm内存设置3G\n-- SET mapred.map.child.java.opts=\"-Xmx3072m\"; \n-- map task 的内存 约等于4G\n-- SET mapreduce.map.memory.mb=4000;\n-- reduce jvm内存设置3G\n-- SET mapred.reduce.child.java.opts=\"-Xmx3072m\";\n-- reduce task 的内存 约等于4G<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Hive教程：<a href=\"https://www.yiibai.com/hive/\" target=\"_blank\" rel=\"noopener\">www.yiibai.com/hive/</a></p>\n<h2 id=\"ETL的优化\"><a href=\"#ETL的优化\" class=\"headerlink\" title=\"ETL的优化\"></a>ETL的优化</h2><p>hive.exec.reducers.bytes.per.reducer    这个参数控制一个job会有多少个reducer来处理，依据的是输入文件的总大小。默认1GB。（即每个reduce任务处理的数据量。）</p>\n<p>hive.exec.reducers.max     这个参数控制最大的reducer的数量， 如果 input / bytes per reduce &gt; max  则会启动这个参数所指定的reduce个数。  这个并不会影响mapre.reduce.tasks参数的设置。默认的max是999。</p>\n<p>mapred.reduce.tasks  这个参数如果指定了，hive就不会用它的estimation函数来自动计算reduce的个数，而是用这个参数来启动reducer。默认是-1.</p>\n<p>reduce的个数设置其实对执行效率有很大的影响：1、如果reduce太少： 如果数据量很大，会导致这个reduce异常的慢，从而导致这个任务不能结束，也有可能会OOM2、如果reduce太多： 产生的小文件太多，合并起来代价太高，namenode的内存占用也会增大。</p>\n<p>如果我们不指定mapred.reduce.tasks， hive会自动计算需要多少个reducer。计算的公式：  reduce个数 =  InputFileSize   /   bytes per reducer</p>\n<p>mapreduce.map.memory.mb    每个Map Task需要的内存量mapreduce.reduce.memory.mb    每个Reduce Task需要的内存量</p>\n<p>查看任务执行的日志：XT平台生产运维栏目中，调度管理下的执行日志测试参数：</p>\n<ul>\n<li>-delta 1 -v</li>\n</ul>\n<p>测试的表名：ba_hotel_test.topic_log_mt_order_trade_entrance线上的表名：ba_hotel.topic_log_mt_order_trade_entrance测试流量：页面流量，模块流量（某个页面之前前的页面流量一定是大于该页面的流量）</p>\n<p>任务流程—测试及上线：测试完再上线，测试包括线下测试和线上测试提交审核，审核通过后就自动上线了在XT平台中，该任务下点执行计划，再进行线上测试</p>\n<p>map、reduce java代码讲解ba_hotel.topic_log_mt_order_trade_entrance.mpt_trackba_hotel.topic_log_mt_order_trade_entrance.patch_trackba_hotel.topic_log_mt_order_trade_entrance.mge_track</p>\n<p>ba_travel.topic_log_tag_moudlefact_log_tag_pv</p>\n<p>优化排查：1.最后一个map少，时间长2.reduce一直在99%，发生了数据倾斜3.job交接时间长，说明碎片多</p>\n<p>优化：1.ETL语句执行问题：问Hadoop小客服2.子查询，精简数据3.子查询之间的关联，是否数据倾斜4.参数调高</p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h2 id=\"Hive概述\"><a href=\"#Hive概述\" class=\"headerlink\" title=\"Hive概述\"></a>Hive概述</h2><p>Hive 的底层执行引擎有 ：MapReduce，Tez，Spark- Hive on MapReduce- Hive on Tez- Hive on spark</p>\n<p>压缩：GZIP,LZO,Snappy,Bzip2…存储：Textfile，SequenceFile，RcFile，ORC，ParquetUDF：自定义函数</p>\n<p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/1.png\" alt></p>\n<blockquote>\n<p>为什么要使用Hive：简单，容易上手(提供了类SQL的查询语言HQL)为超大数据集设计的计算/存储扩展能力（MR计算,HDFS存储）统一的元数据管理（可与Pretso/Impala/SparkSQL数据共享）</p>\n</blockquote>\n<h2 id=\"Hive-的体系结构\"><a href=\"#Hive-的体系结构\" class=\"headerlink\" title=\"Hive 的体系结构\"></a>Hive 的体系结构</h2><h3 id=\"1-Hive的元数据\"><a href=\"#1-Hive的元数据\" class=\"headerlink\" title=\"1.Hive的元数据\"></a>1.Hive的元数据</h3><p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/2.png\" alt></p>\n<h3 id=\"2-HQL-的执行过程\"><a href=\"#2-HQL-的执行过程\" class=\"headerlink\" title=\"2.HQL 的执行过程\"></a>2.HQL 的执行过程</h3><ul>\n<li>解释器、编译器、优化器完成HQL查询语句从词法分析、语法分析、编译、优化以及查询计划（PLAN）的生产，生产的查询计划存储在HDFS中，并在随后有MapReduce调用执行</li>\n</ul>\n<p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/3.png\" alt></p>\n<h3 id=\"3-体系结构\"><a href=\"#3-体系结构\" class=\"headerlink\" title=\"3.体系结构\"></a>3.体系结构</h3><p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/4.png\" alt></p>\n<p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/5.png\" alt></p>\n<h3 id=\"4-Hive-生产环境部署架构\"><a href=\"#4-Hive-生产环境部署架构\" class=\"headerlink\" title=\"4.Hive 生产环境部署架构\"></a>4.Hive 生产环境部署架构</h3><p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/6.png\" alt></p>\n<h2 id=\"Hive-安装\"><a href=\"#Hive-安装\" class=\"headerlink\" title=\"Hive 安装\"></a>Hive 安装</h2><p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/8.png\" alt></p>\n<h3 id=\"1-嵌入入模式-元数据保存在自己维护的dirbe数据库\"><a href=\"#1-嵌入入模式-元数据保存在自己维护的dirbe数据库\" class=\"headerlink\" title=\"1.嵌入入模式(元数据保存在自己维护的dirbe数据库)\"></a>1.嵌入入模式(元数据保存在自己维护的dirbe数据库)</h3><pre><code class=\"shell\">解压好文件夹后直接进入bin目录执行hive脚本\n${HIVE_HOME}/bin/hive</code></pre>\n<h3 id=\"2-本地模式或者远程模式-元数据保存在本地或者远程的mysql库\"><a href=\"#2-本地模式或者远程模式-元数据保存在本地或者远程的mysql库\" class=\"headerlink\" title=\"2.本地模式或者远程模式(元数据保存在本地或者远程的mysql库)\"></a>2.本地模式或者远程模式(元数据保存在本地或者远程的mysql库)</h3><p>修改hive-site.xml</p>\n<pre><code class=\"xml\">&lt;!-- jdbc 参数 --&gt;\n  &lt;property&gt;\n    &lt;name&gt;javax.jdo.option.ConnectionURL&lt;/name&gt;\n    &lt;value&gt;jdbc:mysql://localhost:3306/hive&lt;/value&gt;\n  &lt;/property&gt;\n  &lt;property&gt;\n    &lt;name&gt;javax.jdo.option.ConnectionDriverName&lt;/name&gt;\n    &lt;value&gt;com.mysql.jdbc.Driver&lt;/value&gt;\n  &lt;/property&gt;\n  &lt;property&gt;\n    &lt;name&gt;javax.jdo.option.ConnectionUserName&lt;/name&gt;\n    &lt;value&gt;root&lt;/value&gt;\n  &lt;/property&gt;\n  &lt;property&gt;\n    &lt;name&gt;javax.jdo.option.ConnectionPassword&lt;/name&gt;\n    &lt;value&gt;root&lt;/value&gt;\n  &lt;/property&gt;</code></pre>\n<h2 id=\"Hive-管理\"><a href=\"#Hive-管理\" class=\"headerlink\" title=\"Hive 管理\"></a>Hive 管理</h2><h3 id=\"1-cli模式\"><a href=\"#1-cli模式\" class=\"headerlink\" title=\"1.cli模式\"></a>1.cli模式</h3><pre><code class=\"shell\"># 进入cli\n${HIVE_HOME}/bin/hive --service cli\n\n# 1. Hive -S进入静默模式，不会打印MapReduce作业调试信息\n# 2. 一般情况下，hive执行SQL都会转换成MapReduce作业进行执行，但是如果是使用select * 则不会转换成mr任务\n${HIVE_HOME}/bin/hive -S\n\n# 不进入交互模式\n${HIVE_HOME}/bin/hive -e {sql语句}</code></pre>\n<h3 id=\"2-web管理界面模式-只能做查询\"><a href=\"#2-web管理界面模式-只能做查询\" class=\"headerlink\" title=\"2.web管理界面模式(只能做查询)\"></a>2.web管理界面模式(只能做查询)</h3><ol>\n<li>进入hive的源代码目录的hwi目录 <code>${HIVE_SRC_HOME}/hwi</code></li>\n<li>将其打包编译<code>mvn package(需要安装mvn环境)</code></li>\n<li>将打好的包放入<code>${HIVE_HOME}/lib/</code> 目录下</li>\n<li>修改 hive_site.xml</li>\n</ol>\n<pre><code class=\"xml\">&lt;!-- web界面监听的主机地址 --&gt;\n  &lt;property&gt;\n  &lt;name&gt;hive.hwi.listen.host&lt;/name&gt;\n  &lt;value&gt;0.0.0.0&lt;/value&gt;\n  &lt;description&gt;This is the host address the Hive Web Interface will listen on&lt;/description&gt;\n&lt;/property&gt;\n\n &lt;!-- web界面监听的端口 --&gt;\n&lt;property&gt;\n  &lt;name&gt;hive.hwi.listen.port&lt;/name&gt;\n  &lt;value&gt;9999&lt;/value&gt;\n  &lt;description&gt;This is the port the Hive Web Interface will listen on&lt;/description&gt;\n&lt;/property&gt;\n\n &lt;!-- war包的位置 --&gt;\n&lt;property&gt;\n  &lt;name&gt;hive.hwi.war.file&lt;/name&gt;\n  &lt;value&gt;${HIVE_HOME}/lib/hive-hwi-&lt;version&gt;.war&lt;/value&gt;\n  &lt;description&gt;This is the WAR file with the jsp content for Hive Web Interface&lt;/description&gt;\n&lt;/property&gt;</code></pre>\n<p>6.拷贝jdk目录下的tools.jar 到hive的lib下</p>\n<pre><code class=\"shell\">cp ${JAVA_HOME}/lib/tools.jar ${HIVE_HOME}/lib</code></pre>\n<ol>\n<li>启动web服务</li>\n</ol>\n<pre><code class=\"shell\">${HIVE_HOME}/bin/hive --service hwi</code></pre>\n<p>验证：浏览器访问 <a href=\"http://localhost:9999/hwi/\" target=\"_blank\" rel=\"noopener\">http://localhost:9999/hwi/</a></p>\n<h3 id=\"3-远程连接\"><a href=\"#3-远程连接\" class=\"headerlink\" title=\"3.远程连接\"></a>3.远程连接</h3><pre><code class=\"shell\">${HIVE_HOME}/bin/hive --service hiveserver</code></pre>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"1-基本数据类型\"><a href=\"#1-基本数据类型\" class=\"headerlink\" title=\"1.基本数据类型\"></a>1.基本数据类型</h3><p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/9.png\" alt></p>\n<pre><code class=\"html\">hive新版本中，新增了两种字符串类型 varchar和char\nvarchar(20) 最大长度是20 ，可伸缩\nchar(20) 固定长度20</code></pre>\n<h3 id=\"2-复杂数据类型\"><a href=\"#2-复杂数据类型\" class=\"headerlink\" title=\"2.复杂数据类型\"></a>2.复杂数据类型</h3><p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/10.png\" alt></p>\n<pre><code class=\"sql\">create table student1\n( sid int ,\n  sname string,\n  score array&lt;float&gt;\n)\n\ncreate table studetnt2\n( sid int ,\n  sname string,\n  score map&lt;string,float&gt;\n)\n\ncreate table student3\n( sid int ,\n  info struct&lt;name:string,age:int,sex:string&gt;\n)</code></pre>\n<h3 id=\"3-时间类型\"><a href=\"#3-时间类型\" class=\"headerlink\" title=\"3.时间类型\"></a>3.时间类型</h3><p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/11.png\" alt></p>\n<pre><code>timestamp 与时区无关，是自从有了unix以来的偏移量\ndate 描述的是特定的日期 YYYY-MM-DD</code></pre><h2 id=\"数据模型\"><a href=\"#数据模型\" class=\"headerlink\" title=\"数据模型\"></a>数据模型</h2><h3 id=\"1-数据存储\"><a href=\"#1-数据存储\" class=\"headerlink\" title=\"1.数据存储\"></a>1.数据存储</h3><ul>\n<li>基于HDFS的默认存储在 <code>/user/hive/warehouse/</code> 下</li>\n<li>没有专门的数据存储格式</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>sid</th>\n<th>sname</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>Tom</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Mary</td>\n</tr>\n</tbody></table>\n<p>这张表在文件中默认存储为文件，使用垂直制表符分割</p>\n<pre><code class=\"html\">1 Tom\n2 Mary</code></pre>\n<ul>\n<li>存储结构主要包括：数据库 文件 表 视图</li>\n<li>可以直接加载文本文件（.txt等）进行数据添加</li>\n<li>创建表时，可以指定Hive数据的列分隔符和行分隔符</li>\n<li>表</li>\n</ul>\n<pre><code class=\"html\">· Table 内部表\n· Partition 分区表\n· External 外部表\n· Bucket Table 桶表</code></pre>\n<h3 id=\"2-详解表\"><a href=\"#2-详解表\" class=\"headerlink\" title=\"2.详解表\"></a>2.详解表</h3><ul>\n<li><h4 id=\"Table-内部表\"><a href=\"#Table-内部表\" class=\"headerlink\" title=\"Table 内部表\"></a>Table 内部表</h4></li>\n</ul>\n<p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/12.png\" alt></p>\n<pre><code class=\"sql\">create table student1\n( sid int ,\n  sname string\n)\nlocation &#39;${目录}&#39; \nrow format  delimited fields terminated by &#39;列分隔符&#39;</code></pre>\n<ul>\n<li><h4 id=\"分区表\"><a href=\"#分区表\" class=\"headerlink\" title=\"分区表\"></a>分区表</h4></li>\n</ul>\n<p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/13.png\" alt></p>\n<pre><code class=\"sql\">create table partition_table\n(\n    sid int,\n    sname string\n) \npartitioned by (gender string)\nrow format  delimited fields terminated by &#39;,&#39;;</code></pre>\n<ul>\n<li><h4 id=\"外部表\"><a href=\"#外部表\" class=\"headerlink\" title=\"外部表\"></a>外部表</h4></li>\n</ul>\n<p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/14.png\" alt></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/12/12/167a101df8d521cd?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt></p>\n<pre><code class=\"sql\">create external table partition_table\n(\n    sid int,\n    sname string\n) \nrow format  delimited fields terminated by &#39;,&#39;\nlocation &#39;/input&#39;;\n\n-- input 目录中有相关数据</code></pre>\n<ul>\n<li><h4 id=\"桶表\"><a href=\"#桶表\" class=\"headerlink\" title=\"桶表\"></a>桶表</h4></li>\n</ul>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/12/12/167a101e0beef1ad?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/12/12/167a101e0fa30c69?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt></p>\n<pre><code class=\"sql\">create external table partition_table\n(\n    sid int,\n    sname string\n) \nclustered by({hash的字段}) into {桶的数量} buckets\n\n-- input 目录中有相关数据</code></pre>\n<h3 id=\"3-视图\"><a href=\"#3-视图\" class=\"headerlink\" title=\"3.视图\"></a>3.视图</h3><p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/15.png\" alt></p>\n<p><img src=\"/2020/01/16/hive-ji-yu-mapreduce-de-shu-ju-fen-xi-gong-ju/16.png\" alt></p>\n<h2 id=\"Hive-的数据导入\"><a href=\"#Hive-的数据导入\" class=\"headerlink\" title=\"Hive 的数据导入\"></a>Hive 的数据导入</h2><h3 id=\"使用load语句导入\"><a href=\"#使用load语句导入\" class=\"headerlink\" title=\"使用load语句导入\"></a>使用load语句导入</h3><pre><code class=\"sql\">LOAD DATE [LOCAL] INPATH &#39;filepath&#39; [OVERWRITE] INTO TABLE tablename [PARTITION (partcol1=val1,partcol2=val2)]\n-- [LOCAL] 代表从本地文件系统导入，否则从HDFS中导入\n-- [OVERWRITE] 代表覆盖原有的数据\n-- [PARTITION] 代表分区\n-- 如果filepah是一个文件则导入一个文件的数据，如果是一个目录，则导入该目录下所有的文件</code></pre>\n<h2 id=\"Hive-调优\"><a href=\"#Hive-调优\" class=\"headerlink\" title=\"Hive 调优\"></a>Hive 调优</h2><pre><code class=\"shell\">-- 动态分区，根据插入的记录自动分区\nSET hive.exec.dynamic.partition=true;\nSET hive.exec.dynamic.partition.mode=nonstrict;\n-- 并行执行，子查询可以并行执行\nSET hive.exec.parallel=true;\n-- 计算结束以后将小文件合并\nSET hive.merge.mapredfiles=true;\n-- 如果某个维表小于100000000B（100M),就做MAP关联，不用到reduce阶段\nSET hive.mapjoin.smalltable.filesize=100000000;\n-- 超时时间\nSET mapred.task.timeout=1800000;\n-- 添加自定义jar包\nADD jar viewfs://hadoop-meituan/user/hadoop-hotel/user_upload/gaowenfeng02_hive-udf-zhaoxiang.jar;\n-- 创建UDF\nCREATE TEMPORARY FUNCTION get_tag_list as &#39;com.meituan.hive.udf.common.ResolveTagUdf&#39;;\n\n-- map jvm内存设置3G\n-- SET mapred.map.child.java.opts=&quot;-Xmx3072m&quot;; \n-- map task 的内存 约等于4G\n-- SET mapreduce.map.memory.mb=4000;\n-- reduce jvm内存设置3G\n-- SET mapred.reduce.child.java.opts=&quot;-Xmx3072m&quot;;\n-- reduce task 的内存 约等于4G</code></pre>\n<p>Hive教程：<a href=\"https://www.yiibai.com/hive/\" target=\"_blank\" rel=\"noopener\">www.yiibai.com/hive/</a></p>\n<h2 id=\"ETL的优化\"><a href=\"#ETL的优化\" class=\"headerlink\" title=\"ETL的优化\"></a>ETL的优化</h2><p>hive.exec.reducers.bytes.per.reducer    这个参数控制一个job会有多少个reducer来处理，依据的是输入文件的总大小。默认1GB。（即每个reduce任务处理的数据量。）</p>\n<p>hive.exec.reducers.max     这个参数控制最大的reducer的数量， 如果 input / bytes per reduce &gt; max  则会启动这个参数所指定的reduce个数。  这个并不会影响mapre.reduce.tasks参数的设置。默认的max是999。</p>\n<p>mapred.reduce.tasks  这个参数如果指定了，hive就不会用它的estimation函数来自动计算reduce的个数，而是用这个参数来启动reducer。默认是-1.</p>\n<p>reduce的个数设置其实对执行效率有很大的影响：1、如果reduce太少： 如果数据量很大，会导致这个reduce异常的慢，从而导致这个任务不能结束，也有可能会OOM2、如果reduce太多： 产生的小文件太多，合并起来代价太高，namenode的内存占用也会增大。</p>\n<p>如果我们不指定mapred.reduce.tasks， hive会自动计算需要多少个reducer。计算的公式：  reduce个数 =  InputFileSize   /   bytes per reducer</p>\n<p>mapreduce.map.memory.mb    每个Map Task需要的内存量mapreduce.reduce.memory.mb    每个Reduce Task需要的内存量</p>\n<p>查看任务执行的日志：XT平台生产运维栏目中，调度管理下的执行日志测试参数：</p>\n<ul>\n<li>-delta 1 -v</li>\n</ul>\n<p>测试的表名：ba_hotel_test.topic_log_mt_order_trade_entrance线上的表名：ba_hotel.topic_log_mt_order_trade_entrance测试流量：页面流量，模块流量（某个页面之前前的页面流量一定是大于该页面的流量）</p>\n<p>任务流程—测试及上线：测试完再上线，测试包括线下测试和线上测试提交审核，审核通过后就自动上线了在XT平台中，该任务下点执行计划，再进行线上测试</p>\n<p>map、reduce java代码讲解ba_hotel.topic_log_mt_order_trade_entrance.mpt_trackba_hotel.topic_log_mt_order_trade_entrance.patch_trackba_hotel.topic_log_mt_order_trade_entrance.mge_track</p>\n<p>ba_travel.topic_log_tag_moudlefact_log_tag_pv</p>\n<p>优化排查：1.最后一个map少，时间长2.reduce一直在99%，发生了数据倾斜3.job交接时间长，说明碎片多</p>\n<p>优化：1.ETL语句执行问题：问Hadoop小客服2.子查询，精简数据3.子查询之间的关联，是否数据倾斜4.参数调高</p>\n"},{"title":"JVM必须知道的基础","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-07T12:39:20.000Z","password":null,"summary":null,"_content":"\n## 运行时数据区域\n\n网上有很多描述JVM内存区的图,我觉得这张能表述内容较多\n\n![](JVM必须知道的基础/1.png)\n\n#### 程序计数器\n```html\n 程序计数器(Program Counter Register)存储当前线程执行的字节码行号，占用内存较小。字节码解释器就是通过这个计数器的值来选择下一条需要执行的字节码指令。执行Java方法时计数器指向正在执行的虚拟字节码指令的地址，执行Native方法时指向空。\n```\n\n#### java虚拟机栈\n```html\njava虚拟机栈（Java Virtual Machine Stack）与程序计数器一样，也是线程私有的，生命周期与线程相同。java虚拟机栈描述的是java方法执行的内存模型,每个方法执行的时候都会创建一个栈帧,用于存储局部变量表、操作数栈、动态链接、方法出口等信息。方法的调用和结束分别对应栈帧的入栈和出栈。\n```\n#### 本地方法栈\n```html\n本地方法栈（Native Method Stack）与java虚拟机栈作用相似,java虚拟机栈是为java方法服务,本地方法栈是为Native方法服务,甚至有些虚拟机实现时直接将两者合而为一(如:HotSpot).\n```\n#### 堆\n```html\nJava堆(Java Heap)是虚拟机管理的内存中最大的一块，该内存区域的唯一目的就是存放对象实例。java堆是垃圾收集区域管理的主要区域。从回收的角度看，可以细分为新生代和老年代；再细致一点就是Eden空间、From Survivor空间、To Survivor空间。线程共享的java堆能划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer，TLAB）。\n```\n#### 方法区\n```html\n方法区（Method Area）与java堆一样，是各个线程共享的内存区域，用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码数据等。这个区域的垃圾回收主要是针对常量池的回收和对类型的卸载。\n```\n##### 运行时常量池\n```html\n运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件的常量池(Constant Pool Table)将在类加载后进入方法区的运行时常量池存放。除此之外，还会将翻译出来的直接引用也存放在运行时常量池。运行期间也可以将新的常量放入运行时常量池。\n```\n#### 直接内存\n```html\n直接内存(Direct Memory)并不是java虚拟机运行时数据区的一部分。在JDK1.4中新加入了NIO（New Input/Output）类,引入了一种基于通道(channel)和缓冲区(Buffer)的I/O方式.他可以使用Native函数库直接分配对外内存.然后通过一个内存在java堆中的DirectByteBuffer对象作为这块内存的引用进行操作.\n```\n\n## 垃圾收集\n\n### 判断一个对象是否可被回收\n\n#### 引用计数算法\n\n为对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数为 0 的对象可被回收。\n\n在两个对象出现循环引用的情况下，此时引用计数器永远不为 0，导致无法对它们进行回收。正是因为循环引用的存在，因此 Java 虚拟机不使用引用计数算法。\n\n#### 可达性分析算\n\n以 GC Roots 为起始点进行搜索，可达的对象都是存活的，不可达的对象可被回收。\n\nJava 虚拟机使用该算法来判断对象是否可被回收，GC Roots 一般包含以下内容：\n\n- 虚拟机栈中局部变量表中引用的对象\n- 本地方法栈中 JNI 中引用的对象\n- 方法区中类静态属性引用的对象\n- 方法区中的常量引用的对象\n\n#### 方法区的回收\n\n因为方法区主要存放永久代对象，而永久代对象的回收率比新生代低很多，所以在方法区上进行回收性价比不高。\n\n主要是对常量池的回收和对类的卸载。\n\n为了避免内存溢出，在大量使用反射和动态代理的场景都需要虚拟机具备类卸载功能。\n\n类的卸载条件很多，需要满足以下三个条件，并且满足了条件也不一定会被卸载：\n\n- 该类所有的实例都已经被回收，此时堆中不存在该类的任何实例。\n- 加载该类的 ClassLoader 已经被回收。\n- 该类对应的 Class 对象没有在任何地方被引用，也就无法在任何地方通过反射访问该类方法。\n\n#### finalize()\n\n当一个对象可被回收时，如果需要执行该对象的 finalize() 方法，那么就有可能在该方法中让对象重新被引用，从而实现自救。自救只能进行一次，如果回收的对象之前调用了 finalize() 方法自救，后面回收时不会再调用该方法。\n\n### 引用类型\n\n无论是通过引用计数算法判断对象的引用数量，还是通过可达性分析算法判断对象是否可达，判定对象是否可被回收都与引用有关。\n\nJava 提供了四种强度不同的引用类型。\n\n#### 强引用\n\n被强引用关联的对象不会被回收。\n\n使用 new 一个新对象的方式来创建强引用。\n\n```java\nObject obj = new Object();\n```\n\n####  软引用\n\n被软引用关联的对象只有在内存不够的情况下才会被回收。\n\n使用 SoftReference 类来创建软引用。\n\n```java\nObject obj = new Object();\nSoftReference<Object> sf = new SoftReference<Object>(obj);\nobj = null;  // 使对象只被软引用关联\n```\n\n#### 弱引用\n\n被弱引用关联的对象一定会被回收，也就是说它只能存活到下一次垃圾回收发生之前。\n\n使用 WeakReference 类来创建弱引用。\n\n```java\nObject obj = new Object();\nWeakReference<Object> wf = new WeakReference<Object>(obj);\nobj = null;\n```\n\n#### 虚引用\n\n又称为幽灵引用或者幻影引用，一个对象是否有虚引用的存在，不会对其生存时间造成影响，也无法通过虚引用得到一个对象。\n\n为一个对象设置虚引用的唯一目的是能在这个对象被回收时收到一个系统通知。\n\n使用 PhantomReference 来创建虚引用。\n\n```java\nObject obj = new Object();\nPhantomReference<Object> pf = new PhantomReference<Object>(obj, null);\nobj = null;\n```\n\n### 垃圾收集算法\n\n#### 1. 标记 - 清除\n\n顾名思义，标记-清除算法分为两个阶段，标记(mark)和清除(sweep).\n\n在标记阶段，collector从mutator根对象开始进行遍历，对从mutator根对象可以访问到的对象都打上一个标识，一般是在对象的header中，将其记录为可达对象。\n\n而在清除阶段，collector对堆内存(heap memory)从头到尾进行线性的遍历，如果发现某个对象没有标记为可达对象-通过读取对象的header信息，则就将其回收。\n\n![](JVM必须知道的基础/2.png)\n\n从上图我们可以看到，在Mark阶段，从根对象1可以访问到B对象，从B对象又可以访问到E对象，所以B,E对象都是可达的。同理，F,G,J,K也都是可达对象。到了Sweep阶段，所有非可达对象都会被collector回收。同时，Collector在进行标记和清除阶段时会将整个应用程序暂停(mutator)，等待标记清除结束后才会恢复应用程序的运行。\n\n- **优点**：\n\n  实现简单，不需要进行对象进行移动。\n\n- **缺点**：\n\n  标记、清除过程效率低，产生大量不连续的内存碎片，提高了垃圾回收的频率。\n\n#### 2. 标记 - 整理\n\n其中标记阶段跟标记-清除算法中的标记阶段是一样的，而对于整理阶段，它的工作就是移动所有的可达对象到堆内存的同一个区域中，使他们紧凑的排列在一起，从而将所有 **非可达对象释放出来的空闲内存** 都集中在一起，通过这样的方式来达到减少内存碎片的目的。\n\n![3](JVM必须知道的基础/3.png)\n\n- **优点**：\n\n  解决了标记-清理算法存在的内存碎片问题。\n\n- **缺点**：\n\n  仍需要进行局部对象移动，一定程度上降低了效率。\n\n#### 3. 复制\n\n这种收集算法解决了标记清除算法存在的效率问题。它将内存区域划分成相同的两个**内存块**。每次仅使用一半的空间，`JVM`生成的新对象放在一半空间中。当一半空间用完时进行`GC`，把可到达对象复制到另一半空间，然后把使用过的内存空间一次清理掉。\n\n- **优点**：\n\n  按顺序分配内存即可，实现简单、运行高效，不用考虑内存碎片。\n\n- **缺点**：\n\n  可用的内存大小缩小为原来的一半，对象存活率高时会频繁进行复制。\n\n#### 4. 分代收集\n\n现在的商业虚拟机采用分代收集算法，它根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。\n\n一般将堆分为新生代和老年代。\n\n- 对于**新生代**，每次`GC`时都有**大量**的对象死亡，只有**少量**对象存活。考虑到复制成本低，适合采用**复制算法**。因此有了`From Survivor`和`To Survivor`区域。\n- 对于**老年代**，因为对象**存活率高**，没有额外的内存空间对它进行担保。因而适合采用**标记-清理算法**和**标记-整理算法**进行回收。\n\n### 垃圾收集器\n\n![](JVM必须知道的基础/4.png)\n\n以上是 HotSpot 虚拟机中的 7 个垃圾收集器，连线表示垃圾收集器可以配合使用。\n\n- 单线程与多线程：单线程指的是垃圾收集器只使用一个线程，而多线程使用多个线程；\n- 串行与并行：串行指的是垃圾收集器与用户程序交替执行，这意味着在执行垃圾收集的时候需要停顿用户程序；并行指的是垃圾收集器和用户程序同时执行。除了 CMS 和 G1 之外，其它垃圾收集器都是以串行的方式执行。\n\n#### 1. Serial 收集器\n\n![](JVM必须知道的基础/5.png)\n\nSerial 翻译为串行，也就是说它以串行的方式执行。\n\n它是单线程的收集器，只会使用一个线程进行垃圾收集工作。\n\n它的优点是简单高效，在单个 CPU 环境下，由于没有线程交互的开销，因此拥有最高的单线程收集效率。\n\n它是 Client 场景下的默认新生代收集器，因为在该场景下内存一般来说不会很大。它收集一两百兆垃圾的停顿时间可以控制在一百多毫秒以内，只要不是太频繁，这点停顿时间是可以接受的。\n\n#### 2. ParNew 收集器\n\n[![](JVM必须知道的基础/7.png)](https://camo.githubusercontent.com/573a3abc71931daef42e0b42b1876cbe4f940cdc/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f38313533386364352d316263662d346533312d383665352d6531393864663165303133622e6a7067)\n\n它是 Serial 收集器的多线程版本。\n\n它是 Server 场景下默认的新生代收集器，除了性能原因外，主要是因为除了 Serial 收集器，只有它能与 CMS 收集器配合使用。\n\n#### 3. Parallel Scavenge 收集器\n\n与 ParNew 一样是多线程收集器。\n\n其它收集器目标是尽可能缩短垃圾收集时用户线程的停顿时间，而它的目标是达到一个可控制的吞吐量，因此它被称为“吞吐量优先”收集器。这里的吞吐量指 CPU 用于运行用户程序的时间占总时间的比值。\n\n停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验。而高吞吐量则可以高效率地利用 CPU 时间，尽快完成程序的运算任务，适合在后台运算而不需要太多交互的任务。\n\n缩短停顿时间是以牺牲吞吐量和新生代空间来换取的：新生代空间变小，垃圾回收变得频繁，导致吞吐量下降。\n\n可以通过一个开关参数打开 GC 自适应的调节策略（GC Ergonomics），就不需要手工指定新生代的大小（-Xmn）、Eden 和 Survivor 区的比例、晋升老年代对象年龄等细节参数了。虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量。\n\n#### 4. Serial Old 收集器\n\n![13](JVM必须知道的基础/13.png)\n\n是 Serial 收集器的老年代版本，也是给 Client 场景下的虚拟机使用。如果用在 Server 场景下，它有两大用途：\n\n- 在 JDK 1.5 以及之前版本（Parallel Old 诞生以前）中与 Parallel Scavenge 收集器搭配使用。\n- 作为 CMS 收集器的后备预案，在并发收集发生 Concurrent Mode Failure 时使用。\n\n#### 5. Parallel Old 收集器![](JVM必须知道的基础/8.png)\n\n是 Parallel Scavenge 收集器的老年代版本。\n\n在注重吞吐量以及 CPU 资源敏感的场合，都可以优先考虑 Parallel Scavenge 加 Parallel Old 收集器。\n\n#### 6. CMS 收集器\n\n![](JVM必须知道的基础/9.png)\n\nCMS（Concurrent Mark Sweep），Mark Sweep 指的是标记 - 清除算法。\n\n分为以下四个流程：\n\n- 初始标记：仅仅只是标记一下 GC Roots 能直接关联到的对象，速度很快，需要停顿。\n- 并发标记：进行 GC Roots Tracing 的过程，它在整个回收过程中耗时最长，不需要停顿。\n- 重新标记：为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要停顿。\n- 并发清除：不需要停顿。\n\n在整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，不需要进行停顿。\n\n具有以下缺点：\n\n- 吞吐量低：低停顿时间是以牺牲吞吐量为代价的，导致 CPU 利用率不够高。\n- 无法处理浮动垃圾，可能出现 Concurrent Mode Failure。浮动垃圾是指并发清除阶段由于用户线程继续运行而产生的垃圾，这部分垃圾只能到下一次 GC 时才能进行回收。由于浮动垃圾的存在，因此需要预留出一部分内存，意味着 CMS 收集不能像其它收集器那样等待老年代快满的时候再回收。如果预留的内存不够存放浮动垃圾，就会出现 Concurrent Mode Failure，这时虚拟机将临时启用 Serial Old 来替代 CMS。\n- 标记 - 清除算法导致的空间碎片，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象，不得不提前触发一次 Full GC。\n\n#### 7. G1 收集器\n\nG1（Garbage-First），它是一款面向服务端应用的垃圾收集器，在多 CPU 和大内存的场景下有很好的性能。HotSpot 开发团队赋予它的使命是未来可以替换掉 CMS 收集器。\n\n堆被分为新生代和老年代，其它收集器进行收集的范围都是整个新生代或者老年代，而 G1 可以直接对新生代和老年代一起回收。![](JVM必须知道的基础/10.png)\n\nG1 把堆划分成多个大小相等的独立区域（Region），新生代和老年代不再物理隔离。\n\n[![](JVM必须知道的基础/11.png)](https://camo.githubusercontent.com/5049da1b34969b272be2bffc6c6de0206b33253c/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f39626264646565622d653933392d343166302d386538652d3262316130616137653061372e706e67)\n\n通过引入 Region 的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。这种划分方法带来了很大的灵活性，使得可预测的停顿时间模型成为可能。通过记录每个 Region 垃圾回收时间以及回收所获得的空间（这两个值是通过过去回收的经验获得），并维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region。\n\n每个 Region 都有一个 Remembered Set，用来记录该 Region 对象的引用对象所在的 Region。通过使用 Remembered Set，在做可达性分析的时候就可以避免全堆扫描。\n\n[![](JVM必须知道的基础/12.png)](https://camo.githubusercontent.com/5bd72d589ead80c22547e3288a9a406241a1fb6b/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f66393965653737312d633536662d343766622d393134382d6330303336363935623566652e6a7067)\n\n如果不计算维护 Remembered Set 的操作，G1 收集器的运作大致可划分为以下几个步骤：\n\n- 初始标记\n- 并发标记\n- 最终标记：为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程的 Remembered Set Logs 里面，最终标记阶段需要把 Remembered Set Logs 的数据合并到 Remembered Set 中。这阶段需要停顿线程，但是可并行执行。\n- 筛选回收：首先对各个 Region 中的回收价值和成本进行排序，根据用户所期望的 GC 停顿时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分 Region，时间是用户可控制的，而且停顿用户线程将大幅度提高收集效率。\n\n具备如下特点：\n\n- 空间整合：整体来看是基于“标记 - 整理”算法实现的收集器，从局部（两个 Region 之间）上来看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。\n- 可预测的停顿：能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在 GC 上的时间不得超过 N 毫秒。\n\n## 内存分配与回收策略\n\n### Minor GC 和 Full GC\n\n- Minor GC：回收新生代，因为新生代对象存活时间很短，因此 Minor GC 会频繁执行，执行的速度一般也会比较快。\n- Full GC：回收老年代和新生代，老年代对象其存活时间长，因此 Full GC 很少执行，执行速度会比 Minor GC 慢很多。\n\n### 内存分配策略\n\n#### 1. 对象优先在 Eden 分配\n\n大多数情况下，对象在新生代 Eden 上分配，当 Eden 空间不够时，发起 Minor GC。\n\n#### 2. 大对象直接进入老年代\n\n大对象是指需要连续内存空间的对象，最典型的大对象是那种很长的字符串以及数组。\n\n经常出现大对象会提前触发垃圾收集以获取足够的连续空间分配给大对象。\n\n-XX:PretenureSizeThreshold，大于此值的对象直接在老年代分配，避免在 Eden 和 Survivor 之间的大量内存复制。\n\n#### 3. 长期存活的对象进入老年代\n\n为对象定义年龄计数器，对象在 Eden 出生并经过 Minor GC 依然存活，将移动到 Survivor 中，年龄就增加 1 岁，增加到一定年龄则移动到老年代中。\n\n-XX:MaxTenuringThreshold 用来定义年龄的阈值。\n\n#### 4. 动态对象年龄判定\n\n虚拟机并不是永远要求对象的年龄必须达到 MaxTenuringThreshold 才能晋升老年代，如果在 Survivor 中相同年龄所有对象大小的总和大于 Survivor 空间的一半，则年龄大于或等于该年龄的对象可以直接进入老年代，无需等到 MaxTenuringThreshold 中要求的年龄。\n\n#### 5. 空间分配担保\n\n在发生 Minor GC 之前，虚拟机先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果条件成立的话，那么 Minor GC 可以确认是安全的。\n\n如果不成立的话虚拟机会查看 HandlePromotionFailure 的值是否允许担保失败，如果允许那么就会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次 Minor GC；如果小于，或者 HandlePromotionFailure 的值不允许冒险，那么就要进行一次 Full GC。\n\n### Full GC 的触发条件\n\n对于 Minor GC，其触发条件非常简单，当 Eden 空间满时，就将触发一次 Minor GC。而 Full GC 则相对复杂，有以下条件：\n\n#### 1. 调用 System.gc()\n\n只是建议虚拟机执行 Full GC，但是虚拟机不一定真正去执行。不建议使用这种方式，而是让虚拟机管理内存。\n\n#### 2. 老年代空间不足\n\n老年代空间不足的常见场景为前文所讲的大对象直接进入老年代、长期存活的对象进入老年代等。\n\n为了避免以上原因引起的 Full GC，应当尽量不要创建过大的对象以及数组。除此之外，可以通过 -Xmn 虚拟机参数调大新生代的大小，让对象尽量在新生代被回收掉，不进入老年代。还可以通过 -XX:MaxTenuringThreshold 调大对象进入老年代的年龄，让对象在新生代多存活一段时间。\n\n#### 3. 空间分配担保失败\n\n使用复制算法的 Minor GC 需要老年代的内存空间作担保，如果担保失败会执行一次 Full GC。具体内容请参考上面的第 5 小节。\n\n#### 4. JDK 1.7 及以前的永久代空间不足\n\n在 JDK 1.7 及以前，HotSpot 虚拟机中的方法区是用永久代实现的，永久代中存放的为一些 Class 的信息、常量、静态变量等数据。\n\n当系统中要加载的类、反射的类和调用的方法较多时，永久代可能会被占满，在未配置为采用 CMS GC 的情况下也会执行 Full GC。如果经过 Full GC 仍然回收不了，那么虚拟机会抛出 java.lang.OutOfMemoryError。\n\n为避免以上原因引起的 Full GC，可采用的方法为增大永久代空间或转为使用 CMS GC。\n\n#### 5. Concurrent Mode Failure\n\n执行 CMS GC 的过程中同时有对象要放入老年代，而此时老年代空间不足（可能是 GC 过程中浮动垃圾过多导致暂时性的空间不足），便会报 Concurrent Mode Failure 错误，并触发 Full GC。\n\n## 类加载机制概念\n\n- Java虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的加载机制。*Class文件由类装载器装载后，在JVM中将形成一份描述Class结构的元信息对象，通过该元信息对象可以获知Class的结构信息：如构造函数，属性和方法等，Java允许用户借由这个Class相关的元信息对象间接调用Class对象的功能,这里就是我们经常能见到的Class类。\n\n### 类加载过程\n\n![](JVM必须知道的基础/6.png)\n\n工作机制\n\n类装载器就是寻找类的字节码文件，并构造出类在JVM内部表示的对象组件。在Java中，类装载器把一个类装入JVM中，要经过以下步骤：\n\n```html\n  (1) 装载：查找和导入Class文件；\n\n  (2) 链接：把类的二进制数据合并到JRE中；\n\n     (a)校验：检查载入Class文件数据的正确性；\n\n     (b)准备：给类的静态变量分配存储空间；\n\n     (c)解析：将符号引用转成直接引用；\n\n  (3) 初始化：对类的静态变量，静态代码块执行初始化操作\n```\n\nJava程序可以动态扩展是由运行期动态加载和动态链接实现的；比如：如果编写一个使用接口的应用程序，可以等到运行时再指定其实际的实现(多态)，解析过程有时候还可以在初始化之后执行；比如：动态绑定(多态)如上图所示，加载、验证、准备、初始化和卸载这五个阶段的顺序是确定的，类的加载过程必须按照这个顺序来按部就班地开始，而解析阶段则不一定，它在某些情况下可以在初始化阶段后再开始。类的生命周期的每一个阶段通常都是互相交叉混合式进行的，通常会在一个阶段执行的过程中调用或激活另外一个阶段。\n\n####  装载(加载)\n\n类的装载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的**方法区**内，然后在堆区创建一个java.lang.Class对象，用来封装类在方法区内的数据结构。类的加载的最终产品是位于堆区中的Class对象，Class对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口。\n\n类加载器并不需要等到某个类被“首次主动使用”时再加载它，JVM规范允许类加载器在预料某个类将要被使用时就预先加载它，如果在预先加载的过程中遇到了.class文件缺失或存在错误，类加载器必须在程序首次主动使用该类时才报告错误（LinkageError错误）如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误。\n\n加载.class文件的方式有:\n\n1). 从本地系统中直接加载2). 通过网络下载.class文件3). 从zip，jar等归档文件中加载.class文件4). 从专有数据库中提取.class文件5). 将Java源文件动态编译为.class文件\n\n在了解了什么是类的加载后，回头来再看jvm进行类加载阶段都做了什么。虚拟机需要完成以下三件事情：\n\n1).通过一个类的全限定名称来获取定义此类的二进制字节流。\n\n2).将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\n\n3).在java堆中生成一个代表这个类的java.lang.Class对象，作为方法区这些数据的访问入口。\n\n相对于类加载过程的其他阶段，加载阶段是开发期相对来说可控性比较强，该阶段既可以使用系统提供的类加载器完成，也可以由用户自定义的类加载器来完成，开发人员可以通过定义自己的类加载器去控制字节流的获取方式。关于这个过程的更多细节，我会在下一节细说，类的加载。加载阶段完成后，虚拟机外部的 二进制字节流就按照虚拟机所需的格式存储在方法区之中，而且在Java堆中也创建一个java.lang.Class类的对象，这样便可以通过该对象访问方法区中的这些数据。\n\n#### **验证**\n\n验证的目的是为了确保Class文件中的字节流包含的信息符合当前虚拟机的要求，而且不会危害虚拟机自身的安全。不同的虚拟机对类验证的实现可能会有所不同，但大致都会完成以下四个阶段的验证：文件格式的验证、元数据的验证、字节码验证和符号引用验证。\n\n1）文件格式的验证：验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理，该验证的主要目的是保证输入的字节流能正确地解析并存储于方法区之内。经过该阶段的验证后，字节流才会进入内存的方法区中进行存储，后面的三个验证都是基于方法区的存储结构进行的。\n\n2）元数据验证：对类的元数据信息进行语义校验（其实就是对类中的各数据类型进行语法校验），保证不存在不符合Java语法规范的元数据信息。\n\n3）字节码验证：该阶段验证的主要工作是进行数据流和控制流分析，对类的方法体进行校验分析，以保证被校验的类的方法在运行时不会做出危害虚拟机安全的行为。\n\n4）符号引用验证：这是最后一个阶段的验证，它发生在虚拟机将符号引用转化为直接引用的时候（解析阶段中发生该转化，后面会有讲解），主要是对类自身以外的信息（常量池中的各种符号引用）进行匹配性的校验。\n\n####  准备\n\n准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中进行分配。注：\n\n1）这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。\n\n2）这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。\n\n####  解析\n\n解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。\n\n符号引用（Symbolic Reference）：符号引用以一组符号来描述所引用的目标，符号引用可以是任何形式的字面量，符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经在内存中。\n\n直接引用（Direct Reference）：直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是与虚拟机实现的内存布局相关的，同一个符号引用在不同的虚拟机实例上翻译出来的直接引用一般都不相同，如果有了直接引用，那引用的目标必定已经在内存中存在。\n\n1)、类或接口的解析：判断所要转化成的直接引用是对数组类型，还是普通的对象类型的引用，从而进行不同的解析。\n\n2)、字段解析：对字段进行解析时，会先在本类中查找是否包含有简单名称和字段描述符都与目标相匹配的字段，如果有，则查找结束；如果没有，则会按照继承关系从上往下递归搜索该类所实现的各个接口和它们的父接口，还没有，则按照继承关系从上往下递归搜索其父类，直至查找结束。\n\n3)、类方法解析：对类方法的解析与对字段解析的搜索步骤差不多，只是多了判断该方法所处的是类还是接口的步骤，而且对类方法的匹配搜索，是先搜索父类，再搜索接口。\n\n4)、接口方法解析：与类方法解析步骤类似，只是接口不会有父类，因此，只递归向上搜索父接口就行了。\n\n**5. 初始化**\n\n类初始化阶段是类加载过程的最后一步，前面的类加载过程中，除了加载（Loading）阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中定义的Java程序代码。初始化，为类的静态变量赋予正确的初始值，JVM负责对类进行初始化，主要对类变量进行初始化。在Java中对类变量进行初始值设定有两种方式：\n\n①声明类变量时指定初始值\n\n②使用静态代码块为类变量指定初始值\n\nJVM初始化步骤\n\n1)、假如这个类还没有被加载和连接，则程序先加载并连接该类\n\n2)、假如该类的直接父类还没有被初始化，则先初始化其直接父类\n\n3)、假如类中有初始化语句，则系统依次执行这些初始化语句\n\n初始化阶段时执行类构造器方法()的过程。\n\n1）类构造器方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static{}块）中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序所决定。\n\n2）类构造器方法与类的构造函数不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的类构造器方法执行之前，父类的类构造器方法已经执行完毕，因此在虚拟机中第一个执行的类构造器方法的类一定是java.lang.Object。\n\n3）由于父类的类构造器方法方法先执行，也就意味着父类中定义的静态语句块要优先于子类的变量赋值操作。\n\n4）类构造器方法对于类或者接口来说并不是必需的，如果一个类中没有静态语句块也没有对变量的赋值操作，那么编译器可以不为这个类生成类构造器方法。\n\n5）接口中可能会有变量赋值操作，因此接口也会生成类构造器方法。但是接口与类不同，执行接口的类构造器方法不需要先执行父接口的类构造器方法。只有当父接口中定义的变量被使用时，父接口才会被初始化。另外，接口的实现类在初始化时也不会执行接口的类构造器方法。\n\n6）虚拟机会保证一个类的类构造器方法在多线程环境中被正确地加锁和同步。如果有多个线程去同时初始化一个类，那么只会有一个线程去执行这个类的类构造器方法，其它线程都需要阻塞等待，直到活动线程执行类构造器方法完毕。如果在一个类的类构造器方法中有耗时很长的操作，那么就可能造成多个进程阻塞。\n\n**6.结束生命周期**\n\n在以下情况的时候，Java虚拟机会结束生命周期1). 执行了System.exit()方法2). 程序正常执行结束3). 程序在执行过程中遇到了异常或错误而异常终止4). 由于操作系统出现错误而导致Java虚拟机进程终止\n\n### 何时开始类的初始化\n\n什么情况下需要开始类加载过程的第一个阶段:\"加载\"。虚拟机规范中并没强行约束，这点可以交给虚拟机的的具体实现自由把握，但是对于初始化阶段虚拟机规范是严格规定了如下几种情况，如果类未初始化会对类进行初始化。\n\n1、创建类的实例\n\n2、访问类的静态变量(除常量【被final修辞的静态变量】原因:常量一种特殊的变量，因为编译器把他们当作值(value)而不是域(field)来对待。如果你的代码中用到了常变量(constant variable)，编译器并不会生成字节码来从对象中载入域的值，而是直接把这个值插入到字节码中。这是一种很有用的优化，但是如果你需要改变final域的值那么每一块用到那个域的代码都需要重新编译。\n\n3、访问类的静态方法\n\n4、反射如(Class.forName(\"my.xyz.Test\"))\n\n5、当初始化一个类时，发现其父类还未初始化，则先出发父类的初始化\n\n6、虚拟机启动时，定义了main()方法的那个类先初始化\n\n以上情况称为称对一个类进行“主动引用”，除此种情况之外，均不会触发类的初始化，称为“被动引用”接口的加载过程与类的加载过程稍有不同。接口中不能使用static{}块。当一个接口在初始化时，并不要求其父接口全部都完成了初始化，只有真正在使用到父接口时（例如引用接口中定义的常量）才会初始化。\n\n#### **被动引用例子**\n\n1、子类调用父类的静态变量，子类不会被初始化。只有父类被初始化。。对于静态字段，只有直接定义这个字段的类才会被初始化.\n\n2、通过数组定义来引用类，不会触发类的初始化\n\n3、 访问类的常量，不会初始化类\n\n```java\nclass SuperClass {  \n    static {  \n        System.out.println(\"superclass init\");  \n    }  \n    public static int value = 123;  \n}  \n  \nclass SubClass extends SuperClass {  \n    static {  \n        System.out.println(\"subclass init\");  \n    }  \n}  \n  \npublic class Test {  \n    public static void main(String[] args) {  \n        System.out.println(SubClass.value);// 被动应用1  \n        SubClass[] sca = new SubClass[10];// 被动引用2  \n    }  \n}  \n```\n\n程序运行输出    superclass init123从上面的输入结果证明了被动引用1与被动引用2\n\n```java\nclass ConstClass {  \n    static {  \n        System.out.println(\"ConstClass init\");  \n    }  \n    public static final String HELLOWORLD = \"hello world\";  \n}  \n  \npublic class Test {  \n    public static void main(String[] args) {  \n        System.out.println(ConstClass.HELLOWORLD);// 调用类常量  \n    }  \n}  \n```\n\n程序输出结果hello world从上面的输出结果证明了被动引用3\n\n** 题目分析**\n\n上面很详细的介绍了类的加载时机和类的加载过程，通过上面的理论来分析本文开门见上的题目\n\n```java\nclass SingleTon {  \n    private static SingleTon singleTon = new SingleTon();  \n    public static int count1;  \n    public static int count2 = 0;  \n  \n    private SingleTon() {  \n        count1++;  \n        count2++;  \n    }  \n  \n    public static SingleTon getInstance() {  \n        return singleTon;  \n    }  \n}  \n  \npublic class Test {  \n    public static void main(String[] args) {  \n        SingleTon singleTon = SingleTon.getInstance();  \n        System.out.println(\"count1=\" + singleTon.count1);  \n        System.out.println(\"count2=\" + singleTon.count2);  \n    }  \n}  \n```\n\n分析:\n\n1:SingleTon singleTon = SingleTon.getInstance();调用了类的SingleTon调用了类的静态方法，触发类的初始化\n\n2:类加载的时候在准备过程中为类的静态变量分配内存并初始化默认值 singleton=null count1=0,count2=0\n\n3:类初始化化，为类的静态变量赋值和执行静态代码快。singleton赋值为new SingleTon()调用类的构造方法\n\n4:调用类的构造方法后count=1;count2=1\n\n5:继续为count1与count2赋值,此时count1没有赋值操作,所有count1为1,但是count2执行赋值操作就变为0\n\n### 类初始化顺序\n\n现在我们知道什么时候触发类的初始化了，他精确地写在Java语言规范中。但了解清楚 域（fields，静态的还是非静态的）、块（block静态的还是非静态的）、不同类（子类和超类）和不同的接口（子接口，实现类和超接口）的初始化顺序也很重要类。事实上很多核心Java面试题和SCJP问题都是基于这些概念，下面是类初始化的一些规则：\n\n```\n1.类从顶至底的顺序初始化，所以声明在顶部的字段的早于底部的字段初始化\n2.超类早于子类和衍生类的初始化\n3.如果类的初始化是由于访问静态域而触发，那么只有声明静态域的类才被初始化，而不会触发超类的初始化或者子类的4.初始化即使静态域被子类或子接口或者它的实现类所引用。\n5.接口初始化不会导致父接口的初始化。\n6.静态域的初始化是在类的静态初始化期间，非静态域的初始化时在类的实例创建期间。这意味这静态域初始化在非静态域之前。\n7.非静态域通过构造器初始化，子类在做任何初始化之前构造器会隐含地调用父类的构造器，他保证了非静态或实例变量（父类）初始化早于子类\n```\n\n### 类加载器\n\nJVM设计者把类加载阶段中的“通过'类全名'来获取定义此类的二进制字节流”这个动作放到Java虚拟机外部去实现，以便让应用程序自己决定如何去获取所需要的类。实现这个动作的代码模块称为“类加载器”。\n\n#### **类与类加载器**\n\n对于任何一个类，都需要由加载它的类加载器和这个类来确立其在JVM中的唯一性。也就是说，两个类来源于同一个Class文件，并且被同一个类加载器加载，这两个类才相等。\n\n#### **双亲委派模型**\n\n从虚拟机的角度来说，只存在两种不同的类加载器：一种是启动类加载器（Bootstrap ClassLoader），该类加载器使用C++语言实现，属于虚拟机自身的一部分。另外一种就是所有其它的类加载器，这些类加载器是由Java语言实现，独立于JVM外部，并且全部继承自抽象类java.lang.ClassLoader。\n\n从Java开发人员的角度来看，大部分Java程序一般会使用到以下三种系统提供的类加载器：\n\n1)启动类加载器（Bootstrap ClassLoader）：负责加载JAVA_HOME\\lib目录中并且能被虚拟机识别的类库到JVM内存中，如果名称不符合的类库即使放在lib目录中也不会被加载。该类加载器无法被Java程序直接引用。\n\n2)扩展类加载器（Extension ClassLoader）：该加载器主要是负责加载JAVA_HOME\\lib\\，该加载器可以被开发者直接使用。\n\n3)应用程序类加载器（Application ClassLoader）：该类加载器也称为系统类加载器，它负责加载用户类路径（Classpath）上所指定的类库，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。\n\n我们的应用程序都是由这三类加载器互相配合进行加载的，我们也可以加入自己定义的类加载器。这些类加载器之间的关系如下图所示：\n\n如上图所示的类加载器之间的这种层次关系，就称为类加载器的双亲委派模型（Parent Delegation Model）。该模型要求除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。子类加载器和父类加载器不是以继承（Inheritance）的关系来实现，而是通过组合（Composition）关系来复用父加载器的代码。\n\n双亲委派模型的工作过程为：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的加载器都是如此，因此所有的类加载请求都会传给顶层的启动类加载器，只有当父加载器反馈自己无法完成该加载请求（该加载器的搜索范围中没有找到对应的类）时，子加载器才会尝试自己去加载。\n\n使用这种模型来组织类加载器之间的关系的好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系。例如java.lang.Object类，无论哪个类加载器去加载该类，最终都是由启动类加载器进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。否则的话，如果不使用该模型的话，如果用户自定义一个java.lang.Object类且存放在classpath中，那么系统中将会出现多个Object类，应用程序也会变得很混乱。如果我们自定义一个rt.jar中已有类的同名Java类，会发现JVM可以正常编译，但该类永远无法被加载运行。在rt.jar包中的java.lang.ClassLoader类中，我们可以查看类加载实现过程的代码，具体源码如下：\n\n```java\nprotected synchronized Class loadClass(String name, boolean resolve)  \n        throws ClassNotFoundException {  \n    // 首先检查该name指定的class是否有被加载  \n    Class c = findLoadedClass(name);  \n    if (c == null) {  \n        try {  \n            if (parent != null) {  \n                // 如果parent不为null，则调用parent的loadClass进行加载  \n                c = parent.loadClass(name, false);  \n            } else {  \n                // parent为null，则调用BootstrapClassLoader进行加载  \n                c = findBootstrapClass0(name);  \n            }  \n        } catch (ClassNotFoundException e) {  \n            // 如果仍然无法加载成功，则调用自身的findClass进行加载  \n            c = findClass(name);  \n        }  \n    }  \n    if (resolve) {  \n        resolveClass(c);  \n    }  \n    return c;  \n}  \n```\n\n通过上面代码可以看出，双亲委派模型是通过loadClass()方法来实现的，根据代码以及代码中的注释可以很清楚地了解整个过程其实非常简单：先检查是否已经被加载过，如果没有则调用父加载器的loadClass()方法，如果父加载器为空则默认使用启动类加载器作为父加载器。如果父类加载器加载失败，则先抛出ClassNotFoundException，然后再调用自己的findClass()方法进行加载。\n\n#### **自定义类加载器**\n\n若要实现自定义类加载器，只需要继承java.lang.ClassLoader 类，并且重写其findClass()方法即可。java.lang.ClassLoader 类的基本职责就是根据一个指定的类的名称，找到或者生成其对应的字节代码，然后从这些字节代码中定义出一个 Java 类，即 java.lang.Class 类的一个实例。除此之外，ClassLoader 还负责加载 Java 应用所需的资源，如图像文件和配置文件等，ClassLoader 中与加载类相关的方法如下：\n\n方法说明getParent()  返回该类加载器的父类加载器。\n\nloadClass(String name) 加载名称为 二进制名称为name 的类，返回的结果是 java.lang.Class 类的实例。\n\nfindClass(String name) 查找名称为 name 的类，返回的结果是 java.lang.Class 类的实例。\n\nfindLoadedClass(String name) 查找名称为 name 的已经被加载过的类，返回的结果是 java.lang.Class 类的实例。\n\nresolveClass(Class<?> c) 链接指定的 Java 类。\n\n注意：在JDK1.2之前，类加载尚未引入双亲委派模式，因此实现自定义类加载器时常常重写loadClass方法，提供双亲委派逻辑，从JDK1.2之后，双亲委派模式已经被引入到类加载体系中，自定义类加载器时不需要在自己写双亲委派的逻辑，因此不鼓励重写loadClass方法，而推荐重写findClass方法。\n\n在Java中，任意一个类都需要由加载它的类加载器和这个类本身一同确定其在java虚拟机中的唯一性，即比较两个类是否相等，只有在这两个类是由同一个类加载器加载的前提之下才有意义，否则，即使这两个类来源于同一个Class类文件，只要加载它的类加载器不相同，那么这两个类必定不相等(这里的相等包括代表类的Class对象的equals()方法、isAssignableFrom()方法、isInstance()方法和instanceof关键字的结果)。例子代码如下：\n\n```java\n/** \n     * 一、ClassLoader加载类的顺序 \n     *  1.调用 findLoadedClass(String) 来检查是否已经加载类。 \n     *  2.在父类加载器上调用 loadClass 方法。如果父类加载器为 null，则使用虚拟机的内置类加载器。 \n     *  3.调用 findClass(String) 方法查找类。 \n     * 二、实现自己的类加载器 \n     *  1.获取类的class文件的字节数组 \n     *  2.将字节数组转换为Class类的实例 \n     */  \n    public class ClassLoaderTest {  \n        public static void main(String[] args) throws InstantiationException, IllegalAccessException, ClassNotFoundException {  \n            //新建一个类加载器  \n            MyClassLoader cl = new MyClassLoader(\"myClassLoader\");  \n            //加载类，得到Class对象  \n            Class<?> clazz = cl.loadClass(\"classloader.Animal\");  \n            //得到类的实例  \n            Animal animal=(Animal) clazz.newInstance();  \n            animal.say();  \n        }  \n    }  \n    class Animal{  \n        public void say(){  \n            System.out.println(\"hello world!\");  \n        }  \n    }  \n    class MyClassLoader extends ClassLoader {  \n        //类加载器的名称  \n        private String name;  \n        //类存放的路径  \n        private String path = \"E:\\\\workspace\\\\Algorithm\\\\src\";  \n        MyClassLoader(String name) {  \n            this.name = name;  \n        }  \n        MyClassLoader(ClassLoader parent, String name) {  \n            super(parent);  \n            this.name = name;  \n        }  \n        /** \n         * 重写findClass方法 \n         */  \n        @Override  \n        public Class<?> findClass(String name) {  \n            byte[] data = loadClassData(name);  \n            return this.defineClass(name, data, 0, data.length);  \n        }  \n        public byte[] loadClassData(String name) {  \n            try {  \n                name = name.replace(\".\", \"//\");  \n                FileInputStream is = new FileInputStream(new File(path + name + \".class\"));  \n                ByteArrayOutputStream baos = new ByteArrayOutputStream();  \n                int b = 0;  \n                while ((b = is.read()) != -1) {  \n                    baos.write(b);  \n                }  \n                return baos.toByteArray();  \n            } catch (Exception e) {  \n                e.printStackTrace();  \n            }  \n            return null;  \n        }  \n    }  \n```\n\n类加载器双亲委派模型是从JDK1.2以后引入的，并且只是一种推荐的模型，不是强制要求的，因此有一些没有遵循双亲委派模型的特例：(了解)\n\n(1).在JDK1.2之前，自定义类加载器都要覆盖loadClass方法去实现加载类的功能，JDK1.2引入双亲委派模型之后，loadClass方法用于委派父类加载器进行类加载，只有父类加载器无法完成类加载请求时才调用自己的findClass方法进行类加载，因此在JDK1.2之前的类加载的loadClass方法没有遵循双亲委派模型，因此在JDK1.2之后，自定义类加载器不推荐覆盖loadClass方法，而只需要覆盖findClass方法即可。\n\n(2).双亲委派模式很好地解决了各个类加载器的基础类统一问题，越基础的类由越上层的类加载器进行加载，但是这个基础类统一有一个不足，当基础类想要调用回下层的用户代码时无法委派子类加载器进行类加载。为了解决这个问题JDK引入了ThreadContext线程上下文，通过线程上下文的setContextClassLoader方法可以设置线程上下文类加载器。\n\nJavaEE只是一个规范，sun公司只给出了接口规范，具体的实现由各个厂商进行实现，因此JNDI，JDBC,JAXB等这些第三方的实现库就可以被JDK的类库所调用。线程上下文类加载器也没有遵循双亲委派模型。\n\n(3).近年来的热码替换，模块热部署等应用要求不用重启java虚拟机就可以实现代码模块的即插即用，催生了OSGi技术，在OSGi中类加载器体系被发展为网状结构。OSGi也没有完全遵循双亲委派模型。\n\n#### **动态加载Jar && ClassLoader 隔离问题**\n\n动态加载Jar：\n\nJava 中动态加载 Jar 比较简单，如下：\n\n```java\nURL[] urls = new URL[] {new URL(\"file:libs/jar1.jar\")};  \nURLClassLoader loader = new URLClassLoader(urls, parentLoader);  \n```\n\n表示加载 libs 下面的 jar1.jar，其中 parentLoader 就是上面1中的 parent，可以为当前的 ClassLoader。\n\nClassLoader 隔离问题：\n\n大家觉得一个运行程序中有没有可能同时存在两个包名和类名完全一致的类？JVM 及 Dalvik 对类唯一的识别是 ClassLoader id + PackageName + ClassName，所以一个运行程序中是有可能存在两个包名和类名完全一致的类的。并且如果这两个”类”不是由一个 ClassLoader 加载，是无法将一个类的示例强转为另外一个类的，这就是 ClassLoader 隔离。 如 Android 中碰到如下异常[java] view plain copy\n\n```java\nandroid.support.v4.view.ViewPager can not be cast to android.support.v4.view.ViewPager  \n```\n\n当碰到这种问题时可以通过 instance.getClass().getClassLoader(); 得到 ClassLoader，看 ClassLoader 是否一样。\n\n加载不同 Jar 包中公共类：\n\n现在 Host 工程包含了 common.jar, jar1.jar, jar2.jar，并且 jar1.jar 和 jar2.jar 都包含了 common.jar，我们通过 ClassLoader 将 jar1, jar2 动态加载进来，这样在 Host 中实际是存在三份 common.jar.\n\n我们怎么保证 common.jar 只有一份而不会造成上面3中提到的 ClassLoader 隔离的问题呢，其实很简单，在生成 jar1 和 jar2 时把 common.jar 去掉，只保留 host 中一份，以 host ClassLoader 为 parentClassLoader 即可。","source":"_posts/JVM必须知道的基础.md","raw":"---\ntitle: JVM必须知道的基础\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-07 20:39:20\npassword:\nsummary:\ntags:\ncategories: java\n---\n\n## 运行时数据区域\n\n网上有很多描述JVM内存区的图,我觉得这张能表述内容较多\n\n![](JVM必须知道的基础/1.png)\n\n#### 程序计数器\n```html\n 程序计数器(Program Counter Register)存储当前线程执行的字节码行号，占用内存较小。字节码解释器就是通过这个计数器的值来选择下一条需要执行的字节码指令。执行Java方法时计数器指向正在执行的虚拟字节码指令的地址，执行Native方法时指向空。\n```\n\n#### java虚拟机栈\n```html\njava虚拟机栈（Java Virtual Machine Stack）与程序计数器一样，也是线程私有的，生命周期与线程相同。java虚拟机栈描述的是java方法执行的内存模型,每个方法执行的时候都会创建一个栈帧,用于存储局部变量表、操作数栈、动态链接、方法出口等信息。方法的调用和结束分别对应栈帧的入栈和出栈。\n```\n#### 本地方法栈\n```html\n本地方法栈（Native Method Stack）与java虚拟机栈作用相似,java虚拟机栈是为java方法服务,本地方法栈是为Native方法服务,甚至有些虚拟机实现时直接将两者合而为一(如:HotSpot).\n```\n#### 堆\n```html\nJava堆(Java Heap)是虚拟机管理的内存中最大的一块，该内存区域的唯一目的就是存放对象实例。java堆是垃圾收集区域管理的主要区域。从回收的角度看，可以细分为新生代和老年代；再细致一点就是Eden空间、From Survivor空间、To Survivor空间。线程共享的java堆能划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer，TLAB）。\n```\n#### 方法区\n```html\n方法区（Method Area）与java堆一样，是各个线程共享的内存区域，用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码数据等。这个区域的垃圾回收主要是针对常量池的回收和对类型的卸载。\n```\n##### 运行时常量池\n```html\n运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件的常量池(Constant Pool Table)将在类加载后进入方法区的运行时常量池存放。除此之外，还会将翻译出来的直接引用也存放在运行时常量池。运行期间也可以将新的常量放入运行时常量池。\n```\n#### 直接内存\n```html\n直接内存(Direct Memory)并不是java虚拟机运行时数据区的一部分。在JDK1.4中新加入了NIO（New Input/Output）类,引入了一种基于通道(channel)和缓冲区(Buffer)的I/O方式.他可以使用Native函数库直接分配对外内存.然后通过一个内存在java堆中的DirectByteBuffer对象作为这块内存的引用进行操作.\n```\n\n## 垃圾收集\n\n### 判断一个对象是否可被回收\n\n#### 引用计数算法\n\n为对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数为 0 的对象可被回收。\n\n在两个对象出现循环引用的情况下，此时引用计数器永远不为 0，导致无法对它们进行回收。正是因为循环引用的存在，因此 Java 虚拟机不使用引用计数算法。\n\n#### 可达性分析算\n\n以 GC Roots 为起始点进行搜索，可达的对象都是存活的，不可达的对象可被回收。\n\nJava 虚拟机使用该算法来判断对象是否可被回收，GC Roots 一般包含以下内容：\n\n- 虚拟机栈中局部变量表中引用的对象\n- 本地方法栈中 JNI 中引用的对象\n- 方法区中类静态属性引用的对象\n- 方法区中的常量引用的对象\n\n#### 方法区的回收\n\n因为方法区主要存放永久代对象，而永久代对象的回收率比新生代低很多，所以在方法区上进行回收性价比不高。\n\n主要是对常量池的回收和对类的卸载。\n\n为了避免内存溢出，在大量使用反射和动态代理的场景都需要虚拟机具备类卸载功能。\n\n类的卸载条件很多，需要满足以下三个条件，并且满足了条件也不一定会被卸载：\n\n- 该类所有的实例都已经被回收，此时堆中不存在该类的任何实例。\n- 加载该类的 ClassLoader 已经被回收。\n- 该类对应的 Class 对象没有在任何地方被引用，也就无法在任何地方通过反射访问该类方法。\n\n#### finalize()\n\n当一个对象可被回收时，如果需要执行该对象的 finalize() 方法，那么就有可能在该方法中让对象重新被引用，从而实现自救。自救只能进行一次，如果回收的对象之前调用了 finalize() 方法自救，后面回收时不会再调用该方法。\n\n### 引用类型\n\n无论是通过引用计数算法判断对象的引用数量，还是通过可达性分析算法判断对象是否可达，判定对象是否可被回收都与引用有关。\n\nJava 提供了四种强度不同的引用类型。\n\n#### 强引用\n\n被强引用关联的对象不会被回收。\n\n使用 new 一个新对象的方式来创建强引用。\n\n```java\nObject obj = new Object();\n```\n\n####  软引用\n\n被软引用关联的对象只有在内存不够的情况下才会被回收。\n\n使用 SoftReference 类来创建软引用。\n\n```java\nObject obj = new Object();\nSoftReference<Object> sf = new SoftReference<Object>(obj);\nobj = null;  // 使对象只被软引用关联\n```\n\n#### 弱引用\n\n被弱引用关联的对象一定会被回收，也就是说它只能存活到下一次垃圾回收发生之前。\n\n使用 WeakReference 类来创建弱引用。\n\n```java\nObject obj = new Object();\nWeakReference<Object> wf = new WeakReference<Object>(obj);\nobj = null;\n```\n\n#### 虚引用\n\n又称为幽灵引用或者幻影引用，一个对象是否有虚引用的存在，不会对其生存时间造成影响，也无法通过虚引用得到一个对象。\n\n为一个对象设置虚引用的唯一目的是能在这个对象被回收时收到一个系统通知。\n\n使用 PhantomReference 来创建虚引用。\n\n```java\nObject obj = new Object();\nPhantomReference<Object> pf = new PhantomReference<Object>(obj, null);\nobj = null;\n```\n\n### 垃圾收集算法\n\n#### 1. 标记 - 清除\n\n顾名思义，标记-清除算法分为两个阶段，标记(mark)和清除(sweep).\n\n在标记阶段，collector从mutator根对象开始进行遍历，对从mutator根对象可以访问到的对象都打上一个标识，一般是在对象的header中，将其记录为可达对象。\n\n而在清除阶段，collector对堆内存(heap memory)从头到尾进行线性的遍历，如果发现某个对象没有标记为可达对象-通过读取对象的header信息，则就将其回收。\n\n![](JVM必须知道的基础/2.png)\n\n从上图我们可以看到，在Mark阶段，从根对象1可以访问到B对象，从B对象又可以访问到E对象，所以B,E对象都是可达的。同理，F,G,J,K也都是可达对象。到了Sweep阶段，所有非可达对象都会被collector回收。同时，Collector在进行标记和清除阶段时会将整个应用程序暂停(mutator)，等待标记清除结束后才会恢复应用程序的运行。\n\n- **优点**：\n\n  实现简单，不需要进行对象进行移动。\n\n- **缺点**：\n\n  标记、清除过程效率低，产生大量不连续的内存碎片，提高了垃圾回收的频率。\n\n#### 2. 标记 - 整理\n\n其中标记阶段跟标记-清除算法中的标记阶段是一样的，而对于整理阶段，它的工作就是移动所有的可达对象到堆内存的同一个区域中，使他们紧凑的排列在一起，从而将所有 **非可达对象释放出来的空闲内存** 都集中在一起，通过这样的方式来达到减少内存碎片的目的。\n\n![3](JVM必须知道的基础/3.png)\n\n- **优点**：\n\n  解决了标记-清理算法存在的内存碎片问题。\n\n- **缺点**：\n\n  仍需要进行局部对象移动，一定程度上降低了效率。\n\n#### 3. 复制\n\n这种收集算法解决了标记清除算法存在的效率问题。它将内存区域划分成相同的两个**内存块**。每次仅使用一半的空间，`JVM`生成的新对象放在一半空间中。当一半空间用完时进行`GC`，把可到达对象复制到另一半空间，然后把使用过的内存空间一次清理掉。\n\n- **优点**：\n\n  按顺序分配内存即可，实现简单、运行高效，不用考虑内存碎片。\n\n- **缺点**：\n\n  可用的内存大小缩小为原来的一半，对象存活率高时会频繁进行复制。\n\n#### 4. 分代收集\n\n现在的商业虚拟机采用分代收集算法，它根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。\n\n一般将堆分为新生代和老年代。\n\n- 对于**新生代**，每次`GC`时都有**大量**的对象死亡，只有**少量**对象存活。考虑到复制成本低，适合采用**复制算法**。因此有了`From Survivor`和`To Survivor`区域。\n- 对于**老年代**，因为对象**存活率高**，没有额外的内存空间对它进行担保。因而适合采用**标记-清理算法**和**标记-整理算法**进行回收。\n\n### 垃圾收集器\n\n![](JVM必须知道的基础/4.png)\n\n以上是 HotSpot 虚拟机中的 7 个垃圾收集器，连线表示垃圾收集器可以配合使用。\n\n- 单线程与多线程：单线程指的是垃圾收集器只使用一个线程，而多线程使用多个线程；\n- 串行与并行：串行指的是垃圾收集器与用户程序交替执行，这意味着在执行垃圾收集的时候需要停顿用户程序；并行指的是垃圾收集器和用户程序同时执行。除了 CMS 和 G1 之外，其它垃圾收集器都是以串行的方式执行。\n\n#### 1. Serial 收集器\n\n![](JVM必须知道的基础/5.png)\n\nSerial 翻译为串行，也就是说它以串行的方式执行。\n\n它是单线程的收集器，只会使用一个线程进行垃圾收集工作。\n\n它的优点是简单高效，在单个 CPU 环境下，由于没有线程交互的开销，因此拥有最高的单线程收集效率。\n\n它是 Client 场景下的默认新生代收集器，因为在该场景下内存一般来说不会很大。它收集一两百兆垃圾的停顿时间可以控制在一百多毫秒以内，只要不是太频繁，这点停顿时间是可以接受的。\n\n#### 2. ParNew 收集器\n\n[![](JVM必须知道的基础/7.png)](https://camo.githubusercontent.com/573a3abc71931daef42e0b42b1876cbe4f940cdc/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f38313533386364352d316263662d346533312d383665352d6531393864663165303133622e6a7067)\n\n它是 Serial 收集器的多线程版本。\n\n它是 Server 场景下默认的新生代收集器，除了性能原因外，主要是因为除了 Serial 收集器，只有它能与 CMS 收集器配合使用。\n\n#### 3. Parallel Scavenge 收集器\n\n与 ParNew 一样是多线程收集器。\n\n其它收集器目标是尽可能缩短垃圾收集时用户线程的停顿时间，而它的目标是达到一个可控制的吞吐量，因此它被称为“吞吐量优先”收集器。这里的吞吐量指 CPU 用于运行用户程序的时间占总时间的比值。\n\n停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验。而高吞吐量则可以高效率地利用 CPU 时间，尽快完成程序的运算任务，适合在后台运算而不需要太多交互的任务。\n\n缩短停顿时间是以牺牲吞吐量和新生代空间来换取的：新生代空间变小，垃圾回收变得频繁，导致吞吐量下降。\n\n可以通过一个开关参数打开 GC 自适应的调节策略（GC Ergonomics），就不需要手工指定新生代的大小（-Xmn）、Eden 和 Survivor 区的比例、晋升老年代对象年龄等细节参数了。虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量。\n\n#### 4. Serial Old 收集器\n\n![13](JVM必须知道的基础/13.png)\n\n是 Serial 收集器的老年代版本，也是给 Client 场景下的虚拟机使用。如果用在 Server 场景下，它有两大用途：\n\n- 在 JDK 1.5 以及之前版本（Parallel Old 诞生以前）中与 Parallel Scavenge 收集器搭配使用。\n- 作为 CMS 收集器的后备预案，在并发收集发生 Concurrent Mode Failure 时使用。\n\n#### 5. Parallel Old 收集器![](JVM必须知道的基础/8.png)\n\n是 Parallel Scavenge 收集器的老年代版本。\n\n在注重吞吐量以及 CPU 资源敏感的场合，都可以优先考虑 Parallel Scavenge 加 Parallel Old 收集器。\n\n#### 6. CMS 收集器\n\n![](JVM必须知道的基础/9.png)\n\nCMS（Concurrent Mark Sweep），Mark Sweep 指的是标记 - 清除算法。\n\n分为以下四个流程：\n\n- 初始标记：仅仅只是标记一下 GC Roots 能直接关联到的对象，速度很快，需要停顿。\n- 并发标记：进行 GC Roots Tracing 的过程，它在整个回收过程中耗时最长，不需要停顿。\n- 重新标记：为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要停顿。\n- 并发清除：不需要停顿。\n\n在整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，不需要进行停顿。\n\n具有以下缺点：\n\n- 吞吐量低：低停顿时间是以牺牲吞吐量为代价的，导致 CPU 利用率不够高。\n- 无法处理浮动垃圾，可能出现 Concurrent Mode Failure。浮动垃圾是指并发清除阶段由于用户线程继续运行而产生的垃圾，这部分垃圾只能到下一次 GC 时才能进行回收。由于浮动垃圾的存在，因此需要预留出一部分内存，意味着 CMS 收集不能像其它收集器那样等待老年代快满的时候再回收。如果预留的内存不够存放浮动垃圾，就会出现 Concurrent Mode Failure，这时虚拟机将临时启用 Serial Old 来替代 CMS。\n- 标记 - 清除算法导致的空间碎片，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象，不得不提前触发一次 Full GC。\n\n#### 7. G1 收集器\n\nG1（Garbage-First），它是一款面向服务端应用的垃圾收集器，在多 CPU 和大内存的场景下有很好的性能。HotSpot 开发团队赋予它的使命是未来可以替换掉 CMS 收集器。\n\n堆被分为新生代和老年代，其它收集器进行收集的范围都是整个新生代或者老年代，而 G1 可以直接对新生代和老年代一起回收。![](JVM必须知道的基础/10.png)\n\nG1 把堆划分成多个大小相等的独立区域（Region），新生代和老年代不再物理隔离。\n\n[![](JVM必须知道的基础/11.png)](https://camo.githubusercontent.com/5049da1b34969b272be2bffc6c6de0206b33253c/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f39626264646565622d653933392d343166302d386538652d3262316130616137653061372e706e67)\n\n通过引入 Region 的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。这种划分方法带来了很大的灵活性，使得可预测的停顿时间模型成为可能。通过记录每个 Region 垃圾回收时间以及回收所获得的空间（这两个值是通过过去回收的经验获得），并维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region。\n\n每个 Region 都有一个 Remembered Set，用来记录该 Region 对象的引用对象所在的 Region。通过使用 Remembered Set，在做可达性分析的时候就可以避免全堆扫描。\n\n[![](JVM必须知道的基础/12.png)](https://camo.githubusercontent.com/5bd72d589ead80c22547e3288a9a406241a1fb6b/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f66393965653737312d633536662d343766622d393134382d6330303336363935623566652e6a7067)\n\n如果不计算维护 Remembered Set 的操作，G1 收集器的运作大致可划分为以下几个步骤：\n\n- 初始标记\n- 并发标记\n- 最终标记：为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程的 Remembered Set Logs 里面，最终标记阶段需要把 Remembered Set Logs 的数据合并到 Remembered Set 中。这阶段需要停顿线程，但是可并行执行。\n- 筛选回收：首先对各个 Region 中的回收价值和成本进行排序，根据用户所期望的 GC 停顿时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分 Region，时间是用户可控制的，而且停顿用户线程将大幅度提高收集效率。\n\n具备如下特点：\n\n- 空间整合：整体来看是基于“标记 - 整理”算法实现的收集器，从局部（两个 Region 之间）上来看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。\n- 可预测的停顿：能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在 GC 上的时间不得超过 N 毫秒。\n\n## 内存分配与回收策略\n\n### Minor GC 和 Full GC\n\n- Minor GC：回收新生代，因为新生代对象存活时间很短，因此 Minor GC 会频繁执行，执行的速度一般也会比较快。\n- Full GC：回收老年代和新生代，老年代对象其存活时间长，因此 Full GC 很少执行，执行速度会比 Minor GC 慢很多。\n\n### 内存分配策略\n\n#### 1. 对象优先在 Eden 分配\n\n大多数情况下，对象在新生代 Eden 上分配，当 Eden 空间不够时，发起 Minor GC。\n\n#### 2. 大对象直接进入老年代\n\n大对象是指需要连续内存空间的对象，最典型的大对象是那种很长的字符串以及数组。\n\n经常出现大对象会提前触发垃圾收集以获取足够的连续空间分配给大对象。\n\n-XX:PretenureSizeThreshold，大于此值的对象直接在老年代分配，避免在 Eden 和 Survivor 之间的大量内存复制。\n\n#### 3. 长期存活的对象进入老年代\n\n为对象定义年龄计数器，对象在 Eden 出生并经过 Minor GC 依然存活，将移动到 Survivor 中，年龄就增加 1 岁，增加到一定年龄则移动到老年代中。\n\n-XX:MaxTenuringThreshold 用来定义年龄的阈值。\n\n#### 4. 动态对象年龄判定\n\n虚拟机并不是永远要求对象的年龄必须达到 MaxTenuringThreshold 才能晋升老年代，如果在 Survivor 中相同年龄所有对象大小的总和大于 Survivor 空间的一半，则年龄大于或等于该年龄的对象可以直接进入老年代，无需等到 MaxTenuringThreshold 中要求的年龄。\n\n#### 5. 空间分配担保\n\n在发生 Minor GC 之前，虚拟机先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果条件成立的话，那么 Minor GC 可以确认是安全的。\n\n如果不成立的话虚拟机会查看 HandlePromotionFailure 的值是否允许担保失败，如果允许那么就会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次 Minor GC；如果小于，或者 HandlePromotionFailure 的值不允许冒险，那么就要进行一次 Full GC。\n\n### Full GC 的触发条件\n\n对于 Minor GC，其触发条件非常简单，当 Eden 空间满时，就将触发一次 Minor GC。而 Full GC 则相对复杂，有以下条件：\n\n#### 1. 调用 System.gc()\n\n只是建议虚拟机执行 Full GC，但是虚拟机不一定真正去执行。不建议使用这种方式，而是让虚拟机管理内存。\n\n#### 2. 老年代空间不足\n\n老年代空间不足的常见场景为前文所讲的大对象直接进入老年代、长期存活的对象进入老年代等。\n\n为了避免以上原因引起的 Full GC，应当尽量不要创建过大的对象以及数组。除此之外，可以通过 -Xmn 虚拟机参数调大新生代的大小，让对象尽量在新生代被回收掉，不进入老年代。还可以通过 -XX:MaxTenuringThreshold 调大对象进入老年代的年龄，让对象在新生代多存活一段时间。\n\n#### 3. 空间分配担保失败\n\n使用复制算法的 Minor GC 需要老年代的内存空间作担保，如果担保失败会执行一次 Full GC。具体内容请参考上面的第 5 小节。\n\n#### 4. JDK 1.7 及以前的永久代空间不足\n\n在 JDK 1.7 及以前，HotSpot 虚拟机中的方法区是用永久代实现的，永久代中存放的为一些 Class 的信息、常量、静态变量等数据。\n\n当系统中要加载的类、反射的类和调用的方法较多时，永久代可能会被占满，在未配置为采用 CMS GC 的情况下也会执行 Full GC。如果经过 Full GC 仍然回收不了，那么虚拟机会抛出 java.lang.OutOfMemoryError。\n\n为避免以上原因引起的 Full GC，可采用的方法为增大永久代空间或转为使用 CMS GC。\n\n#### 5. Concurrent Mode Failure\n\n执行 CMS GC 的过程中同时有对象要放入老年代，而此时老年代空间不足（可能是 GC 过程中浮动垃圾过多导致暂时性的空间不足），便会报 Concurrent Mode Failure 错误，并触发 Full GC。\n\n## 类加载机制概念\n\n- Java虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的加载机制。*Class文件由类装载器装载后，在JVM中将形成一份描述Class结构的元信息对象，通过该元信息对象可以获知Class的结构信息：如构造函数，属性和方法等，Java允许用户借由这个Class相关的元信息对象间接调用Class对象的功能,这里就是我们经常能见到的Class类。\n\n### 类加载过程\n\n![](JVM必须知道的基础/6.png)\n\n工作机制\n\n类装载器就是寻找类的字节码文件，并构造出类在JVM内部表示的对象组件。在Java中，类装载器把一个类装入JVM中，要经过以下步骤：\n\n```html\n  (1) 装载：查找和导入Class文件；\n\n  (2) 链接：把类的二进制数据合并到JRE中；\n\n     (a)校验：检查载入Class文件数据的正确性；\n\n     (b)准备：给类的静态变量分配存储空间；\n\n     (c)解析：将符号引用转成直接引用；\n\n  (3) 初始化：对类的静态变量，静态代码块执行初始化操作\n```\n\nJava程序可以动态扩展是由运行期动态加载和动态链接实现的；比如：如果编写一个使用接口的应用程序，可以等到运行时再指定其实际的实现(多态)，解析过程有时候还可以在初始化之后执行；比如：动态绑定(多态)如上图所示，加载、验证、准备、初始化和卸载这五个阶段的顺序是确定的，类的加载过程必须按照这个顺序来按部就班地开始，而解析阶段则不一定，它在某些情况下可以在初始化阶段后再开始。类的生命周期的每一个阶段通常都是互相交叉混合式进行的，通常会在一个阶段执行的过程中调用或激活另外一个阶段。\n\n####  装载(加载)\n\n类的装载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的**方法区**内，然后在堆区创建一个java.lang.Class对象，用来封装类在方法区内的数据结构。类的加载的最终产品是位于堆区中的Class对象，Class对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口。\n\n类加载器并不需要等到某个类被“首次主动使用”时再加载它，JVM规范允许类加载器在预料某个类将要被使用时就预先加载它，如果在预先加载的过程中遇到了.class文件缺失或存在错误，类加载器必须在程序首次主动使用该类时才报告错误（LinkageError错误）如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误。\n\n加载.class文件的方式有:\n\n1). 从本地系统中直接加载2). 通过网络下载.class文件3). 从zip，jar等归档文件中加载.class文件4). 从专有数据库中提取.class文件5). 将Java源文件动态编译为.class文件\n\n在了解了什么是类的加载后，回头来再看jvm进行类加载阶段都做了什么。虚拟机需要完成以下三件事情：\n\n1).通过一个类的全限定名称来获取定义此类的二进制字节流。\n\n2).将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\n\n3).在java堆中生成一个代表这个类的java.lang.Class对象，作为方法区这些数据的访问入口。\n\n相对于类加载过程的其他阶段，加载阶段是开发期相对来说可控性比较强，该阶段既可以使用系统提供的类加载器完成，也可以由用户自定义的类加载器来完成，开发人员可以通过定义自己的类加载器去控制字节流的获取方式。关于这个过程的更多细节，我会在下一节细说，类的加载。加载阶段完成后，虚拟机外部的 二进制字节流就按照虚拟机所需的格式存储在方法区之中，而且在Java堆中也创建一个java.lang.Class类的对象，这样便可以通过该对象访问方法区中的这些数据。\n\n#### **验证**\n\n验证的目的是为了确保Class文件中的字节流包含的信息符合当前虚拟机的要求，而且不会危害虚拟机自身的安全。不同的虚拟机对类验证的实现可能会有所不同，但大致都会完成以下四个阶段的验证：文件格式的验证、元数据的验证、字节码验证和符号引用验证。\n\n1）文件格式的验证：验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理，该验证的主要目的是保证输入的字节流能正确地解析并存储于方法区之内。经过该阶段的验证后，字节流才会进入内存的方法区中进行存储，后面的三个验证都是基于方法区的存储结构进行的。\n\n2）元数据验证：对类的元数据信息进行语义校验（其实就是对类中的各数据类型进行语法校验），保证不存在不符合Java语法规范的元数据信息。\n\n3）字节码验证：该阶段验证的主要工作是进行数据流和控制流分析，对类的方法体进行校验分析，以保证被校验的类的方法在运行时不会做出危害虚拟机安全的行为。\n\n4）符号引用验证：这是最后一个阶段的验证，它发生在虚拟机将符号引用转化为直接引用的时候（解析阶段中发生该转化，后面会有讲解），主要是对类自身以外的信息（常量池中的各种符号引用）进行匹配性的校验。\n\n####  准备\n\n准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中进行分配。注：\n\n1）这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。\n\n2）这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。\n\n####  解析\n\n解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。\n\n符号引用（Symbolic Reference）：符号引用以一组符号来描述所引用的目标，符号引用可以是任何形式的字面量，符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经在内存中。\n\n直接引用（Direct Reference）：直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是与虚拟机实现的内存布局相关的，同一个符号引用在不同的虚拟机实例上翻译出来的直接引用一般都不相同，如果有了直接引用，那引用的目标必定已经在内存中存在。\n\n1)、类或接口的解析：判断所要转化成的直接引用是对数组类型，还是普通的对象类型的引用，从而进行不同的解析。\n\n2)、字段解析：对字段进行解析时，会先在本类中查找是否包含有简单名称和字段描述符都与目标相匹配的字段，如果有，则查找结束；如果没有，则会按照继承关系从上往下递归搜索该类所实现的各个接口和它们的父接口，还没有，则按照继承关系从上往下递归搜索其父类，直至查找结束。\n\n3)、类方法解析：对类方法的解析与对字段解析的搜索步骤差不多，只是多了判断该方法所处的是类还是接口的步骤，而且对类方法的匹配搜索，是先搜索父类，再搜索接口。\n\n4)、接口方法解析：与类方法解析步骤类似，只是接口不会有父类，因此，只递归向上搜索父接口就行了。\n\n**5. 初始化**\n\n类初始化阶段是类加载过程的最后一步，前面的类加载过程中，除了加载（Loading）阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中定义的Java程序代码。初始化，为类的静态变量赋予正确的初始值，JVM负责对类进行初始化，主要对类变量进行初始化。在Java中对类变量进行初始值设定有两种方式：\n\n①声明类变量时指定初始值\n\n②使用静态代码块为类变量指定初始值\n\nJVM初始化步骤\n\n1)、假如这个类还没有被加载和连接，则程序先加载并连接该类\n\n2)、假如该类的直接父类还没有被初始化，则先初始化其直接父类\n\n3)、假如类中有初始化语句，则系统依次执行这些初始化语句\n\n初始化阶段时执行类构造器方法()的过程。\n\n1）类构造器方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static{}块）中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序所决定。\n\n2）类构造器方法与类的构造函数不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的类构造器方法执行之前，父类的类构造器方法已经执行完毕，因此在虚拟机中第一个执行的类构造器方法的类一定是java.lang.Object。\n\n3）由于父类的类构造器方法方法先执行，也就意味着父类中定义的静态语句块要优先于子类的变量赋值操作。\n\n4）类构造器方法对于类或者接口来说并不是必需的，如果一个类中没有静态语句块也没有对变量的赋值操作，那么编译器可以不为这个类生成类构造器方法。\n\n5）接口中可能会有变量赋值操作，因此接口也会生成类构造器方法。但是接口与类不同，执行接口的类构造器方法不需要先执行父接口的类构造器方法。只有当父接口中定义的变量被使用时，父接口才会被初始化。另外，接口的实现类在初始化时也不会执行接口的类构造器方法。\n\n6）虚拟机会保证一个类的类构造器方法在多线程环境中被正确地加锁和同步。如果有多个线程去同时初始化一个类，那么只会有一个线程去执行这个类的类构造器方法，其它线程都需要阻塞等待，直到活动线程执行类构造器方法完毕。如果在一个类的类构造器方法中有耗时很长的操作，那么就可能造成多个进程阻塞。\n\n**6.结束生命周期**\n\n在以下情况的时候，Java虚拟机会结束生命周期1). 执行了System.exit()方法2). 程序正常执行结束3). 程序在执行过程中遇到了异常或错误而异常终止4). 由于操作系统出现错误而导致Java虚拟机进程终止\n\n### 何时开始类的初始化\n\n什么情况下需要开始类加载过程的第一个阶段:\"加载\"。虚拟机规范中并没强行约束，这点可以交给虚拟机的的具体实现自由把握，但是对于初始化阶段虚拟机规范是严格规定了如下几种情况，如果类未初始化会对类进行初始化。\n\n1、创建类的实例\n\n2、访问类的静态变量(除常量【被final修辞的静态变量】原因:常量一种特殊的变量，因为编译器把他们当作值(value)而不是域(field)来对待。如果你的代码中用到了常变量(constant variable)，编译器并不会生成字节码来从对象中载入域的值，而是直接把这个值插入到字节码中。这是一种很有用的优化，但是如果你需要改变final域的值那么每一块用到那个域的代码都需要重新编译。\n\n3、访问类的静态方法\n\n4、反射如(Class.forName(\"my.xyz.Test\"))\n\n5、当初始化一个类时，发现其父类还未初始化，则先出发父类的初始化\n\n6、虚拟机启动时，定义了main()方法的那个类先初始化\n\n以上情况称为称对一个类进行“主动引用”，除此种情况之外，均不会触发类的初始化，称为“被动引用”接口的加载过程与类的加载过程稍有不同。接口中不能使用static{}块。当一个接口在初始化时，并不要求其父接口全部都完成了初始化，只有真正在使用到父接口时（例如引用接口中定义的常量）才会初始化。\n\n#### **被动引用例子**\n\n1、子类调用父类的静态变量，子类不会被初始化。只有父类被初始化。。对于静态字段，只有直接定义这个字段的类才会被初始化.\n\n2、通过数组定义来引用类，不会触发类的初始化\n\n3、 访问类的常量，不会初始化类\n\n```java\nclass SuperClass {  \n    static {  \n        System.out.println(\"superclass init\");  \n    }  \n    public static int value = 123;  \n}  \n  \nclass SubClass extends SuperClass {  \n    static {  \n        System.out.println(\"subclass init\");  \n    }  \n}  \n  \npublic class Test {  \n    public static void main(String[] args) {  \n        System.out.println(SubClass.value);// 被动应用1  \n        SubClass[] sca = new SubClass[10];// 被动引用2  \n    }  \n}  \n```\n\n程序运行输出    superclass init123从上面的输入结果证明了被动引用1与被动引用2\n\n```java\nclass ConstClass {  \n    static {  \n        System.out.println(\"ConstClass init\");  \n    }  \n    public static final String HELLOWORLD = \"hello world\";  \n}  \n  \npublic class Test {  \n    public static void main(String[] args) {  \n        System.out.println(ConstClass.HELLOWORLD);// 调用类常量  \n    }  \n}  \n```\n\n程序输出结果hello world从上面的输出结果证明了被动引用3\n\n** 题目分析**\n\n上面很详细的介绍了类的加载时机和类的加载过程，通过上面的理论来分析本文开门见上的题目\n\n```java\nclass SingleTon {  \n    private static SingleTon singleTon = new SingleTon();  \n    public static int count1;  \n    public static int count2 = 0;  \n  \n    private SingleTon() {  \n        count1++;  \n        count2++;  \n    }  \n  \n    public static SingleTon getInstance() {  \n        return singleTon;  \n    }  \n}  \n  \npublic class Test {  \n    public static void main(String[] args) {  \n        SingleTon singleTon = SingleTon.getInstance();  \n        System.out.println(\"count1=\" + singleTon.count1);  \n        System.out.println(\"count2=\" + singleTon.count2);  \n    }  \n}  \n```\n\n分析:\n\n1:SingleTon singleTon = SingleTon.getInstance();调用了类的SingleTon调用了类的静态方法，触发类的初始化\n\n2:类加载的时候在准备过程中为类的静态变量分配内存并初始化默认值 singleton=null count1=0,count2=0\n\n3:类初始化化，为类的静态变量赋值和执行静态代码快。singleton赋值为new SingleTon()调用类的构造方法\n\n4:调用类的构造方法后count=1;count2=1\n\n5:继续为count1与count2赋值,此时count1没有赋值操作,所有count1为1,但是count2执行赋值操作就变为0\n\n### 类初始化顺序\n\n现在我们知道什么时候触发类的初始化了，他精确地写在Java语言规范中。但了解清楚 域（fields，静态的还是非静态的）、块（block静态的还是非静态的）、不同类（子类和超类）和不同的接口（子接口，实现类和超接口）的初始化顺序也很重要类。事实上很多核心Java面试题和SCJP问题都是基于这些概念，下面是类初始化的一些规则：\n\n```\n1.类从顶至底的顺序初始化，所以声明在顶部的字段的早于底部的字段初始化\n2.超类早于子类和衍生类的初始化\n3.如果类的初始化是由于访问静态域而触发，那么只有声明静态域的类才被初始化，而不会触发超类的初始化或者子类的4.初始化即使静态域被子类或子接口或者它的实现类所引用。\n5.接口初始化不会导致父接口的初始化。\n6.静态域的初始化是在类的静态初始化期间，非静态域的初始化时在类的实例创建期间。这意味这静态域初始化在非静态域之前。\n7.非静态域通过构造器初始化，子类在做任何初始化之前构造器会隐含地调用父类的构造器，他保证了非静态或实例变量（父类）初始化早于子类\n```\n\n### 类加载器\n\nJVM设计者把类加载阶段中的“通过'类全名'来获取定义此类的二进制字节流”这个动作放到Java虚拟机外部去实现，以便让应用程序自己决定如何去获取所需要的类。实现这个动作的代码模块称为“类加载器”。\n\n#### **类与类加载器**\n\n对于任何一个类，都需要由加载它的类加载器和这个类来确立其在JVM中的唯一性。也就是说，两个类来源于同一个Class文件，并且被同一个类加载器加载，这两个类才相等。\n\n#### **双亲委派模型**\n\n从虚拟机的角度来说，只存在两种不同的类加载器：一种是启动类加载器（Bootstrap ClassLoader），该类加载器使用C++语言实现，属于虚拟机自身的一部分。另外一种就是所有其它的类加载器，这些类加载器是由Java语言实现，独立于JVM外部，并且全部继承自抽象类java.lang.ClassLoader。\n\n从Java开发人员的角度来看，大部分Java程序一般会使用到以下三种系统提供的类加载器：\n\n1)启动类加载器（Bootstrap ClassLoader）：负责加载JAVA_HOME\\lib目录中并且能被虚拟机识别的类库到JVM内存中，如果名称不符合的类库即使放在lib目录中也不会被加载。该类加载器无法被Java程序直接引用。\n\n2)扩展类加载器（Extension ClassLoader）：该加载器主要是负责加载JAVA_HOME\\lib\\，该加载器可以被开发者直接使用。\n\n3)应用程序类加载器（Application ClassLoader）：该类加载器也称为系统类加载器，它负责加载用户类路径（Classpath）上所指定的类库，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。\n\n我们的应用程序都是由这三类加载器互相配合进行加载的，我们也可以加入自己定义的类加载器。这些类加载器之间的关系如下图所示：\n\n如上图所示的类加载器之间的这种层次关系，就称为类加载器的双亲委派模型（Parent Delegation Model）。该模型要求除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。子类加载器和父类加载器不是以继承（Inheritance）的关系来实现，而是通过组合（Composition）关系来复用父加载器的代码。\n\n双亲委派模型的工作过程为：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的加载器都是如此，因此所有的类加载请求都会传给顶层的启动类加载器，只有当父加载器反馈自己无法完成该加载请求（该加载器的搜索范围中没有找到对应的类）时，子加载器才会尝试自己去加载。\n\n使用这种模型来组织类加载器之间的关系的好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系。例如java.lang.Object类，无论哪个类加载器去加载该类，最终都是由启动类加载器进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。否则的话，如果不使用该模型的话，如果用户自定义一个java.lang.Object类且存放在classpath中，那么系统中将会出现多个Object类，应用程序也会变得很混乱。如果我们自定义一个rt.jar中已有类的同名Java类，会发现JVM可以正常编译，但该类永远无法被加载运行。在rt.jar包中的java.lang.ClassLoader类中，我们可以查看类加载实现过程的代码，具体源码如下：\n\n```java\nprotected synchronized Class loadClass(String name, boolean resolve)  \n        throws ClassNotFoundException {  \n    // 首先检查该name指定的class是否有被加载  \n    Class c = findLoadedClass(name);  \n    if (c == null) {  \n        try {  \n            if (parent != null) {  \n                // 如果parent不为null，则调用parent的loadClass进行加载  \n                c = parent.loadClass(name, false);  \n            } else {  \n                // parent为null，则调用BootstrapClassLoader进行加载  \n                c = findBootstrapClass0(name);  \n            }  \n        } catch (ClassNotFoundException e) {  \n            // 如果仍然无法加载成功，则调用自身的findClass进行加载  \n            c = findClass(name);  \n        }  \n    }  \n    if (resolve) {  \n        resolveClass(c);  \n    }  \n    return c;  \n}  \n```\n\n通过上面代码可以看出，双亲委派模型是通过loadClass()方法来实现的，根据代码以及代码中的注释可以很清楚地了解整个过程其实非常简单：先检查是否已经被加载过，如果没有则调用父加载器的loadClass()方法，如果父加载器为空则默认使用启动类加载器作为父加载器。如果父类加载器加载失败，则先抛出ClassNotFoundException，然后再调用自己的findClass()方法进行加载。\n\n#### **自定义类加载器**\n\n若要实现自定义类加载器，只需要继承java.lang.ClassLoader 类，并且重写其findClass()方法即可。java.lang.ClassLoader 类的基本职责就是根据一个指定的类的名称，找到或者生成其对应的字节代码，然后从这些字节代码中定义出一个 Java 类，即 java.lang.Class 类的一个实例。除此之外，ClassLoader 还负责加载 Java 应用所需的资源，如图像文件和配置文件等，ClassLoader 中与加载类相关的方法如下：\n\n方法说明getParent()  返回该类加载器的父类加载器。\n\nloadClass(String name) 加载名称为 二进制名称为name 的类，返回的结果是 java.lang.Class 类的实例。\n\nfindClass(String name) 查找名称为 name 的类，返回的结果是 java.lang.Class 类的实例。\n\nfindLoadedClass(String name) 查找名称为 name 的已经被加载过的类，返回的结果是 java.lang.Class 类的实例。\n\nresolveClass(Class<?> c) 链接指定的 Java 类。\n\n注意：在JDK1.2之前，类加载尚未引入双亲委派模式，因此实现自定义类加载器时常常重写loadClass方法，提供双亲委派逻辑，从JDK1.2之后，双亲委派模式已经被引入到类加载体系中，自定义类加载器时不需要在自己写双亲委派的逻辑，因此不鼓励重写loadClass方法，而推荐重写findClass方法。\n\n在Java中，任意一个类都需要由加载它的类加载器和这个类本身一同确定其在java虚拟机中的唯一性，即比较两个类是否相等，只有在这两个类是由同一个类加载器加载的前提之下才有意义，否则，即使这两个类来源于同一个Class类文件，只要加载它的类加载器不相同，那么这两个类必定不相等(这里的相等包括代表类的Class对象的equals()方法、isAssignableFrom()方法、isInstance()方法和instanceof关键字的结果)。例子代码如下：\n\n```java\n/** \n     * 一、ClassLoader加载类的顺序 \n     *  1.调用 findLoadedClass(String) 来检查是否已经加载类。 \n     *  2.在父类加载器上调用 loadClass 方法。如果父类加载器为 null，则使用虚拟机的内置类加载器。 \n     *  3.调用 findClass(String) 方法查找类。 \n     * 二、实现自己的类加载器 \n     *  1.获取类的class文件的字节数组 \n     *  2.将字节数组转换为Class类的实例 \n     */  \n    public class ClassLoaderTest {  \n        public static void main(String[] args) throws InstantiationException, IllegalAccessException, ClassNotFoundException {  \n            //新建一个类加载器  \n            MyClassLoader cl = new MyClassLoader(\"myClassLoader\");  \n            //加载类，得到Class对象  \n            Class<?> clazz = cl.loadClass(\"classloader.Animal\");  \n            //得到类的实例  \n            Animal animal=(Animal) clazz.newInstance();  \n            animal.say();  \n        }  \n    }  \n    class Animal{  \n        public void say(){  \n            System.out.println(\"hello world!\");  \n        }  \n    }  \n    class MyClassLoader extends ClassLoader {  \n        //类加载器的名称  \n        private String name;  \n        //类存放的路径  \n        private String path = \"E:\\\\workspace\\\\Algorithm\\\\src\";  \n        MyClassLoader(String name) {  \n            this.name = name;  \n        }  \n        MyClassLoader(ClassLoader parent, String name) {  \n            super(parent);  \n            this.name = name;  \n        }  \n        /** \n         * 重写findClass方法 \n         */  \n        @Override  \n        public Class<?> findClass(String name) {  \n            byte[] data = loadClassData(name);  \n            return this.defineClass(name, data, 0, data.length);  \n        }  \n        public byte[] loadClassData(String name) {  \n            try {  \n                name = name.replace(\".\", \"//\");  \n                FileInputStream is = new FileInputStream(new File(path + name + \".class\"));  \n                ByteArrayOutputStream baos = new ByteArrayOutputStream();  \n                int b = 0;  \n                while ((b = is.read()) != -1) {  \n                    baos.write(b);  \n                }  \n                return baos.toByteArray();  \n            } catch (Exception e) {  \n                e.printStackTrace();  \n            }  \n            return null;  \n        }  \n    }  \n```\n\n类加载器双亲委派模型是从JDK1.2以后引入的，并且只是一种推荐的模型，不是强制要求的，因此有一些没有遵循双亲委派模型的特例：(了解)\n\n(1).在JDK1.2之前，自定义类加载器都要覆盖loadClass方法去实现加载类的功能，JDK1.2引入双亲委派模型之后，loadClass方法用于委派父类加载器进行类加载，只有父类加载器无法完成类加载请求时才调用自己的findClass方法进行类加载，因此在JDK1.2之前的类加载的loadClass方法没有遵循双亲委派模型，因此在JDK1.2之后，自定义类加载器不推荐覆盖loadClass方法，而只需要覆盖findClass方法即可。\n\n(2).双亲委派模式很好地解决了各个类加载器的基础类统一问题，越基础的类由越上层的类加载器进行加载，但是这个基础类统一有一个不足，当基础类想要调用回下层的用户代码时无法委派子类加载器进行类加载。为了解决这个问题JDK引入了ThreadContext线程上下文，通过线程上下文的setContextClassLoader方法可以设置线程上下文类加载器。\n\nJavaEE只是一个规范，sun公司只给出了接口规范，具体的实现由各个厂商进行实现，因此JNDI，JDBC,JAXB等这些第三方的实现库就可以被JDK的类库所调用。线程上下文类加载器也没有遵循双亲委派模型。\n\n(3).近年来的热码替换，模块热部署等应用要求不用重启java虚拟机就可以实现代码模块的即插即用，催生了OSGi技术，在OSGi中类加载器体系被发展为网状结构。OSGi也没有完全遵循双亲委派模型。\n\n#### **动态加载Jar && ClassLoader 隔离问题**\n\n动态加载Jar：\n\nJava 中动态加载 Jar 比较简单，如下：\n\n```java\nURL[] urls = new URL[] {new URL(\"file:libs/jar1.jar\")};  \nURLClassLoader loader = new URLClassLoader(urls, parentLoader);  \n```\n\n表示加载 libs 下面的 jar1.jar，其中 parentLoader 就是上面1中的 parent，可以为当前的 ClassLoader。\n\nClassLoader 隔离问题：\n\n大家觉得一个运行程序中有没有可能同时存在两个包名和类名完全一致的类？JVM 及 Dalvik 对类唯一的识别是 ClassLoader id + PackageName + ClassName，所以一个运行程序中是有可能存在两个包名和类名完全一致的类的。并且如果这两个”类”不是由一个 ClassLoader 加载，是无法将一个类的示例强转为另外一个类的，这就是 ClassLoader 隔离。 如 Android 中碰到如下异常[java] view plain copy\n\n```java\nandroid.support.v4.view.ViewPager can not be cast to android.support.v4.view.ViewPager  \n```\n\n当碰到这种问题时可以通过 instance.getClass().getClassLoader(); 得到 ClassLoader，看 ClassLoader 是否一样。\n\n加载不同 Jar 包中公共类：\n\n现在 Host 工程包含了 common.jar, jar1.jar, jar2.jar，并且 jar1.jar 和 jar2.jar 都包含了 common.jar，我们通过 ClassLoader 将 jar1, jar2 动态加载进来，这样在 Host 中实际是存在三份 common.jar.\n\n我们怎么保证 common.jar 只有一份而不会造成上面3中提到的 ClassLoader 隔离的问题呢，其实很简单，在生成 jar1 和 jar2 时把 common.jar 去掉，只保留 host 中一份，以 host ClassLoader 为 parentClassLoader 即可。","slug":"JVM必须知道的基础","published":1,"updated":"2021-04-29T10:29:47.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6ml9u000ovkvymt3546g4","content":"<h2 id=\"运行时数据区域\"><a href=\"#运行时数据区域\" class=\"headerlink\" title=\"运行时数据区域\"></a>运行时数据区域</h2><p>网上有很多描述JVM内存区的图,我觉得这张能表述内容较多</p>\n<p><img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/1.png\" alt></p>\n<h4 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h4><pre class=\"line-numbers language-html\"><code class=\"language-html\"> 程序计数器(Program Counter Register)存储当前线程执行的字节码行号，占用内存较小。字节码解释器就是通过这个计数器的值来选择下一条需要执行的字节码指令。执行Java方法时计数器指向正在执行的虚拟字节码指令的地址，执行Native方法时指向空。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"java虚拟机栈\"><a href=\"#java虚拟机栈\" class=\"headerlink\" title=\"java虚拟机栈\"></a>java虚拟机栈</h4><pre class=\"line-numbers language-html\"><code class=\"language-html\">java虚拟机栈（Java Virtual Machine Stack）与程序计数器一样，也是线程私有的，生命周期与线程相同。java虚拟机栈描述的是java方法执行的内存模型,每个方法执行的时候都会创建一个栈帧,用于存储局部变量表、操作数栈、动态链接、方法出口等信息。方法的调用和结束分别对应栈帧的入栈和出栈。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h4><pre class=\"line-numbers language-html\"><code class=\"language-html\">本地方法栈（Native Method Stack）与java虚拟机栈作用相似,java虚拟机栈是为java方法服务,本地方法栈是为Native方法服务,甚至有些虚拟机实现时直接将两者合而为一(如:HotSpot).<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h4><pre class=\"line-numbers language-html\"><code class=\"language-html\">Java堆(Java Heap)是虚拟机管理的内存中最大的一块，该内存区域的唯一目的就是存放对象实例。java堆是垃圾收集区域管理的主要区域。从回收的角度看，可以细分为新生代和老年代；再细致一点就是Eden空间、From Survivor空间、To Survivor空间。线程共享的java堆能划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer，TLAB）。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h4><pre class=\"line-numbers language-html\"><code class=\"language-html\">方法区（Method Area）与java堆一样，是各个线程共享的内存区域，用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码数据等。这个区域的垃圾回收主要是针对常量池的回收和对类型的卸载。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h5><pre class=\"line-numbers language-html\"><code class=\"language-html\">运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件的常量池(Constant Pool Table)将在类加载后进入方法区的运行时常量池存放。除此之外，还会将翻译出来的直接引用也存放在运行时常量池。运行期间也可以将新的常量放入运行时常量池。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"直接内存\"><a href=\"#直接内存\" class=\"headerlink\" title=\"直接内存\"></a>直接内存</h4><pre class=\"line-numbers language-html\"><code class=\"language-html\">直接内存(Direct Memory)并不是java虚拟机运行时数据区的一部分。在JDK1.4中新加入了NIO（New Input/Output）类,引入了一种基于通道(channel)和缓冲区(Buffer)的I/O方式.他可以使用Native函数库直接分配对外内存.然后通过一个内存在java堆中的DirectByteBuffer对象作为这块内存的引用进行操作.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"垃圾收集\"><a href=\"#垃圾收集\" class=\"headerlink\" title=\"垃圾收集\"></a>垃圾收集</h2><h3 id=\"判断一个对象是否可被回收\"><a href=\"#判断一个对象是否可被回收\" class=\"headerlink\" title=\"判断一个对象是否可被回收\"></a>判断一个对象是否可被回收</h3><h4 id=\"引用计数算法\"><a href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"></a>引用计数算法</h4><p>为对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数为 0 的对象可被回收。</p>\n<p>在两个对象出现循环引用的情况下，此时引用计数器永远不为 0，导致无法对它们进行回收。正是因为循环引用的存在，因此 Java 虚拟机不使用引用计数算法。</p>\n<h4 id=\"可达性分析算\"><a href=\"#可达性分析算\" class=\"headerlink\" title=\"可达性分析算\"></a>可达性分析算</h4><p>以 GC Roots 为起始点进行搜索，可达的对象都是存活的，不可达的对象可被回收。</p>\n<p>Java 虚拟机使用该算法来判断对象是否可被回收，GC Roots 一般包含以下内容：</p>\n<ul>\n<li>虚拟机栈中局部变量表中引用的对象</li>\n<li>本地方法栈中 JNI 中引用的对象</li>\n<li>方法区中类静态属性引用的对象</li>\n<li>方法区中的常量引用的对象</li>\n</ul>\n<h4 id=\"方法区的回收\"><a href=\"#方法区的回收\" class=\"headerlink\" title=\"方法区的回收\"></a>方法区的回收</h4><p>因为方法区主要存放永久代对象，而永久代对象的回收率比新生代低很多，所以在方法区上进行回收性价比不高。</p>\n<p>主要是对常量池的回收和对类的卸载。</p>\n<p>为了避免内存溢出，在大量使用反射和动态代理的场景都需要虚拟机具备类卸载功能。</p>\n<p>类的卸载条件很多，需要满足以下三个条件，并且满足了条件也不一定会被卸载：</p>\n<ul>\n<li>该类所有的实例都已经被回收，此时堆中不存在该类的任何实例。</li>\n<li>加载该类的 ClassLoader 已经被回收。</li>\n<li>该类对应的 Class 对象没有在任何地方被引用，也就无法在任何地方通过反射访问该类方法。</li>\n</ul>\n<h4 id=\"finalize\"><a href=\"#finalize\" class=\"headerlink\" title=\"finalize()\"></a>finalize()</h4><p>当一个对象可被回收时，如果需要执行该对象的 finalize() 方法，那么就有可能在该方法中让对象重新被引用，从而实现自救。自救只能进行一次，如果回收的对象之前调用了 finalize() 方法自救，后面回收时不会再调用该方法。</p>\n<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><p>无论是通过引用计数算法判断对象的引用数量，还是通过可达性分析算法判断对象是否可达，判定对象是否可被回收都与引用有关。</p>\n<p>Java 提供了四种强度不同的引用类型。</p>\n<h4 id=\"强引用\"><a href=\"#强引用\" class=\"headerlink\" title=\"强引用\"></a>强引用</h4><p>被强引用关联的对象不会被回收。</p>\n<p>使用 new 一个新对象的方式来创建强引用。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">Object obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"软引用\"><a href=\"#软引用\" class=\"headerlink\" title=\"软引用\"></a>软引用</h4><p>被软引用关联的对象只有在内存不够的情况下才会被回收。</p>\n<p>使用 SoftReference 类来创建软引用。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">Object obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSoftReference<span class=\"token operator\">&lt;</span>Object<span class=\"token operator\">></span> sf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SoftReference</span><span class=\"token operator\">&lt;</span>Object<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 使对象只被软引用关联</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"弱引用\"><a href=\"#弱引用\" class=\"headerlink\" title=\"弱引用\"></a>弱引用</h4><p>被弱引用关联的对象一定会被回收，也就是说它只能存活到下一次垃圾回收发生之前。</p>\n<p>使用 WeakReference 类来创建弱引用。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">Object obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nWeakReference<span class=\"token operator\">&lt;</span>Object<span class=\"token operator\">></span> wf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakReference</span><span class=\"token operator\">&lt;</span>Object<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"虚引用\"><a href=\"#虚引用\" class=\"headerlink\" title=\"虚引用\"></a>虚引用</h4><p>又称为幽灵引用或者幻影引用，一个对象是否有虚引用的存在，不会对其生存时间造成影响，也无法通过虚引用得到一个对象。</p>\n<p>为一个对象设置虚引用的唯一目的是能在这个对象被回收时收到一个系统通知。</p>\n<p>使用 PhantomReference 来创建虚引用。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">Object obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nPhantomReference<span class=\"token operator\">&lt;</span>Object<span class=\"token operator\">></span> pf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PhantomReference</span><span class=\"token operator\">&lt;</span>Object<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobj <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"垃圾收集算法\"><a href=\"#垃圾收集算法\" class=\"headerlink\" title=\"垃圾收集算法\"></a>垃圾收集算法</h3><h4 id=\"1-标记-清除\"><a href=\"#1-标记-清除\" class=\"headerlink\" title=\"1. 标记 - 清除\"></a>1. 标记 - 清除</h4><p>顾名思义，标记-清除算法分为两个阶段，标记(mark)和清除(sweep).</p>\n<p>在标记阶段，collector从mutator根对象开始进行遍历，对从mutator根对象可以访问到的对象都打上一个标识，一般是在对象的header中，将其记录为可达对象。</p>\n<p>而在清除阶段，collector对堆内存(heap memory)从头到尾进行线性的遍历，如果发现某个对象没有标记为可达对象-通过读取对象的header信息，则就将其回收。</p>\n<p><img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/2.png\" alt></p>\n<p>从上图我们可以看到，在Mark阶段，从根对象1可以访问到B对象，从B对象又可以访问到E对象，所以B,E对象都是可达的。同理，F,G,J,K也都是可达对象。到了Sweep阶段，所有非可达对象都会被collector回收。同时，Collector在进行标记和清除阶段时会将整个应用程序暂停(mutator)，等待标记清除结束后才会恢复应用程序的运行。</p>\n<ul>\n<li><p><strong>优点</strong>：</p>\n<p>实现简单，不需要进行对象进行移动。</p>\n</li>\n<li><p><strong>缺点</strong>：</p>\n<p>标记、清除过程效率低，产生大量不连续的内存碎片，提高了垃圾回收的频率。</p>\n</li>\n</ul>\n<h4 id=\"2-标记-整理\"><a href=\"#2-标记-整理\" class=\"headerlink\" title=\"2. 标记 - 整理\"></a>2. 标记 - 整理</h4><p>其中标记阶段跟标记-清除算法中的标记阶段是一样的，而对于整理阶段，它的工作就是移动所有的可达对象到堆内存的同一个区域中，使他们紧凑的排列在一起，从而将所有 <strong>非可达对象释放出来的空闲内存</strong> 都集中在一起，通过这样的方式来达到减少内存碎片的目的。</p>\n<p><img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/3.png\" alt=\"3\"></p>\n<ul>\n<li><p><strong>优点</strong>：</p>\n<p>解决了标记-清理算法存在的内存碎片问题。</p>\n</li>\n<li><p><strong>缺点</strong>：</p>\n<p>仍需要进行局部对象移动，一定程度上降低了效率。</p>\n</li>\n</ul>\n<h4 id=\"3-复制\"><a href=\"#3-复制\" class=\"headerlink\" title=\"3. 复制\"></a>3. 复制</h4><p>这种收集算法解决了标记清除算法存在的效率问题。它将内存区域划分成相同的两个<strong>内存块</strong>。每次仅使用一半的空间，<code>JVM</code>生成的新对象放在一半空间中。当一半空间用完时进行<code>GC</code>，把可到达对象复制到另一半空间，然后把使用过的内存空间一次清理掉。</p>\n<ul>\n<li><p><strong>优点</strong>：</p>\n<p>按顺序分配内存即可，实现简单、运行高效，不用考虑内存碎片。</p>\n</li>\n<li><p><strong>缺点</strong>：</p>\n<p>可用的内存大小缩小为原来的一半，对象存活率高时会频繁进行复制。</p>\n</li>\n</ul>\n<h4 id=\"4-分代收集\"><a href=\"#4-分代收集\" class=\"headerlink\" title=\"4. 分代收集\"></a>4. 分代收集</h4><p>现在的商业虚拟机采用分代收集算法，它根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。</p>\n<p>一般将堆分为新生代和老年代。</p>\n<ul>\n<li>对于<strong>新生代</strong>，每次<code>GC</code>时都有<strong>大量</strong>的对象死亡，只有<strong>少量</strong>对象存活。考虑到复制成本低，适合采用<strong>复制算法</strong>。因此有了<code>From Survivor</code>和<code>To Survivor</code>区域。</li>\n<li>对于<strong>老年代</strong>，因为对象<strong>存活率高</strong>，没有额外的内存空间对它进行担保。因而适合采用<strong>标记-清理算法</strong>和<strong>标记-整理算法</strong>进行回收。</li>\n</ul>\n<h3 id=\"垃圾收集器\"><a href=\"#垃圾收集器\" class=\"headerlink\" title=\"垃圾收集器\"></a>垃圾收集器</h3><p><img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/4.png\" alt></p>\n<p>以上是 HotSpot 虚拟机中的 7 个垃圾收集器，连线表示垃圾收集器可以配合使用。</p>\n<ul>\n<li>单线程与多线程：单线程指的是垃圾收集器只使用一个线程，而多线程使用多个线程；</li>\n<li>串行与并行：串行指的是垃圾收集器与用户程序交替执行，这意味着在执行垃圾收集的时候需要停顿用户程序；并行指的是垃圾收集器和用户程序同时执行。除了 CMS 和 G1 之外，其它垃圾收集器都是以串行的方式执行。</li>\n</ul>\n<h4 id=\"1-Serial-收集器\"><a href=\"#1-Serial-收集器\" class=\"headerlink\" title=\"1. Serial 收集器\"></a>1. Serial 收集器</h4><p><img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/5.png\" alt></p>\n<p>Serial 翻译为串行，也就是说它以串行的方式执行。</p>\n<p>它是单线程的收集器，只会使用一个线程进行垃圾收集工作。</p>\n<p>它的优点是简单高效，在单个 CPU 环境下，由于没有线程交互的开销，因此拥有最高的单线程收集效率。</p>\n<p>它是 Client 场景下的默认新生代收集器，因为在该场景下内存一般来说不会很大。它收集一两百兆垃圾的停顿时间可以控制在一百多毫秒以内，只要不是太频繁，这点停顿时间是可以接受的。</p>\n<h4 id=\"2-ParNew-收集器\"><a href=\"#2-ParNew-收集器\" class=\"headerlink\" title=\"2. ParNew 收集器\"></a>2. ParNew 收集器</h4><p><a href=\"https://camo.githubusercontent.com/573a3abc71931daef42e0b42b1876cbe4f940cdc/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f38313533386364352d316263662d346533312d383665352d6531393864663165303133622e6a7067\" target=\"_blank\" rel=\"noopener\"><img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/7.png\" alt></a></p>\n<p>它是 Serial 收集器的多线程版本。</p>\n<p>它是 Server 场景下默认的新生代收集器，除了性能原因外，主要是因为除了 Serial 收集器，只有它能与 CMS 收集器配合使用。</p>\n<h4 id=\"3-Parallel-Scavenge-收集器\"><a href=\"#3-Parallel-Scavenge-收集器\" class=\"headerlink\" title=\"3. Parallel Scavenge 收集器\"></a>3. Parallel Scavenge 收集器</h4><p>与 ParNew 一样是多线程收集器。</p>\n<p>其它收集器目标是尽可能缩短垃圾收集时用户线程的停顿时间，而它的目标是达到一个可控制的吞吐量，因此它被称为“吞吐量优先”收集器。这里的吞吐量指 CPU 用于运行用户程序的时间占总时间的比值。</p>\n<p>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验。而高吞吐量则可以高效率地利用 CPU 时间，尽快完成程序的运算任务，适合在后台运算而不需要太多交互的任务。</p>\n<p>缩短停顿时间是以牺牲吞吐量和新生代空间来换取的：新生代空间变小，垃圾回收变得频繁，导致吞吐量下降。</p>\n<p>可以通过一个开关参数打开 GC 自适应的调节策略（GC Ergonomics），就不需要手工指定新生代的大小（-Xmn）、Eden 和 Survivor 区的比例、晋升老年代对象年龄等细节参数了。虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量。</p>\n<h4 id=\"4-Serial-Old-收集器\"><a href=\"#4-Serial-Old-收集器\" class=\"headerlink\" title=\"4. Serial Old 收集器\"></a>4. Serial Old 收集器</h4><p><img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/13.png\" alt=\"13\"></p>\n<p>是 Serial 收集器的老年代版本，也是给 Client 场景下的虚拟机使用。如果用在 Server 场景下，它有两大用途：</p>\n<ul>\n<li>在 JDK 1.5 以及之前版本（Parallel Old 诞生以前）中与 Parallel Scavenge 收集器搭配使用。</li>\n<li>作为 CMS 收集器的后备预案，在并发收集发生 Concurrent Mode Failure 时使用。</li>\n</ul>\n<h4 id=\"5-Parallel-Old-收集器\"><a href=\"#5-Parallel-Old-收集器\" class=\"headerlink\" title=\"5. Parallel Old 收集器\"></a>5. Parallel Old 收集器<img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/8.png\" alt></h4><p>是 Parallel Scavenge 收集器的老年代版本。</p>\n<p>在注重吞吐量以及 CPU 资源敏感的场合，都可以优先考虑 Parallel Scavenge 加 Parallel Old 收集器。</p>\n<h4 id=\"6-CMS-收集器\"><a href=\"#6-CMS-收集器\" class=\"headerlink\" title=\"6. CMS 收集器\"></a>6. CMS 收集器</h4><p><img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/9.png\" alt></p>\n<p>CMS（Concurrent Mark Sweep），Mark Sweep 指的是标记 - 清除算法。</p>\n<p>分为以下四个流程：</p>\n<ul>\n<li>初始标记：仅仅只是标记一下 GC Roots 能直接关联到的对象，速度很快，需要停顿。</li>\n<li>并发标记：进行 GC Roots Tracing 的过程，它在整个回收过程中耗时最长，不需要停顿。</li>\n<li>重新标记：为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要停顿。</li>\n<li>并发清除：不需要停顿。</li>\n</ul>\n<p>在整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，不需要进行停顿。</p>\n<p>具有以下缺点：</p>\n<ul>\n<li>吞吐量低：低停顿时间是以牺牲吞吐量为代价的，导致 CPU 利用率不够高。</li>\n<li>无法处理浮动垃圾，可能出现 Concurrent Mode Failure。浮动垃圾是指并发清除阶段由于用户线程继续运行而产生的垃圾，这部分垃圾只能到下一次 GC 时才能进行回收。由于浮动垃圾的存在，因此需要预留出一部分内存，意味着 CMS 收集不能像其它收集器那样等待老年代快满的时候再回收。如果预留的内存不够存放浮动垃圾，就会出现 Concurrent Mode Failure，这时虚拟机将临时启用 Serial Old 来替代 CMS。</li>\n<li>标记 - 清除算法导致的空间碎片，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象，不得不提前触发一次 Full GC。</li>\n</ul>\n<h4 id=\"7-G1-收集器\"><a href=\"#7-G1-收集器\" class=\"headerlink\" title=\"7. G1 收集器\"></a>7. G1 收集器</h4><p>G1（Garbage-First），它是一款面向服务端应用的垃圾收集器，在多 CPU 和大内存的场景下有很好的性能。HotSpot 开发团队赋予它的使命是未来可以替换掉 CMS 收集器。</p>\n<p>堆被分为新生代和老年代，其它收集器进行收集的范围都是整个新生代或者老年代，而 G1 可以直接对新生代和老年代一起回收。<img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/10.png\" alt></p>\n<p>G1 把堆划分成多个大小相等的独立区域（Region），新生代和老年代不再物理隔离。</p>\n<p><a href=\"https://camo.githubusercontent.com/5049da1b34969b272be2bffc6c6de0206b33253c/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f39626264646565622d653933392d343166302d386538652d3262316130616137653061372e706e67\" target=\"_blank\" rel=\"noopener\"><img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/11.png\" alt></a></p>\n<p>通过引入 Region 的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。这种划分方法带来了很大的灵活性，使得可预测的停顿时间模型成为可能。通过记录每个 Region 垃圾回收时间以及回收所获得的空间（这两个值是通过过去回收的经验获得），并维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region。</p>\n<p>每个 Region 都有一个 Remembered Set，用来记录该 Region 对象的引用对象所在的 Region。通过使用 Remembered Set，在做可达性分析的时候就可以避免全堆扫描。</p>\n<p><a href=\"https://camo.githubusercontent.com/5bd72d589ead80c22547e3288a9a406241a1fb6b/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f66393965653737312d633536662d343766622d393134382d6330303336363935623566652e6a7067\" target=\"_blank\" rel=\"noopener\"><img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/12.png\" alt></a></p>\n<p>如果不计算维护 Remembered Set 的操作，G1 收集器的运作大致可划分为以下几个步骤：</p>\n<ul>\n<li>初始标记</li>\n<li>并发标记</li>\n<li>最终标记：为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程的 Remembered Set Logs 里面，最终标记阶段需要把 Remembered Set Logs 的数据合并到 Remembered Set 中。这阶段需要停顿线程，但是可并行执行。</li>\n<li>筛选回收：首先对各个 Region 中的回收价值和成本进行排序，根据用户所期望的 GC 停顿时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分 Region，时间是用户可控制的，而且停顿用户线程将大幅度提高收集效率。</li>\n</ul>\n<p>具备如下特点：</p>\n<ul>\n<li>空间整合：整体来看是基于“标记 - 整理”算法实现的收集器，从局部（两个 Region 之间）上来看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。</li>\n<li>可预测的停顿：能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在 GC 上的时间不得超过 N 毫秒。</li>\n</ul>\n<h2 id=\"内存分配与回收策略\"><a href=\"#内存分配与回收策略\" class=\"headerlink\" title=\"内存分配与回收策略\"></a>内存分配与回收策略</h2><h3 id=\"Minor-GC-和-Full-GC\"><a href=\"#Minor-GC-和-Full-GC\" class=\"headerlink\" title=\"Minor GC 和 Full GC\"></a>Minor GC 和 Full GC</h3><ul>\n<li>Minor GC：回收新生代，因为新生代对象存活时间很短，因此 Minor GC 会频繁执行，执行的速度一般也会比较快。</li>\n<li>Full GC：回收老年代和新生代，老年代对象其存活时间长，因此 Full GC 很少执行，执行速度会比 Minor GC 慢很多。</li>\n</ul>\n<h3 id=\"内存分配策略\"><a href=\"#内存分配策略\" class=\"headerlink\" title=\"内存分配策略\"></a>内存分配策略</h3><h4 id=\"1-对象优先在-Eden-分配\"><a href=\"#1-对象优先在-Eden-分配\" class=\"headerlink\" title=\"1. 对象优先在 Eden 分配\"></a>1. 对象优先在 Eden 分配</h4><p>大多数情况下，对象在新生代 Eden 上分配，当 Eden 空间不够时，发起 Minor GC。</p>\n<h4 id=\"2-大对象直接进入老年代\"><a href=\"#2-大对象直接进入老年代\" class=\"headerlink\" title=\"2. 大对象直接进入老年代\"></a>2. 大对象直接进入老年代</h4><p>大对象是指需要连续内存空间的对象，最典型的大对象是那种很长的字符串以及数组。</p>\n<p>经常出现大对象会提前触发垃圾收集以获取足够的连续空间分配给大对象。</p>\n<p>-XX:PretenureSizeThreshold，大于此值的对象直接在老年代分配，避免在 Eden 和 Survivor 之间的大量内存复制。</p>\n<h4 id=\"3-长期存活的对象进入老年代\"><a href=\"#3-长期存活的对象进入老年代\" class=\"headerlink\" title=\"3. 长期存活的对象进入老年代\"></a>3. 长期存活的对象进入老年代</h4><p>为对象定义年龄计数器，对象在 Eden 出生并经过 Minor GC 依然存活，将移动到 Survivor 中，年龄就增加 1 岁，增加到一定年龄则移动到老年代中。</p>\n<p>-XX:MaxTenuringThreshold 用来定义年龄的阈值。</p>\n<h4 id=\"4-动态对象年龄判定\"><a href=\"#4-动态对象年龄判定\" class=\"headerlink\" title=\"4. 动态对象年龄判定\"></a>4. 动态对象年龄判定</h4><p>虚拟机并不是永远要求对象的年龄必须达到 MaxTenuringThreshold 才能晋升老年代，如果在 Survivor 中相同年龄所有对象大小的总和大于 Survivor 空间的一半，则年龄大于或等于该年龄的对象可以直接进入老年代，无需等到 MaxTenuringThreshold 中要求的年龄。</p>\n<h4 id=\"5-空间分配担保\"><a href=\"#5-空间分配担保\" class=\"headerlink\" title=\"5. 空间分配担保\"></a>5. 空间分配担保</h4><p>在发生 Minor GC 之前，虚拟机先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果条件成立的话，那么 Minor GC 可以确认是安全的。</p>\n<p>如果不成立的话虚拟机会查看 HandlePromotionFailure 的值是否允许担保失败，如果允许那么就会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次 Minor GC；如果小于，或者 HandlePromotionFailure 的值不允许冒险，那么就要进行一次 Full GC。</p>\n<h3 id=\"Full-GC-的触发条件\"><a href=\"#Full-GC-的触发条件\" class=\"headerlink\" title=\"Full GC 的触发条件\"></a>Full GC 的触发条件</h3><p>对于 Minor GC，其触发条件非常简单，当 Eden 空间满时，就将触发一次 Minor GC。而 Full GC 则相对复杂，有以下条件：</p>\n<h4 id=\"1-调用-System-gc\"><a href=\"#1-调用-System-gc\" class=\"headerlink\" title=\"1. 调用 System.gc()\"></a>1. 调用 System.gc()</h4><p>只是建议虚拟机执行 Full GC，但是虚拟机不一定真正去执行。不建议使用这种方式，而是让虚拟机管理内存。</p>\n<h4 id=\"2-老年代空间不足\"><a href=\"#2-老年代空间不足\" class=\"headerlink\" title=\"2. 老年代空间不足\"></a>2. 老年代空间不足</h4><p>老年代空间不足的常见场景为前文所讲的大对象直接进入老年代、长期存活的对象进入老年代等。</p>\n<p>为了避免以上原因引起的 Full GC，应当尽量不要创建过大的对象以及数组。除此之外，可以通过 -Xmn 虚拟机参数调大新生代的大小，让对象尽量在新生代被回收掉，不进入老年代。还可以通过 -XX:MaxTenuringThreshold 调大对象进入老年代的年龄，让对象在新生代多存活一段时间。</p>\n<h4 id=\"3-空间分配担保失败\"><a href=\"#3-空间分配担保失败\" class=\"headerlink\" title=\"3. 空间分配担保失败\"></a>3. 空间分配担保失败</h4><p>使用复制算法的 Minor GC 需要老年代的内存空间作担保，如果担保失败会执行一次 Full GC。具体内容请参考上面的第 5 小节。</p>\n<h4 id=\"4-JDK-1-7-及以前的永久代空间不足\"><a href=\"#4-JDK-1-7-及以前的永久代空间不足\" class=\"headerlink\" title=\"4. JDK 1.7 及以前的永久代空间不足\"></a>4. JDK 1.7 及以前的永久代空间不足</h4><p>在 JDK 1.7 及以前，HotSpot 虚拟机中的方法区是用永久代实现的，永久代中存放的为一些 Class 的信息、常量、静态变量等数据。</p>\n<p>当系统中要加载的类、反射的类和调用的方法较多时，永久代可能会被占满，在未配置为采用 CMS GC 的情况下也会执行 Full GC。如果经过 Full GC 仍然回收不了，那么虚拟机会抛出 java.lang.OutOfMemoryError。</p>\n<p>为避免以上原因引起的 Full GC，可采用的方法为增大永久代空间或转为使用 CMS GC。</p>\n<h4 id=\"5-Concurrent-Mode-Failure\"><a href=\"#5-Concurrent-Mode-Failure\" class=\"headerlink\" title=\"5. Concurrent Mode Failure\"></a>5. Concurrent Mode Failure</h4><p>执行 CMS GC 的过程中同时有对象要放入老年代，而此时老年代空间不足（可能是 GC 过程中浮动垃圾过多导致暂时性的空间不足），便会报 Concurrent Mode Failure 错误，并触发 Full GC。</p>\n<h2 id=\"类加载机制概念\"><a href=\"#类加载机制概念\" class=\"headerlink\" title=\"类加载机制概念\"></a>类加载机制概念</h2><ul>\n<li>Java虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的加载机制。*Class文件由类装载器装载后，在JVM中将形成一份描述Class结构的元信息对象，通过该元信息对象可以获知Class的结构信息：如构造函数，属性和方法等，Java允许用户借由这个Class相关的元信息对象间接调用Class对象的功能,这里就是我们经常能见到的Class类。</li>\n</ul>\n<h3 id=\"类加载过程\"><a href=\"#类加载过程\" class=\"headerlink\" title=\"类加载过程\"></a>类加载过程</h3><p><img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/6.png\" alt></p>\n<p>工作机制</p>\n<p>类装载器就是寻找类的字节码文件，并构造出类在JVM内部表示的对象组件。在Java中，类装载器把一个类装入JVM中，要经过以下步骤：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">  (1) 装载：查找和导入Class文件；\n\n  (2) 链接：把类的二进制数据合并到JRE中；\n\n     (a)校验：检查载入Class文件数据的正确性；\n\n     (b)准备：给类的静态变量分配存储空间；\n\n     (c)解析：将符号引用转成直接引用；\n\n  (3) 初始化：对类的静态变量，静态代码块执行初始化操作<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Java程序可以动态扩展是由运行期动态加载和动态链接实现的；比如：如果编写一个使用接口的应用程序，可以等到运行时再指定其实际的实现(多态)，解析过程有时候还可以在初始化之后执行；比如：动态绑定(多态)如上图所示，加载、验证、准备、初始化和卸载这五个阶段的顺序是确定的，类的加载过程必须按照这个顺序来按部就班地开始，而解析阶段则不一定，它在某些情况下可以在初始化阶段后再开始。类的生命周期的每一个阶段通常都是互相交叉混合式进行的，通常会在一个阶段执行的过程中调用或激活另外一个阶段。</p>\n<h4 id=\"装载-加载\"><a href=\"#装载-加载\" class=\"headerlink\" title=\"装载(加载)\"></a>装载(加载)</h4><p>类的装载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的<strong>方法区</strong>内，然后在堆区创建一个java.lang.Class对象，用来封装类在方法区内的数据结构。类的加载的最终产品是位于堆区中的Class对象，Class对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口。</p>\n<p>类加载器并不需要等到某个类被“首次主动使用”时再加载它，JVM规范允许类加载器在预料某个类将要被使用时就预先加载它，如果在预先加载的过程中遇到了.class文件缺失或存在错误，类加载器必须在程序首次主动使用该类时才报告错误（LinkageError错误）如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误。</p>\n<p>加载.class文件的方式有:</p>\n<p>1). 从本地系统中直接加载2). 通过网络下载.class文件3). 从zip，jar等归档文件中加载.class文件4). 从专有数据库中提取.class文件5). 将Java源文件动态编译为.class文件</p>\n<p>在了解了什么是类的加载后，回头来再看jvm进行类加载阶段都做了什么。虚拟机需要完成以下三件事情：</p>\n<p>1).通过一个类的全限定名称来获取定义此类的二进制字节流。</p>\n<p>2).将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</p>\n<p>3).在java堆中生成一个代表这个类的java.lang.Class对象，作为方法区这些数据的访问入口。</p>\n<p>相对于类加载过程的其他阶段，加载阶段是开发期相对来说可控性比较强，该阶段既可以使用系统提供的类加载器完成，也可以由用户自定义的类加载器来完成，开发人员可以通过定义自己的类加载器去控制字节流的获取方式。关于这个过程的更多细节，我会在下一节细说，类的加载。加载阶段完成后，虚拟机外部的 二进制字节流就按照虚拟机所需的格式存储在方法区之中，而且在Java堆中也创建一个java.lang.Class类的对象，这样便可以通过该对象访问方法区中的这些数据。</p>\n<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a><strong>验证</strong></h4><p>验证的目的是为了确保Class文件中的字节流包含的信息符合当前虚拟机的要求，而且不会危害虚拟机自身的安全。不同的虚拟机对类验证的实现可能会有所不同，但大致都会完成以下四个阶段的验证：文件格式的验证、元数据的验证、字节码验证和符号引用验证。</p>\n<p>1）文件格式的验证：验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理，该验证的主要目的是保证输入的字节流能正确地解析并存储于方法区之内。经过该阶段的验证后，字节流才会进入内存的方法区中进行存储，后面的三个验证都是基于方法区的存储结构进行的。</p>\n<p>2）元数据验证：对类的元数据信息进行语义校验（其实就是对类中的各数据类型进行语法校验），保证不存在不符合Java语法规范的元数据信息。</p>\n<p>3）字节码验证：该阶段验证的主要工作是进行数据流和控制流分析，对类的方法体进行校验分析，以保证被校验的类的方法在运行时不会做出危害虚拟机安全的行为。</p>\n<p>4）符号引用验证：这是最后一个阶段的验证，它发生在虚拟机将符号引用转化为直接引用的时候（解析阶段中发生该转化，后面会有讲解），主要是对类自身以外的信息（常量池中的各种符号引用）进行匹配性的校验。</p>\n<h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中进行分配。注：</p>\n<p>1）这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。</p>\n<p>2）这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。</p>\n<h4 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h4><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。</p>\n<p>符号引用（Symbolic Reference）：符号引用以一组符号来描述所引用的目标，符号引用可以是任何形式的字面量，符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经在内存中。</p>\n<p>直接引用（Direct Reference）：直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是与虚拟机实现的内存布局相关的，同一个符号引用在不同的虚拟机实例上翻译出来的直接引用一般都不相同，如果有了直接引用，那引用的目标必定已经在内存中存在。</p>\n<p>1)、类或接口的解析：判断所要转化成的直接引用是对数组类型，还是普通的对象类型的引用，从而进行不同的解析。</p>\n<p>2)、字段解析：对字段进行解析时，会先在本类中查找是否包含有简单名称和字段描述符都与目标相匹配的字段，如果有，则查找结束；如果没有，则会按照继承关系从上往下递归搜索该类所实现的各个接口和它们的父接口，还没有，则按照继承关系从上往下递归搜索其父类，直至查找结束。</p>\n<p>3)、类方法解析：对类方法的解析与对字段解析的搜索步骤差不多，只是多了判断该方法所处的是类还是接口的步骤，而且对类方法的匹配搜索，是先搜索父类，再搜索接口。</p>\n<p>4)、接口方法解析：与类方法解析步骤类似，只是接口不会有父类，因此，只递归向上搜索父接口就行了。</p>\n<p><strong>5. 初始化</strong></p>\n<p>类初始化阶段是类加载过程的最后一步，前面的类加载过程中，除了加载（Loading）阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中定义的Java程序代码。初始化，为类的静态变量赋予正确的初始值，JVM负责对类进行初始化，主要对类变量进行初始化。在Java中对类变量进行初始值设定有两种方式：</p>\n<p>①声明类变量时指定初始值</p>\n<p>②使用静态代码块为类变量指定初始值</p>\n<p>JVM初始化步骤</p>\n<p>1)、假如这个类还没有被加载和连接，则程序先加载并连接该类</p>\n<p>2)、假如该类的直接父类还没有被初始化，则先初始化其直接父类</p>\n<p>3)、假如类中有初始化语句，则系统依次执行这些初始化语句</p>\n<p>初始化阶段时执行类构造器方法()的过程。</p>\n<p>1）类构造器方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static{}块）中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序所决定。</p>\n<p>2）类构造器方法与类的构造函数不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的类构造器方法执行之前，父类的类构造器方法已经执行完毕，因此在虚拟机中第一个执行的类构造器方法的类一定是java.lang.Object。</p>\n<p>3）由于父类的类构造器方法方法先执行，也就意味着父类中定义的静态语句块要优先于子类的变量赋值操作。</p>\n<p>4）类构造器方法对于类或者接口来说并不是必需的，如果一个类中没有静态语句块也没有对变量的赋值操作，那么编译器可以不为这个类生成类构造器方法。</p>\n<p>5）接口中可能会有变量赋值操作，因此接口也会生成类构造器方法。但是接口与类不同，执行接口的类构造器方法不需要先执行父接口的类构造器方法。只有当父接口中定义的变量被使用时，父接口才会被初始化。另外，接口的实现类在初始化时也不会执行接口的类构造器方法。</p>\n<p>6）虚拟机会保证一个类的类构造器方法在多线程环境中被正确地加锁和同步。如果有多个线程去同时初始化一个类，那么只会有一个线程去执行这个类的类构造器方法，其它线程都需要阻塞等待，直到活动线程执行类构造器方法完毕。如果在一个类的类构造器方法中有耗时很长的操作，那么就可能造成多个进程阻塞。</p>\n<p><strong>6.结束生命周期</strong></p>\n<p>在以下情况的时候，Java虚拟机会结束生命周期1). 执行了System.exit()方法2). 程序正常执行结束3). 程序在执行过程中遇到了异常或错误而异常终止4). 由于操作系统出现错误而导致Java虚拟机进程终止</p>\n<h3 id=\"何时开始类的初始化\"><a href=\"#何时开始类的初始化\" class=\"headerlink\" title=\"何时开始类的初始化\"></a>何时开始类的初始化</h3><p>什么情况下需要开始类加载过程的第一个阶段:”加载”。虚拟机规范中并没强行约束，这点可以交给虚拟机的的具体实现自由把握，但是对于初始化阶段虚拟机规范是严格规定了如下几种情况，如果类未初始化会对类进行初始化。</p>\n<p>1、创建类的实例</p>\n<p>2、访问类的静态变量(除常量【被final修辞的静态变量】原因:常量一种特殊的变量，因为编译器把他们当作值(value)而不是域(field)来对待。如果你的代码中用到了常变量(constant variable)，编译器并不会生成字节码来从对象中载入域的值，而是直接把这个值插入到字节码中。这是一种很有用的优化，但是如果你需要改变final域的值那么每一块用到那个域的代码都需要重新编译。</p>\n<p>3、访问类的静态方法</p>\n<p>4、反射如(Class.forName(“my.xyz.Test”))</p>\n<p>5、当初始化一个类时，发现其父类还未初始化，则先出发父类的初始化</p>\n<p>6、虚拟机启动时，定义了main()方法的那个类先初始化</p>\n<p>以上情况称为称对一个类进行“主动引用”，除此种情况之外，均不会触发类的初始化，称为“被动引用”接口的加载过程与类的加载过程稍有不同。接口中不能使用static{}块。当一个接口在初始化时，并不要求其父接口全部都完成了初始化，只有真正在使用到父接口时（例如引用接口中定义的常量）才会初始化。</p>\n<h4 id=\"被动引用例子\"><a href=\"#被动引用例子\" class=\"headerlink\" title=\"被动引用例子\"></a><strong>被动引用例子</strong></h4><p>1、子类调用父类的静态变量，子类不会被初始化。只有父类被初始化。。对于静态字段，只有直接定义这个字段的类才会被初始化.</p>\n<p>2、通过数组定义来引用类，不会触发类的初始化</p>\n<p>3、 访问类的常量，不会初始化类</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>  \n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"superclass init\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>  \n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SubClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">SuperClass</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>  \n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"subclass init\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  \n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>SubClass<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">// 被动应用1  </span>\n        SubClass<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> sca <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SubClass</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">// 被动引用2  </span>\n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>程序运行输出    superclass init123从上面的输入结果证明了被动引用1与被动引用2</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ConstClass</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>  \n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ConstClass init\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> String HELLOWORLD <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>  \n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ConstClass<span class=\"token punctuation\">.</span>HELLOWORLD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">// 调用类常量  </span>\n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>程序输出结果hello world从上面的输出结果证明了被动引用3</p>\n<p>** 题目分析**</p>\n<p>上面很详细的介绍了类的加载时机和类的加载过程，通过上面的理论来分析本文开门见上的题目</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SingleTon</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> SingleTon singleTon <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingleTon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count1<span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  \n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">SingleTon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        count1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>  \n        count2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> SingleTon <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">return</span> singleTon<span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  \n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        SingleTon singleTon <span class=\"token operator\">=</span> SingleTon<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count1=\"</span> <span class=\"token operator\">+</span> singleTon<span class=\"token punctuation\">.</span>count1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count2=\"</span> <span class=\"token operator\">+</span> singleTon<span class=\"token punctuation\">.</span>count2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>分析:</p>\n<p>1:SingleTon singleTon = SingleTon.getInstance();调用了类的SingleTon调用了类的静态方法，触发类的初始化</p>\n<p>2:类加载的时候在准备过程中为类的静态变量分配内存并初始化默认值 singleton=null count1=0,count2=0</p>\n<p>3:类初始化化，为类的静态变量赋值和执行静态代码快。singleton赋值为new SingleTon()调用类的构造方法</p>\n<p>4:调用类的构造方法后count=1;count2=1</p>\n<p>5:继续为count1与count2赋值,此时count1没有赋值操作,所有count1为1,但是count2执行赋值操作就变为0</p>\n<h3 id=\"类初始化顺序\"><a href=\"#类初始化顺序\" class=\"headerlink\" title=\"类初始化顺序\"></a>类初始化顺序</h3><p>现在我们知道什么时候触发类的初始化了，他精确地写在Java语言规范中。但了解清楚 域（fields，静态的还是非静态的）、块（block静态的还是非静态的）、不同类（子类和超类）和不同的接口（子接口，实现类和超接口）的初始化顺序也很重要类。事实上很多核心Java面试题和SCJP问题都是基于这些概念，下面是类初始化的一些规则：</p>\n<pre><code>1.类从顶至底的顺序初始化，所以声明在顶部的字段的早于底部的字段初始化\n2.超类早于子类和衍生类的初始化\n3.如果类的初始化是由于访问静态域而触发，那么只有声明静态域的类才被初始化，而不会触发超类的初始化或者子类的4.初始化即使静态域被子类或子接口或者它的实现类所引用。\n5.接口初始化不会导致父接口的初始化。\n6.静态域的初始化是在类的静态初始化期间，非静态域的初始化时在类的实例创建期间。这意味这静态域初始化在非静态域之前。\n7.非静态域通过构造器初始化，子类在做任何初始化之前构造器会隐含地调用父类的构造器，他保证了非静态或实例变量（父类）初始化早于子类</code></pre><h3 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h3><p>JVM设计者把类加载阶段中的“通过’类全名’来获取定义此类的二进制字节流”这个动作放到Java虚拟机外部去实现，以便让应用程序自己决定如何去获取所需要的类。实现这个动作的代码模块称为“类加载器”。</p>\n<h4 id=\"类与类加载器\"><a href=\"#类与类加载器\" class=\"headerlink\" title=\"类与类加载器\"></a><strong>类与类加载器</strong></h4><p>对于任何一个类，都需要由加载它的类加载器和这个类来确立其在JVM中的唯一性。也就是说，两个类来源于同一个Class文件，并且被同一个类加载器加载，这两个类才相等。</p>\n<h4 id=\"双亲委派模型\"><a href=\"#双亲委派模型\" class=\"headerlink\" title=\"双亲委派模型\"></a><strong>双亲委派模型</strong></h4><p>从虚拟机的角度来说，只存在两种不同的类加载器：一种是启动类加载器（Bootstrap ClassLoader），该类加载器使用C++语言实现，属于虚拟机自身的一部分。另外一种就是所有其它的类加载器，这些类加载器是由Java语言实现，独立于JVM外部，并且全部继承自抽象类java.lang.ClassLoader。</p>\n<p>从Java开发人员的角度来看，大部分Java程序一般会使用到以下三种系统提供的类加载器：</p>\n<p>1)启动类加载器（Bootstrap ClassLoader）：负责加载JAVA_HOME\\lib目录中并且能被虚拟机识别的类库到JVM内存中，如果名称不符合的类库即使放在lib目录中也不会被加载。该类加载器无法被Java程序直接引用。</p>\n<p>2)扩展类加载器（Extension ClassLoader）：该加载器主要是负责加载JAVA_HOME\\lib\\，该加载器可以被开发者直接使用。</p>\n<p>3)应用程序类加载器（Application ClassLoader）：该类加载器也称为系统类加载器，它负责加载用户类路径（Classpath）上所指定的类库，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</p>\n<p>我们的应用程序都是由这三类加载器互相配合进行加载的，我们也可以加入自己定义的类加载器。这些类加载器之间的关系如下图所示：</p>\n<p>如上图所示的类加载器之间的这种层次关系，就称为类加载器的双亲委派模型（Parent Delegation Model）。该模型要求除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。子类加载器和父类加载器不是以继承（Inheritance）的关系来实现，而是通过组合（Composition）关系来复用父加载器的代码。</p>\n<p>双亲委派模型的工作过程为：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的加载器都是如此，因此所有的类加载请求都会传给顶层的启动类加载器，只有当父加载器反馈自己无法完成该加载请求（该加载器的搜索范围中没有找到对应的类）时，子加载器才会尝试自己去加载。</p>\n<p>使用这种模型来组织类加载器之间的关系的好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系。例如java.lang.Object类，无论哪个类加载器去加载该类，最终都是由启动类加载器进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。否则的话，如果不使用该模型的话，如果用户自定义一个java.lang.Object类且存放在classpath中，那么系统中将会出现多个Object类，应用程序也会变得很混乱。如果我们自定义一个rt.jar中已有类的同名Java类，会发现JVM可以正常编译，但该类永远无法被加载运行。在rt.jar包中的java.lang.ClassLoader类中，我们可以查看类加载实现过程的代码，具体源码如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">synchronized</span> Class <span class=\"token class-name\">loadClass</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> resolve<span class=\"token punctuation\">)</span>  \n        <span class=\"token keyword\">throws</span> ClassNotFoundException <span class=\"token punctuation\">{</span>  \n    <span class=\"token comment\" spellcheck=\"true\">// 首先检查该name指定的class是否有被加载  </span>\n    Class <span class=\"token class-name\">c</span> <span class=\"token operator\">=</span> <span class=\"token function\">findLoadedClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                <span class=\"token comment\" spellcheck=\"true\">// 如果parent不为null，则调用parent的loadClass进行加载  </span>\n                c <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  \n                <span class=\"token comment\" spellcheck=\"true\">// parent为null，则调用BootstrapClassLoader进行加载  </span>\n                c <span class=\"token operator\">=</span> <span class=\"token function\">findBootstrapClass0</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span>  \n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token comment\" spellcheck=\"true\">// 如果仍然无法加载成功，则调用自身的findClass进行加载  </span>\n            c <span class=\"token operator\">=</span> <span class=\"token function\">findClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token function\">resolveClass</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过上面代码可以看出，双亲委派模型是通过loadClass()方法来实现的，根据代码以及代码中的注释可以很清楚地了解整个过程其实非常简单：先检查是否已经被加载过，如果没有则调用父加载器的loadClass()方法，如果父加载器为空则默认使用启动类加载器作为父加载器。如果父类加载器加载失败，则先抛出ClassNotFoundException，然后再调用自己的findClass()方法进行加载。</p>\n<h4 id=\"自定义类加载器\"><a href=\"#自定义类加载器\" class=\"headerlink\" title=\"自定义类加载器\"></a><strong>自定义类加载器</strong></h4><p>若要实现自定义类加载器，只需要继承java.lang.ClassLoader 类，并且重写其findClass()方法即可。java.lang.ClassLoader 类的基本职责就是根据一个指定的类的名称，找到或者生成其对应的字节代码，然后从这些字节代码中定义出一个 Java 类，即 java.lang.Class 类的一个实例。除此之外，ClassLoader 还负责加载 Java 应用所需的资源，如图像文件和配置文件等，ClassLoader 中与加载类相关的方法如下：</p>\n<p>方法说明getParent()  返回该类加载器的父类加载器。</p>\n<p>loadClass(String name) 加载名称为 二进制名称为name 的类，返回的结果是 java.lang.Class 类的实例。</p>\n<p>findClass(String name) 查找名称为 name 的类，返回的结果是 java.lang.Class 类的实例。</p>\n<p>findLoadedClass(String name) 查找名称为 name 的已经被加载过的类，返回的结果是 java.lang.Class 类的实例。</p>\n<p>resolveClass(Class&lt;?&gt; c) 链接指定的 Java 类。</p>\n<p>注意：在JDK1.2之前，类加载尚未引入双亲委派模式，因此实现自定义类加载器时常常重写loadClass方法，提供双亲委派逻辑，从JDK1.2之后，双亲委派模式已经被引入到类加载体系中，自定义类加载器时不需要在自己写双亲委派的逻辑，因此不鼓励重写loadClass方法，而推荐重写findClass方法。</p>\n<p>在Java中，任意一个类都需要由加载它的类加载器和这个类本身一同确定其在java虚拟机中的唯一性，即比较两个类是否相等，只有在这两个类是由同一个类加载器加载的前提之下才有意义，否则，即使这两个类来源于同一个Class类文件，只要加载它的类加载器不相同，那么这两个类必定不相等(这里的相等包括代表类的Class对象的equals()方法、isAssignableFrom()方法、isInstance()方法和instanceof关键字的结果)。例子代码如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">/** \n     * 一、ClassLoader加载类的顺序 \n     *  1.调用 findLoadedClass(String) 来检查是否已经加载类。 \n     *  2.在父类加载器上调用 loadClass 方法。如果父类加载器为 null，则使用虚拟机的内置类加载器。 \n     *  3.调用 findClass(String) 方法查找类。 \n     * 二、实现自己的类加载器 \n     *  1.获取类的class文件的字节数组 \n     *  2.将字节数组转换为Class类的实例 \n     */</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassLoaderTest</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> InstantiationException<span class=\"token punctuation\">,</span> IllegalAccessException<span class=\"token punctuation\">,</span> ClassNotFoundException <span class=\"token punctuation\">{</span>  \n            <span class=\"token comment\" spellcheck=\"true\">//新建一个类加载器  </span>\n            MyClassLoader cl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myClassLoader\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token comment\" spellcheck=\"true\">//加载类，得到Class对象  </span>\n            Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> clazz <span class=\"token operator\">=</span> cl<span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"classloader.Animal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token comment\" spellcheck=\"true\">//得到类的实例  </span>\n            Animal animal<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Animal<span class=\"token punctuation\">)</span> clazz<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            animal<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>  \n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  \n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClassLoader</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ClassLoader</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token comment\" spellcheck=\"true\">//类加载器的名称  </span>\n        <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>  \n        <span class=\"token comment\" spellcheck=\"true\">//类存放的路径  </span>\n        <span class=\"token keyword\">private</span> String path <span class=\"token operator\">=</span> <span class=\"token string\">\"E:\\\\workspace\\\\Algorithm\\\\src\"</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token function\">MyClassLoader</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n        <span class=\"token function\">MyClassLoader</span><span class=\"token punctuation\">(</span>ClassLoader parent<span class=\"token punctuation\">,</span> String name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n        <span class=\"token comment\" spellcheck=\"true\">/** \n         * 重写findClass方法 \n         */</span>  \n        <span class=\"token annotation punctuation\">@Override</span>  \n        <span class=\"token keyword\">public</span> Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token function\">findClass</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data <span class=\"token operator\">=</span> <span class=\"token function\">loadClassData</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">loadClassData</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>  \n                name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"//\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                FileInputStream is <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\".class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                ByteArrayOutputStream baos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  \n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=</span> is<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                    baos<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                <span class=\"token punctuation\">}</span>  \n                <span class=\"token keyword\">return</span> baos<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n            <span class=\"token punctuation\">}</span>  \n            <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>  \n    <span class=\"token punctuation\">}</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>类加载器双亲委派模型是从JDK1.2以后引入的，并且只是一种推荐的模型，不是强制要求的，因此有一些没有遵循双亲委派模型的特例：(了解)</p>\n<p>(1).在JDK1.2之前，自定义类加载器都要覆盖loadClass方法去实现加载类的功能，JDK1.2引入双亲委派模型之后，loadClass方法用于委派父类加载器进行类加载，只有父类加载器无法完成类加载请求时才调用自己的findClass方法进行类加载，因此在JDK1.2之前的类加载的loadClass方法没有遵循双亲委派模型，因此在JDK1.2之后，自定义类加载器不推荐覆盖loadClass方法，而只需要覆盖findClass方法即可。</p>\n<p>(2).双亲委派模式很好地解决了各个类加载器的基础类统一问题，越基础的类由越上层的类加载器进行加载，但是这个基础类统一有一个不足，当基础类想要调用回下层的用户代码时无法委派子类加载器进行类加载。为了解决这个问题JDK引入了ThreadContext线程上下文，通过线程上下文的setContextClassLoader方法可以设置线程上下文类加载器。</p>\n<p>JavaEE只是一个规范，sun公司只给出了接口规范，具体的实现由各个厂商进行实现，因此JNDI，JDBC,JAXB等这些第三方的实现库就可以被JDK的类库所调用。线程上下文类加载器也没有遵循双亲委派模型。</p>\n<p>(3).近年来的热码替换，模块热部署等应用要求不用重启java虚拟机就可以实现代码模块的即插即用，催生了OSGi技术，在OSGi中类加载器体系被发展为网状结构。OSGi也没有完全遵循双亲委派模型。</p>\n<h4 id=\"动态加载Jar-amp-amp-ClassLoader-隔离问题\"><a href=\"#动态加载Jar-amp-amp-ClassLoader-隔离问题\" class=\"headerlink\" title=\"动态加载Jar &amp;&amp; ClassLoader 隔离问题\"></a><strong>动态加载Jar &amp;&amp; ClassLoader 隔离问题</strong></h4><p>动态加载Jar：</p>\n<p>Java 中动态加载 Jar 比较简单，如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">URL<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> urls <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file:libs/jar1.jar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  \nURLClassLoader loader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URLClassLoader</span><span class=\"token punctuation\">(</span>urls<span class=\"token punctuation\">,</span> parentLoader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>表示加载 libs 下面的 jar1.jar，其中 parentLoader 就是上面1中的 parent，可以为当前的 ClassLoader。</p>\n<p>ClassLoader 隔离问题：</p>\n<p>大家觉得一个运行程序中有没有可能同时存在两个包名和类名完全一致的类？JVM 及 Dalvik 对类唯一的识别是 ClassLoader id + PackageName + ClassName，所以一个运行程序中是有可能存在两个包名和类名完全一致的类的。并且如果这两个”类”不是由一个 ClassLoader 加载，是无法将一个类的示例强转为另外一个类的，这就是 ClassLoader 隔离。 如 Android 中碰到如下异常[java] view plain copy</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">android<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span>v4<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span>ViewPager can not be cast to android<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span>v4<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span>ViewPager  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>当碰到这种问题时可以通过 instance.getClass().getClassLoader(); 得到 ClassLoader，看 ClassLoader 是否一样。</p>\n<p>加载不同 Jar 包中公共类：</p>\n<p>现在 Host 工程包含了 common.jar, jar1.jar, jar2.jar，并且 jar1.jar 和 jar2.jar 都包含了 common.jar，我们通过 ClassLoader 将 jar1, jar2 动态加载进来，这样在 Host 中实际是存在三份 common.jar.</p>\n<p>我们怎么保证 common.jar 只有一份而不会造成上面3中提到的 ClassLoader 隔离的问题呢，其实很简单，在生成 jar1 和 jar2 时把 common.jar 去掉，只保留 host 中一份，以 host ClassLoader 为 parentClassLoader 即可。</p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h2 id=\"运行时数据区域\"><a href=\"#运行时数据区域\" class=\"headerlink\" title=\"运行时数据区域\"></a>运行时数据区域</h2><p>网上有很多描述JVM内存区的图,我觉得这张能表述内容较多</p>\n<p><img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/1.png\" alt></p>\n<h4 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h4><pre><code class=\"html\"> 程序计数器(Program Counter Register)存储当前线程执行的字节码行号，占用内存较小。字节码解释器就是通过这个计数器的值来选择下一条需要执行的字节码指令。执行Java方法时计数器指向正在执行的虚拟字节码指令的地址，执行Native方法时指向空。</code></pre>\n<h4 id=\"java虚拟机栈\"><a href=\"#java虚拟机栈\" class=\"headerlink\" title=\"java虚拟机栈\"></a>java虚拟机栈</h4><pre><code class=\"html\">java虚拟机栈（Java Virtual Machine Stack）与程序计数器一样，也是线程私有的，生命周期与线程相同。java虚拟机栈描述的是java方法执行的内存模型,每个方法执行的时候都会创建一个栈帧,用于存储局部变量表、操作数栈、动态链接、方法出口等信息。方法的调用和结束分别对应栈帧的入栈和出栈。</code></pre>\n<h4 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h4><pre><code class=\"html\">本地方法栈（Native Method Stack）与java虚拟机栈作用相似,java虚拟机栈是为java方法服务,本地方法栈是为Native方法服务,甚至有些虚拟机实现时直接将两者合而为一(如:HotSpot).</code></pre>\n<h4 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h4><pre><code class=\"html\">Java堆(Java Heap)是虚拟机管理的内存中最大的一块，该内存区域的唯一目的就是存放对象实例。java堆是垃圾收集区域管理的主要区域。从回收的角度看，可以细分为新生代和老年代；再细致一点就是Eden空间、From Survivor空间、To Survivor空间。线程共享的java堆能划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer，TLAB）。</code></pre>\n<h4 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h4><pre><code class=\"html\">方法区（Method Area）与java堆一样，是各个线程共享的内存区域，用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码数据等。这个区域的垃圾回收主要是针对常量池的回收和对类型的卸载。</code></pre>\n<h5 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h5><pre><code class=\"html\">运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件的常量池(Constant Pool Table)将在类加载后进入方法区的运行时常量池存放。除此之外，还会将翻译出来的直接引用也存放在运行时常量池。运行期间也可以将新的常量放入运行时常量池。</code></pre>\n<h4 id=\"直接内存\"><a href=\"#直接内存\" class=\"headerlink\" title=\"直接内存\"></a>直接内存</h4><pre><code class=\"html\">直接内存(Direct Memory)并不是java虚拟机运行时数据区的一部分。在JDK1.4中新加入了NIO（New Input/Output）类,引入了一种基于通道(channel)和缓冲区(Buffer)的I/O方式.他可以使用Native函数库直接分配对外内存.然后通过一个内存在java堆中的DirectByteBuffer对象作为这块内存的引用进行操作.</code></pre>\n<h2 id=\"垃圾收集\"><a href=\"#垃圾收集\" class=\"headerlink\" title=\"垃圾收集\"></a>垃圾收集</h2><h3 id=\"判断一个对象是否可被回收\"><a href=\"#判断一个对象是否可被回收\" class=\"headerlink\" title=\"判断一个对象是否可被回收\"></a>判断一个对象是否可被回收</h3><h4 id=\"引用计数算法\"><a href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"></a>引用计数算法</h4><p>为对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数为 0 的对象可被回收。</p>\n<p>在两个对象出现循环引用的情况下，此时引用计数器永远不为 0，导致无法对它们进行回收。正是因为循环引用的存在，因此 Java 虚拟机不使用引用计数算法。</p>\n<h4 id=\"可达性分析算\"><a href=\"#可达性分析算\" class=\"headerlink\" title=\"可达性分析算\"></a>可达性分析算</h4><p>以 GC Roots 为起始点进行搜索，可达的对象都是存活的，不可达的对象可被回收。</p>\n<p>Java 虚拟机使用该算法来判断对象是否可被回收，GC Roots 一般包含以下内容：</p>\n<ul>\n<li>虚拟机栈中局部变量表中引用的对象</li>\n<li>本地方法栈中 JNI 中引用的对象</li>\n<li>方法区中类静态属性引用的对象</li>\n<li>方法区中的常量引用的对象</li>\n</ul>\n<h4 id=\"方法区的回收\"><a href=\"#方法区的回收\" class=\"headerlink\" title=\"方法区的回收\"></a>方法区的回收</h4><p>因为方法区主要存放永久代对象，而永久代对象的回收率比新生代低很多，所以在方法区上进行回收性价比不高。</p>\n<p>主要是对常量池的回收和对类的卸载。</p>\n<p>为了避免内存溢出，在大量使用反射和动态代理的场景都需要虚拟机具备类卸载功能。</p>\n<p>类的卸载条件很多，需要满足以下三个条件，并且满足了条件也不一定会被卸载：</p>\n<ul>\n<li>该类所有的实例都已经被回收，此时堆中不存在该类的任何实例。</li>\n<li>加载该类的 ClassLoader 已经被回收。</li>\n<li>该类对应的 Class 对象没有在任何地方被引用，也就无法在任何地方通过反射访问该类方法。</li>\n</ul>\n<h4 id=\"finalize\"><a href=\"#finalize\" class=\"headerlink\" title=\"finalize()\"></a>finalize()</h4><p>当一个对象可被回收时，如果需要执行该对象的 finalize() 方法，那么就有可能在该方法中让对象重新被引用，从而实现自救。自救只能进行一次，如果回收的对象之前调用了 finalize() 方法自救，后面回收时不会再调用该方法。</p>\n<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><p>无论是通过引用计数算法判断对象的引用数量，还是通过可达性分析算法判断对象是否可达，判定对象是否可被回收都与引用有关。</p>\n<p>Java 提供了四种强度不同的引用类型。</p>\n<h4 id=\"强引用\"><a href=\"#强引用\" class=\"headerlink\" title=\"强引用\"></a>强引用</h4><p>被强引用关联的对象不会被回收。</p>\n<p>使用 new 一个新对象的方式来创建强引用。</p>\n<pre><code class=\"java\">Object obj = new Object();</code></pre>\n<h4 id=\"软引用\"><a href=\"#软引用\" class=\"headerlink\" title=\"软引用\"></a>软引用</h4><p>被软引用关联的对象只有在内存不够的情况下才会被回收。</p>\n<p>使用 SoftReference 类来创建软引用。</p>\n<pre><code class=\"java\">Object obj = new Object();\nSoftReference&lt;Object&gt; sf = new SoftReference&lt;Object&gt;(obj);\nobj = null;  // 使对象只被软引用关联</code></pre>\n<h4 id=\"弱引用\"><a href=\"#弱引用\" class=\"headerlink\" title=\"弱引用\"></a>弱引用</h4><p>被弱引用关联的对象一定会被回收，也就是说它只能存活到下一次垃圾回收发生之前。</p>\n<p>使用 WeakReference 类来创建弱引用。</p>\n<pre><code class=\"java\">Object obj = new Object();\nWeakReference&lt;Object&gt; wf = new WeakReference&lt;Object&gt;(obj);\nobj = null;</code></pre>\n<h4 id=\"虚引用\"><a href=\"#虚引用\" class=\"headerlink\" title=\"虚引用\"></a>虚引用</h4><p>又称为幽灵引用或者幻影引用，一个对象是否有虚引用的存在，不会对其生存时间造成影响，也无法通过虚引用得到一个对象。</p>\n<p>为一个对象设置虚引用的唯一目的是能在这个对象被回收时收到一个系统通知。</p>\n<p>使用 PhantomReference 来创建虚引用。</p>\n<pre><code class=\"java\">Object obj = new Object();\nPhantomReference&lt;Object&gt; pf = new PhantomReference&lt;Object&gt;(obj, null);\nobj = null;</code></pre>\n<h3 id=\"垃圾收集算法\"><a href=\"#垃圾收集算法\" class=\"headerlink\" title=\"垃圾收集算法\"></a>垃圾收集算法</h3><h4 id=\"1-标记-清除\"><a href=\"#1-标记-清除\" class=\"headerlink\" title=\"1. 标记 - 清除\"></a>1. 标记 - 清除</h4><p>顾名思义，标记-清除算法分为两个阶段，标记(mark)和清除(sweep).</p>\n<p>在标记阶段，collector从mutator根对象开始进行遍历，对从mutator根对象可以访问到的对象都打上一个标识，一般是在对象的header中，将其记录为可达对象。</p>\n<p>而在清除阶段，collector对堆内存(heap memory)从头到尾进行线性的遍历，如果发现某个对象没有标记为可达对象-通过读取对象的header信息，则就将其回收。</p>\n<p><img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/2.png\" alt></p>\n<p>从上图我们可以看到，在Mark阶段，从根对象1可以访问到B对象，从B对象又可以访问到E对象，所以B,E对象都是可达的。同理，F,G,J,K也都是可达对象。到了Sweep阶段，所有非可达对象都会被collector回收。同时，Collector在进行标记和清除阶段时会将整个应用程序暂停(mutator)，等待标记清除结束后才会恢复应用程序的运行。</p>\n<ul>\n<li><p><strong>优点</strong>：</p>\n<p>实现简单，不需要进行对象进行移动。</p>\n</li>\n<li><p><strong>缺点</strong>：</p>\n<p>标记、清除过程效率低，产生大量不连续的内存碎片，提高了垃圾回收的频率。</p>\n</li>\n</ul>\n<h4 id=\"2-标记-整理\"><a href=\"#2-标记-整理\" class=\"headerlink\" title=\"2. 标记 - 整理\"></a>2. 标记 - 整理</h4><p>其中标记阶段跟标记-清除算法中的标记阶段是一样的，而对于整理阶段，它的工作就是移动所有的可达对象到堆内存的同一个区域中，使他们紧凑的排列在一起，从而将所有 <strong>非可达对象释放出来的空闲内存</strong> 都集中在一起，通过这样的方式来达到减少内存碎片的目的。</p>\n<p><img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/3.png\" alt=\"3\"></p>\n<ul>\n<li><p><strong>优点</strong>：</p>\n<p>解决了标记-清理算法存在的内存碎片问题。</p>\n</li>\n<li><p><strong>缺点</strong>：</p>\n<p>仍需要进行局部对象移动，一定程度上降低了效率。</p>\n</li>\n</ul>\n<h4 id=\"3-复制\"><a href=\"#3-复制\" class=\"headerlink\" title=\"3. 复制\"></a>3. 复制</h4><p>这种收集算法解决了标记清除算法存在的效率问题。它将内存区域划分成相同的两个<strong>内存块</strong>。每次仅使用一半的空间，<code>JVM</code>生成的新对象放在一半空间中。当一半空间用完时进行<code>GC</code>，把可到达对象复制到另一半空间，然后把使用过的内存空间一次清理掉。</p>\n<ul>\n<li><p><strong>优点</strong>：</p>\n<p>按顺序分配内存即可，实现简单、运行高效，不用考虑内存碎片。</p>\n</li>\n<li><p><strong>缺点</strong>：</p>\n<p>可用的内存大小缩小为原来的一半，对象存活率高时会频繁进行复制。</p>\n</li>\n</ul>\n<h4 id=\"4-分代收集\"><a href=\"#4-分代收集\" class=\"headerlink\" title=\"4. 分代收集\"></a>4. 分代收集</h4><p>现在的商业虚拟机采用分代收集算法，它根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。</p>\n<p>一般将堆分为新生代和老年代。</p>\n<ul>\n<li>对于<strong>新生代</strong>，每次<code>GC</code>时都有<strong>大量</strong>的对象死亡，只有<strong>少量</strong>对象存活。考虑到复制成本低，适合采用<strong>复制算法</strong>。因此有了<code>From Survivor</code>和<code>To Survivor</code>区域。</li>\n<li>对于<strong>老年代</strong>，因为对象<strong>存活率高</strong>，没有额外的内存空间对它进行担保。因而适合采用<strong>标记-清理算法</strong>和<strong>标记-整理算法</strong>进行回收。</li>\n</ul>\n<h3 id=\"垃圾收集器\"><a href=\"#垃圾收集器\" class=\"headerlink\" title=\"垃圾收集器\"></a>垃圾收集器</h3><p><img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/4.png\" alt></p>\n<p>以上是 HotSpot 虚拟机中的 7 个垃圾收集器，连线表示垃圾收集器可以配合使用。</p>\n<ul>\n<li>单线程与多线程：单线程指的是垃圾收集器只使用一个线程，而多线程使用多个线程；</li>\n<li>串行与并行：串行指的是垃圾收集器与用户程序交替执行，这意味着在执行垃圾收集的时候需要停顿用户程序；并行指的是垃圾收集器和用户程序同时执行。除了 CMS 和 G1 之外，其它垃圾收集器都是以串行的方式执行。</li>\n</ul>\n<h4 id=\"1-Serial-收集器\"><a href=\"#1-Serial-收集器\" class=\"headerlink\" title=\"1. Serial 收集器\"></a>1. Serial 收集器</h4><p><img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/5.png\" alt></p>\n<p>Serial 翻译为串行，也就是说它以串行的方式执行。</p>\n<p>它是单线程的收集器，只会使用一个线程进行垃圾收集工作。</p>\n<p>它的优点是简单高效，在单个 CPU 环境下，由于没有线程交互的开销，因此拥有最高的单线程收集效率。</p>\n<p>它是 Client 场景下的默认新生代收集器，因为在该场景下内存一般来说不会很大。它收集一两百兆垃圾的停顿时间可以控制在一百多毫秒以内，只要不是太频繁，这点停顿时间是可以接受的。</p>\n<h4 id=\"2-ParNew-收集器\"><a href=\"#2-ParNew-收集器\" class=\"headerlink\" title=\"2. ParNew 收集器\"></a>2. ParNew 收集器</h4><p><a href=\"https://camo.githubusercontent.com/573a3abc71931daef42e0b42b1876cbe4f940cdc/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f38313533386364352d316263662d346533312d383665352d6531393864663165303133622e6a7067\" target=\"_blank\" rel=\"noopener\"><img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/7.png\" alt></a></p>\n<p>它是 Serial 收集器的多线程版本。</p>\n<p>它是 Server 场景下默认的新生代收集器，除了性能原因外，主要是因为除了 Serial 收集器，只有它能与 CMS 收集器配合使用。</p>\n<h4 id=\"3-Parallel-Scavenge-收集器\"><a href=\"#3-Parallel-Scavenge-收集器\" class=\"headerlink\" title=\"3. Parallel Scavenge 收集器\"></a>3. Parallel Scavenge 收集器</h4><p>与 ParNew 一样是多线程收集器。</p>\n<p>其它收集器目标是尽可能缩短垃圾收集时用户线程的停顿时间，而它的目标是达到一个可控制的吞吐量，因此它被称为“吞吐量优先”收集器。这里的吞吐量指 CPU 用于运行用户程序的时间占总时间的比值。</p>\n<p>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验。而高吞吐量则可以高效率地利用 CPU 时间，尽快完成程序的运算任务，适合在后台运算而不需要太多交互的任务。</p>\n<p>缩短停顿时间是以牺牲吞吐量和新生代空间来换取的：新生代空间变小，垃圾回收变得频繁，导致吞吐量下降。</p>\n<p>可以通过一个开关参数打开 GC 自适应的调节策略（GC Ergonomics），就不需要手工指定新生代的大小（-Xmn）、Eden 和 Survivor 区的比例、晋升老年代对象年龄等细节参数了。虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量。</p>\n<h4 id=\"4-Serial-Old-收集器\"><a href=\"#4-Serial-Old-收集器\" class=\"headerlink\" title=\"4. Serial Old 收集器\"></a>4. Serial Old 收集器</h4><p><img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/13.png\" alt=\"13\"></p>\n<p>是 Serial 收集器的老年代版本，也是给 Client 场景下的虚拟机使用。如果用在 Server 场景下，它有两大用途：</p>\n<ul>\n<li>在 JDK 1.5 以及之前版本（Parallel Old 诞生以前）中与 Parallel Scavenge 收集器搭配使用。</li>\n<li>作为 CMS 收集器的后备预案，在并发收集发生 Concurrent Mode Failure 时使用。</li>\n</ul>\n<h4 id=\"5-Parallel-Old-收集器\"><a href=\"#5-Parallel-Old-收集器\" class=\"headerlink\" title=\"5. Parallel Old 收集器\"></a>5. Parallel Old 收集器<img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/8.png\" alt></h4><p>是 Parallel Scavenge 收集器的老年代版本。</p>\n<p>在注重吞吐量以及 CPU 资源敏感的场合，都可以优先考虑 Parallel Scavenge 加 Parallel Old 收集器。</p>\n<h4 id=\"6-CMS-收集器\"><a href=\"#6-CMS-收集器\" class=\"headerlink\" title=\"6. CMS 收集器\"></a>6. CMS 收集器</h4><p><img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/9.png\" alt></p>\n<p>CMS（Concurrent Mark Sweep），Mark Sweep 指的是标记 - 清除算法。</p>\n<p>分为以下四个流程：</p>\n<ul>\n<li>初始标记：仅仅只是标记一下 GC Roots 能直接关联到的对象，速度很快，需要停顿。</li>\n<li>并发标记：进行 GC Roots Tracing 的过程，它在整个回收过程中耗时最长，不需要停顿。</li>\n<li>重新标记：为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要停顿。</li>\n<li>并发清除：不需要停顿。</li>\n</ul>\n<p>在整个过程中耗时最长的并发标记和并发清除过程中，收集器线程都可以与用户线程一起工作，不需要进行停顿。</p>\n<p>具有以下缺点：</p>\n<ul>\n<li>吞吐量低：低停顿时间是以牺牲吞吐量为代价的，导致 CPU 利用率不够高。</li>\n<li>无法处理浮动垃圾，可能出现 Concurrent Mode Failure。浮动垃圾是指并发清除阶段由于用户线程继续运行而产生的垃圾，这部分垃圾只能到下一次 GC 时才能进行回收。由于浮动垃圾的存在，因此需要预留出一部分内存，意味着 CMS 收集不能像其它收集器那样等待老年代快满的时候再回收。如果预留的内存不够存放浮动垃圾，就会出现 Concurrent Mode Failure，这时虚拟机将临时启用 Serial Old 来替代 CMS。</li>\n<li>标记 - 清除算法导致的空间碎片，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象，不得不提前触发一次 Full GC。</li>\n</ul>\n<h4 id=\"7-G1-收集器\"><a href=\"#7-G1-收集器\" class=\"headerlink\" title=\"7. G1 收集器\"></a>7. G1 收集器</h4><p>G1（Garbage-First），它是一款面向服务端应用的垃圾收集器，在多 CPU 和大内存的场景下有很好的性能。HotSpot 开发团队赋予它的使命是未来可以替换掉 CMS 收集器。</p>\n<p>堆被分为新生代和老年代，其它收集器进行收集的范围都是整个新生代或者老年代，而 G1 可以直接对新生代和老年代一起回收。<img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/10.png\" alt></p>\n<p>G1 把堆划分成多个大小相等的独立区域（Region），新生代和老年代不再物理隔离。</p>\n<p><a href=\"https://camo.githubusercontent.com/5049da1b34969b272be2bffc6c6de0206b33253c/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f39626264646565622d653933392d343166302d386538652d3262316130616137653061372e706e67\" target=\"_blank\" rel=\"noopener\"><img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/11.png\" alt></a></p>\n<p>通过引入 Region 的概念，从而将原来的一整块内存空间划分成多个的小空间，使得每个小空间可以单独进行垃圾回收。这种划分方法带来了很大的灵活性，使得可预测的停顿时间模型成为可能。通过记录每个 Region 垃圾回收时间以及回收所获得的空间（这两个值是通过过去回收的经验获得），并维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的 Region。</p>\n<p>每个 Region 都有一个 Remembered Set，用来记录该 Region 对象的引用对象所在的 Region。通过使用 Remembered Set，在做可达性分析的时候就可以避免全堆扫描。</p>\n<p><a href=\"https://camo.githubusercontent.com/5bd72d589ead80c22547e3288a9a406241a1fb6b/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f66393965653737312d633536662d343766622d393134382d6330303336363935623566652e6a7067\" target=\"_blank\" rel=\"noopener\"><img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/12.png\" alt></a></p>\n<p>如果不计算维护 Remembered Set 的操作，G1 收集器的运作大致可划分为以下几个步骤：</p>\n<ul>\n<li>初始标记</li>\n<li>并发标记</li>\n<li>最终标记：为了修正在并发标记期间因用户程序继续运作而导致标记产生变动的那一部分标记记录，虚拟机将这段时间对象变化记录在线程的 Remembered Set Logs 里面，最终标记阶段需要把 Remembered Set Logs 的数据合并到 Remembered Set 中。这阶段需要停顿线程，但是可并行执行。</li>\n<li>筛选回收：首先对各个 Region 中的回收价值和成本进行排序，根据用户所期望的 GC 停顿时间来制定回收计划。此阶段其实也可以做到与用户程序一起并发执行，但是因为只回收一部分 Region，时间是用户可控制的，而且停顿用户线程将大幅度提高收集效率。</li>\n</ul>\n<p>具备如下特点：</p>\n<ul>\n<li>空间整合：整体来看是基于“标记 - 整理”算法实现的收集器，从局部（两个 Region 之间）上来看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。</li>\n<li>可预测的停顿：能让使用者明确指定在一个长度为 M 毫秒的时间片段内，消耗在 GC 上的时间不得超过 N 毫秒。</li>\n</ul>\n<h2 id=\"内存分配与回收策略\"><a href=\"#内存分配与回收策略\" class=\"headerlink\" title=\"内存分配与回收策略\"></a>内存分配与回收策略</h2><h3 id=\"Minor-GC-和-Full-GC\"><a href=\"#Minor-GC-和-Full-GC\" class=\"headerlink\" title=\"Minor GC 和 Full GC\"></a>Minor GC 和 Full GC</h3><ul>\n<li>Minor GC：回收新生代，因为新生代对象存活时间很短，因此 Minor GC 会频繁执行，执行的速度一般也会比较快。</li>\n<li>Full GC：回收老年代和新生代，老年代对象其存活时间长，因此 Full GC 很少执行，执行速度会比 Minor GC 慢很多。</li>\n</ul>\n<h3 id=\"内存分配策略\"><a href=\"#内存分配策略\" class=\"headerlink\" title=\"内存分配策略\"></a>内存分配策略</h3><h4 id=\"1-对象优先在-Eden-分配\"><a href=\"#1-对象优先在-Eden-分配\" class=\"headerlink\" title=\"1. 对象优先在 Eden 分配\"></a>1. 对象优先在 Eden 分配</h4><p>大多数情况下，对象在新生代 Eden 上分配，当 Eden 空间不够时，发起 Minor GC。</p>\n<h4 id=\"2-大对象直接进入老年代\"><a href=\"#2-大对象直接进入老年代\" class=\"headerlink\" title=\"2. 大对象直接进入老年代\"></a>2. 大对象直接进入老年代</h4><p>大对象是指需要连续内存空间的对象，最典型的大对象是那种很长的字符串以及数组。</p>\n<p>经常出现大对象会提前触发垃圾收集以获取足够的连续空间分配给大对象。</p>\n<p>-XX:PretenureSizeThreshold，大于此值的对象直接在老年代分配，避免在 Eden 和 Survivor 之间的大量内存复制。</p>\n<h4 id=\"3-长期存活的对象进入老年代\"><a href=\"#3-长期存活的对象进入老年代\" class=\"headerlink\" title=\"3. 长期存活的对象进入老年代\"></a>3. 长期存活的对象进入老年代</h4><p>为对象定义年龄计数器，对象在 Eden 出生并经过 Minor GC 依然存活，将移动到 Survivor 中，年龄就增加 1 岁，增加到一定年龄则移动到老年代中。</p>\n<p>-XX:MaxTenuringThreshold 用来定义年龄的阈值。</p>\n<h4 id=\"4-动态对象年龄判定\"><a href=\"#4-动态对象年龄判定\" class=\"headerlink\" title=\"4. 动态对象年龄判定\"></a>4. 动态对象年龄判定</h4><p>虚拟机并不是永远要求对象的年龄必须达到 MaxTenuringThreshold 才能晋升老年代，如果在 Survivor 中相同年龄所有对象大小的总和大于 Survivor 空间的一半，则年龄大于或等于该年龄的对象可以直接进入老年代，无需等到 MaxTenuringThreshold 中要求的年龄。</p>\n<h4 id=\"5-空间分配担保\"><a href=\"#5-空间分配担保\" class=\"headerlink\" title=\"5. 空间分配担保\"></a>5. 空间分配担保</h4><p>在发生 Minor GC 之前，虚拟机先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果条件成立的话，那么 Minor GC 可以确认是安全的。</p>\n<p>如果不成立的话虚拟机会查看 HandlePromotionFailure 的值是否允许担保失败，如果允许那么就会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次 Minor GC；如果小于，或者 HandlePromotionFailure 的值不允许冒险，那么就要进行一次 Full GC。</p>\n<h3 id=\"Full-GC-的触发条件\"><a href=\"#Full-GC-的触发条件\" class=\"headerlink\" title=\"Full GC 的触发条件\"></a>Full GC 的触发条件</h3><p>对于 Minor GC，其触发条件非常简单，当 Eden 空间满时，就将触发一次 Minor GC。而 Full GC 则相对复杂，有以下条件：</p>\n<h4 id=\"1-调用-System-gc\"><a href=\"#1-调用-System-gc\" class=\"headerlink\" title=\"1. 调用 System.gc()\"></a>1. 调用 System.gc()</h4><p>只是建议虚拟机执行 Full GC，但是虚拟机不一定真正去执行。不建议使用这种方式，而是让虚拟机管理内存。</p>\n<h4 id=\"2-老年代空间不足\"><a href=\"#2-老年代空间不足\" class=\"headerlink\" title=\"2. 老年代空间不足\"></a>2. 老年代空间不足</h4><p>老年代空间不足的常见场景为前文所讲的大对象直接进入老年代、长期存活的对象进入老年代等。</p>\n<p>为了避免以上原因引起的 Full GC，应当尽量不要创建过大的对象以及数组。除此之外，可以通过 -Xmn 虚拟机参数调大新生代的大小，让对象尽量在新生代被回收掉，不进入老年代。还可以通过 -XX:MaxTenuringThreshold 调大对象进入老年代的年龄，让对象在新生代多存活一段时间。</p>\n<h4 id=\"3-空间分配担保失败\"><a href=\"#3-空间分配担保失败\" class=\"headerlink\" title=\"3. 空间分配担保失败\"></a>3. 空间分配担保失败</h4><p>使用复制算法的 Minor GC 需要老年代的内存空间作担保，如果担保失败会执行一次 Full GC。具体内容请参考上面的第 5 小节。</p>\n<h4 id=\"4-JDK-1-7-及以前的永久代空间不足\"><a href=\"#4-JDK-1-7-及以前的永久代空间不足\" class=\"headerlink\" title=\"4. JDK 1.7 及以前的永久代空间不足\"></a>4. JDK 1.7 及以前的永久代空间不足</h4><p>在 JDK 1.7 及以前，HotSpot 虚拟机中的方法区是用永久代实现的，永久代中存放的为一些 Class 的信息、常量、静态变量等数据。</p>\n<p>当系统中要加载的类、反射的类和调用的方法较多时，永久代可能会被占满，在未配置为采用 CMS GC 的情况下也会执行 Full GC。如果经过 Full GC 仍然回收不了，那么虚拟机会抛出 java.lang.OutOfMemoryError。</p>\n<p>为避免以上原因引起的 Full GC，可采用的方法为增大永久代空间或转为使用 CMS GC。</p>\n<h4 id=\"5-Concurrent-Mode-Failure\"><a href=\"#5-Concurrent-Mode-Failure\" class=\"headerlink\" title=\"5. Concurrent Mode Failure\"></a>5. Concurrent Mode Failure</h4><p>执行 CMS GC 的过程中同时有对象要放入老年代，而此时老年代空间不足（可能是 GC 过程中浮动垃圾过多导致暂时性的空间不足），便会报 Concurrent Mode Failure 错误，并触发 Full GC。</p>\n<h2 id=\"类加载机制概念\"><a href=\"#类加载机制概念\" class=\"headerlink\" title=\"类加载机制概念\"></a>类加载机制概念</h2><ul>\n<li>Java虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的加载机制。*Class文件由类装载器装载后，在JVM中将形成一份描述Class结构的元信息对象，通过该元信息对象可以获知Class的结构信息：如构造函数，属性和方法等，Java允许用户借由这个Class相关的元信息对象间接调用Class对象的功能,这里就是我们经常能见到的Class类。</li>\n</ul>\n<h3 id=\"类加载过程\"><a href=\"#类加载过程\" class=\"headerlink\" title=\"类加载过程\"></a>类加载过程</h3><p><img src=\"/2020/01/07/jvm-bi-xu-zhi-dao-de-ji-chu/6.png\" alt></p>\n<p>工作机制</p>\n<p>类装载器就是寻找类的字节码文件，并构造出类在JVM内部表示的对象组件。在Java中，类装载器把一个类装入JVM中，要经过以下步骤：</p>\n<pre><code class=\"html\">  (1) 装载：查找和导入Class文件；\n\n  (2) 链接：把类的二进制数据合并到JRE中；\n\n     (a)校验：检查载入Class文件数据的正确性；\n\n     (b)准备：给类的静态变量分配存储空间；\n\n     (c)解析：将符号引用转成直接引用；\n\n  (3) 初始化：对类的静态变量，静态代码块执行初始化操作</code></pre>\n<p>Java程序可以动态扩展是由运行期动态加载和动态链接实现的；比如：如果编写一个使用接口的应用程序，可以等到运行时再指定其实际的实现(多态)，解析过程有时候还可以在初始化之后执行；比如：动态绑定(多态)如上图所示，加载、验证、准备、初始化和卸载这五个阶段的顺序是确定的，类的加载过程必须按照这个顺序来按部就班地开始，而解析阶段则不一定，它在某些情况下可以在初始化阶段后再开始。类的生命周期的每一个阶段通常都是互相交叉混合式进行的，通常会在一个阶段执行的过程中调用或激活另外一个阶段。</p>\n<h4 id=\"装载-加载\"><a href=\"#装载-加载\" class=\"headerlink\" title=\"装载(加载)\"></a>装载(加载)</h4><p>类的装载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的<strong>方法区</strong>内，然后在堆区创建一个java.lang.Class对象，用来封装类在方法区内的数据结构。类的加载的最终产品是位于堆区中的Class对象，Class对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口。</p>\n<p>类加载器并不需要等到某个类被“首次主动使用”时再加载它，JVM规范允许类加载器在预料某个类将要被使用时就预先加载它，如果在预先加载的过程中遇到了.class文件缺失或存在错误，类加载器必须在程序首次主动使用该类时才报告错误（LinkageError错误）如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误。</p>\n<p>加载.class文件的方式有:</p>\n<p>1). 从本地系统中直接加载2). 通过网络下载.class文件3). 从zip，jar等归档文件中加载.class文件4). 从专有数据库中提取.class文件5). 将Java源文件动态编译为.class文件</p>\n<p>在了解了什么是类的加载后，回头来再看jvm进行类加载阶段都做了什么。虚拟机需要完成以下三件事情：</p>\n<p>1).通过一个类的全限定名称来获取定义此类的二进制字节流。</p>\n<p>2).将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</p>\n<p>3).在java堆中生成一个代表这个类的java.lang.Class对象，作为方法区这些数据的访问入口。</p>\n<p>相对于类加载过程的其他阶段，加载阶段是开发期相对来说可控性比较强，该阶段既可以使用系统提供的类加载器完成，也可以由用户自定义的类加载器来完成，开发人员可以通过定义自己的类加载器去控制字节流的获取方式。关于这个过程的更多细节，我会在下一节细说，类的加载。加载阶段完成后，虚拟机外部的 二进制字节流就按照虚拟机所需的格式存储在方法区之中，而且在Java堆中也创建一个java.lang.Class类的对象，这样便可以通过该对象访问方法区中的这些数据。</p>\n<h4 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a><strong>验证</strong></h4><p>验证的目的是为了确保Class文件中的字节流包含的信息符合当前虚拟机的要求，而且不会危害虚拟机自身的安全。不同的虚拟机对类验证的实现可能会有所不同，但大致都会完成以下四个阶段的验证：文件格式的验证、元数据的验证、字节码验证和符号引用验证。</p>\n<p>1）文件格式的验证：验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理，该验证的主要目的是保证输入的字节流能正确地解析并存储于方法区之内。经过该阶段的验证后，字节流才会进入内存的方法区中进行存储，后面的三个验证都是基于方法区的存储结构进行的。</p>\n<p>2）元数据验证：对类的元数据信息进行语义校验（其实就是对类中的各数据类型进行语法校验），保证不存在不符合Java语法规范的元数据信息。</p>\n<p>3）字节码验证：该阶段验证的主要工作是进行数据流和控制流分析，对类的方法体进行校验分析，以保证被校验的类的方法在运行时不会做出危害虚拟机安全的行为。</p>\n<p>4）符号引用验证：这是最后一个阶段的验证，它发生在虚拟机将符号引用转化为直接引用的时候（解析阶段中发生该转化，后面会有讲解），主要是对类自身以外的信息（常量池中的各种符号引用）进行匹配性的校验。</p>\n<h4 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h4><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中进行分配。注：</p>\n<p>1）这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。</p>\n<p>2）这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。</p>\n<h4 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h4><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。</p>\n<p>符号引用（Symbolic Reference）：符号引用以一组符号来描述所引用的目标，符号引用可以是任何形式的字面量，符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经在内存中。</p>\n<p>直接引用（Direct Reference）：直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是与虚拟机实现的内存布局相关的，同一个符号引用在不同的虚拟机实例上翻译出来的直接引用一般都不相同，如果有了直接引用，那引用的目标必定已经在内存中存在。</p>\n<p>1)、类或接口的解析：判断所要转化成的直接引用是对数组类型，还是普通的对象类型的引用，从而进行不同的解析。</p>\n<p>2)、字段解析：对字段进行解析时，会先在本类中查找是否包含有简单名称和字段描述符都与目标相匹配的字段，如果有，则查找结束；如果没有，则会按照继承关系从上往下递归搜索该类所实现的各个接口和它们的父接口，还没有，则按照继承关系从上往下递归搜索其父类，直至查找结束。</p>\n<p>3)、类方法解析：对类方法的解析与对字段解析的搜索步骤差不多，只是多了判断该方法所处的是类还是接口的步骤，而且对类方法的匹配搜索，是先搜索父类，再搜索接口。</p>\n<p>4)、接口方法解析：与类方法解析步骤类似，只是接口不会有父类，因此，只递归向上搜索父接口就行了。</p>\n<p><strong>5. 初始化</strong></p>\n<p>类初始化阶段是类加载过程的最后一步，前面的类加载过程中，除了加载（Loading）阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中定义的Java程序代码。初始化，为类的静态变量赋予正确的初始值，JVM负责对类进行初始化，主要对类变量进行初始化。在Java中对类变量进行初始值设定有两种方式：</p>\n<p>①声明类变量时指定初始值</p>\n<p>②使用静态代码块为类变量指定初始值</p>\n<p>JVM初始化步骤</p>\n<p>1)、假如这个类还没有被加载和连接，则程序先加载并连接该类</p>\n<p>2)、假如该类的直接父类还没有被初始化，则先初始化其直接父类</p>\n<p>3)、假如类中有初始化语句，则系统依次执行这些初始化语句</p>\n<p>初始化阶段时执行类构造器方法()的过程。</p>\n<p>1）类构造器方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static{}块）中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序所决定。</p>\n<p>2）类构造器方法与类的构造函数不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的类构造器方法执行之前，父类的类构造器方法已经执行完毕，因此在虚拟机中第一个执行的类构造器方法的类一定是java.lang.Object。</p>\n<p>3）由于父类的类构造器方法方法先执行，也就意味着父类中定义的静态语句块要优先于子类的变量赋值操作。</p>\n<p>4）类构造器方法对于类或者接口来说并不是必需的，如果一个类中没有静态语句块也没有对变量的赋值操作，那么编译器可以不为这个类生成类构造器方法。</p>\n<p>5）接口中可能会有变量赋值操作，因此接口也会生成类构造器方法。但是接口与类不同，执行接口的类构造器方法不需要先执行父接口的类构造器方法。只有当父接口中定义的变量被使用时，父接口才会被初始化。另外，接口的实现类在初始化时也不会执行接口的类构造器方法。</p>\n<p>6）虚拟机会保证一个类的类构造器方法在多线程环境中被正确地加锁和同步。如果有多个线程去同时初始化一个类，那么只会有一个线程去执行这个类的类构造器方法，其它线程都需要阻塞等待，直到活动线程执行类构造器方法完毕。如果在一个类的类构造器方法中有耗时很长的操作，那么就可能造成多个进程阻塞。</p>\n<p><strong>6.结束生命周期</strong></p>\n<p>在以下情况的时候，Java虚拟机会结束生命周期1). 执行了System.exit()方法2). 程序正常执行结束3). 程序在执行过程中遇到了异常或错误而异常终止4). 由于操作系统出现错误而导致Java虚拟机进程终止</p>\n<h3 id=\"何时开始类的初始化\"><a href=\"#何时开始类的初始化\" class=\"headerlink\" title=\"何时开始类的初始化\"></a>何时开始类的初始化</h3><p>什么情况下需要开始类加载过程的第一个阶段:”加载”。虚拟机规范中并没强行约束，这点可以交给虚拟机的的具体实现自由把握，但是对于初始化阶段虚拟机规范是严格规定了如下几种情况，如果类未初始化会对类进行初始化。</p>\n<p>1、创建类的实例</p>\n<p>2、访问类的静态变量(除常量【被final修辞的静态变量】原因:常量一种特殊的变量，因为编译器把他们当作值(value)而不是域(field)来对待。如果你的代码中用到了常变量(constant variable)，编译器并不会生成字节码来从对象中载入域的值，而是直接把这个值插入到字节码中。这是一种很有用的优化，但是如果你需要改变final域的值那么每一块用到那个域的代码都需要重新编译。</p>\n<p>3、访问类的静态方法</p>\n<p>4、反射如(Class.forName(“my.xyz.Test”))</p>\n<p>5、当初始化一个类时，发现其父类还未初始化，则先出发父类的初始化</p>\n<p>6、虚拟机启动时，定义了main()方法的那个类先初始化</p>\n<p>以上情况称为称对一个类进行“主动引用”，除此种情况之外，均不会触发类的初始化，称为“被动引用”接口的加载过程与类的加载过程稍有不同。接口中不能使用static{}块。当一个接口在初始化时，并不要求其父接口全部都完成了初始化，只有真正在使用到父接口时（例如引用接口中定义的常量）才会初始化。</p>\n<h4 id=\"被动引用例子\"><a href=\"#被动引用例子\" class=\"headerlink\" title=\"被动引用例子\"></a><strong>被动引用例子</strong></h4><p>1、子类调用父类的静态变量，子类不会被初始化。只有父类被初始化。。对于静态字段，只有直接定义这个字段的类才会被初始化.</p>\n<p>2、通过数组定义来引用类，不会触发类的初始化</p>\n<p>3、 访问类的常量，不会初始化类</p>\n<pre><code class=\"java\">class SuperClass {  \n    static {  \n        System.out.println(&quot;superclass init&quot;);  \n    }  \n    public static int value = 123;  \n}  \n\nclass SubClass extends SuperClass {  \n    static {  \n        System.out.println(&quot;subclass init&quot;);  \n    }  \n}  \n\npublic class Test {  \n    public static void main(String[] args) {  \n        System.out.println(SubClass.value);// 被动应用1  \n        SubClass[] sca = new SubClass[10];// 被动引用2  \n    }  \n}  </code></pre>\n<p>程序运行输出    superclass init123从上面的输入结果证明了被动引用1与被动引用2</p>\n<pre><code class=\"java\">class ConstClass {  \n    static {  \n        System.out.println(&quot;ConstClass init&quot;);  \n    }  \n    public static final String HELLOWORLD = &quot;hello world&quot;;  \n}  \n\npublic class Test {  \n    public static void main(String[] args) {  \n        System.out.println(ConstClass.HELLOWORLD);// 调用类常量  \n    }  \n}  </code></pre>\n<p>程序输出结果hello world从上面的输出结果证明了被动引用3</p>\n<p>** 题目分析**</p>\n<p>上面很详细的介绍了类的加载时机和类的加载过程，通过上面的理论来分析本文开门见上的题目</p>\n<pre><code class=\"java\">class SingleTon {  \n    private static SingleTon singleTon = new SingleTon();  \n    public static int count1;  \n    public static int count2 = 0;  \n\n    private SingleTon() {  \n        count1++;  \n        count2++;  \n    }  \n\n    public static SingleTon getInstance() {  \n        return singleTon;  \n    }  \n}  \n\npublic class Test {  \n    public static void main(String[] args) {  \n        SingleTon singleTon = SingleTon.getInstance();  \n        System.out.println(&quot;count1=&quot; + singleTon.count1);  \n        System.out.println(&quot;count2=&quot; + singleTon.count2);  \n    }  \n}  </code></pre>\n<p>分析:</p>\n<p>1:SingleTon singleTon = SingleTon.getInstance();调用了类的SingleTon调用了类的静态方法，触发类的初始化</p>\n<p>2:类加载的时候在准备过程中为类的静态变量分配内存并初始化默认值 singleton=null count1=0,count2=0</p>\n<p>3:类初始化化，为类的静态变量赋值和执行静态代码快。singleton赋值为new SingleTon()调用类的构造方法</p>\n<p>4:调用类的构造方法后count=1;count2=1</p>\n<p>5:继续为count1与count2赋值,此时count1没有赋值操作,所有count1为1,但是count2执行赋值操作就变为0</p>\n<h3 id=\"类初始化顺序\"><a href=\"#类初始化顺序\" class=\"headerlink\" title=\"类初始化顺序\"></a>类初始化顺序</h3><p>现在我们知道什么时候触发类的初始化了，他精确地写在Java语言规范中。但了解清楚 域（fields，静态的还是非静态的）、块（block静态的还是非静态的）、不同类（子类和超类）和不同的接口（子接口，实现类和超接口）的初始化顺序也很重要类。事实上很多核心Java面试题和SCJP问题都是基于这些概念，下面是类初始化的一些规则：</p>\n<pre><code>1.类从顶至底的顺序初始化，所以声明在顶部的字段的早于底部的字段初始化\n2.超类早于子类和衍生类的初始化\n3.如果类的初始化是由于访问静态域而触发，那么只有声明静态域的类才被初始化，而不会触发超类的初始化或者子类的4.初始化即使静态域被子类或子接口或者它的实现类所引用。\n5.接口初始化不会导致父接口的初始化。\n6.静态域的初始化是在类的静态初始化期间，非静态域的初始化时在类的实例创建期间。这意味这静态域初始化在非静态域之前。\n7.非静态域通过构造器初始化，子类在做任何初始化之前构造器会隐含地调用父类的构造器，他保证了非静态或实例变量（父类）初始化早于子类</code></pre><h3 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h3><p>JVM设计者把类加载阶段中的“通过’类全名’来获取定义此类的二进制字节流”这个动作放到Java虚拟机外部去实现，以便让应用程序自己决定如何去获取所需要的类。实现这个动作的代码模块称为“类加载器”。</p>\n<h4 id=\"类与类加载器\"><a href=\"#类与类加载器\" class=\"headerlink\" title=\"类与类加载器\"></a><strong>类与类加载器</strong></h4><p>对于任何一个类，都需要由加载它的类加载器和这个类来确立其在JVM中的唯一性。也就是说，两个类来源于同一个Class文件，并且被同一个类加载器加载，这两个类才相等。</p>\n<h4 id=\"双亲委派模型\"><a href=\"#双亲委派模型\" class=\"headerlink\" title=\"双亲委派模型\"></a><strong>双亲委派模型</strong></h4><p>从虚拟机的角度来说，只存在两种不同的类加载器：一种是启动类加载器（Bootstrap ClassLoader），该类加载器使用C++语言实现，属于虚拟机自身的一部分。另外一种就是所有其它的类加载器，这些类加载器是由Java语言实现，独立于JVM外部，并且全部继承自抽象类java.lang.ClassLoader。</p>\n<p>从Java开发人员的角度来看，大部分Java程序一般会使用到以下三种系统提供的类加载器：</p>\n<p>1)启动类加载器（Bootstrap ClassLoader）：负责加载JAVA_HOME\\lib目录中并且能被虚拟机识别的类库到JVM内存中，如果名称不符合的类库即使放在lib目录中也不会被加载。该类加载器无法被Java程序直接引用。</p>\n<p>2)扩展类加载器（Extension ClassLoader）：该加载器主要是负责加载JAVA_HOME\\lib\\，该加载器可以被开发者直接使用。</p>\n<p>3)应用程序类加载器（Application ClassLoader）：该类加载器也称为系统类加载器，它负责加载用户类路径（Classpath）上所指定的类库，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</p>\n<p>我们的应用程序都是由这三类加载器互相配合进行加载的，我们也可以加入自己定义的类加载器。这些类加载器之间的关系如下图所示：</p>\n<p>如上图所示的类加载器之间的这种层次关系，就称为类加载器的双亲委派模型（Parent Delegation Model）。该模型要求除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。子类加载器和父类加载器不是以继承（Inheritance）的关系来实现，而是通过组合（Composition）关系来复用父加载器的代码。</p>\n<p>双亲委派模型的工作过程为：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的加载器都是如此，因此所有的类加载请求都会传给顶层的启动类加载器，只有当父加载器反馈自己无法完成该加载请求（该加载器的搜索范围中没有找到对应的类）时，子加载器才会尝试自己去加载。</p>\n<p>使用这种模型来组织类加载器之间的关系的好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系。例如java.lang.Object类，无论哪个类加载器去加载该类，最终都是由启动类加载器进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。否则的话，如果不使用该模型的话，如果用户自定义一个java.lang.Object类且存放在classpath中，那么系统中将会出现多个Object类，应用程序也会变得很混乱。如果我们自定义一个rt.jar中已有类的同名Java类，会发现JVM可以正常编译，但该类永远无法被加载运行。在rt.jar包中的java.lang.ClassLoader类中，我们可以查看类加载实现过程的代码，具体源码如下：</p>\n<pre><code class=\"java\">protected synchronized Class loadClass(String name, boolean resolve)  \n        throws ClassNotFoundException {  \n    // 首先检查该name指定的class是否有被加载  \n    Class c = findLoadedClass(name);  \n    if (c == null) {  \n        try {  \n            if (parent != null) {  \n                // 如果parent不为null，则调用parent的loadClass进行加载  \n                c = parent.loadClass(name, false);  \n            } else {  \n                // parent为null，则调用BootstrapClassLoader进行加载  \n                c = findBootstrapClass0(name);  \n            }  \n        } catch (ClassNotFoundException e) {  \n            // 如果仍然无法加载成功，则调用自身的findClass进行加载  \n            c = findClass(name);  \n        }  \n    }  \n    if (resolve) {  \n        resolveClass(c);  \n    }  \n    return c;  \n}  </code></pre>\n<p>通过上面代码可以看出，双亲委派模型是通过loadClass()方法来实现的，根据代码以及代码中的注释可以很清楚地了解整个过程其实非常简单：先检查是否已经被加载过，如果没有则调用父加载器的loadClass()方法，如果父加载器为空则默认使用启动类加载器作为父加载器。如果父类加载器加载失败，则先抛出ClassNotFoundException，然后再调用自己的findClass()方法进行加载。</p>\n<h4 id=\"自定义类加载器\"><a href=\"#自定义类加载器\" class=\"headerlink\" title=\"自定义类加载器\"></a><strong>自定义类加载器</strong></h4><p>若要实现自定义类加载器，只需要继承java.lang.ClassLoader 类，并且重写其findClass()方法即可。java.lang.ClassLoader 类的基本职责就是根据一个指定的类的名称，找到或者生成其对应的字节代码，然后从这些字节代码中定义出一个 Java 类，即 java.lang.Class 类的一个实例。除此之外，ClassLoader 还负责加载 Java 应用所需的资源，如图像文件和配置文件等，ClassLoader 中与加载类相关的方法如下：</p>\n<p>方法说明getParent()  返回该类加载器的父类加载器。</p>\n<p>loadClass(String name) 加载名称为 二进制名称为name 的类，返回的结果是 java.lang.Class 类的实例。</p>\n<p>findClass(String name) 查找名称为 name 的类，返回的结果是 java.lang.Class 类的实例。</p>\n<p>findLoadedClass(String name) 查找名称为 name 的已经被加载过的类，返回的结果是 java.lang.Class 类的实例。</p>\n<p>resolveClass(Class&lt;?&gt; c) 链接指定的 Java 类。</p>\n<p>注意：在JDK1.2之前，类加载尚未引入双亲委派模式，因此实现自定义类加载器时常常重写loadClass方法，提供双亲委派逻辑，从JDK1.2之后，双亲委派模式已经被引入到类加载体系中，自定义类加载器时不需要在自己写双亲委派的逻辑，因此不鼓励重写loadClass方法，而推荐重写findClass方法。</p>\n<p>在Java中，任意一个类都需要由加载它的类加载器和这个类本身一同确定其在java虚拟机中的唯一性，即比较两个类是否相等，只有在这两个类是由同一个类加载器加载的前提之下才有意义，否则，即使这两个类来源于同一个Class类文件，只要加载它的类加载器不相同，那么这两个类必定不相等(这里的相等包括代表类的Class对象的equals()方法、isAssignableFrom()方法、isInstance()方法和instanceof关键字的结果)。例子代码如下：</p>\n<pre><code class=\"java\">/** \n     * 一、ClassLoader加载类的顺序 \n     *  1.调用 findLoadedClass(String) 来检查是否已经加载类。 \n     *  2.在父类加载器上调用 loadClass 方法。如果父类加载器为 null，则使用虚拟机的内置类加载器。 \n     *  3.调用 findClass(String) 方法查找类。 \n     * 二、实现自己的类加载器 \n     *  1.获取类的class文件的字节数组 \n     *  2.将字节数组转换为Class类的实例 \n     */  \n    public class ClassLoaderTest {  \n        public static void main(String[] args) throws InstantiationException, IllegalAccessException, ClassNotFoundException {  \n            //新建一个类加载器  \n            MyClassLoader cl = new MyClassLoader(&quot;myClassLoader&quot;);  \n            //加载类，得到Class对象  \n            Class&lt;?&gt; clazz = cl.loadClass(&quot;classloader.Animal&quot;);  \n            //得到类的实例  \n            Animal animal=(Animal) clazz.newInstance();  \n            animal.say();  \n        }  \n    }  \n    class Animal{  \n        public void say(){  \n            System.out.println(&quot;hello world!&quot;);  \n        }  \n    }  \n    class MyClassLoader extends ClassLoader {  \n        //类加载器的名称  \n        private String name;  \n        //类存放的路径  \n        private String path = &quot;E:\\\\workspace\\\\Algorithm\\\\src&quot;;  \n        MyClassLoader(String name) {  \n            this.name = name;  \n        }  \n        MyClassLoader(ClassLoader parent, String name) {  \n            super(parent);  \n            this.name = name;  \n        }  \n        /** \n         * 重写findClass方法 \n         */  \n        @Override  \n        public Class&lt;?&gt; findClass(String name) {  \n            byte[] data = loadClassData(name);  \n            return this.defineClass(name, data, 0, data.length);  \n        }  \n        public byte[] loadClassData(String name) {  \n            try {  \n                name = name.replace(&quot;.&quot;, &quot;//&quot;);  \n                FileInputStream is = new FileInputStream(new File(path + name + &quot;.class&quot;));  \n                ByteArrayOutputStream baos = new ByteArrayOutputStream();  \n                int b = 0;  \n                while ((b = is.read()) != -1) {  \n                    baos.write(b);  \n                }  \n                return baos.toByteArray();  \n            } catch (Exception e) {  \n                e.printStackTrace();  \n            }  \n            return null;  \n        }  \n    }  </code></pre>\n<p>类加载器双亲委派模型是从JDK1.2以后引入的，并且只是一种推荐的模型，不是强制要求的，因此有一些没有遵循双亲委派模型的特例：(了解)</p>\n<p>(1).在JDK1.2之前，自定义类加载器都要覆盖loadClass方法去实现加载类的功能，JDK1.2引入双亲委派模型之后，loadClass方法用于委派父类加载器进行类加载，只有父类加载器无法完成类加载请求时才调用自己的findClass方法进行类加载，因此在JDK1.2之前的类加载的loadClass方法没有遵循双亲委派模型，因此在JDK1.2之后，自定义类加载器不推荐覆盖loadClass方法，而只需要覆盖findClass方法即可。</p>\n<p>(2).双亲委派模式很好地解决了各个类加载器的基础类统一问题，越基础的类由越上层的类加载器进行加载，但是这个基础类统一有一个不足，当基础类想要调用回下层的用户代码时无法委派子类加载器进行类加载。为了解决这个问题JDK引入了ThreadContext线程上下文，通过线程上下文的setContextClassLoader方法可以设置线程上下文类加载器。</p>\n<p>JavaEE只是一个规范，sun公司只给出了接口规范，具体的实现由各个厂商进行实现，因此JNDI，JDBC,JAXB等这些第三方的实现库就可以被JDK的类库所调用。线程上下文类加载器也没有遵循双亲委派模型。</p>\n<p>(3).近年来的热码替换，模块热部署等应用要求不用重启java虚拟机就可以实现代码模块的即插即用，催生了OSGi技术，在OSGi中类加载器体系被发展为网状结构。OSGi也没有完全遵循双亲委派模型。</p>\n<h4 id=\"动态加载Jar-amp-amp-ClassLoader-隔离问题\"><a href=\"#动态加载Jar-amp-amp-ClassLoader-隔离问题\" class=\"headerlink\" title=\"动态加载Jar &amp;&amp; ClassLoader 隔离问题\"></a><strong>动态加载Jar &amp;&amp; ClassLoader 隔离问题</strong></h4><p>动态加载Jar：</p>\n<p>Java 中动态加载 Jar 比较简单，如下：</p>\n<pre><code class=\"java\">URL[] urls = new URL[] {new URL(&quot;file:libs/jar1.jar&quot;)};  \nURLClassLoader loader = new URLClassLoader(urls, parentLoader);  </code></pre>\n<p>表示加载 libs 下面的 jar1.jar，其中 parentLoader 就是上面1中的 parent，可以为当前的 ClassLoader。</p>\n<p>ClassLoader 隔离问题：</p>\n<p>大家觉得一个运行程序中有没有可能同时存在两个包名和类名完全一致的类？JVM 及 Dalvik 对类唯一的识别是 ClassLoader id + PackageName + ClassName，所以一个运行程序中是有可能存在两个包名和类名完全一致的类的。并且如果这两个”类”不是由一个 ClassLoader 加载，是无法将一个类的示例强转为另外一个类的，这就是 ClassLoader 隔离。 如 Android 中碰到如下异常[java] view plain copy</p>\n<pre><code class=\"java\">android.support.v4.view.ViewPager can not be cast to android.support.v4.view.ViewPager  </code></pre>\n<p>当碰到这种问题时可以通过 instance.getClass().getClassLoader(); 得到 ClassLoader，看 ClassLoader 是否一样。</p>\n<p>加载不同 Jar 包中公共类：</p>\n<p>现在 Host 工程包含了 common.jar, jar1.jar, jar2.jar，并且 jar1.jar 和 jar2.jar 都包含了 common.jar，我们通过 ClassLoader 将 jar1, jar2 动态加载进来，这样在 Host 中实际是存在三份 common.jar.</p>\n<p>我们怎么保证 common.jar 只有一份而不会造成上面3中提到的 ClassLoader 隔离的问题呢，其实很简单，在生成 jar1 和 jar2 时把 common.jar 去掉，只保留 host 中一份，以 host ClassLoader 为 parentClassLoader 即可。</p>\n"},{"title":"Kafka-大数据的标准数据源","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-16T13:24:59.000Z","password":null,"summary":null,"_content":"\n## 基本概念\n\n> 消息队列中的基本概念尤为重要,当对基本概念有了深入的理解之后,消息队列的原理以及常见的问题都将更浅显明了。\n\n1. Broker:一个单独的Kafka server就是一个Broker,Broker的主要工作就是接收生产者发送来的消息,分配offset,然后将包装过的数据保存到磁盘上;此外,Broker还会接收消费者和其他Broker的请求,根据请求的类型进行相应的处理然后返回响应。多个Broker可以做成一个Cluster(集群)对外提供服务,每个Cluster当中会选出一个Broker来担任Controller,Controller是Kafka集群的指挥中心,其他的Broker则听从Controller指挥实现相应的功能。Controller负责管理分区的状态、管理每个分区的副本状态、监听zookeeper中数据的变化等。Controller也是一主多从的实现,所有的Broker都会监听Controller Leader的状态,当Leader Controller出现了故障的时候就重新选举新的Controller Leader。\n\n2. 消息:消息是Kafka中最基本的消息单元。消息由一串字节组成,其中主要由key和value构成,key和value都是字节数组。key的主要作用是根据一定的策略,将这个消息路由到指定的分区中,这样就可以保证包含同一个key的消息全部写入同一个分区\n\n3. Topic:Topic是用于存储消息的逻辑概念,Topic可以看做是一个消息的集合。每个Topic可以有多个生产者向其中push消息,也可以有多个消费者向其中pull消息。\n\n4. 分区(partition):每一个Topic都可以划分成多个分区(每一个Topic都至少有一个分区),不同的分区会分配在不同的Broker上以对Kafka进行水平扩展从而增加Kafka的并行处理能力。同一个Topic下的不同分区包含的消息是不同的。每一个消息在被添加到分区的时候,都会被分配一个offset,他是消息在此分区中的唯一编号,此外,Kafka通过offset保证消息在分区中的顺序,offset的顺序性不跨分区,也就是说在Kafka的同一个分区中的消息是有序的,不同分区的消息可能不是有序的。Partitions概念图\n\n   ​\n\n   ![](Kafka-大数据的标准数据源/1.png)\n\n   ​\n\n5. Log:分区在逻辑上对应着一个Log,当生产者将消息写入分区的时候,实际上就是写入到了一个Log中。Log是一个逻辑概念,对应的是一个磁盘上的文件夹。Log由多个Segment组成,每一个Segment又对应着一个日志文件和一个索引文件。\n\n6. 副本:Kafka对消息进行了冗余备份,每一个分区都可以有多个副本,每一个副本中包含的消息是相同的(但不保证同一时刻下完全相同)。副本的类型分为Leader和Follower,当分区只有一个副本的时候,该副本属于Leader,没有Follower。Kafka的副本具有一定的同步机制,在每个副本集合中,都会选举出一个副本作为Leader副本,Kafka在不同的场景中会采用不同的选举策略。Kafka中所有的读写请求都由选举出的Leader副本处理,其他的都作为Follower副本,Follower副本仅仅是从Leader副本中把数据拉取到本地之后,同步更新到自己的Log中。\n\n   分区副本:\n\n   ​\n\n   ![](Kafka-大数据的标准数据源/2.png)\n\n   ​\n\n7. 生产者:生产者主要是生产消息,并将消息按照一定的规则推送到Topic的分区中\n\n8. 消费者:消费者主要是从Topic中拉取消息,并对消息进行消费。Consumer维护消费者消费者消费到Partition的哪一个位置(offset的值)这一信息。**在Kafka中,多个Consumer可以组成一个Consumer Group,一个Consumer只能属于一个Consumer Group。Consumer Group保证其订阅的Topic中每一个分区只被分配给此Consumer Group中的一个消费者处理,所以如果需要实现消息的广播消费,则将消费者放在多个不同的Consumer Group中即可实现。**通过向Consumer Group中动态的添加适量的Consumer,可以出发Kafka的Rebalance操作重新分配分区与消费者的对应关系,从而实现了水平扩展的能力。\n\n9. ISR集合:ISR集合表示的是目前可用(alive)且消息量与Leader相差不多的副本集合,即整个副本集合的子集。ISR集合中副本所在的节点都与ZK保持着连接,此外,副本的最后一条消息的offset与Leader副本的最后一条消息的offset之间的差值不能超出指定的阈值。每一个分区的Leader副本都维护此分区的ISR集合。如上面所述,Leader副本进行了消息的写请求,Follower副本会从Leader上拉取写入的消息,第二个过程中会存在Follower副本中的消息数量少于Leader副本的状态,只要差值少于指定的阈值,那么此时的副本集合就是ISR集合。\n\n## 基本使用\n\n### Java调用API使用Kafka:\n\n```java\npublic class ProducerDemo {\n\tpublic static void main(String[] args) {\n    //构造Kafka的配置项\n    Properties properties=new Properties();\n    //定义Kafka服务端的主机名和端口号\n    properties.put(\"bootstrap.servers\", \"localhost:9092\");\n    //定义客户端的ID\n    properties.put(\"client.id\", \"DemoProducer\");\n    //定义消息的key和value的数据类型都是字节数组\n\tproperties.put(\"key.serializer\",\"org.apache.kafka.common.serialization.IntegerSerializer\");\n\t\t\t\tproperties.put(\"value.serializer\",\"org.apache.kafka.common.serialization.StringSerializer\");\n\t//创建生产者的核心类\n\tKafkaProducer producer=new KafkaProducer<>(properties);\n    //指定topic的名称\n    String topic = \"demo\";\n    //定义消息的key\n    int messageNo=1;\n    while(true){\n        //定义消息的value\n        String messageStr=\"Message_\"+messageNo;\n        long startTime=System.currentTimeMillis();\n        //异步的发送消息\n\t\tproducer.send(new ProducerRecord<>(topic, messageNo,messageStr,new Callback() {\n            //消息发送成功之后收到了Kafka服务端发来的ACK确认消息之后,就回调下面的方法\n            //metadata保存着生产者发送过来的消息的元数据,如果消息的发送过程中出现了异常,则改参数的值为null\n            @Override\n            public void onCompletion(RecordMetadata metadata, Exception exception) {\n                long elapsedTime=System.currentTimeMillis()-startTime;\n                if(null!=metadata){\n                    System.out.println(\"消息发送给的分区是:\"+metadata.partition()+\",消息的发送一共用了:\"+elapsedTime+\"ms\");\n                }else{\n                    exception.printStackTrace();\n                }\n            }\n        \t}));\n    \t}\t\t\t\n\t}\n}\n\t\npublic class ConsumerDemo {\n    public static void main(String[] args) {\n        Properties properties=new Properties();\n        properties.put(\"bootstrap.servers\",\"localhost:9092\");\n        //指定Consumer Group的id\n        properties.put(\"group.id\", \"BeautifulSoup\");\n        //自动提交offset\n        properties.put(\"enable.auto.commit\", \"true\");\n        //自动提交offset的时间间隔\n        properties.put(\"auto.commit.interval.ms\",\"1000\");\n        properties.put(\"session.timeout.ms\", \"30000\");\n        properties.put(\"key.deserializer\",\"org.apache.kafka.common.serialization.IntegerDeserializer\");\n        properties.put(\"value.deserializer\",\"org.apache.kafka.common.serialization.StringDeserializer\");\n        KafkaConsumer consumer=new KafkaConsumer<>(properties);\n        //指定消费者订阅的topic\n        consumer.subscribe(Arrays.asList(\"demo\",\"test\"));\n        try{\n            while(true){\n                //从服务端开始拉取消息,每次的poll都会拉取多个消息\n                ConsumerRecords<String, String> records=consumer.poll(100);\n                for (ConsumerRecord<String,String> consumerRecord : records) {\n                    System.out.println(\"消息记录的位置:\"+consumerRecord.offset()+\",消息的键:\"+consumerRecord.key()+\",消息的值:\"+consumerRecord.value());\n                }\n            }\n        }finally{\n            //关闭consumer\n            consumer.close();\n        }\n    }\n}\n```\n","source":"_posts/Kafka-大数据的标准数据源.md","raw":"---\ntitle: Kafka-大数据的标准数据源\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-16 21:24:59\npassword:\nsummary:\ntags:\ncategories: 大数据\n---\n\n## 基本概念\n\n> 消息队列中的基本概念尤为重要,当对基本概念有了深入的理解之后,消息队列的原理以及常见的问题都将更浅显明了。\n\n1. Broker:一个单独的Kafka server就是一个Broker,Broker的主要工作就是接收生产者发送来的消息,分配offset,然后将包装过的数据保存到磁盘上;此外,Broker还会接收消费者和其他Broker的请求,根据请求的类型进行相应的处理然后返回响应。多个Broker可以做成一个Cluster(集群)对外提供服务,每个Cluster当中会选出一个Broker来担任Controller,Controller是Kafka集群的指挥中心,其他的Broker则听从Controller指挥实现相应的功能。Controller负责管理分区的状态、管理每个分区的副本状态、监听zookeeper中数据的变化等。Controller也是一主多从的实现,所有的Broker都会监听Controller Leader的状态,当Leader Controller出现了故障的时候就重新选举新的Controller Leader。\n\n2. 消息:消息是Kafka中最基本的消息单元。消息由一串字节组成,其中主要由key和value构成,key和value都是字节数组。key的主要作用是根据一定的策略,将这个消息路由到指定的分区中,这样就可以保证包含同一个key的消息全部写入同一个分区\n\n3. Topic:Topic是用于存储消息的逻辑概念,Topic可以看做是一个消息的集合。每个Topic可以有多个生产者向其中push消息,也可以有多个消费者向其中pull消息。\n\n4. 分区(partition):每一个Topic都可以划分成多个分区(每一个Topic都至少有一个分区),不同的分区会分配在不同的Broker上以对Kafka进行水平扩展从而增加Kafka的并行处理能力。同一个Topic下的不同分区包含的消息是不同的。每一个消息在被添加到分区的时候,都会被分配一个offset,他是消息在此分区中的唯一编号,此外,Kafka通过offset保证消息在分区中的顺序,offset的顺序性不跨分区,也就是说在Kafka的同一个分区中的消息是有序的,不同分区的消息可能不是有序的。Partitions概念图\n\n   ​\n\n   ![](Kafka-大数据的标准数据源/1.png)\n\n   ​\n\n5. Log:分区在逻辑上对应着一个Log,当生产者将消息写入分区的时候,实际上就是写入到了一个Log中。Log是一个逻辑概念,对应的是一个磁盘上的文件夹。Log由多个Segment组成,每一个Segment又对应着一个日志文件和一个索引文件。\n\n6. 副本:Kafka对消息进行了冗余备份,每一个分区都可以有多个副本,每一个副本中包含的消息是相同的(但不保证同一时刻下完全相同)。副本的类型分为Leader和Follower,当分区只有一个副本的时候,该副本属于Leader,没有Follower。Kafka的副本具有一定的同步机制,在每个副本集合中,都会选举出一个副本作为Leader副本,Kafka在不同的场景中会采用不同的选举策略。Kafka中所有的读写请求都由选举出的Leader副本处理,其他的都作为Follower副本,Follower副本仅仅是从Leader副本中把数据拉取到本地之后,同步更新到自己的Log中。\n\n   分区副本:\n\n   ​\n\n   ![](Kafka-大数据的标准数据源/2.png)\n\n   ​\n\n7. 生产者:生产者主要是生产消息,并将消息按照一定的规则推送到Topic的分区中\n\n8. 消费者:消费者主要是从Topic中拉取消息,并对消息进行消费。Consumer维护消费者消费者消费到Partition的哪一个位置(offset的值)这一信息。**在Kafka中,多个Consumer可以组成一个Consumer Group,一个Consumer只能属于一个Consumer Group。Consumer Group保证其订阅的Topic中每一个分区只被分配给此Consumer Group中的一个消费者处理,所以如果需要实现消息的广播消费,则将消费者放在多个不同的Consumer Group中即可实现。**通过向Consumer Group中动态的添加适量的Consumer,可以出发Kafka的Rebalance操作重新分配分区与消费者的对应关系,从而实现了水平扩展的能力。\n\n9. ISR集合:ISR集合表示的是目前可用(alive)且消息量与Leader相差不多的副本集合,即整个副本集合的子集。ISR集合中副本所在的节点都与ZK保持着连接,此外,副本的最后一条消息的offset与Leader副本的最后一条消息的offset之间的差值不能超出指定的阈值。每一个分区的Leader副本都维护此分区的ISR集合。如上面所述,Leader副本进行了消息的写请求,Follower副本会从Leader上拉取写入的消息,第二个过程中会存在Follower副本中的消息数量少于Leader副本的状态,只要差值少于指定的阈值,那么此时的副本集合就是ISR集合。\n\n## 基本使用\n\n### Java调用API使用Kafka:\n\n```java\npublic class ProducerDemo {\n\tpublic static void main(String[] args) {\n    //构造Kafka的配置项\n    Properties properties=new Properties();\n    //定义Kafka服务端的主机名和端口号\n    properties.put(\"bootstrap.servers\", \"localhost:9092\");\n    //定义客户端的ID\n    properties.put(\"client.id\", \"DemoProducer\");\n    //定义消息的key和value的数据类型都是字节数组\n\tproperties.put(\"key.serializer\",\"org.apache.kafka.common.serialization.IntegerSerializer\");\n\t\t\t\tproperties.put(\"value.serializer\",\"org.apache.kafka.common.serialization.StringSerializer\");\n\t//创建生产者的核心类\n\tKafkaProducer producer=new KafkaProducer<>(properties);\n    //指定topic的名称\n    String topic = \"demo\";\n    //定义消息的key\n    int messageNo=1;\n    while(true){\n        //定义消息的value\n        String messageStr=\"Message_\"+messageNo;\n        long startTime=System.currentTimeMillis();\n        //异步的发送消息\n\t\tproducer.send(new ProducerRecord<>(topic, messageNo,messageStr,new Callback() {\n            //消息发送成功之后收到了Kafka服务端发来的ACK确认消息之后,就回调下面的方法\n            //metadata保存着生产者发送过来的消息的元数据,如果消息的发送过程中出现了异常,则改参数的值为null\n            @Override\n            public void onCompletion(RecordMetadata metadata, Exception exception) {\n                long elapsedTime=System.currentTimeMillis()-startTime;\n                if(null!=metadata){\n                    System.out.println(\"消息发送给的分区是:\"+metadata.partition()+\",消息的发送一共用了:\"+elapsedTime+\"ms\");\n                }else{\n                    exception.printStackTrace();\n                }\n            }\n        \t}));\n    \t}\t\t\t\n\t}\n}\n\t\npublic class ConsumerDemo {\n    public static void main(String[] args) {\n        Properties properties=new Properties();\n        properties.put(\"bootstrap.servers\",\"localhost:9092\");\n        //指定Consumer Group的id\n        properties.put(\"group.id\", \"BeautifulSoup\");\n        //自动提交offset\n        properties.put(\"enable.auto.commit\", \"true\");\n        //自动提交offset的时间间隔\n        properties.put(\"auto.commit.interval.ms\",\"1000\");\n        properties.put(\"session.timeout.ms\", \"30000\");\n        properties.put(\"key.deserializer\",\"org.apache.kafka.common.serialization.IntegerDeserializer\");\n        properties.put(\"value.deserializer\",\"org.apache.kafka.common.serialization.StringDeserializer\");\n        KafkaConsumer consumer=new KafkaConsumer<>(properties);\n        //指定消费者订阅的topic\n        consumer.subscribe(Arrays.asList(\"demo\",\"test\"));\n        try{\n            while(true){\n                //从服务端开始拉取消息,每次的poll都会拉取多个消息\n                ConsumerRecords<String, String> records=consumer.poll(100);\n                for (ConsumerRecord<String,String> consumerRecord : records) {\n                    System.out.println(\"消息记录的位置:\"+consumerRecord.offset()+\",消息的键:\"+consumerRecord.key()+\",消息的值:\"+consumerRecord.value());\n                }\n            }\n        }finally{\n            //关闭consumer\n            consumer.close();\n        }\n    }\n}\n```\n","slug":"Kafka-大数据的标准数据源","published":1,"updated":"2021-04-29T10:15:49.533Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mlai000rvkvyjadgzk9p","content":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><blockquote>\n<p>消息队列中的基本概念尤为重要,当对基本概念有了深入的理解之后,消息队列的原理以及常见的问题都将更浅显明了。</p>\n</blockquote>\n<ol>\n<li><p>Broker:一个单独的Kafka server就是一个Broker,Broker的主要工作就是接收生产者发送来的消息,分配offset,然后将包装过的数据保存到磁盘上;此外,Broker还会接收消费者和其他Broker的请求,根据请求的类型进行相应的处理然后返回响应。多个Broker可以做成一个Cluster(集群)对外提供服务,每个Cluster当中会选出一个Broker来担任Controller,Controller是Kafka集群的指挥中心,其他的Broker则听从Controller指挥实现相应的功能。Controller负责管理分区的状态、管理每个分区的副本状态、监听zookeeper中数据的变化等。Controller也是一主多从的实现,所有的Broker都会监听Controller Leader的状态,当Leader Controller出现了故障的时候就重新选举新的Controller Leader。</p>\n</li>\n<li><p>消息:消息是Kafka中最基本的消息单元。消息由一串字节组成,其中主要由key和value构成,key和value都是字节数组。key的主要作用是根据一定的策略,将这个消息路由到指定的分区中,这样就可以保证包含同一个key的消息全部写入同一个分区</p>\n</li>\n<li><p>Topic:Topic是用于存储消息的逻辑概念,Topic可以看做是一个消息的集合。每个Topic可以有多个生产者向其中push消息,也可以有多个消费者向其中pull消息。</p>\n</li>\n<li><p>分区(partition):每一个Topic都可以划分成多个分区(每一个Topic都至少有一个分区),不同的分区会分配在不同的Broker上以对Kafka进行水平扩展从而增加Kafka的并行处理能力。同一个Topic下的不同分区包含的消息是不同的。每一个消息在被添加到分区的时候,都会被分配一个offset,他是消息在此分区中的唯一编号,此外,Kafka通过offset保证消息在分区中的顺序,offset的顺序性不跨分区,也就是说在Kafka的同一个分区中的消息是有序的,不同分区的消息可能不是有序的。Partitions概念图</p>\n<p>​</p>\n<p><img src=\"/2020/01/16/kafka-da-shu-ju-de-biao-zhun-shu-ju-yuan/1.png\" alt></p>\n<p>​</p>\n</li>\n<li><p>Log:分区在逻辑上对应着一个Log,当生产者将消息写入分区的时候,实际上就是写入到了一个Log中。Log是一个逻辑概念,对应的是一个磁盘上的文件夹。Log由多个Segment组成,每一个Segment又对应着一个日志文件和一个索引文件。</p>\n</li>\n<li><p>副本:Kafka对消息进行了冗余备份,每一个分区都可以有多个副本,每一个副本中包含的消息是相同的(但不保证同一时刻下完全相同)。副本的类型分为Leader和Follower,当分区只有一个副本的时候,该副本属于Leader,没有Follower。Kafka的副本具有一定的同步机制,在每个副本集合中,都会选举出一个副本作为Leader副本,Kafka在不同的场景中会采用不同的选举策略。Kafka中所有的读写请求都由选举出的Leader副本处理,其他的都作为Follower副本,Follower副本仅仅是从Leader副本中把数据拉取到本地之后,同步更新到自己的Log中。</p>\n<p>分区副本:</p>\n<p>​</p>\n<p><img src=\"/2020/01/16/kafka-da-shu-ju-de-biao-zhun-shu-ju-yuan/2.png\" alt></p>\n<p>​</p>\n</li>\n<li><p>生产者:生产者主要是生产消息,并将消息按照一定的规则推送到Topic的分区中</p>\n</li>\n<li><p>消费者:消费者主要是从Topic中拉取消息,并对消息进行消费。Consumer维护消费者消费者消费到Partition的哪一个位置(offset的值)这一信息。<strong>在Kafka中,多个Consumer可以组成一个Consumer Group,一个Consumer只能属于一个Consumer Group。Consumer Group保证其订阅的Topic中每一个分区只被分配给此Consumer Group中的一个消费者处理,所以如果需要实现消息的广播消费,则将消费者放在多个不同的Consumer Group中即可实现。</strong>通过向Consumer Group中动态的添加适量的Consumer,可以出发Kafka的Rebalance操作重新分配分区与消费者的对应关系,从而实现了水平扩展的能力。</p>\n</li>\n<li><p>ISR集合:ISR集合表示的是目前可用(alive)且消息量与Leader相差不多的副本集合,即整个副本集合的子集。ISR集合中副本所在的节点都与ZK保持着连接,此外,副本的最后一条消息的offset与Leader副本的最后一条消息的offset之间的差值不能超出指定的阈值。每一个分区的Leader副本都维护此分区的ISR集合。如上面所述,Leader副本进行了消息的写请求,Follower副本会从Leader上拉取写入的消息,第二个过程中会存在Follower副本中的消息数量少于Leader副本的状态,只要差值少于指定的阈值,那么此时的副本集合就是ISR集合。</p>\n</li>\n</ol>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><h3 id=\"Java调用API使用Kafka\"><a href=\"#Java调用API使用Kafka\" class=\"headerlink\" title=\"Java调用API使用Kafka:\"></a>Java调用API使用Kafka:</h3><pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProducerDemo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//构造Kafka的配置项</span>\n    Properties properties<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//定义Kafka服务端的主机名和端口号</span>\n    properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bootstrap.servers\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"localhost:9092\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//定义客户端的ID</span>\n    properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"client.id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DemoProducer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//定义消息的key和value的数据类型都是字节数组</span>\n    properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key.serializer\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"org.apache.kafka.common.serialization.IntegerSerializer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value.serializer\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"org.apache.kafka.common.serialization.StringSerializer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//创建生产者的核心类</span>\n    KafkaProducer producer<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">KafkaProducer</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//指定topic的名称</span>\n    String topic <span class=\"token operator\">=</span> <span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//定义消息的key</span>\n    <span class=\"token keyword\">int</span> messageNo<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//定义消息的value</span>\n        String messageStr<span class=\"token operator\">=</span><span class=\"token string\">\"Message_\"</span><span class=\"token operator\">+</span>messageNo<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> startTime<span class=\"token operator\">=</span>System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//异步的发送消息</span>\n        producer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ProducerRecord</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>topic<span class=\"token punctuation\">,</span> messageNo<span class=\"token punctuation\">,</span>messageStr<span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//消息发送成功之后收到了Kafka服务端发来的ACK确认消息之后,就回调下面的方法</span>\n            <span class=\"token comment\" spellcheck=\"true\">//metadata保存着生产者发送过来的消息的元数据,如果消息的发送过程中出现了异常,则改参数的值为null</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCompletion</span><span class=\"token punctuation\">(</span>RecordMetadata metadata<span class=\"token punctuation\">,</span> Exception exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">long</span> elapsedTime<span class=\"token operator\">=</span>System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>startTime<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>null<span class=\"token operator\">!=</span>metadata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息发送给的分区是:\"</span><span class=\"token operator\">+</span>metadata<span class=\"token punctuation\">.</span><span class=\"token function\">partition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\",消息的发送一共用了:\"</span><span class=\"token operator\">+</span>elapsedTime<span class=\"token operator\">+</span><span class=\"token string\">\"ms\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                    exception<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>            \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConsumerDemo</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Properties properties<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bootstrap.servers\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"localhost:9092\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//指定Consumer Group的id</span>\n        properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"group.id\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"BeautifulSoup\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//自动提交offset</span>\n        properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enable.auto.commit\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//自动提交offset的时间间隔</span>\n        properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"auto.commit.interval.ms\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"session.timeout.ms\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"30000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key.deserializer\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"org.apache.kafka.common.serialization.IntegerDeserializer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        properties<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value.deserializer\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"org.apache.kafka.common.serialization.StringDeserializer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        KafkaConsumer consumer<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">KafkaConsumer</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//指定消费者订阅的topic</span>\n        consumer<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//从服务端开始拉取消息,每次的poll都会拉取多个消息</span>\n                ConsumerRecords<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> String<span class=\"token operator\">></span> records<span class=\"token operator\">=</span>consumer<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ConsumerRecord<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span>String<span class=\"token operator\">></span> consumerRecord <span class=\"token operator\">:</span> records<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"消息记录的位置:\"</span><span class=\"token operator\">+</span>consumerRecord<span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\",消息的键:\"</span><span class=\"token operator\">+</span>consumerRecord<span class=\"token punctuation\">.</span><span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\",消息的值:\"</span><span class=\"token operator\">+</span>consumerRecord<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//关闭consumer</span>\n            consumer<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><blockquote>\n<p>消息队列中的基本概念尤为重要,当对基本概念有了深入的理解之后,消息队列的原理以及常见的问题都将更浅显明了。</p>\n</blockquote>\n<ol>\n<li><p>Broker:一个单独的Kafka server就是一个Broker,Broker的主要工作就是接收生产者发送来的消息,分配offset,然后将包装过的数据保存到磁盘上;此外,Broker还会接收消费者和其他Broker的请求,根据请求的类型进行相应的处理然后返回响应。多个Broker可以做成一个Cluster(集群)对外提供服务,每个Cluster当中会选出一个Broker来担任Controller,Controller是Kafka集群的指挥中心,其他的Broker则听从Controller指挥实现相应的功能。Controller负责管理分区的状态、管理每个分区的副本状态、监听zookeeper中数据的变化等。Controller也是一主多从的实现,所有的Broker都会监听Controller Leader的状态,当Leader Controller出现了故障的时候就重新选举新的Controller Leader。</p>\n</li>\n<li><p>消息:消息是Kafka中最基本的消息单元。消息由一串字节组成,其中主要由key和value构成,key和value都是字节数组。key的主要作用是根据一定的策略,将这个消息路由到指定的分区中,这样就可以保证包含同一个key的消息全部写入同一个分区</p>\n</li>\n<li><p>Topic:Topic是用于存储消息的逻辑概念,Topic可以看做是一个消息的集合。每个Topic可以有多个生产者向其中push消息,也可以有多个消费者向其中pull消息。</p>\n</li>\n<li><p>分区(partition):每一个Topic都可以划分成多个分区(每一个Topic都至少有一个分区),不同的分区会分配在不同的Broker上以对Kafka进行水平扩展从而增加Kafka的并行处理能力。同一个Topic下的不同分区包含的消息是不同的。每一个消息在被添加到分区的时候,都会被分配一个offset,他是消息在此分区中的唯一编号,此外,Kafka通过offset保证消息在分区中的顺序,offset的顺序性不跨分区,也就是说在Kafka的同一个分区中的消息是有序的,不同分区的消息可能不是有序的。Partitions概念图</p>\n<p>​</p>\n<p><img src=\"/2020/01/16/kafka-da-shu-ju-de-biao-zhun-shu-ju-yuan/1.png\" alt></p>\n<p>​</p>\n</li>\n<li><p>Log:分区在逻辑上对应着一个Log,当生产者将消息写入分区的时候,实际上就是写入到了一个Log中。Log是一个逻辑概念,对应的是一个磁盘上的文件夹。Log由多个Segment组成,每一个Segment又对应着一个日志文件和一个索引文件。</p>\n</li>\n<li><p>副本:Kafka对消息进行了冗余备份,每一个分区都可以有多个副本,每一个副本中包含的消息是相同的(但不保证同一时刻下完全相同)。副本的类型分为Leader和Follower,当分区只有一个副本的时候,该副本属于Leader,没有Follower。Kafka的副本具有一定的同步机制,在每个副本集合中,都会选举出一个副本作为Leader副本,Kafka在不同的场景中会采用不同的选举策略。Kafka中所有的读写请求都由选举出的Leader副本处理,其他的都作为Follower副本,Follower副本仅仅是从Leader副本中把数据拉取到本地之后,同步更新到自己的Log中。</p>\n<p>分区副本:</p>\n<p>​</p>\n<p><img src=\"/2020/01/16/kafka-da-shu-ju-de-biao-zhun-shu-ju-yuan/2.png\" alt></p>\n<p>​</p>\n</li>\n<li><p>生产者:生产者主要是生产消息,并将消息按照一定的规则推送到Topic的分区中</p>\n</li>\n<li><p>消费者:消费者主要是从Topic中拉取消息,并对消息进行消费。Consumer维护消费者消费者消费到Partition的哪一个位置(offset的值)这一信息。<strong>在Kafka中,多个Consumer可以组成一个Consumer Group,一个Consumer只能属于一个Consumer Group。Consumer Group保证其订阅的Topic中每一个分区只被分配给此Consumer Group中的一个消费者处理,所以如果需要实现消息的广播消费,则将消费者放在多个不同的Consumer Group中即可实现。</strong>通过向Consumer Group中动态的添加适量的Consumer,可以出发Kafka的Rebalance操作重新分配分区与消费者的对应关系,从而实现了水平扩展的能力。</p>\n</li>\n<li><p>ISR集合:ISR集合表示的是目前可用(alive)且消息量与Leader相差不多的副本集合,即整个副本集合的子集。ISR集合中副本所在的节点都与ZK保持着连接,此外,副本的最后一条消息的offset与Leader副本的最后一条消息的offset之间的差值不能超出指定的阈值。每一个分区的Leader副本都维护此分区的ISR集合。如上面所述,Leader副本进行了消息的写请求,Follower副本会从Leader上拉取写入的消息,第二个过程中会存在Follower副本中的消息数量少于Leader副本的状态,只要差值少于指定的阈值,那么此时的副本集合就是ISR集合。</p>\n</li>\n</ol>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><h3 id=\"Java调用API使用Kafka\"><a href=\"#Java调用API使用Kafka\" class=\"headerlink\" title=\"Java调用API使用Kafka:\"></a>Java调用API使用Kafka:</h3><pre><code class=\"java\">public class ProducerDemo {\n    public static void main(String[] args) {\n    //构造Kafka的配置项\n    Properties properties=new Properties();\n    //定义Kafka服务端的主机名和端口号\n    properties.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);\n    //定义客户端的ID\n    properties.put(&quot;client.id&quot;, &quot;DemoProducer&quot;);\n    //定义消息的key和value的数据类型都是字节数组\n    properties.put(&quot;key.serializer&quot;,&quot;org.apache.kafka.common.serialization.IntegerSerializer&quot;);\n                properties.put(&quot;value.serializer&quot;,&quot;org.apache.kafka.common.serialization.StringSerializer&quot;);\n    //创建生产者的核心类\n    KafkaProducer producer=new KafkaProducer&lt;&gt;(properties);\n    //指定topic的名称\n    String topic = &quot;demo&quot;;\n    //定义消息的key\n    int messageNo=1;\n    while(true){\n        //定义消息的value\n        String messageStr=&quot;Message_&quot;+messageNo;\n        long startTime=System.currentTimeMillis();\n        //异步的发送消息\n        producer.send(new ProducerRecord&lt;&gt;(topic, messageNo,messageStr,new Callback() {\n            //消息发送成功之后收到了Kafka服务端发来的ACK确认消息之后,就回调下面的方法\n            //metadata保存着生产者发送过来的消息的元数据,如果消息的发送过程中出现了异常,则改参数的值为null\n            @Override\n            public void onCompletion(RecordMetadata metadata, Exception exception) {\n                long elapsedTime=System.currentTimeMillis()-startTime;\n                if(null!=metadata){\n                    System.out.println(&quot;消息发送给的分区是:&quot;+metadata.partition()+&quot;,消息的发送一共用了:&quot;+elapsedTime+&quot;ms&quot;);\n                }else{\n                    exception.printStackTrace();\n                }\n            }\n            }));\n        }            \n    }\n}\n\npublic class ConsumerDemo {\n    public static void main(String[] args) {\n        Properties properties=new Properties();\n        properties.put(&quot;bootstrap.servers&quot;,&quot;localhost:9092&quot;);\n        //指定Consumer Group的id\n        properties.put(&quot;group.id&quot;, &quot;BeautifulSoup&quot;);\n        //自动提交offset\n        properties.put(&quot;enable.auto.commit&quot;, &quot;true&quot;);\n        //自动提交offset的时间间隔\n        properties.put(&quot;auto.commit.interval.ms&quot;,&quot;1000&quot;);\n        properties.put(&quot;session.timeout.ms&quot;, &quot;30000&quot;);\n        properties.put(&quot;key.deserializer&quot;,&quot;org.apache.kafka.common.serialization.IntegerDeserializer&quot;);\n        properties.put(&quot;value.deserializer&quot;,&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);\n        KafkaConsumer consumer=new KafkaConsumer&lt;&gt;(properties);\n        //指定消费者订阅的topic\n        consumer.subscribe(Arrays.asList(&quot;demo&quot;,&quot;test&quot;));\n        try{\n            while(true){\n                //从服务端开始拉取消息,每次的poll都会拉取多个消息\n                ConsumerRecords&lt;String, String&gt; records=consumer.poll(100);\n                for (ConsumerRecord&lt;String,String&gt; consumerRecord : records) {\n                    System.out.println(&quot;消息记录的位置:&quot;+consumerRecord.offset()+&quot;,消息的键:&quot;+consumerRecord.key()+&quot;,消息的值:&quot;+consumerRecord.value());\n                }\n            }\n        }finally{\n            //关闭consumer\n            consumer.close();\n        }\n    }\n}</code></pre>\n"},{"title":"MapReduce中的两表join方案","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-07-05T10:18:44.000Z","password":null,"summary":null,"_content":"\n# MapReduce中两表join方案\n\n### 概述\n\n随着互联网行业的发展,数据量变得越来越大,随之而来的就是hadoop生态圈的兴起,其中MapReduce作为较原始的分布式计算框架,在当时也是解决了很多分布式计算的问题,其中包括两张表的join操作,当然其中是包含了一些特殊技巧的,本文主要介绍MapReduce常用的join实现方法,并展示一个简单的demo.\n\n### 1.reduce side join\n\nreduce side join是一种最简单的join方式，其主要思想如下：\n\n在map阶段，map函数同时读取两个文件File1和File2，为了区分两种来源的key/value数据对，对每条数据打一个标签.\n\n在reduce阶段，reduce函数获取key相同的来自File1和File2文件的value list， 然后对于同一个key，根据map阶段打上的标签分别处理实现对File1和File2中的数据进行join.\n\n##### 合并订单表与商品表案例\n\n```java\npublic class TableBean implements Writable {\n\n    private String order_id; //订单id\n    private String p_id; //产品id\n    private int amount; //产品数量\n    private String pname;   //产品名称\n    private String flag;    //表的标记\n\n    @Override\n    public String toString() {\n        return order_id + \"\\t\" + pname + \"\\t\" + amount;\n    }\n\n    public TableBean(String order_id, String p_id, int amount, String pname, String flag) {\n        this.order_id = order_id;\n        this.p_id = p_id;\n        this.amount = amount;\n        this.pname = pname;\n        this.flag = flag;\n    }\n\n    public TableBean() {\n    }\n\n    public String getOrder_id() {\n        return order_id;\n    }\n\n    public void setOrder_id(String order_id) {\n        this.order_id = order_id;\n    }\n\n    public String getP_id() {\n        return p_id;\n    }\n\n    public void setP_id(String p_id) {\n        this.p_id = p_id;\n    }\n\n    public int getAmount() {\n        return amount;\n    }\n\n    public void setAmount(int amount) {\n        this.amount = amount;\n    }\n\n    public String getPname() {\n        return pname;\n    }\n\n    public void setPname(String pname) {\n        this.pname = pname;\n    }\n\n    public String getFlag() {\n        return flag;\n    }\n\n    public void setFlag(String flag) {\n        this.flag = flag;\n    }\n\n    @Override\n    public void write(DataOutput dataOutput) throws IOException {\n        dataOutput.writeUTF(order_id);\n        dataOutput.writeUTF(p_id);\n        dataOutput.writeInt(amount);\n        dataOutput.writeUTF(pname);\n        dataOutput.writeUTF(flag);\n    }\n\n    @Override\n    public void readFields(DataInput dataInput) throws IOException {\n        order_id = dataInput.readUTF();\n        p_id = dataInput.readUTF();\n        amount = dataInput.readInt();\n        pname = dataInput.readUTF();\n        flag = dataInput.readUTF();\n    }\n}\n\n\npublic class TableMapper extends Mapper<LongWritable, Text,Text,TableBean> {\n\n    private String name;\n\n    private TableBean tableBean = new TableBean();\n\n    private Text text = new Text();\n\n    @Override\n    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {\n\n        String[] split = value.toString().split(\"\\t\");\n\n        if (name.startsWith(\"order\")){\n\n            tableBean.setOrder_id(split[0]);\n            tableBean.setP_id(split[1]);\n            tableBean.setAmount(Integer.parseInt(split[2]));\n            tableBean.setPname(\"\");\n            tableBean.setFlag(\"order\");\n\n            text.set(split[1]);\n        }else {\n            tableBean.setP_id(split[0]);\n            tableBean.setPname(split[1]);\n            tableBean.setAmount(0);\n            tableBean.setOrder_id(\"\");\n            tableBean.setFlag(\"pd\");\n\n            text.set(split[0]);\n        }\n        context.write(text,tableBean);\n    }\n    @Override\n    protected void setup(Context context) throws IOException, InterruptedException {\n        //获取输入文件切片\n        FileSplit fileSplit = (FileSplit) context.getInputSplit();\n\n        //获取输入文件名字\n        name = fileSplit.getPath().getName();\n    }\n}\n\n\npublic class TableReducer extends Reducer<Text,TableBean,TableBean, NullWritable> {\n    @Override\n    protected void reduce(Text key, Iterable<TableBean> values, Context context) throws IOException, InterruptedException {\n        ArrayList<TableBean> tableBeans = new ArrayList<>();\n\n        TableBean tableBean = new TableBean();\n\n        for (TableBean value : values) {\n\n            if (value.getFlag().equals(\"order\")) {\n                TableBean tableBean1 = new TableBean();\n                try {\n                    BeanUtils.copyProperties(tableBean1,value);\n                } catch (IllegalAccessException e) {\n                    e.printStackTrace();\n                } catch (InvocationTargetException e) {\n                    e.printStackTrace();\n                }\n                tableBeans.add(tableBean1);\n            }else {\n                try {\n                    BeanUtils.copyProperties(tableBean,value);\n                } catch (IllegalAccessException e) {\n                    e.printStackTrace();\n                } catch (InvocationTargetException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        for (TableBean bean : tableBeans) {\n            System.out.println(tableBean.getPname());\n            bean.setPname(tableBean.getPname());\n            //写出数据\n            context.write(bean,NullWritable.get());\n        }\n    }\n}\npackage com.university.MapReduce.join.reduce_join;\n\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.io.NullWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Job;\nimport org.apache.hadoop.mapreduce.lib.input.FileInputFormat;\nimport org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;\n\npublic class TableDriver {\n    public static void main(String[] args) throws Exception {\n\n        // 1 获取配置信息，或者job对象实例\n        Configuration configuration = new Configuration();\n        Job job = Job.getInstance(configuration);\n\n        // 2 指定本程序的jar包所在的本地路径\n        job.setJarByClass(TableDriver.class);\n\n        // 3 指定本业务job要使用的Mapper/Reducer业务类\n        job.setMapperClass(TableMapper.class);\n        job.setReducerClass(TableReducer.class);\n\n        // 4 指定Mapper输出数据的kv类型\n        job.setMapOutputKeyClass(Text.class);\n        job.setMapOutputValueClass(TableBean.class);\n\n        // 5 指定最终输出的数据的kv类型\n        job.setOutputKeyClass(TableBean.class);\n        job.setOutputValueClass(NullWritable.class);\n\n        // 6 指定job的输入原始文件所在目录\n        FileInputFormat.setInputPaths(job, new Path(\"C:\\\\Users\\\\tiger\\\\Desktop\\\\code1_count\\\\input1\"));\n        FileOutputFormat.setOutputPath(job, new Path(\"C:\\\\Users\\\\tiger\\\\Desktop\\\\code1_count\\\\flow_count9\"));\n\n        // 7 将job中配置的相关参数，以及job所用的java类所在的jar包， 提交给yarn去运行\n        boolean result = job.waitForCompletion(true);\n        System.exit(result ? 0 : 1);\n    }\n}\n```\n\n### 2.map side join\n\nreduce的阶段是为了解决map阶段不能获取所有需要的join字段，即：同一个key对应的字段可能位于不同map中。但reduce side join是非常低效的，因为shuffle阶段要进行大量的数据传输。\n\nMap side join是针对以下场景进行的优化：两个待连接表中，有一个表非常大，而另一个表非常小，以至于小表可以直接存放到内存中。这样，我们可以将小表缓存起来放入每一个map任务中，然后只扫描大表：对于大表中的每一条记录key/value，在缓存中查找是否有相同的key的记录。\n\n##### 合并订单表与商品表案例\n\n```java\npublic class DistributedCacheMapper extends Mapper<LongWritable, Text,Text, NullWritable> {\n\n    private Map<String,String> pdMap = new HashMap<>();\n\n    @Override\n    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {\n        String[] split = value.toString().split(\"\\t\");\n\n        String pId = split[1];\n\n        String pdName = pdMap.get(pId);\n        System.out.println(pdName);\n\n        split[1] = pdName;\n\n        StringBuffer buffer = new StringBuffer();\n        for (String s : split) {\n            buffer.append(s);\n        }\n        context.write(new Text(buffer.toString()),NullWritable.get());\n    }\n\n    @Override\n    protected void setup(Context context) throws IOException, InterruptedException {\n        URI[] cacheFiles = context.getCacheFiles();\n        String path = cacheFiles[0].getPath();\n\n        BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(path)));\n\n        String line;\n        while(StringUtils.isNotEmpty(line = reader.readLine())){\n            //切割\n            String[] split = line.split(\"\\t\");\n            //缓存数据到集合\n            pdMap.put(split[0],split[1]);\n        }\n        //关闭资源\n        reader.close();\n    }\n}\n\n\npublic class DistributedCacheDriver {\n\n    public static void main(String[] args) throws IOException, URISyntaxException, ClassNotFoundException, InterruptedException {\n        // 1 获取job信息\n        Configuration configuration = new Configuration();\n        //开启map端输出压缩\n        configuration.setBoolean(\"mapreduce.map.output.compress\",true);\n        //设置map端输出压缩\n        configuration.setClass(\"mapreduce.map.output.compress.codec\", BZip2Codec.class, CompressionCodec.class);\n\n        Job job = Job.getInstance(configuration);\n\n        // 2 设置加载jar包路径\n        job.setJarByClass(DistributedCacheDriver.class);\n\n        // 3 关联map\n        job.setMapperClass(DistributedCacheMapper.class);\n\n        // 4 设置最终输出数据类型\n        job.setOutputKeyClass(Text.class);\n        job.setOutputValueClass(NullWritable.class);\n\n        // 5 设置输入输出路径\n        FileInputFormat.setInputPaths(job, new Path(\"C:\\\\Users\\\\tiger\\\\Desktop\\\\code1_count\\\\input1\\\\order.txt\"));\n        FileOutputFormat.setOutputPath(job, new Path(\"C:\\\\Users\\\\tiger\\\\Desktop\\\\code1_count\\\\flow_count10\"));\n\n        //设置reduce端输出压缩开启\n        FileOutputFormat.setCompressOutput(job,true);\n        //设置压缩方式\n        FileOutputFormat.setOutputCompressorClass(job,BZip2Codec.class);\n\n        // 6 加载缓存数据\n        job.addCacheFile(new URI(\"file:///C:/Users/tiger/Desktop/code1_count/input1/pd.txt\"));\n\n        // 7 Map端Join的逻辑不需要Reduce阶段，设置reduceTask数量为0\n        job.setNumReduceTasks(0);\n\n        // 8 提交\n        boolean result = job.waitForCompletion(true);\n        System.exit(result ? 0 : 1);\n    }\n}\n```\n\n### 2.3 Semi Join\n\nSemi Join，也叫半连接，是从分布式数据库中借鉴过来的方法。它的产生动机是：对于reduce side join，跨机器的数据传输量非常大，这成了join操作的一个瓶颈，如果能够在map端过滤掉不会参加join操作的数据，则可以大大节省网络IO。\n\n实现方法很简单：选取一个小表，假设是File1，将其参与join的key抽取出来，保存到文件File3中，File3文件一般很小，可以放到内存中。在map阶段，使用DistributedCache将File3复制到各个TaskTracker上，然后将File2中不在File3中的key对应的记录过滤掉，剩下的reduce阶段的工作与reduce side join相同。\n\n### 2.4 reduce side join + BloomFilter\n\n在某些情况下，SemiJoin抽取出来的小表的key集合在内存中仍然存放不下，这时候可以使用BloomFiler以节省空间。\n\nBloomFilter最常见的作用是：判断某个元素是否在一个集合里面。它最重要的两个方法是：add() 和contains()。最大的特点是不会存在 false negative，即：如果contains()返回false，则该元素一定不在集合中，但会存在一定的 false positive，即：如果contains()返回true，则该元素一定可能在集合中。\n\n因而可将小表中的key保存到BloomFilter中，在map阶段过滤大表，可能有一些不在小表中的记录没有过滤掉（但是在小表中的记录一定不会过滤掉），这没关系，只不过增加了少量的网络IO而已。","source":"_posts/MapReduce中的两表join方案.md","raw":"---\ntitle: MapReduce中的两表join方案\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-07-05 18:18:44\npassword:\nsummary:\ntags:\ncategories: 大数据\n---\n\n# MapReduce中两表join方案\n\n### 概述\n\n随着互联网行业的发展,数据量变得越来越大,随之而来的就是hadoop生态圈的兴起,其中MapReduce作为较原始的分布式计算框架,在当时也是解决了很多分布式计算的问题,其中包括两张表的join操作,当然其中是包含了一些特殊技巧的,本文主要介绍MapReduce常用的join实现方法,并展示一个简单的demo.\n\n### 1.reduce side join\n\nreduce side join是一种最简单的join方式，其主要思想如下：\n\n在map阶段，map函数同时读取两个文件File1和File2，为了区分两种来源的key/value数据对，对每条数据打一个标签.\n\n在reduce阶段，reduce函数获取key相同的来自File1和File2文件的value list， 然后对于同一个key，根据map阶段打上的标签分别处理实现对File1和File2中的数据进行join.\n\n##### 合并订单表与商品表案例\n\n```java\npublic class TableBean implements Writable {\n\n    private String order_id; //订单id\n    private String p_id; //产品id\n    private int amount; //产品数量\n    private String pname;   //产品名称\n    private String flag;    //表的标记\n\n    @Override\n    public String toString() {\n        return order_id + \"\\t\" + pname + \"\\t\" + amount;\n    }\n\n    public TableBean(String order_id, String p_id, int amount, String pname, String flag) {\n        this.order_id = order_id;\n        this.p_id = p_id;\n        this.amount = amount;\n        this.pname = pname;\n        this.flag = flag;\n    }\n\n    public TableBean() {\n    }\n\n    public String getOrder_id() {\n        return order_id;\n    }\n\n    public void setOrder_id(String order_id) {\n        this.order_id = order_id;\n    }\n\n    public String getP_id() {\n        return p_id;\n    }\n\n    public void setP_id(String p_id) {\n        this.p_id = p_id;\n    }\n\n    public int getAmount() {\n        return amount;\n    }\n\n    public void setAmount(int amount) {\n        this.amount = amount;\n    }\n\n    public String getPname() {\n        return pname;\n    }\n\n    public void setPname(String pname) {\n        this.pname = pname;\n    }\n\n    public String getFlag() {\n        return flag;\n    }\n\n    public void setFlag(String flag) {\n        this.flag = flag;\n    }\n\n    @Override\n    public void write(DataOutput dataOutput) throws IOException {\n        dataOutput.writeUTF(order_id);\n        dataOutput.writeUTF(p_id);\n        dataOutput.writeInt(amount);\n        dataOutput.writeUTF(pname);\n        dataOutput.writeUTF(flag);\n    }\n\n    @Override\n    public void readFields(DataInput dataInput) throws IOException {\n        order_id = dataInput.readUTF();\n        p_id = dataInput.readUTF();\n        amount = dataInput.readInt();\n        pname = dataInput.readUTF();\n        flag = dataInput.readUTF();\n    }\n}\n\n\npublic class TableMapper extends Mapper<LongWritable, Text,Text,TableBean> {\n\n    private String name;\n\n    private TableBean tableBean = new TableBean();\n\n    private Text text = new Text();\n\n    @Override\n    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {\n\n        String[] split = value.toString().split(\"\\t\");\n\n        if (name.startsWith(\"order\")){\n\n            tableBean.setOrder_id(split[0]);\n            tableBean.setP_id(split[1]);\n            tableBean.setAmount(Integer.parseInt(split[2]));\n            tableBean.setPname(\"\");\n            tableBean.setFlag(\"order\");\n\n            text.set(split[1]);\n        }else {\n            tableBean.setP_id(split[0]);\n            tableBean.setPname(split[1]);\n            tableBean.setAmount(0);\n            tableBean.setOrder_id(\"\");\n            tableBean.setFlag(\"pd\");\n\n            text.set(split[0]);\n        }\n        context.write(text,tableBean);\n    }\n    @Override\n    protected void setup(Context context) throws IOException, InterruptedException {\n        //获取输入文件切片\n        FileSplit fileSplit = (FileSplit) context.getInputSplit();\n\n        //获取输入文件名字\n        name = fileSplit.getPath().getName();\n    }\n}\n\n\npublic class TableReducer extends Reducer<Text,TableBean,TableBean, NullWritable> {\n    @Override\n    protected void reduce(Text key, Iterable<TableBean> values, Context context) throws IOException, InterruptedException {\n        ArrayList<TableBean> tableBeans = new ArrayList<>();\n\n        TableBean tableBean = new TableBean();\n\n        for (TableBean value : values) {\n\n            if (value.getFlag().equals(\"order\")) {\n                TableBean tableBean1 = new TableBean();\n                try {\n                    BeanUtils.copyProperties(tableBean1,value);\n                } catch (IllegalAccessException e) {\n                    e.printStackTrace();\n                } catch (InvocationTargetException e) {\n                    e.printStackTrace();\n                }\n                tableBeans.add(tableBean1);\n            }else {\n                try {\n                    BeanUtils.copyProperties(tableBean,value);\n                } catch (IllegalAccessException e) {\n                    e.printStackTrace();\n                } catch (InvocationTargetException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        for (TableBean bean : tableBeans) {\n            System.out.println(tableBean.getPname());\n            bean.setPname(tableBean.getPname());\n            //写出数据\n            context.write(bean,NullWritable.get());\n        }\n    }\n}\npackage com.university.MapReduce.join.reduce_join;\n\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.io.NullWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Job;\nimport org.apache.hadoop.mapreduce.lib.input.FileInputFormat;\nimport org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;\n\npublic class TableDriver {\n    public static void main(String[] args) throws Exception {\n\n        // 1 获取配置信息，或者job对象实例\n        Configuration configuration = new Configuration();\n        Job job = Job.getInstance(configuration);\n\n        // 2 指定本程序的jar包所在的本地路径\n        job.setJarByClass(TableDriver.class);\n\n        // 3 指定本业务job要使用的Mapper/Reducer业务类\n        job.setMapperClass(TableMapper.class);\n        job.setReducerClass(TableReducer.class);\n\n        // 4 指定Mapper输出数据的kv类型\n        job.setMapOutputKeyClass(Text.class);\n        job.setMapOutputValueClass(TableBean.class);\n\n        // 5 指定最终输出的数据的kv类型\n        job.setOutputKeyClass(TableBean.class);\n        job.setOutputValueClass(NullWritable.class);\n\n        // 6 指定job的输入原始文件所在目录\n        FileInputFormat.setInputPaths(job, new Path(\"C:\\\\Users\\\\tiger\\\\Desktop\\\\code1_count\\\\input1\"));\n        FileOutputFormat.setOutputPath(job, new Path(\"C:\\\\Users\\\\tiger\\\\Desktop\\\\code1_count\\\\flow_count9\"));\n\n        // 7 将job中配置的相关参数，以及job所用的java类所在的jar包， 提交给yarn去运行\n        boolean result = job.waitForCompletion(true);\n        System.exit(result ? 0 : 1);\n    }\n}\n```\n\n### 2.map side join\n\nreduce的阶段是为了解决map阶段不能获取所有需要的join字段，即：同一个key对应的字段可能位于不同map中。但reduce side join是非常低效的，因为shuffle阶段要进行大量的数据传输。\n\nMap side join是针对以下场景进行的优化：两个待连接表中，有一个表非常大，而另一个表非常小，以至于小表可以直接存放到内存中。这样，我们可以将小表缓存起来放入每一个map任务中，然后只扫描大表：对于大表中的每一条记录key/value，在缓存中查找是否有相同的key的记录。\n\n##### 合并订单表与商品表案例\n\n```java\npublic class DistributedCacheMapper extends Mapper<LongWritable, Text,Text, NullWritable> {\n\n    private Map<String,String> pdMap = new HashMap<>();\n\n    @Override\n    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {\n        String[] split = value.toString().split(\"\\t\");\n\n        String pId = split[1];\n\n        String pdName = pdMap.get(pId);\n        System.out.println(pdName);\n\n        split[1] = pdName;\n\n        StringBuffer buffer = new StringBuffer();\n        for (String s : split) {\n            buffer.append(s);\n        }\n        context.write(new Text(buffer.toString()),NullWritable.get());\n    }\n\n    @Override\n    protected void setup(Context context) throws IOException, InterruptedException {\n        URI[] cacheFiles = context.getCacheFiles();\n        String path = cacheFiles[0].getPath();\n\n        BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(path)));\n\n        String line;\n        while(StringUtils.isNotEmpty(line = reader.readLine())){\n            //切割\n            String[] split = line.split(\"\\t\");\n            //缓存数据到集合\n            pdMap.put(split[0],split[1]);\n        }\n        //关闭资源\n        reader.close();\n    }\n}\n\n\npublic class DistributedCacheDriver {\n\n    public static void main(String[] args) throws IOException, URISyntaxException, ClassNotFoundException, InterruptedException {\n        // 1 获取job信息\n        Configuration configuration = new Configuration();\n        //开启map端输出压缩\n        configuration.setBoolean(\"mapreduce.map.output.compress\",true);\n        //设置map端输出压缩\n        configuration.setClass(\"mapreduce.map.output.compress.codec\", BZip2Codec.class, CompressionCodec.class);\n\n        Job job = Job.getInstance(configuration);\n\n        // 2 设置加载jar包路径\n        job.setJarByClass(DistributedCacheDriver.class);\n\n        // 3 关联map\n        job.setMapperClass(DistributedCacheMapper.class);\n\n        // 4 设置最终输出数据类型\n        job.setOutputKeyClass(Text.class);\n        job.setOutputValueClass(NullWritable.class);\n\n        // 5 设置输入输出路径\n        FileInputFormat.setInputPaths(job, new Path(\"C:\\\\Users\\\\tiger\\\\Desktop\\\\code1_count\\\\input1\\\\order.txt\"));\n        FileOutputFormat.setOutputPath(job, new Path(\"C:\\\\Users\\\\tiger\\\\Desktop\\\\code1_count\\\\flow_count10\"));\n\n        //设置reduce端输出压缩开启\n        FileOutputFormat.setCompressOutput(job,true);\n        //设置压缩方式\n        FileOutputFormat.setOutputCompressorClass(job,BZip2Codec.class);\n\n        // 6 加载缓存数据\n        job.addCacheFile(new URI(\"file:///C:/Users/tiger/Desktop/code1_count/input1/pd.txt\"));\n\n        // 7 Map端Join的逻辑不需要Reduce阶段，设置reduceTask数量为0\n        job.setNumReduceTasks(0);\n\n        // 8 提交\n        boolean result = job.waitForCompletion(true);\n        System.exit(result ? 0 : 1);\n    }\n}\n```\n\n### 2.3 Semi Join\n\nSemi Join，也叫半连接，是从分布式数据库中借鉴过来的方法。它的产生动机是：对于reduce side join，跨机器的数据传输量非常大，这成了join操作的一个瓶颈，如果能够在map端过滤掉不会参加join操作的数据，则可以大大节省网络IO。\n\n实现方法很简单：选取一个小表，假设是File1，将其参与join的key抽取出来，保存到文件File3中，File3文件一般很小，可以放到内存中。在map阶段，使用DistributedCache将File3复制到各个TaskTracker上，然后将File2中不在File3中的key对应的记录过滤掉，剩下的reduce阶段的工作与reduce side join相同。\n\n### 2.4 reduce side join + BloomFilter\n\n在某些情况下，SemiJoin抽取出来的小表的key集合在内存中仍然存放不下，这时候可以使用BloomFiler以节省空间。\n\nBloomFilter最常见的作用是：判断某个元素是否在一个集合里面。它最重要的两个方法是：add() 和contains()。最大的特点是不会存在 false negative，即：如果contains()返回false，则该元素一定不在集合中，但会存在一定的 false positive，即：如果contains()返回true，则该元素一定可能在集合中。\n\n因而可将小表中的key保存到BloomFilter中，在map阶段过滤大表，可能有一些不在小表中的记录没有过滤掉（但是在小表中的记录一定不会过滤掉），这没关系，只不过增加了少量的网络IO而已。","slug":"MapReduce中的两表join方案","published":1,"updated":"2020-07-05T10:48:19.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mlal000tvkvy78fpnt6b","content":"<h1 id=\"MapReduce中两表join方案\"><a href=\"#MapReduce中两表join方案\" class=\"headerlink\" title=\"MapReduce中两表join方案\"></a>MapReduce中两表join方案</h1><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>随着互联网行业的发展,数据量变得越来越大,随之而来的就是hadoop生态圈的兴起,其中MapReduce作为较原始的分布式计算框架,在当时也是解决了很多分布式计算的问题,其中包括两张表的join操作,当然其中是包含了一些特殊技巧的,本文主要介绍MapReduce常用的join实现方法,并展示一个简单的demo.</p>\n<h3 id=\"1-reduce-side-join\"><a href=\"#1-reduce-side-join\" class=\"headerlink\" title=\"1.reduce side join\"></a>1.reduce side join</h3><p>reduce side join是一种最简单的join方式，其主要思想如下：</p>\n<p>在map阶段，map函数同时读取两个文件File1和File2，为了区分两种来源的key/value数据对，对每条数据打一个标签.</p>\n<p>在reduce阶段，reduce函数获取key相同的来自File1和File2文件的value list， 然后对于同一个key，根据map阶段打上的标签分别处理实现对File1和File2中的数据进行join.</p>\n<h5 id=\"合并订单表与商品表案例\"><a href=\"#合并订单表与商品表案例\" class=\"headerlink\" title=\"合并订单表与商品表案例\"></a>合并订单表与商品表案例</h5><pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TableBean</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Writable</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> String order_id<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//订单id</span>\n    <span class=\"token keyword\">private</span> String p_id<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//产品id</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//产品数量</span>\n    <span class=\"token keyword\">private</span> String pname<span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">//产品名称</span>\n    <span class=\"token keyword\">private</span> String flag<span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">//表的标记</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> order_id <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> pname <span class=\"token operator\">+</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">+</span> amount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">TableBean</span><span class=\"token punctuation\">(</span>String order_id<span class=\"token punctuation\">,</span> String p_id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">,</span> String pname<span class=\"token punctuation\">,</span> String flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>order_id <span class=\"token operator\">=</span> order_id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>p_id <span class=\"token operator\">=</span> p_id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>amount <span class=\"token operator\">=</span> amount<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pname <span class=\"token operator\">=</span> pname<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flag <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">TableBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">getOrder_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> order_id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setOrder_id</span><span class=\"token punctuation\">(</span>String order_id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>order_id <span class=\"token operator\">=</span> order_id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">getP_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> p_id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setP_id</span><span class=\"token punctuation\">(</span>String p_id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>p_id <span class=\"token operator\">=</span> p_id<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> amount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAmount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>amount <span class=\"token operator\">=</span> amount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">getPname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> pname<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setPname</span><span class=\"token punctuation\">(</span>String pname<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pname <span class=\"token operator\">=</span> pname<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">getFlag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> flag<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setFlag</span><span class=\"token punctuation\">(</span>String flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flag <span class=\"token operator\">=</span> flag<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>DataOutput dataOutput<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        dataOutput<span class=\"token punctuation\">.</span><span class=\"token function\">writeUTF</span><span class=\"token punctuation\">(</span>order_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dataOutput<span class=\"token punctuation\">.</span><span class=\"token function\">writeUTF</span><span class=\"token punctuation\">(</span>p_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dataOutput<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dataOutput<span class=\"token punctuation\">.</span><span class=\"token function\">writeUTF</span><span class=\"token punctuation\">(</span>pname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dataOutput<span class=\"token punctuation\">.</span><span class=\"token function\">writeUTF</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readFields</span><span class=\"token punctuation\">(</span>DataInput dataInput<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span>\n        order_id <span class=\"token operator\">=</span> dataInput<span class=\"token punctuation\">.</span><span class=\"token function\">readUTF</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        p_id <span class=\"token operator\">=</span> dataInput<span class=\"token punctuation\">.</span><span class=\"token function\">readUTF</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        amount <span class=\"token operator\">=</span> dataInput<span class=\"token punctuation\">.</span><span class=\"token function\">readInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pname <span class=\"token operator\">=</span> dataInput<span class=\"token punctuation\">.</span><span class=\"token function\">readUTF</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        flag <span class=\"token operator\">=</span> dataInput<span class=\"token punctuation\">.</span><span class=\"token function\">readUTF</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TableMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Mapper</span><span class=\"token operator\">&lt;</span>LongWritable<span class=\"token punctuation\">,</span> Text<span class=\"token punctuation\">,</span>Text<span class=\"token punctuation\">,</span>TableBean<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> TableBean tableBean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TableBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> Text text <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>LongWritable key<span class=\"token punctuation\">,</span> Text value<span class=\"token punctuation\">,</span> Context context<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">,</span> InterruptedException <span class=\"token punctuation\">{</span>\n\n        String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> split <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n            tableBean<span class=\"token punctuation\">.</span><span class=\"token function\">setOrder_id</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tableBean<span class=\"token punctuation\">.</span><span class=\"token function\">setP_id</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tableBean<span class=\"token punctuation\">.</span><span class=\"token function\">setAmount</span><span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tableBean<span class=\"token punctuation\">.</span><span class=\"token function\">setPname</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tableBean<span class=\"token punctuation\">.</span><span class=\"token function\">setFlag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            text<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            tableBean<span class=\"token punctuation\">.</span><span class=\"token function\">setP_id</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tableBean<span class=\"token punctuation\">.</span><span class=\"token function\">setPname</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tableBean<span class=\"token punctuation\">.</span><span class=\"token function\">setAmount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tableBean<span class=\"token punctuation\">.</span><span class=\"token function\">setOrder_id</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            tableBean<span class=\"token punctuation\">.</span><span class=\"token function\">setFlag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            text<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span>tableBean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>Context context<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">,</span> InterruptedException <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//获取输入文件切片</span>\n        FileSplit fileSplit <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>FileSplit<span class=\"token punctuation\">)</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getInputSplit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//获取输入文件名字</span>\n        name <span class=\"token operator\">=</span> fileSplit<span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TableReducer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Reducer</span><span class=\"token operator\">&lt;</span>Text<span class=\"token punctuation\">,</span>TableBean<span class=\"token punctuation\">,</span>TableBean<span class=\"token punctuation\">,</span> NullWritable<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>Text key<span class=\"token punctuation\">,</span> Iterable<span class=\"token operator\">&lt;</span>TableBean<span class=\"token operator\">></span> values<span class=\"token punctuation\">,</span> Context context<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">,</span> InterruptedException <span class=\"token punctuation\">{</span>\n        ArrayList<span class=\"token operator\">&lt;</span>TableBean<span class=\"token operator\">></span> tableBeans <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        TableBean tableBean <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TableBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>TableBean value <span class=\"token operator\">:</span> values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">getFlag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                TableBean tableBean1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TableBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    BeanUtils<span class=\"token punctuation\">.</span><span class=\"token function\">copyProperties</span><span class=\"token punctuation\">(</span>tableBean1<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationTargetException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                tableBeans<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>tableBean1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    BeanUtils<span class=\"token punctuation\">.</span><span class=\"token function\">copyProperties</span><span class=\"token punctuation\">(</span>tableBean<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalAccessException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InvocationTargetException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>TableBean bean <span class=\"token operator\">:</span> tableBeans<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>tableBean<span class=\"token punctuation\">.</span><span class=\"token function\">getPname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bean<span class=\"token punctuation\">.</span><span class=\"token function\">setPname</span><span class=\"token punctuation\">(</span>tableBean<span class=\"token punctuation\">.</span><span class=\"token function\">getPname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//写出数据</span>\n            context<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>bean<span class=\"token punctuation\">,</span>NullWritable<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>university<span class=\"token punctuation\">.</span>MapReduce<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">.</span>reduce_join<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span>Configuration<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>fs<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>NullWritable<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>mapreduce<span class=\"token punctuation\">.</span>Job<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>mapreduce<span class=\"token punctuation\">.</span>lib<span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span>FileInputFormat<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>mapreduce<span class=\"token punctuation\">.</span>lib<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span>FileOutputFormat<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TableDriver</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 1 获取配置信息，或者job对象实例</span>\n        Configuration configuration <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Job job <span class=\"token operator\">=</span> Job<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 2 指定本程序的jar包所在的本地路径</span>\n        job<span class=\"token punctuation\">.</span><span class=\"token function\">setJarByClass</span><span class=\"token punctuation\">(</span>TableDriver<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 3 指定本业务job要使用的Mapper/Reducer业务类</span>\n        job<span class=\"token punctuation\">.</span><span class=\"token function\">setMapperClass</span><span class=\"token punctuation\">(</span>TableMapper<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        job<span class=\"token punctuation\">.</span><span class=\"token function\">setReducerClass</span><span class=\"token punctuation\">(</span>TableReducer<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 4 指定Mapper输出数据的kv类型</span>\n        job<span class=\"token punctuation\">.</span><span class=\"token function\">setMapOutputKeyClass</span><span class=\"token punctuation\">(</span>Text<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        job<span class=\"token punctuation\">.</span><span class=\"token function\">setMapOutputValueClass</span><span class=\"token punctuation\">(</span>TableBean<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 5 指定最终输出的数据的kv类型</span>\n        job<span class=\"token punctuation\">.</span><span class=\"token function\">setOutputKeyClass</span><span class=\"token punctuation\">(</span>TableBean<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        job<span class=\"token punctuation\">.</span><span class=\"token function\">setOutputValueClass</span><span class=\"token punctuation\">(</span>NullWritable<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 6 指定job的输入原始文件所在目录</span>\n        FileInputFormat<span class=\"token punctuation\">.</span><span class=\"token function\">setInputPaths</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\\Users\\\\tiger\\\\Desktop\\\\code1_count\\\\input1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        FileOutputFormat<span class=\"token punctuation\">.</span><span class=\"token function\">setOutputPath</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\\Users\\\\tiger\\\\Desktop\\\\code1_count\\\\flow_count9\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 7 将job中配置的相关参数，以及job所用的java类所在的jar包， 提交给yarn去运行</span>\n        <span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span> job<span class=\"token punctuation\">.</span><span class=\"token function\">waitForCompletion</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-map-side-join\"><a href=\"#2-map-side-join\" class=\"headerlink\" title=\"2.map side join\"></a>2.map side join</h3><p>reduce的阶段是为了解决map阶段不能获取所有需要的join字段，即：同一个key对应的字段可能位于不同map中。但reduce side join是非常低效的，因为shuffle阶段要进行大量的数据传输。</p>\n<p>Map side join是针对以下场景进行的优化：两个待连接表中，有一个表非常大，而另一个表非常小，以至于小表可以直接存放到内存中。这样，我们可以将小表缓存起来放入每一个map任务中，然后只扫描大表：对于大表中的每一条记录key/value，在缓存中查找是否有相同的key的记录。</p>\n<h5 id=\"合并订单表与商品表案例-1\"><a href=\"#合并订单表与商品表案例-1\" class=\"headerlink\" title=\"合并订单表与商品表案例\"></a>合并订单表与商品表案例</h5><pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DistributedCacheMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Mapper</span><span class=\"token operator\">&lt;</span>LongWritable<span class=\"token punctuation\">,</span> Text<span class=\"token punctuation\">,</span>Text<span class=\"token punctuation\">,</span> NullWritable<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span>String<span class=\"token operator\">></span> pdMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>LongWritable key<span class=\"token punctuation\">,</span> Text value<span class=\"token punctuation\">,</span> Context context<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">,</span> InterruptedException <span class=\"token punctuation\">{</span>\n        String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> split <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        String pId <span class=\"token operator\">=</span> split<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        String pdName <span class=\"token operator\">=</span> pdMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>pId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>pdName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        split<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pdName<span class=\"token punctuation\">;</span>\n\n        StringBuffer buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>String s <span class=\"token operator\">:</span> split<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            buffer<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        context<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>NullWritable<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>Context context<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">,</span> InterruptedException <span class=\"token punctuation\">{</span>\n        URI<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cacheFiles <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">getCacheFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        String path <span class=\"token operator\">=</span> cacheFiles<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        BufferedReader reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        String line<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>StringUtils<span class=\"token punctuation\">.</span><span class=\"token function\">isNotEmpty</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//切割</span>\n            String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> split <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\t\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//缓存数据到集合</span>\n            pdMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>split<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>split<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//关闭资源</span>\n        reader<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DistributedCacheDriver</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">,</span> URISyntaxException<span class=\"token punctuation\">,</span> ClassNotFoundException<span class=\"token punctuation\">,</span> InterruptedException <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 1 获取job信息</span>\n        Configuration configuration <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//开启map端输出压缩</span>\n        configuration<span class=\"token punctuation\">.</span><span class=\"token function\">setBoolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mapreduce.map.output.compress\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//设置map端输出压缩</span>\n        configuration<span class=\"token punctuation\">.</span><span class=\"token function\">setClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mapreduce.map.output.compress.codec\"</span><span class=\"token punctuation\">,</span> BZip2Codec<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> CompressionCodec<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Job job <span class=\"token operator\">=</span> Job<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 2 设置加载jar包路径</span>\n        job<span class=\"token punctuation\">.</span><span class=\"token function\">setJarByClass</span><span class=\"token punctuation\">(</span>DistributedCacheDriver<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 3 关联map</span>\n        job<span class=\"token punctuation\">.</span><span class=\"token function\">setMapperClass</span><span class=\"token punctuation\">(</span>DistributedCacheMapper<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 4 设置最终输出数据类型</span>\n        job<span class=\"token punctuation\">.</span><span class=\"token function\">setOutputKeyClass</span><span class=\"token punctuation\">(</span>Text<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        job<span class=\"token punctuation\">.</span><span class=\"token function\">setOutputValueClass</span><span class=\"token punctuation\">(</span>NullWritable<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 5 设置输入输出路径</span>\n        FileInputFormat<span class=\"token punctuation\">.</span><span class=\"token function\">setInputPaths</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\\Users\\\\tiger\\\\Desktop\\\\code1_count\\\\input1\\\\order.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        FileOutputFormat<span class=\"token punctuation\">.</span><span class=\"token function\">setOutputPath</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\\Users\\\\tiger\\\\Desktop\\\\code1_count\\\\flow_count10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//设置reduce端输出压缩开启</span>\n        FileOutputFormat<span class=\"token punctuation\">.</span><span class=\"token function\">setCompressOutput</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//设置压缩方式</span>\n        FileOutputFormat<span class=\"token punctuation\">.</span><span class=\"token function\">setOutputCompressorClass</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">,</span>BZip2Codec<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 6 加载缓存数据</span>\n        job<span class=\"token punctuation\">.</span><span class=\"token function\">addCacheFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URI</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file:///C:/Users/tiger/Desktop/code1_count/input1/pd.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 7 Map端Join的逻辑不需要Reduce阶段，设置reduceTask数量为0</span>\n        job<span class=\"token punctuation\">.</span><span class=\"token function\">setNumReduceTasks</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 8 提交</span>\n        <span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span> job<span class=\"token punctuation\">.</span><span class=\"token function\">waitForCompletion</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-3-Semi-Join\"><a href=\"#2-3-Semi-Join\" class=\"headerlink\" title=\"2.3 Semi Join\"></a>2.3 Semi Join</h3><p>Semi Join，也叫半连接，是从分布式数据库中借鉴过来的方法。它的产生动机是：对于reduce side join，跨机器的数据传输量非常大，这成了join操作的一个瓶颈，如果能够在map端过滤掉不会参加join操作的数据，则可以大大节省网络IO。</p>\n<p>实现方法很简单：选取一个小表，假设是File1，将其参与join的key抽取出来，保存到文件File3中，File3文件一般很小，可以放到内存中。在map阶段，使用DistributedCache将File3复制到各个TaskTracker上，然后将File2中不在File3中的key对应的记录过滤掉，剩下的reduce阶段的工作与reduce side join相同。</p>\n<h3 id=\"2-4-reduce-side-join-BloomFilter\"><a href=\"#2-4-reduce-side-join-BloomFilter\" class=\"headerlink\" title=\"2.4 reduce side join + BloomFilter\"></a>2.4 reduce side join + BloomFilter</h3><p>在某些情况下，SemiJoin抽取出来的小表的key集合在内存中仍然存放不下，这时候可以使用BloomFiler以节省空间。</p>\n<p>BloomFilter最常见的作用是：判断某个元素是否在一个集合里面。它最重要的两个方法是：add() 和contains()。最大的特点是不会存在 false negative，即：如果contains()返回false，则该元素一定不在集合中，但会存在一定的 false positive，即：如果contains()返回true，则该元素一定可能在集合中。</p>\n<p>因而可将小表中的key保存到BloomFilter中，在map阶段过滤大表，可能有一些不在小表中的记录没有过滤掉（但是在小表中的记录一定不会过滤掉），这没关系，只不过增加了少量的网络IO而已。</p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h1 id=\"MapReduce中两表join方案\"><a href=\"#MapReduce中两表join方案\" class=\"headerlink\" title=\"MapReduce中两表join方案\"></a>MapReduce中两表join方案</h1><h3 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h3><p>随着互联网行业的发展,数据量变得越来越大,随之而来的就是hadoop生态圈的兴起,其中MapReduce作为较原始的分布式计算框架,在当时也是解决了很多分布式计算的问题,其中包括两张表的join操作,当然其中是包含了一些特殊技巧的,本文主要介绍MapReduce常用的join实现方法,并展示一个简单的demo.</p>\n<h3 id=\"1-reduce-side-join\"><a href=\"#1-reduce-side-join\" class=\"headerlink\" title=\"1.reduce side join\"></a>1.reduce side join</h3><p>reduce side join是一种最简单的join方式，其主要思想如下：</p>\n<p>在map阶段，map函数同时读取两个文件File1和File2，为了区分两种来源的key/value数据对，对每条数据打一个标签.</p>\n<p>在reduce阶段，reduce函数获取key相同的来自File1和File2文件的value list， 然后对于同一个key，根据map阶段打上的标签分别处理实现对File1和File2中的数据进行join.</p>\n<h5 id=\"合并订单表与商品表案例\"><a href=\"#合并订单表与商品表案例\" class=\"headerlink\" title=\"合并订单表与商品表案例\"></a>合并订单表与商品表案例</h5><pre><code class=\"java\">public class TableBean implements Writable {\n\n    private String order_id; //订单id\n    private String p_id; //产品id\n    private int amount; //产品数量\n    private String pname;   //产品名称\n    private String flag;    //表的标记\n\n    @Override\n    public String toString() {\n        return order_id + &quot;\\t&quot; + pname + &quot;\\t&quot; + amount;\n    }\n\n    public TableBean(String order_id, String p_id, int amount, String pname, String flag) {\n        this.order_id = order_id;\n        this.p_id = p_id;\n        this.amount = amount;\n        this.pname = pname;\n        this.flag = flag;\n    }\n\n    public TableBean() {\n    }\n\n    public String getOrder_id() {\n        return order_id;\n    }\n\n    public void setOrder_id(String order_id) {\n        this.order_id = order_id;\n    }\n\n    public String getP_id() {\n        return p_id;\n    }\n\n    public void setP_id(String p_id) {\n        this.p_id = p_id;\n    }\n\n    public int getAmount() {\n        return amount;\n    }\n\n    public void setAmount(int amount) {\n        this.amount = amount;\n    }\n\n    public String getPname() {\n        return pname;\n    }\n\n    public void setPname(String pname) {\n        this.pname = pname;\n    }\n\n    public String getFlag() {\n        return flag;\n    }\n\n    public void setFlag(String flag) {\n        this.flag = flag;\n    }\n\n    @Override\n    public void write(DataOutput dataOutput) throws IOException {\n        dataOutput.writeUTF(order_id);\n        dataOutput.writeUTF(p_id);\n        dataOutput.writeInt(amount);\n        dataOutput.writeUTF(pname);\n        dataOutput.writeUTF(flag);\n    }\n\n    @Override\n    public void readFields(DataInput dataInput) throws IOException {\n        order_id = dataInput.readUTF();\n        p_id = dataInput.readUTF();\n        amount = dataInput.readInt();\n        pname = dataInput.readUTF();\n        flag = dataInput.readUTF();\n    }\n}\n\n\npublic class TableMapper extends Mapper&lt;LongWritable, Text,Text,TableBean&gt; {\n\n    private String name;\n\n    private TableBean tableBean = new TableBean();\n\n    private Text text = new Text();\n\n    @Override\n    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {\n\n        String[] split = value.toString().split(&quot;\\t&quot;);\n\n        if (name.startsWith(&quot;order&quot;)){\n\n            tableBean.setOrder_id(split[0]);\n            tableBean.setP_id(split[1]);\n            tableBean.setAmount(Integer.parseInt(split[2]));\n            tableBean.setPname(&quot;&quot;);\n            tableBean.setFlag(&quot;order&quot;);\n\n            text.set(split[1]);\n        }else {\n            tableBean.setP_id(split[0]);\n            tableBean.setPname(split[1]);\n            tableBean.setAmount(0);\n            tableBean.setOrder_id(&quot;&quot;);\n            tableBean.setFlag(&quot;pd&quot;);\n\n            text.set(split[0]);\n        }\n        context.write(text,tableBean);\n    }\n    @Override\n    protected void setup(Context context) throws IOException, InterruptedException {\n        //获取输入文件切片\n        FileSplit fileSplit = (FileSplit) context.getInputSplit();\n\n        //获取输入文件名字\n        name = fileSplit.getPath().getName();\n    }\n}\n\n\npublic class TableReducer extends Reducer&lt;Text,TableBean,TableBean, NullWritable&gt; {\n    @Override\n    protected void reduce(Text key, Iterable&lt;TableBean&gt; values, Context context) throws IOException, InterruptedException {\n        ArrayList&lt;TableBean&gt; tableBeans = new ArrayList&lt;&gt;();\n\n        TableBean tableBean = new TableBean();\n\n        for (TableBean value : values) {\n\n            if (value.getFlag().equals(&quot;order&quot;)) {\n                TableBean tableBean1 = new TableBean();\n                try {\n                    BeanUtils.copyProperties(tableBean1,value);\n                } catch (IllegalAccessException e) {\n                    e.printStackTrace();\n                } catch (InvocationTargetException e) {\n                    e.printStackTrace();\n                }\n                tableBeans.add(tableBean1);\n            }else {\n                try {\n                    BeanUtils.copyProperties(tableBean,value);\n                } catch (IllegalAccessException e) {\n                    e.printStackTrace();\n                } catch (InvocationTargetException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        for (TableBean bean : tableBeans) {\n            System.out.println(tableBean.getPname());\n            bean.setPname(tableBean.getPname());\n            //写出数据\n            context.write(bean,NullWritable.get());\n        }\n    }\n}\npackage com.university.MapReduce.join.reduce_join;\n\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.io.NullWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Job;\nimport org.apache.hadoop.mapreduce.lib.input.FileInputFormat;\nimport org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;\n\npublic class TableDriver {\n    public static void main(String[] args) throws Exception {\n\n        // 1 获取配置信息，或者job对象实例\n        Configuration configuration = new Configuration();\n        Job job = Job.getInstance(configuration);\n\n        // 2 指定本程序的jar包所在的本地路径\n        job.setJarByClass(TableDriver.class);\n\n        // 3 指定本业务job要使用的Mapper/Reducer业务类\n        job.setMapperClass(TableMapper.class);\n        job.setReducerClass(TableReducer.class);\n\n        // 4 指定Mapper输出数据的kv类型\n        job.setMapOutputKeyClass(Text.class);\n        job.setMapOutputValueClass(TableBean.class);\n\n        // 5 指定最终输出的数据的kv类型\n        job.setOutputKeyClass(TableBean.class);\n        job.setOutputValueClass(NullWritable.class);\n\n        // 6 指定job的输入原始文件所在目录\n        FileInputFormat.setInputPaths(job, new Path(&quot;C:\\\\Users\\\\tiger\\\\Desktop\\\\code1_count\\\\input1&quot;));\n        FileOutputFormat.setOutputPath(job, new Path(&quot;C:\\\\Users\\\\tiger\\\\Desktop\\\\code1_count\\\\flow_count9&quot;));\n\n        // 7 将job中配置的相关参数，以及job所用的java类所在的jar包， 提交给yarn去运行\n        boolean result = job.waitForCompletion(true);\n        System.exit(result ? 0 : 1);\n    }\n}</code></pre>\n<h3 id=\"2-map-side-join\"><a href=\"#2-map-side-join\" class=\"headerlink\" title=\"2.map side join\"></a>2.map side join</h3><p>reduce的阶段是为了解决map阶段不能获取所有需要的join字段，即：同一个key对应的字段可能位于不同map中。但reduce side join是非常低效的，因为shuffle阶段要进行大量的数据传输。</p>\n<p>Map side join是针对以下场景进行的优化：两个待连接表中，有一个表非常大，而另一个表非常小，以至于小表可以直接存放到内存中。这样，我们可以将小表缓存起来放入每一个map任务中，然后只扫描大表：对于大表中的每一条记录key/value，在缓存中查找是否有相同的key的记录。</p>\n<h5 id=\"合并订单表与商品表案例-1\"><a href=\"#合并订单表与商品表案例-1\" class=\"headerlink\" title=\"合并订单表与商品表案例\"></a>合并订单表与商品表案例</h5><pre><code class=\"java\">public class DistributedCacheMapper extends Mapper&lt;LongWritable, Text,Text, NullWritable&gt; {\n\n    private Map&lt;String,String&gt; pdMap = new HashMap&lt;&gt;();\n\n    @Override\n    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {\n        String[] split = value.toString().split(&quot;\\t&quot;);\n\n        String pId = split[1];\n\n        String pdName = pdMap.get(pId);\n        System.out.println(pdName);\n\n        split[1] = pdName;\n\n        StringBuffer buffer = new StringBuffer();\n        for (String s : split) {\n            buffer.append(s);\n        }\n        context.write(new Text(buffer.toString()),NullWritable.get());\n    }\n\n    @Override\n    protected void setup(Context context) throws IOException, InterruptedException {\n        URI[] cacheFiles = context.getCacheFiles();\n        String path = cacheFiles[0].getPath();\n\n        BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(path)));\n\n        String line;\n        while(StringUtils.isNotEmpty(line = reader.readLine())){\n            //切割\n            String[] split = line.split(&quot;\\t&quot;);\n            //缓存数据到集合\n            pdMap.put(split[0],split[1]);\n        }\n        //关闭资源\n        reader.close();\n    }\n}\n\n\npublic class DistributedCacheDriver {\n\n    public static void main(String[] args) throws IOException, URISyntaxException, ClassNotFoundException, InterruptedException {\n        // 1 获取job信息\n        Configuration configuration = new Configuration();\n        //开启map端输出压缩\n        configuration.setBoolean(&quot;mapreduce.map.output.compress&quot;,true);\n        //设置map端输出压缩\n        configuration.setClass(&quot;mapreduce.map.output.compress.codec&quot;, BZip2Codec.class, CompressionCodec.class);\n\n        Job job = Job.getInstance(configuration);\n\n        // 2 设置加载jar包路径\n        job.setJarByClass(DistributedCacheDriver.class);\n\n        // 3 关联map\n        job.setMapperClass(DistributedCacheMapper.class);\n\n        // 4 设置最终输出数据类型\n        job.setOutputKeyClass(Text.class);\n        job.setOutputValueClass(NullWritable.class);\n\n        // 5 设置输入输出路径\n        FileInputFormat.setInputPaths(job, new Path(&quot;C:\\\\Users\\\\tiger\\\\Desktop\\\\code1_count\\\\input1\\\\order.txt&quot;));\n        FileOutputFormat.setOutputPath(job, new Path(&quot;C:\\\\Users\\\\tiger\\\\Desktop\\\\code1_count\\\\flow_count10&quot;));\n\n        //设置reduce端输出压缩开启\n        FileOutputFormat.setCompressOutput(job,true);\n        //设置压缩方式\n        FileOutputFormat.setOutputCompressorClass(job,BZip2Codec.class);\n\n        // 6 加载缓存数据\n        job.addCacheFile(new URI(&quot;file:///C:/Users/tiger/Desktop/code1_count/input1/pd.txt&quot;));\n\n        // 7 Map端Join的逻辑不需要Reduce阶段，设置reduceTask数量为0\n        job.setNumReduceTasks(0);\n\n        // 8 提交\n        boolean result = job.waitForCompletion(true);\n        System.exit(result ? 0 : 1);\n    }\n}</code></pre>\n<h3 id=\"2-3-Semi-Join\"><a href=\"#2-3-Semi-Join\" class=\"headerlink\" title=\"2.3 Semi Join\"></a>2.3 Semi Join</h3><p>Semi Join，也叫半连接，是从分布式数据库中借鉴过来的方法。它的产生动机是：对于reduce side join，跨机器的数据传输量非常大，这成了join操作的一个瓶颈，如果能够在map端过滤掉不会参加join操作的数据，则可以大大节省网络IO。</p>\n<p>实现方法很简单：选取一个小表，假设是File1，将其参与join的key抽取出来，保存到文件File3中，File3文件一般很小，可以放到内存中。在map阶段，使用DistributedCache将File3复制到各个TaskTracker上，然后将File2中不在File3中的key对应的记录过滤掉，剩下的reduce阶段的工作与reduce side join相同。</p>\n<h3 id=\"2-4-reduce-side-join-BloomFilter\"><a href=\"#2-4-reduce-side-join-BloomFilter\" class=\"headerlink\" title=\"2.4 reduce side join + BloomFilter\"></a>2.4 reduce side join + BloomFilter</h3><p>在某些情况下，SemiJoin抽取出来的小表的key集合在内存中仍然存放不下，这时候可以使用BloomFiler以节省空间。</p>\n<p>BloomFilter最常见的作用是：判断某个元素是否在一个集合里面。它最重要的两个方法是：add() 和contains()。最大的特点是不会存在 false negative，即：如果contains()返回false，则该元素一定不在集合中，但会存在一定的 false positive，即：如果contains()返回true，则该元素一定可能在集合中。</p>\n<p>因而可将小表中的key保存到BloomFilter中，在map阶段过滤大表，可能有一些不在小表中的记录没有过滤掉（但是在小表中的记录一定不会过滤掉），这没关系，只不过增加了少量的网络IO而已。</p>\n"},{"title":"MapReduce的流程及优化","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-07-06T13:31:49.000Z","password":null,"summary":null,"_content":"\nMapReduce的流程相对来说比较复杂,这里借用尚硅谷的两张图来描述其流程.\n\n![](MapReduce的流程及优化/wps3.png)![](MapReduce的流程及优化/wps4.png)\n\n上面两张图对MapReduce有比较详细的描述,通过这个图我们就能够发现一些MapReduce的优化方法.\n\n#### 数据输入小文件处理\n\n**HDFS小文件会因为文件元数据存储在NameNode的内存中影响NameNode的寿命;还会影响计算引擎的任务数量，比如每个小的文件都会生成一个Map任务.**以下有三种方式可以优化:\n\n（1）合并小文件：对小文件进行归档（Har）、自定义Inputformat将小文件存储成SequenceFile文件。\n\n（2）采用ConbinFileInputFormat来作为输入，解决输入端大量小文件场景。\n\n（3）对于大量小文件Job，可以开启JVM重用。\n\n#### Map阶段\n\n（1）增大环形缓冲区大小。由100m扩大到200m\n\n（2）增大环形缓冲区溢写的比例。由80%扩大到90%\n\n（3）减少对溢写文件的merge次数。\n\n（4）不影响实际业务的前提下，采用Combiner提前合并，减少 I/O。\n\n#### Reduce阶段\n\n（1）合理设置Map和Reduce数：两个都不能设置太少，也不能设置太多。太少，会导致Task等待，延长处理时间；太多，会导致 Map、Reduce任务间竞争资源，造成处理超时等错误。\n\n（2）设置Map、Reduce共存：调整slowstart.completedmaps参数，使Map运行到一定程度后，Reduce也开始运行，减少Reduce的等待时间。\n\n（3）规避使用Reduce，因为Reduce在用于连接数据集的时候将会产生大量的网络消耗。\n\n（4）增加每个Reduce去Map中拿数据的并行数\n\n（5）集群性能可以的前提下，增大Reduce端存储数据内存的大小。 \n\n#### IO传输\n\n（1）采用数据压缩的方式，减少网络IO的的时间。安装Snappy和LZOP压缩编码器。\n\n（2）使用SequenceFile二进制文件\n\n#### 整体\n\n（1）可以增加MapTask的cpu核数，增加ReduceTask的CPU核数\n\n（2）增加每个Container的CPU核数和内存大小\n\n（3）调整每个Map Task和Reduce Task最大重试次数","source":"_posts/MapReduce的流程及优化.md","raw":"---\ntitle: MapReduce的流程及优化\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-07-06 21:31:49\npassword:\nsummary:\ntags:\ncategories: 大数据\n---\n\nMapReduce的流程相对来说比较复杂,这里借用尚硅谷的两张图来描述其流程.\n\n![](MapReduce的流程及优化/wps3.png)![](MapReduce的流程及优化/wps4.png)\n\n上面两张图对MapReduce有比较详细的描述,通过这个图我们就能够发现一些MapReduce的优化方法.\n\n#### 数据输入小文件处理\n\n**HDFS小文件会因为文件元数据存储在NameNode的内存中影响NameNode的寿命;还会影响计算引擎的任务数量，比如每个小的文件都会生成一个Map任务.**以下有三种方式可以优化:\n\n（1）合并小文件：对小文件进行归档（Har）、自定义Inputformat将小文件存储成SequenceFile文件。\n\n（2）采用ConbinFileInputFormat来作为输入，解决输入端大量小文件场景。\n\n（3）对于大量小文件Job，可以开启JVM重用。\n\n#### Map阶段\n\n（1）增大环形缓冲区大小。由100m扩大到200m\n\n（2）增大环形缓冲区溢写的比例。由80%扩大到90%\n\n（3）减少对溢写文件的merge次数。\n\n（4）不影响实际业务的前提下，采用Combiner提前合并，减少 I/O。\n\n#### Reduce阶段\n\n（1）合理设置Map和Reduce数：两个都不能设置太少，也不能设置太多。太少，会导致Task等待，延长处理时间；太多，会导致 Map、Reduce任务间竞争资源，造成处理超时等错误。\n\n（2）设置Map、Reduce共存：调整slowstart.completedmaps参数，使Map运行到一定程度后，Reduce也开始运行，减少Reduce的等待时间。\n\n（3）规避使用Reduce，因为Reduce在用于连接数据集的时候将会产生大量的网络消耗。\n\n（4）增加每个Reduce去Map中拿数据的并行数\n\n（5）集群性能可以的前提下，增大Reduce端存储数据内存的大小。 \n\n#### IO传输\n\n（1）采用数据压缩的方式，减少网络IO的的时间。安装Snappy和LZOP压缩编码器。\n\n（2）使用SequenceFile二进制文件\n\n#### 整体\n\n（1）可以增加MapTask的cpu核数，增加ReduceTask的CPU核数\n\n（2）增加每个Container的CPU核数和内存大小\n\n（3）调整每个Map Task和Reduce Task最大重试次数","slug":"MapReduce的流程及优化","published":1,"updated":"2020-07-06T13:57:35.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mlaq000wvkvym9ia49sm","content":"<p>MapReduce的流程相对来说比较复杂,这里借用尚硅谷的两张图来描述其流程.</p>\n<p><img src=\"/2020/07/06/mapreduce-de-liu-cheng-ji-you-hua/wps3.png\" alt><img src=\"/2020/07/06/mapreduce-de-liu-cheng-ji-you-hua/wps4.png\" alt></p>\n<p>上面两张图对MapReduce有比较详细的描述,通过这个图我们就能够发现一些MapReduce的优化方法.</p>\n<h4 id=\"数据输入小文件处理\"><a href=\"#数据输入小文件处理\" class=\"headerlink\" title=\"数据输入小文件处理\"></a>数据输入小文件处理</h4><p><strong>HDFS小文件会因为文件元数据存储在NameNode的内存中影响NameNode的寿命;还会影响计算引擎的任务数量，比如每个小的文件都会生成一个Map任务.</strong>以下有三种方式可以优化:</p>\n<p>（1）合并小文件：对小文件进行归档（Har）、自定义Inputformat将小文件存储成SequenceFile文件。</p>\n<p>（2）采用ConbinFileInputFormat来作为输入，解决输入端大量小文件场景。</p>\n<p>（3）对于大量小文件Job，可以开启JVM重用。</p>\n<h4 id=\"Map阶段\"><a href=\"#Map阶段\" class=\"headerlink\" title=\"Map阶段\"></a>Map阶段</h4><p>（1）增大环形缓冲区大小。由100m扩大到200m</p>\n<p>（2）增大环形缓冲区溢写的比例。由80%扩大到90%</p>\n<p>（3）减少对溢写文件的merge次数。</p>\n<p>（4）不影响实际业务的前提下，采用Combiner提前合并，减少 I/O。</p>\n<h4 id=\"Reduce阶段\"><a href=\"#Reduce阶段\" class=\"headerlink\" title=\"Reduce阶段\"></a>Reduce阶段</h4><p>（1）合理设置Map和Reduce数：两个都不能设置太少，也不能设置太多。太少，会导致Task等待，延长处理时间；太多，会导致 Map、Reduce任务间竞争资源，造成处理超时等错误。</p>\n<p>（2）设置Map、Reduce共存：调整slowstart.completedmaps参数，使Map运行到一定程度后，Reduce也开始运行，减少Reduce的等待时间。</p>\n<p>（3）规避使用Reduce，因为Reduce在用于连接数据集的时候将会产生大量的网络消耗。</p>\n<p>（4）增加每个Reduce去Map中拿数据的并行数</p>\n<p>（5）集群性能可以的前提下，增大Reduce端存储数据内存的大小。 </p>\n<h4 id=\"IO传输\"><a href=\"#IO传输\" class=\"headerlink\" title=\"IO传输\"></a>IO传输</h4><p>（1）采用数据压缩的方式，减少网络IO的的时间。安装Snappy和LZOP压缩编码器。</p>\n<p>（2）使用SequenceFile二进制文件</p>\n<h4 id=\"整体\"><a href=\"#整体\" class=\"headerlink\" title=\"整体\"></a>整体</h4><p>（1）可以增加MapTask的cpu核数，增加ReduceTask的CPU核数</p>\n<p>（2）增加每个Container的CPU核数和内存大小</p>\n<p>（3）调整每个Map Task和Reduce Task最大重试次数</p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<p>MapReduce的流程相对来说比较复杂,这里借用尚硅谷的两张图来描述其流程.</p>\n<p><img src=\"/2020/07/06/mapreduce-de-liu-cheng-ji-you-hua/wps3.png\" alt><img src=\"/2020/07/06/mapreduce-de-liu-cheng-ji-you-hua/wps4.png\" alt></p>\n<p>上面两张图对MapReduce有比较详细的描述,通过这个图我们就能够发现一些MapReduce的优化方法.</p>\n<h4 id=\"数据输入小文件处理\"><a href=\"#数据输入小文件处理\" class=\"headerlink\" title=\"数据输入小文件处理\"></a>数据输入小文件处理</h4><p><strong>HDFS小文件会因为文件元数据存储在NameNode的内存中影响NameNode的寿命;还会影响计算引擎的任务数量，比如每个小的文件都会生成一个Map任务.</strong>以下有三种方式可以优化:</p>\n<p>（1）合并小文件：对小文件进行归档（Har）、自定义Inputformat将小文件存储成SequenceFile文件。</p>\n<p>（2）采用ConbinFileInputFormat来作为输入，解决输入端大量小文件场景。</p>\n<p>（3）对于大量小文件Job，可以开启JVM重用。</p>\n<h4 id=\"Map阶段\"><a href=\"#Map阶段\" class=\"headerlink\" title=\"Map阶段\"></a>Map阶段</h4><p>（1）增大环形缓冲区大小。由100m扩大到200m</p>\n<p>（2）增大环形缓冲区溢写的比例。由80%扩大到90%</p>\n<p>（3）减少对溢写文件的merge次数。</p>\n<p>（4）不影响实际业务的前提下，采用Combiner提前合并，减少 I/O。</p>\n<h4 id=\"Reduce阶段\"><a href=\"#Reduce阶段\" class=\"headerlink\" title=\"Reduce阶段\"></a>Reduce阶段</h4><p>（1）合理设置Map和Reduce数：两个都不能设置太少，也不能设置太多。太少，会导致Task等待，延长处理时间；太多，会导致 Map、Reduce任务间竞争资源，造成处理超时等错误。</p>\n<p>（2）设置Map、Reduce共存：调整slowstart.completedmaps参数，使Map运行到一定程度后，Reduce也开始运行，减少Reduce的等待时间。</p>\n<p>（3）规避使用Reduce，因为Reduce在用于连接数据集的时候将会产生大量的网络消耗。</p>\n<p>（4）增加每个Reduce去Map中拿数据的并行数</p>\n<p>（5）集群性能可以的前提下，增大Reduce端存储数据内存的大小。 </p>\n<h4 id=\"IO传输\"><a href=\"#IO传输\" class=\"headerlink\" title=\"IO传输\"></a>IO传输</h4><p>（1）采用数据压缩的方式，减少网络IO的的时间。安装Snappy和LZOP压缩编码器。</p>\n<p>（2）使用SequenceFile二进制文件</p>\n<h4 id=\"整体\"><a href=\"#整体\" class=\"headerlink\" title=\"整体\"></a>整体</h4><p>（1）可以增加MapTask的cpu核数，增加ReduceTask的CPU核数</p>\n<p>（2）增加每个Container的CPU核数和内存大小</p>\n<p>（3）调整每个Map Task和Reduce Task最大重试次数</p>\n"},{"title":"MongoDB使用及底层原理","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-02-17T14:23:25.000Z","password":null,"summary":null,"_content":"\n## mongoDB起步\n\n- 1.安装mongoDB\n\n  安装这里，我就不详细介绍，大家可以根据官网选择匹配自己电脑系统的版本安装即可。\n\n  mongoDB download地址： [download](https://www.mongodb.com/download-center)\n\n  下载下来之后，点击打开直接下一步，下一步就 `ok` 了。\n\n- 2.初体验\n\n  1. 配置环境变量\n\n  安装完成后，会在安装目录下面生成一个 `mongoDB` 的文件夹，打开文件夹，进入 `bin` 文件夹中，把这里的路径配置成环境变量。\n\n  1. 创建存储数据库文件 `data`\n\n  在任意盘符根目录下创建一个 `data` 目录，用来存放数据库文件。 `mongoDB` 会自动把自己安装位置的盘符根目录下的 `data` 文件夹作为自己的数据存储目录，这里也可以直接在安装位置所在盘符创建。\n\n  1. 启动 mongoDB 数据库\n\n  如果 `data` 目录创建在安装位置的盘符根目录下，直接打开命令行，敲入：\n\n  ```shell\n   mongod\n  ```\n\n  如果是其他位置，则需要指定数据存放的位置:\n\n  ```shell\n   mongod --dbpath 文件路径\n  ```\n\n  如果看到输出： `waiting for connections on port 27017` 说明启动数据库成功。\n\n  1. 连接数据库\n\n  再打开一个命令行，敲入 `mongo` ，则会默认连接到本地开启的数据库。好了，到这里我们就完成了如何开启一个 `mongoDB`  数据库了，接下来只需往数据库里存数据，操作数据即可。\n\n## MongoDB 概念解析\n\n`mongoDB` 作为一个 `NoSQL` 数据库，对于我们前端学习成本非常低，后期会结合node一起使用。mongoDB 中存储的都是 键值对（`key` - `value`），格式类似于 `JSON` ，操作起来也是非常爽，完全不需要我们有什么 `SQL` 语言的基础。\n\n在`mongodb`中有三个基本核心的概念：\n\n- 文档\n- 集合\n- 数据库\n\n它们之间是逐层包含的关系，一个集合可以包含多个文档，一个数据库可以有多个集合，下面听我逐一道来：\n\n`文档` ： 文档是一个键值(`key-value`)对(即`BSON`)，本质类似于`json`对象 的键值对。\n\n```json\n{\"name\":\"pubdreamcc\", \"age\": 24}\n```\n\n`集合`：集合就是 MongoDB 文档组，实质上就是包含多个对象的数组。\n\n比如，我们可以将以下不同数据结构的文档插入到集合中：\n\n```json\n{\"name\":\"pubdreamcc\"}\n{\"name\":\"pubdreamcc1\",\"name\":\"pubdreamcc2\"}\n{\"name\":\"pubdreamcc3\",\"name\":\"pubdreamcc4\",\"num\":5}\n```\n\n`数据库（dataBase）`\n\n这里的数据库概念同 关系型数据库中的数据库概念一致，数据库可以包含多个集合。\n\n下面给出一张图用来表示 `mongoDB` 中的一些概念同 `SQL` 概念 的 对比，辅助理解。\n\n![](MongoDB使用及底层原理/1.png)\n\n## mongoDB基本操作\n\n在刚才我们连接上本地数据库之后，在这个命令行，我们可以进行很多  `mongoDB`  提供的增删改查等的基本操作，且听我一一道来。\n\n- 1.创建数据库 : `use 数据库名称`。\n\n  *如果数据库不存在，则创建数据库，否则切换到指定数据库。*\n\n  *MongoDB 中默认的数据库为 test，如果你没有创建新的数据库，集合将存放在 test 数据库中。*\n\n- 2.查看所有数据库： `show dbs`\n\n- 3.删除数据库： `db.dropDatabase()`，你可以使用 db 命令查看当前数据库名。\n\n- 4.创建集合：  `db.createCollection(集合名称)`\n\n- 5.查看已有集合： `show collections`\n\n- 6.删除集合：`db.集合名称.drop()`\n\n  *如果成功删除选定集合，则 drop() 方法返回 true，否则返回 false。*\n\n- 7.插入文档：`db.集合名称.insert(document)`。往指定集合插入文档，文档的数据结构和 `JSON` 基本一样。\n\n- 8.更新文档： `update()` 方法用于更新已存在的文档，语法格式：\n\n  ```sql\n     db.collection.update(\n       <query>,\n       <update>,\n       {\n         upsert: <boolean>,\n         multi: <boolean>,\n         writeConcern: <document>\n       }\n     )\n  ```\n\n  **参数说明**：\n\n  - `query` : update的查询条件，类似sql update查询内where后面的。\n  - `update` : update的对象和一些更新的操作符（如inc），也可以理解为sql update查询内set后面的。\n  - `upsert` : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。\n  - `multi` : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。\n  - `writeConcern` :可选，抛出异常的级别。\n\n- 9.删除文档：\n\n  ```sql\n  db.collection.remove(\n    <query>,\n    <justOne>\n  )\n  ```\n\n  **参数说明**\n\n  - `query` :（可选）删除的文档的条件。\n  - `justOne` : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。\n  - `writeConcern` :（可选）抛出异常的级别。\n\n- 10.删除集合所有数据：`db.collection.remove({})`\n\n- 11.查询文档：`db.collection.find(query, projection)`\n\n  **参数说明**\n\n  - `query` ：可选，使用查询操作符指定查询条件。\n  - `projection` ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。\n\n  ```sql\n  # 如果你需要以易读的方式来读取数据，可以使用 `pretty()` 方法，语法格式如下：\n\n  db.col.find().pretty()\n  ```\n  `pretty()` 方法以格式化的方式来显示所有文档。\n\n- 12.查询一个文档（匹配条件的第一个）：`db.collection.findOne()`\n","source":"_posts/MongoDB使用及底层原理.md","raw":"---\ntitle: MongoDB使用及底层原理\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-02-17 22:23:25\npassword:\nsummary:\ntags:\ncategories: 数据库\n---\n\n## mongoDB起步\n\n- 1.安装mongoDB\n\n  安装这里，我就不详细介绍，大家可以根据官网选择匹配自己电脑系统的版本安装即可。\n\n  mongoDB download地址： [download](https://www.mongodb.com/download-center)\n\n  下载下来之后，点击打开直接下一步，下一步就 `ok` 了。\n\n- 2.初体验\n\n  1. 配置环境变量\n\n  安装完成后，会在安装目录下面生成一个 `mongoDB` 的文件夹，打开文件夹，进入 `bin` 文件夹中，把这里的路径配置成环境变量。\n\n  1. 创建存储数据库文件 `data`\n\n  在任意盘符根目录下创建一个 `data` 目录，用来存放数据库文件。 `mongoDB` 会自动把自己安装位置的盘符根目录下的 `data` 文件夹作为自己的数据存储目录，这里也可以直接在安装位置所在盘符创建。\n\n  1. 启动 mongoDB 数据库\n\n  如果 `data` 目录创建在安装位置的盘符根目录下，直接打开命令行，敲入：\n\n  ```shell\n   mongod\n  ```\n\n  如果是其他位置，则需要指定数据存放的位置:\n\n  ```shell\n   mongod --dbpath 文件路径\n  ```\n\n  如果看到输出： `waiting for connections on port 27017` 说明启动数据库成功。\n\n  1. 连接数据库\n\n  再打开一个命令行，敲入 `mongo` ，则会默认连接到本地开启的数据库。好了，到这里我们就完成了如何开启一个 `mongoDB`  数据库了，接下来只需往数据库里存数据，操作数据即可。\n\n## MongoDB 概念解析\n\n`mongoDB` 作为一个 `NoSQL` 数据库，对于我们前端学习成本非常低，后期会结合node一起使用。mongoDB 中存储的都是 键值对（`key` - `value`），格式类似于 `JSON` ，操作起来也是非常爽，完全不需要我们有什么 `SQL` 语言的基础。\n\n在`mongodb`中有三个基本核心的概念：\n\n- 文档\n- 集合\n- 数据库\n\n它们之间是逐层包含的关系，一个集合可以包含多个文档，一个数据库可以有多个集合，下面听我逐一道来：\n\n`文档` ： 文档是一个键值(`key-value`)对(即`BSON`)，本质类似于`json`对象 的键值对。\n\n```json\n{\"name\":\"pubdreamcc\", \"age\": 24}\n```\n\n`集合`：集合就是 MongoDB 文档组，实质上就是包含多个对象的数组。\n\n比如，我们可以将以下不同数据结构的文档插入到集合中：\n\n```json\n{\"name\":\"pubdreamcc\"}\n{\"name\":\"pubdreamcc1\",\"name\":\"pubdreamcc2\"}\n{\"name\":\"pubdreamcc3\",\"name\":\"pubdreamcc4\",\"num\":5}\n```\n\n`数据库（dataBase）`\n\n这里的数据库概念同 关系型数据库中的数据库概念一致，数据库可以包含多个集合。\n\n下面给出一张图用来表示 `mongoDB` 中的一些概念同 `SQL` 概念 的 对比，辅助理解。\n\n![](MongoDB使用及底层原理/1.png)\n\n## mongoDB基本操作\n\n在刚才我们连接上本地数据库之后，在这个命令行，我们可以进行很多  `mongoDB`  提供的增删改查等的基本操作，且听我一一道来。\n\n- 1.创建数据库 : `use 数据库名称`。\n\n  *如果数据库不存在，则创建数据库，否则切换到指定数据库。*\n\n  *MongoDB 中默认的数据库为 test，如果你没有创建新的数据库，集合将存放在 test 数据库中。*\n\n- 2.查看所有数据库： `show dbs`\n\n- 3.删除数据库： `db.dropDatabase()`，你可以使用 db 命令查看当前数据库名。\n\n- 4.创建集合：  `db.createCollection(集合名称)`\n\n- 5.查看已有集合： `show collections`\n\n- 6.删除集合：`db.集合名称.drop()`\n\n  *如果成功删除选定集合，则 drop() 方法返回 true，否则返回 false。*\n\n- 7.插入文档：`db.集合名称.insert(document)`。往指定集合插入文档，文档的数据结构和 `JSON` 基本一样。\n\n- 8.更新文档： `update()` 方法用于更新已存在的文档，语法格式：\n\n  ```sql\n     db.collection.update(\n       <query>,\n       <update>,\n       {\n         upsert: <boolean>,\n         multi: <boolean>,\n         writeConcern: <document>\n       }\n     )\n  ```\n\n  **参数说明**：\n\n  - `query` : update的查询条件，类似sql update查询内where后面的。\n  - `update` : update的对象和一些更新的操作符（如inc），也可以理解为sql update查询内set后面的。\n  - `upsert` : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。\n  - `multi` : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。\n  - `writeConcern` :可选，抛出异常的级别。\n\n- 9.删除文档：\n\n  ```sql\n  db.collection.remove(\n    <query>,\n    <justOne>\n  )\n  ```\n\n  **参数说明**\n\n  - `query` :（可选）删除的文档的条件。\n  - `justOne` : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。\n  - `writeConcern` :（可选）抛出异常的级别。\n\n- 10.删除集合所有数据：`db.collection.remove({})`\n\n- 11.查询文档：`db.collection.find(query, projection)`\n\n  **参数说明**\n\n  - `query` ：可选，使用查询操作符指定查询条件。\n  - `projection` ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。\n\n  ```sql\n  # 如果你需要以易读的方式来读取数据，可以使用 `pretty()` 方法，语法格式如下：\n\n  db.col.find().pretty()\n  ```\n  `pretty()` 方法以格式化的方式来显示所有文档。\n\n- 12.查询一个文档（匹配条件的第一个）：`db.collection.findOne()`\n","slug":"MongoDB使用及底层原理","published":1,"updated":"2021-04-29T09:04:36.543Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mlas000yvkvy1zf8q9ap","content":"<h2 id=\"mongoDB起步\"><a href=\"#mongoDB起步\" class=\"headerlink\" title=\"mongoDB起步\"></a>mongoDB起步</h2><ul>\n<li><p>1.安装mongoDB</p>\n<p>安装这里，我就不详细介绍，大家可以根据官网选择匹配自己电脑系统的版本安装即可。</p>\n<p>mongoDB download地址： <a href=\"https://www.mongodb.com/download-center\" target=\"_blank\" rel=\"noopener\">download</a></p>\n<p>下载下来之后，点击打开直接下一步，下一步就 <code>ok</code> 了。</p>\n</li>\n<li><p>2.初体验</p>\n<ol>\n<li>配置环境变量</li>\n</ol>\n<p>安装完成后，会在安装目录下面生成一个 <code>mongoDB</code> 的文件夹，打开文件夹，进入 <code>bin</code> 文件夹中，把这里的路径配置成环境变量。</p>\n<ol>\n<li>创建存储数据库文件 <code>data</code></li>\n</ol>\n<p>在任意盘符根目录下创建一个 <code>data</code> 目录，用来存放数据库文件。 <code>mongoDB</code> 会自动把自己安装位置的盘符根目录下的 <code>data</code> 文件夹作为自己的数据存储目录，这里也可以直接在安装位置所在盘符创建。</p>\n<ol>\n<li>启动 mongoDB 数据库</li>\n</ol>\n<p>如果 <code>data</code> 目录创建在安装位置的盘符根目录下，直接打开命令行，敲入：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"> mongod<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果是其他位置，则需要指定数据存放的位置:</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"> mongod --dbpath 文件路径<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果看到输出： <code>waiting for connections on port 27017</code> 说明启动数据库成功。</p>\n<ol>\n<li>连接数据库</li>\n</ol>\n<p>再打开一个命令行，敲入 <code>mongo</code> ，则会默认连接到本地开启的数据库。好了，到这里我们就完成了如何开启一个 <code>mongoDB</code>  数据库了，接下来只需往数据库里存数据，操作数据即可。</p>\n</li>\n</ul>\n<h2 id=\"MongoDB-概念解析\"><a href=\"#MongoDB-概念解析\" class=\"headerlink\" title=\"MongoDB 概念解析\"></a>MongoDB 概念解析</h2><p><code>mongoDB</code> 作为一个 <code>NoSQL</code> 数据库，对于我们前端学习成本非常低，后期会结合node一起使用。mongoDB 中存储的都是 键值对（<code>key</code> - <code>value</code>），格式类似于 <code>JSON</code> ，操作起来也是非常爽，完全不需要我们有什么 <code>SQL</code> 语言的基础。</p>\n<p>在<code>mongodb</code>中有三个基本核心的概念：</p>\n<ul>\n<li>文档</li>\n<li>集合</li>\n<li>数据库</li>\n</ul>\n<p>它们之间是逐层包含的关系，一个集合可以包含多个文档，一个数据库可以有多个集合，下面听我逐一道来：</p>\n<p><code>文档</code> ： 文档是一个键值(<code>key-value</code>)对(即<code>BSON</code>)，本质类似于<code>json</code>对象 的键值对。</p>\n<pre class=\"line-numbers language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"pubdreamcc\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">24</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><code>集合</code>：集合就是 MongoDB 文档组，实质上就是包含多个对象的数组。</p>\n<p>比如，我们可以将以下不同数据结构的文档插入到集合中：</p>\n<pre class=\"line-numbers language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"pubdreamcc\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"pubdreamcc1\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"pubdreamcc2\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"pubdreamcc3\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"pubdreamcc4\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"num\"</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><code>数据库（dataBase）</code></p>\n<p>这里的数据库概念同 关系型数据库中的数据库概念一致，数据库可以包含多个集合。</p>\n<p>下面给出一张图用来表示 <code>mongoDB</code> 中的一些概念同 <code>SQL</code> 概念 的 对比，辅助理解。</p>\n<p><img src=\"/2020/02/17/mongodb-shi-yong-ji-di-ceng-yuan-li/1.png\" alt></p>\n<h2 id=\"mongoDB基本操作\"><a href=\"#mongoDB基本操作\" class=\"headerlink\" title=\"mongoDB基本操作\"></a>mongoDB基本操作</h2><p>在刚才我们连接上本地数据库之后，在这个命令行，我们可以进行很多  <code>mongoDB</code>  提供的增删改查等的基本操作，且听我一一道来。</p>\n<ul>\n<li><p>1.创建数据库 : <code>use 数据库名称</code>。</p>\n<p><em>如果数据库不存在，则创建数据库，否则切换到指定数据库。</em></p>\n<p><em>MongoDB 中默认的数据库为 test，如果你没有创建新的数据库，集合将存放在 test 数据库中。</em></p>\n</li>\n<li><p>2.查看所有数据库： <code>show dbs</code></p>\n</li>\n<li><p>3.删除数据库： <code>db.dropDatabase()</code>，你可以使用 db 命令查看当前数据库名。</p>\n</li>\n<li><p>4.创建集合：  <code>db.createCollection(集合名称)</code></p>\n</li>\n<li><p>5.查看已有集合： <code>show collections</code></p>\n</li>\n<li><p>6.删除集合：<code>db.集合名称.drop()</code></p>\n<p><em>如果成功删除选定集合，则 drop() 方法返回 true，否则返回 false。</em></p>\n</li>\n<li><p>7.插入文档：<code>db.集合名称.insert(document)</code>。往指定集合插入文档，文档的数据结构和 <code>JSON</code> 基本一样。</p>\n</li>\n<li><p>8.更新文档： <code>update()</code> 方法用于更新已存在的文档，语法格式：</p>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\">   <span class=\"token number\">db</span><span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span><span class=\"token keyword\">update</span><span class=\"token punctuation\">(</span>\n     <span class=\"token operator\">&lt;</span>query<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n     <span class=\"token operator\">&lt;</span><span class=\"token keyword\">update</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n     {\n       upsert: <span class=\"token operator\">&lt;</span><span class=\"token keyword\">boolean</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n       multi: <span class=\"token operator\">&lt;</span><span class=\"token keyword\">boolean</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n       writeConcern: <span class=\"token operator\">&lt;</span>document<span class=\"token operator\">></span>\n     }\n   <span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>参数说明</strong>：</p>\n<ul>\n<li><code>query</code> : update的查询条件，类似sql update查询内where后面的。</li>\n<li><code>update</code> : update的对象和一些更新的操作符（如inc），也可以理解为sql update查询内set后面的。</li>\n<li><code>upsert</code> : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</li>\n<li><code>multi</code> : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</li>\n<li><code>writeConcern</code> :可选，抛出异常的级别。</li>\n</ul>\n</li>\n<li><p>9.删除文档：</p>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\"><span class=\"token number\">db</span><span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>query<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">&lt;</span>justOne<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>参数说明</strong></p>\n<ul>\n<li><code>query</code> :（可选）删除的文档的条件。</li>\n<li><code>justOne</code> : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。</li>\n<li><code>writeConcern</code> :（可选）抛出异常的级别。</li>\n</ul>\n</li>\n<li><p>10.删除集合所有数据：<code>db.collection.remove({})</code></p>\n</li>\n<li><p>11.查询文档：<code>db.collection.find(query, projection)</code></p>\n<p><strong>参数说明</strong></p>\n<ul>\n<li><code>query</code> ：可选，使用查询操作符指定查询条件。</li>\n<li><code>projection</code> ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。</li>\n</ul>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\"><span class=\"token comment\" spellcheck=\"true\"># 如果你需要以易读的方式来读取数据，可以使用 `pretty()` 方法，语法格式如下：</span>\n\n<span class=\"token number\">db</span><span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>pretty<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><code>pretty()</code> 方法以格式化的方式来显示所有文档。</p>\n</li>\n<li><p>12.查询一个文档（匹配条件的第一个）：<code>db.collection.findOne()</code></p>\n</li>\n</ul>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h2 id=\"mongoDB起步\"><a href=\"#mongoDB起步\" class=\"headerlink\" title=\"mongoDB起步\"></a>mongoDB起步</h2><ul>\n<li><p>1.安装mongoDB</p>\n<p>安装这里，我就不详细介绍，大家可以根据官网选择匹配自己电脑系统的版本安装即可。</p>\n<p>mongoDB download地址： <a href=\"https://www.mongodb.com/download-center\" target=\"_blank\" rel=\"noopener\">download</a></p>\n<p>下载下来之后，点击打开直接下一步，下一步就 <code>ok</code> 了。</p>\n</li>\n<li><p>2.初体验</p>\n<ol>\n<li>配置环境变量</li>\n</ol>\n<p>安装完成后，会在安装目录下面生成一个 <code>mongoDB</code> 的文件夹，打开文件夹，进入 <code>bin</code> 文件夹中，把这里的路径配置成环境变量。</p>\n<ol>\n<li>创建存储数据库文件 <code>data</code></li>\n</ol>\n<p>在任意盘符根目录下创建一个 <code>data</code> 目录，用来存放数据库文件。 <code>mongoDB</code> 会自动把自己安装位置的盘符根目录下的 <code>data</code> 文件夹作为自己的数据存储目录，这里也可以直接在安装位置所在盘符创建。</p>\n<ol>\n<li>启动 mongoDB 数据库</li>\n</ol>\n<p>如果 <code>data</code> 目录创建在安装位置的盘符根目录下，直接打开命令行，敲入：</p>\n<pre><code class=\"shell\"> mongod</code></pre>\n<p>如果是其他位置，则需要指定数据存放的位置:</p>\n<pre><code class=\"shell\"> mongod --dbpath 文件路径</code></pre>\n<p>如果看到输出： <code>waiting for connections on port 27017</code> 说明启动数据库成功。</p>\n<ol>\n<li>连接数据库</li>\n</ol>\n<p>再打开一个命令行，敲入 <code>mongo</code> ，则会默认连接到本地开启的数据库。好了，到这里我们就完成了如何开启一个 <code>mongoDB</code>  数据库了，接下来只需往数据库里存数据，操作数据即可。</p>\n</li>\n</ul>\n<h2 id=\"MongoDB-概念解析\"><a href=\"#MongoDB-概念解析\" class=\"headerlink\" title=\"MongoDB 概念解析\"></a>MongoDB 概念解析</h2><p><code>mongoDB</code> 作为一个 <code>NoSQL</code> 数据库，对于我们前端学习成本非常低，后期会结合node一起使用。mongoDB 中存储的都是 键值对（<code>key</code> - <code>value</code>），格式类似于 <code>JSON</code> ，操作起来也是非常爽，完全不需要我们有什么 <code>SQL</code> 语言的基础。</p>\n<p>在<code>mongodb</code>中有三个基本核心的概念：</p>\n<ul>\n<li>文档</li>\n<li>集合</li>\n<li>数据库</li>\n</ul>\n<p>它们之间是逐层包含的关系，一个集合可以包含多个文档，一个数据库可以有多个集合，下面听我逐一道来：</p>\n<p><code>文档</code> ： 文档是一个键值(<code>key-value</code>)对(即<code>BSON</code>)，本质类似于<code>json</code>对象 的键值对。</p>\n<pre><code class=\"json\">{&quot;name&quot;:&quot;pubdreamcc&quot;, &quot;age&quot;: 24}</code></pre>\n<p><code>集合</code>：集合就是 MongoDB 文档组，实质上就是包含多个对象的数组。</p>\n<p>比如，我们可以将以下不同数据结构的文档插入到集合中：</p>\n<pre><code class=\"json\">{&quot;name&quot;:&quot;pubdreamcc&quot;}\n{&quot;name&quot;:&quot;pubdreamcc1&quot;,&quot;name&quot;:&quot;pubdreamcc2&quot;}\n{&quot;name&quot;:&quot;pubdreamcc3&quot;,&quot;name&quot;:&quot;pubdreamcc4&quot;,&quot;num&quot;:5}</code></pre>\n<p><code>数据库（dataBase）</code></p>\n<p>这里的数据库概念同 关系型数据库中的数据库概念一致，数据库可以包含多个集合。</p>\n<p>下面给出一张图用来表示 <code>mongoDB</code> 中的一些概念同 <code>SQL</code> 概念 的 对比，辅助理解。</p>\n<p><img src=\"/2020/02/17/mongodb-shi-yong-ji-di-ceng-yuan-li/1.png\" alt></p>\n<h2 id=\"mongoDB基本操作\"><a href=\"#mongoDB基本操作\" class=\"headerlink\" title=\"mongoDB基本操作\"></a>mongoDB基本操作</h2><p>在刚才我们连接上本地数据库之后，在这个命令行，我们可以进行很多  <code>mongoDB</code>  提供的增删改查等的基本操作，且听我一一道来。</p>\n<ul>\n<li><p>1.创建数据库 : <code>use 数据库名称</code>。</p>\n<p><em>如果数据库不存在，则创建数据库，否则切换到指定数据库。</em></p>\n<p><em>MongoDB 中默认的数据库为 test，如果你没有创建新的数据库，集合将存放在 test 数据库中。</em></p>\n</li>\n<li><p>2.查看所有数据库： <code>show dbs</code></p>\n</li>\n<li><p>3.删除数据库： <code>db.dropDatabase()</code>，你可以使用 db 命令查看当前数据库名。</p>\n</li>\n<li><p>4.创建集合：  <code>db.createCollection(集合名称)</code></p>\n</li>\n<li><p>5.查看已有集合： <code>show collections</code></p>\n</li>\n<li><p>6.删除集合：<code>db.集合名称.drop()</code></p>\n<p><em>如果成功删除选定集合，则 drop() 方法返回 true，否则返回 false。</em></p>\n</li>\n<li><p>7.插入文档：<code>db.集合名称.insert(document)</code>。往指定集合插入文档，文档的数据结构和 <code>JSON</code> 基本一样。</p>\n</li>\n<li><p>8.更新文档： <code>update()</code> 方法用于更新已存在的文档，语法格式：</p>\n<pre><code class=\"sql\">   db.collection.update(\n     &lt;query&gt;,\n     &lt;update&gt;,\n     {\n       upsert: &lt;boolean&gt;,\n       multi: &lt;boolean&gt;,\n       writeConcern: &lt;document&gt;\n     }\n   )</code></pre>\n<p><strong>参数说明</strong>：</p>\n<ul>\n<li><code>query</code> : update的查询条件，类似sql update查询内where后面的。</li>\n<li><code>update</code> : update的对象和一些更新的操作符（如inc），也可以理解为sql update查询内set后面的。</li>\n<li><code>upsert</code> : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</li>\n<li><code>multi</code> : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</li>\n<li><code>writeConcern</code> :可选，抛出异常的级别。</li>\n</ul>\n</li>\n<li><p>9.删除文档：</p>\n<pre><code class=\"sql\">db.collection.remove(\n  &lt;query&gt;,\n  &lt;justOne&gt;\n)</code></pre>\n<p><strong>参数说明</strong></p>\n<ul>\n<li><code>query</code> :（可选）删除的文档的条件。</li>\n<li><code>justOne</code> : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。</li>\n<li><code>writeConcern</code> :（可选）抛出异常的级别。</li>\n</ul>\n</li>\n<li><p>10.删除集合所有数据：<code>db.collection.remove({})</code></p>\n</li>\n<li><p>11.查询文档：<code>db.collection.find(query, projection)</code></p>\n<p><strong>参数说明</strong></p>\n<ul>\n<li><code>query</code> ：可选，使用查询操作符指定查询条件。</li>\n<li><code>projection</code> ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。</li>\n</ul>\n<pre><code class=\"sql\"># 如果你需要以易读的方式来读取数据，可以使用 `pretty()` 方法，语法格式如下：\n\ndb.col.find().pretty()</code></pre>\n<p><code>pretty()</code> 方法以格式化的方式来显示所有文档。</p>\n</li>\n<li><p>12.查询一个文档（匹配条件的第一个）：<code>db.collection.findOne()</code></p>\n</li>\n</ul>\n"},{"title":"Netty原理","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-14T14:50:15.000Z","password":null,"summary":null,"_content":"\n\n\n对于高性能的 RPC 框架，Netty 作为异步通信框架，几乎成为必备品。例如，Dubbo 框架中通信组件，还有 RocketMQ 中生产者和消费者的通信，都使用了 Netty。今天，我们来看看 Netty 的基本架构和原理。\n\nNetty 的特点与 NIO\n\nNetty 是一个异步的、基于事件驱动的网络应用框架，它可以用来开发高性能服务端和客户端。\n\n以前编写网络调用程序的时候，我们都会在客户端创建一个 Socket，通过这个 Socket 连接到服务端。\n\n服务端根据这个 Socket 创建一个 Thread，用来发出请求。客户端在发起调用以后，需要等待服务端处理完成，才能继续后面的操作。这样线程会出现等待的状态。\n\n如果客户端请求数越多，服务端创建的处理线程也会越多，JVM 如此多的线程并不是一件容易的事。\n\n![使用阻赛 I/O 处理多个连接](Netty原理/1.png)\n\n为了解决上述的问题，推出了 NIO 的概念，也就是（Non-blocking I/O）。其中，Selector 机制就是 NIO 的核心。\n\n当每次客户端请求时，会创建一个 Socket Channel，并将其注册到 Selector 上（多路复用器）。\n\n然后，Selector 关注服务端 IO 读写事件，此时客户端并不用等待 IO 事件完成，可以继续做接下来的工作。\n\n一旦，服务端完成了 IO 读写操作，Selector 会接到通知，同时告诉客户端 IO 操作已经完成。\n\n接到通知的客户端，就可以通过 SocketChannel 获取需要的数据了。\n\n![NIO 机制与 Selector](Netty原理/2.png)\n\n上面描述的过程有点异步的意思，不过，Selector 实现的并不是真正意义上的异步操作。\n\n因为 Selector 需要通过线程阻塞的方式监听 IO 事件变更，只是这种方式没有让客户端等待，是 Selector 在等待 IO 返回，并且通知客户端去获取数据。真正“异步 IO”（AIO）这里不展开介绍，有兴趣可以自行查找。\n\n说好了 NIO 再来谈谈 Netty，Netty 作为 NIO 的实现，它适用于服务器/客户端通讯的场景，以及针对于 TCP 协议下的高并发应用。\n\n对于开发者来说，它具有以下特点：\n\n- 对 NIO 进行封装，开发者不需要关注 NIO 的底层原理，只需要调用 Netty 组件就能够完成工作。\n- 对网络调用透明，从 Socket 建立 TCP 连接到网络异常的处理都做了包装。\n- 对数据处理灵活， Netty 支持多种序列化框架，通过“ChannelHandler”机制，可以自定义“编/解码器”。\n- 对性能调优友好，Netty 提供了线程池模式以及 Buffer 的重用机制（对象池化），不需要构建复杂的多线程模型和操作队列。\n\n## 组件作用与之间关系\n\n开篇讲到了，为了满足高并发下网络请求，引入了 NIO 的概念。Netty 是针对 NIO 的实现，在 NIO 封装，网络调用，数据处理以及性能优化等方面都有不俗的表现。\n\n学习架构最容易的方式就是从实例入手，从客户端访问服务端的代码来看看 Netty 是如何运作的。再一次介绍代码中调用的组件以及组件的工作原理。\n\n假设有一个客户端去调用一个服务端，假设服务端叫做 EchoServer，客户端叫做 EchoClient，用 Netty 架构实现代码如下。\n\n**服务端代码**\n\n构建服务器端，假设服务器接受客户端传来的信息，然后在控制台打印。首先，生成 EchoServer，在构造函数中传入需要监听的端口号。\n\n![构造函数中传入需要监听的端口号](Netty原理/3.webp)\n\n接下来就是服务的启动方法：\n\n![启动 NettyServer 的 Start 方法](Netty原理/4.jpg)\n\nServer 的启动方法涉及到了一些组件的调用，例如 EventLoopGroup，Channel。这些会在后面详细讲解。\n\n这里有个大致的印象就好：\n\n- 创建 EventLoopGroup。\n- 创建 ServerBootstrap。\n- 指定所使用的 NIO 传输 Channel。\n- 使用指定的端口设置套接字地址。\n- 添加一个 ServerHandler 到 Channel 的 ChannelPipeline。\n- 异步地绑定服务器；调用 sync() 方法阻塞等待直到绑定完成。\n- 获取 Channel 的 CloseFuture，并且阻塞当前线程直到它完成。\n- 关闭 EventLoopGroup，释放所有的资源。\n\nNettyServer 启动以后会监听某个端口的请求，当接受到了请求就需要处理了。在 Netty 中客户端请求服务端，被称为“入站”操作。\n\n可以通过 ChannelInboundHandlerAdapter 实现，具体内容如下：\n\n![处理来自客户端的请求](Netty原理/5.jpg)\n\n\n\n从上面的代码可以看出，服务端处理的代码包含了三个方法。这三个方法都是根据事件触发的。\n\n他们分别是：\n\n- 当接收到消息时的操作，channelRead。\n- 消息读取完成时的方法，channelReadComplete。\n- 出现异常时的方法，exceptionCaught。\n\n**客户端代码**\n\n客户端和服务端的代码基本相似，在初始化时需要输入服务端的 IP 和 Port。\n\n![Netty原理/3.webp](Netty原理/6.webp)\n\n同样在客户端启动函数中包括以下内容：\n\n![Netty原理/3.webp](Netty原理/7.webp)\n\n客户端启动程序的顺序：\n\n- 创建 Bootstrap。\n- 指定 EventLoopGroup 用来监听事件。\n- 定义 Channel 的传输模式为 NIO（Non-BlockingInputOutput）。\n- 设置服务器的 InetSocketAddress。\n- 在创建 Channel 时，向 ChannelPipeline 中添加一个 EchoClientHandler 实例。\n- 连接到远程节点，阻塞等待直到连接完成。\n- 阻塞，直到 Channel 关闭。\n- 关闭线程池并且释放所有的资源。\n\n客户端在完成以上操作以后，会与服务端建立连接从而传输数据。同样在接受到 Channel 中触发的事件时，客户端会触发对应事件的操作。\n\n![Netty原理/3.webp](Netty原理/8.jpg)\n\n例如 Channel 激活，客户端接受到服务端的消息，或者发生异常的捕获。\n\n从代码结构上看还是比较简单的。服务端和客户端分别初始化创建监听和连接。然后分别定义各自的 Handler 处理对方的请求。\n\n![Netty原理/3.webp](Netty原理/9.png)\n\n*服务端/客户端初始化和事件处理*\n\nNetty 核心组件\n\n通过上面的简单例子，发现有些 Netty 组件在服务初始化以及通讯时被用到，下面就来介绍一下这些组件的用途和关系。\n\n### Channel\n\n通过上面例子可以看出，当客户端和服务端连接的时候会建立一个 Channel。\n\n这个 Channel 我们可以理解为 Socket 连接，它负责基本的 IO 操作，例如：bind（），connect（），read（），write（） 等等。\n\n简单的说，Channel 就是代表连接，实体之间的连接，程序之间的连接，文件之间的连接，设备之间的连接。同时它也是数据入站和出站的载体。\n\n### EventLoop 和 EventLoopGroup\n\n既然有了 Channel 连接服务，让信息之间可以流动。如果服务发出的消息称作“出站”消息，服务接受的消息称作“入站”消息。那么消息的“出站”/“入站”就会产生事件（Event）。\n\n例如：连接已激活；数据读取；用户事件；异常事件；打开链接；关闭链接等等。\n\n顺着这个思路往下想，有了数据，数据的流动产生事件，那么就有一个机制去监控和协调事件。\n\n这个机制（组件）就是 EventLoop。在 Netty 中每个 Channel 都会被分配到一个 EventLoop。一个 EventLoop 可以服务于多个 Channel。\n\n每个 EventLoop 会占用一个 Thread，同时这个 Thread 会处理 EventLoop 上面发生的所有 IO 操作和事件（Netty 4.0）。\n\n![EventLoop 与 Channel 关系](Netty原理/10.png)\n\n理解了 EventLoop，再来说 EventLoopGroup 就容易了，EventLoopGroup 是用来生成 EventLoop 的，还记得例子代码中第一行就 new 了 EventLoopGroup 对象。\n\n一个 EventLoopGroup 中包含了多个 EventLoop 对象。\n\n![创建 EventLoopGroup](Netty原理/11.webp)\n\nEventLoopGroup 要做的就是创建一个新的 Channel，并且给它分配一个 EventLoop。\n\n![EventLoopGroup，EventLoop 和 Channel 的关系](Netty原理/12.webp)\n\n在异步传输的情况下，一个 EventLoop 是可以处理多个 Channel 中产生的事件的，它主要的工作就是事件的发现以及通知。\n\n相对于以前一个 Channel 就占用一个 Thread 的情况。Netty 的方式就要合理多了。\n\n客户端发送消息到服务端，EventLoop 发现以后会告诉服务端：“你去获取消息”，同时客户端进行其他的工作。\n\n当 EventLoop 检测到服务端返回的消息，也会通知客户端：“消息返回了，你去取吧“。客户端再去获取消息。整个过程 EventLoop 就是监视器+传声筒。\n\n### ChannelHandler，ChannelPipeline 和ChannelHandlerContext\n\n如果说 EventLoop 是事件的通知者，那么 ChannelHandler 就是事件的处理者。\n\n在 ChannelHandler 中可以添加一些业务代码，例如数据转换，逻辑运算等等。\n\n正如上面例子中展示的，Server 和 Client 分别都有一个 ChannelHandler 来处理，读取信息，网络可用，网络异常之类的信息。\n\n并且，针对出站和入站的事件，有不同的 ChannelHandler，分别是：\n\n- **ChannelInBoundHandler（入站事件处理器）**\n- **ChannelOutBoundHandler（出站事件处理器）**\n\n![Netty原理/3.webp](Netty原理/13.webp)\n\n假设每次请求都会触发事件，而由 ChannelHandler 来处理这些事件，这个事件的处理顺序是由 ChannelPipeline 来决定的。\n\n![ChannelHanlder 处理，出站/入站的事件](Netty原理/14.png)\n\nChannelPipeline 为 ChannelHandler 链提供了容器。到 Channel 被创建的时候，会被 Netty 框架自动分配到 ChannelPipeline 上。\n\nChannelPipeline 保证 ChannelHandler 按照一定顺序处理事件，当事件触发以后，会将数据通过 ChannelPipeline 按照一定的顺序通过 ChannelHandler。\n\n说白了，ChannelPipeline 是负责“排队”的。这里的“排队”是处理事件的顺序。\n\n同时，ChannelPipeline 也可以添加或者删除 ChannelHandler，管理整个队列。\n\n![](Netty原理/15.webp)\n\n如上图，ChannelPipeline 使 ChannelHandler 按照先后顺序排列，信息按照箭头所示方向流动并且被 ChannelHandler 处理。\n\n说完了 ChannelPipeline 和 ChannelHandler，前者管理后者的排列顺序。那么它们之间的关联就由 ChannelHandlerContext 来表示了。\n\n每当有 ChannelHandler 添加到 ChannelPipeline 时，同时会创建 ChannelHandlerContext 。\n\nChannelHandlerContext 的主要功能是管理 ChannelHandler 和 ChannelPipeline 的交互。\n\n不知道大家注意到没有，开始的例子中 ChannelHandler 中处理事件函数，传入的参数就是 ChannelHandlerContext。\n\n![](Netty原理/16.jpg)\n\nChannelHandlerContext 参数贯穿 ChannelPipeline，将信息传递给每个 ChannelHandler，是个合格的“通讯员”。\n\n![ChannelHandlerContext 负责传递消息](Netty原理/17.png)\n\n\n\n把上面提到的几个核心组件归纳一下，用下图表示方便记忆他们之间的关系。\n\n![Netty 核心组件关系图](Netty原理/18.png)\n\nNetty 的数据容器\n\n前面介绍了 Netty 的几个核心组件，服务器在数据传输的时候，产生事件，并且对事件进行监控和处理。\n\n接下来看看数据是如何存放以及是如何读写的。Netty 将 ByteBuf 作为数据容器，来存放数据。\n\n## **ByteBuf 工作原理**\n\n从结构上来说，ByteBuf 由一串字节数组构成。数组中每个字节用来存放信息。\n\nByteBuf 提供了两个索引，一个用于读取数据，一个用于写入数据。这两个索引通过在字节数组中移动，来定位需要读或者写信息的位置。\n\n当从 ByteBuf 读取时，它的 readerIndex（读索引）将会根据读取的字节数递增。\n\n同样，当写 ByteBuf 时，它的 writerIndex 也会根据写入的字节数进行递增。\n\n![ByteBuf 读写索引图例](Netty原理/19.webp)\n\n\n\n需要注意的是极限的情况是 readerIndex 刚好读到了 writerIndex 写入的地方。\n\n如果 readerIndex 超过了 writerIndex 的时候，Netty 会抛出 IndexOutOf-BoundsException 异常。\n\n### ByteBuf 使用模式\n\n谈了 ByteBuf 的工作原理以后，再来看看它的使用模式。\n\n根据存放缓冲区的不同分为三类：\n\n- **堆缓冲区，**ByteBuf 将数据存储在 JVM 的堆中，通过数组实现，可以做到快速分配。\n\n  由于在堆上被 JVM 管理，在不被使用时可以快速释放。可以通过 ByteBuf.array() 来获取 byte[] 数据。\n\n- **直接缓冲区，**在 JVM 的堆之外直接分配内存，用来存储数据。其不占用堆空间，使用时需要考虑内存容量。\n\n  它在使用 Socket 传递时性能较好，因为间接从缓冲区发送数据，在发送之前 JVM 会先将数据复制到直接缓冲区再进行发送。\n\n  由于，直接缓冲区的数据分配在堆之外，通过 JVM 进行垃圾回收，并且分配时也需要做复制的操作，因此使用成本较高。\n\n- **复合缓冲区，**顾名思义就是将上述两类缓冲区聚合在一起。Netty 提供了一个 CompsiteByteBuf，可以将堆缓冲区和直接缓冲区的数据放在一起，让使用更加方便。\n\n### ByteBuf 的分配\n\n聊完了结构和使用模式，再来看看 ByteBuf 是如何分配缓冲区的数据的。\n\nNetty 提供了两种 ByteBufAllocator 的实现，他们分别是：\n\n- **PooledByteBufAllocator，**实现了 ByteBuf 的对象的池化，提高性能减少内存碎片。\n- **Unpooled-ByteBufAllocator，**没有实现对象的池化，每次会生成新的对象实例。\n\n对象池化的技术和线程池，比较相似，主要目的是提高内存的使用率。池化的简单实现思路，是在 JVM 堆内存上构建一层内存池，通过 allocate 方法获取内存池中的空间，通过 release 方法将空间归还给内存池。\n\n对象的生成和销毁，会大量地调用 allocate 和 release 方法，因此内存池面临碎片空间回收的问题，在频繁申请和释放空间后，内存池需要保证连续的内存空间，用于对象的分配。\n\n基于这个需求，有两种算法用于优化这一块的内存分配：伙伴系统和 slab 系统。\n\n伙伴系统，用完全二叉树管理内存区域，左右节点互为伙伴，每个节点代表一个内存块。内存分配将大块内存不断二分，直到找到满足所需的最小内存分片。\n\n内存释放会判断释放内存分片的伙伴（左右节点）是否空闲，如果空闲则将左右节点合成更大块内存。\n\nslab 系统，主要解决内存碎片问题，将大块内存按照一定内存大小进行等分，形成相等大小的内存片构成的内存集。\n\n按照内存申请空间的大小，申请尽量小块内存或者其整数倍的内存，释放内存时，也是将内存分片归还给内存集。\n\nNetty 内存池管理以 Allocate 对象的形式出现。一个 Allocate 对象由多个 Arena 组成，每个 Arena 能执行内存块的分配和回收。\n\nArena 内有三类内存块管理单元：\n\n- **TinySubPage**\n- **SmallSubPage**\n- **ChunkList**\n\nTiny 和 Small 符合 Slab 系统的管理策略，ChunkList 符合伙伴系统的管理策略。\n\n当用户申请内存介于 tinySize 和 smallSize 之间时，从 tinySubPage 中获取内存块。\n\n申请内存介于 smallSize 和 pageSize 之间时，从 smallSubPage 中获取内存块；介于 pageSize 和 chunkSize 之间时，从 ChunkList 中获取内存；大于 ChunkSize（不知道分配内存的大小）的内存块不通过池化分配。\n\n## Netty 的 Bootstrap\n\n说完了 Netty 的核心组件以及数据存储。再回到最开始的例子程序，在程序最开始的时候会 new 一个 Bootstrap 对象，后面所有的配置都是基于这个对象展开的。\n\n![生成 Bootstrap 对象](Netty原理/20.jpg)\n\n\n\nBootstrap 的作用就是将 Netty 核心组件配置到程序中，并且让他们运行起来。\n\n从 Bootstrap 的继承结构来看，分为两类分别是 Bootstrap 和 ServerBootstrap，一个对应客户端的引导，另一个对应服务端的引导。\n\n![支持客户端和服务端的程序引导](Netty原理/21.webp)\n\n\n\n客户端引导 Bootstrap，主要有两个方法 bind（） 和 connect（）。Bootstrap 通过 bind（） 方法创建一个 Channel。\n\n在 bind（） 之后，通过调用 connect（） 方法来创建 Channel 连接。\n\n![Bootstrap 通过 bind 和 connect 方法创建连接](Netty原理/22.png)\n\n\n\n服务端引导 ServerBootstrap，与客户端不同的是在 Bind（） 方法之后会创建一个 ServerChannel，它不仅会创建新的 Channel 还会管理已经存在的 Channel。\n\n![](Netty原理/23.png)\n\nServerBootstrap 通过 bind 方法创建/管理连接\n\n通过上面的描述，服务端和客户端的引导存在两个区别：\n\n- ServerBootstrap（服务端引导）绑定一个端口，用来监听客户端的连接请求。而 Bootstrap（客户端引导）只要知道服务端 IP 和 Port 建立连接就可以了。\n\n- Bootstrap（客户端引导）需要一个 EventLoopGroup，但是 ServerBootstrap（服务端引导）则需要两个 EventLoopGroup。\n\n  因为服务器需要两组不同的 Channel。第一组 ServerChannel 自身监听本地端口的套接字。第二组用来监听客户端请求的套接字。\n\n![ServerBootstrap 有两组 EventLoopGroup](Netty原理/24.png)\n\n## 总结\n\n我们从 NIO 入手，谈到了 Selector 的核心机制。然后通过介绍 Netty 客户端和服务端源代码运行流程，让大家对 Netty 编写代码有基本的认识。\n\n在 Netty 的核心组件中，Channel 提供 Socket 的连接通道，EventLoop 会对应 Channel 监听其产生的事件，并且通知执行者。EventloopGroup 的容器，负责生成和管理 EventLoop。\n\nChannelPipeline 作为 ChannelHandler 的容器会绑定到 Channel 上，然后由 ChannelHandler 提供具体事件处理。另外，ChannelHandlerContext 为 ChannelHandler 和 ChannelPipeline 提供信息共享。\n\nByteBuf 作为 Netty 的数据容器，通过字节数组的方式存储数据，并且通过读索引和写索引来引导读写操作。\n\n上述的核心组件都是通过 Bootstrap 来配置并且引导启动的，Bootstrap 启动方式虽然一致，但是针对客户端和服务端有些许的区别。\n","source":"_posts/Netty原理.md","raw":"---\ntitle: Netty原理\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-14 22:50:15\npassword:\nsummary:\ntags:\ncategories: tool\n---\n\n\n\n对于高性能的 RPC 框架，Netty 作为异步通信框架，几乎成为必备品。例如，Dubbo 框架中通信组件，还有 RocketMQ 中生产者和消费者的通信，都使用了 Netty。今天，我们来看看 Netty 的基本架构和原理。\n\nNetty 的特点与 NIO\n\nNetty 是一个异步的、基于事件驱动的网络应用框架，它可以用来开发高性能服务端和客户端。\n\n以前编写网络调用程序的时候，我们都会在客户端创建一个 Socket，通过这个 Socket 连接到服务端。\n\n服务端根据这个 Socket 创建一个 Thread，用来发出请求。客户端在发起调用以后，需要等待服务端处理完成，才能继续后面的操作。这样线程会出现等待的状态。\n\n如果客户端请求数越多，服务端创建的处理线程也会越多，JVM 如此多的线程并不是一件容易的事。\n\n![使用阻赛 I/O 处理多个连接](Netty原理/1.png)\n\n为了解决上述的问题，推出了 NIO 的概念，也就是（Non-blocking I/O）。其中，Selector 机制就是 NIO 的核心。\n\n当每次客户端请求时，会创建一个 Socket Channel，并将其注册到 Selector 上（多路复用器）。\n\n然后，Selector 关注服务端 IO 读写事件，此时客户端并不用等待 IO 事件完成，可以继续做接下来的工作。\n\n一旦，服务端完成了 IO 读写操作，Selector 会接到通知，同时告诉客户端 IO 操作已经完成。\n\n接到通知的客户端，就可以通过 SocketChannel 获取需要的数据了。\n\n![NIO 机制与 Selector](Netty原理/2.png)\n\n上面描述的过程有点异步的意思，不过，Selector 实现的并不是真正意义上的异步操作。\n\n因为 Selector 需要通过线程阻塞的方式监听 IO 事件变更，只是这种方式没有让客户端等待，是 Selector 在等待 IO 返回，并且通知客户端去获取数据。真正“异步 IO”（AIO）这里不展开介绍，有兴趣可以自行查找。\n\n说好了 NIO 再来谈谈 Netty，Netty 作为 NIO 的实现，它适用于服务器/客户端通讯的场景，以及针对于 TCP 协议下的高并发应用。\n\n对于开发者来说，它具有以下特点：\n\n- 对 NIO 进行封装，开发者不需要关注 NIO 的底层原理，只需要调用 Netty 组件就能够完成工作。\n- 对网络调用透明，从 Socket 建立 TCP 连接到网络异常的处理都做了包装。\n- 对数据处理灵活， Netty 支持多种序列化框架，通过“ChannelHandler”机制，可以自定义“编/解码器”。\n- 对性能调优友好，Netty 提供了线程池模式以及 Buffer 的重用机制（对象池化），不需要构建复杂的多线程模型和操作队列。\n\n## 组件作用与之间关系\n\n开篇讲到了，为了满足高并发下网络请求，引入了 NIO 的概念。Netty 是针对 NIO 的实现，在 NIO 封装，网络调用，数据处理以及性能优化等方面都有不俗的表现。\n\n学习架构最容易的方式就是从实例入手，从客户端访问服务端的代码来看看 Netty 是如何运作的。再一次介绍代码中调用的组件以及组件的工作原理。\n\n假设有一个客户端去调用一个服务端，假设服务端叫做 EchoServer，客户端叫做 EchoClient，用 Netty 架构实现代码如下。\n\n**服务端代码**\n\n构建服务器端，假设服务器接受客户端传来的信息，然后在控制台打印。首先，生成 EchoServer，在构造函数中传入需要监听的端口号。\n\n![构造函数中传入需要监听的端口号](Netty原理/3.webp)\n\n接下来就是服务的启动方法：\n\n![启动 NettyServer 的 Start 方法](Netty原理/4.jpg)\n\nServer 的启动方法涉及到了一些组件的调用，例如 EventLoopGroup，Channel。这些会在后面详细讲解。\n\n这里有个大致的印象就好：\n\n- 创建 EventLoopGroup。\n- 创建 ServerBootstrap。\n- 指定所使用的 NIO 传输 Channel。\n- 使用指定的端口设置套接字地址。\n- 添加一个 ServerHandler 到 Channel 的 ChannelPipeline。\n- 异步地绑定服务器；调用 sync() 方法阻塞等待直到绑定完成。\n- 获取 Channel 的 CloseFuture，并且阻塞当前线程直到它完成。\n- 关闭 EventLoopGroup，释放所有的资源。\n\nNettyServer 启动以后会监听某个端口的请求，当接受到了请求就需要处理了。在 Netty 中客户端请求服务端，被称为“入站”操作。\n\n可以通过 ChannelInboundHandlerAdapter 实现，具体内容如下：\n\n![处理来自客户端的请求](Netty原理/5.jpg)\n\n\n\n从上面的代码可以看出，服务端处理的代码包含了三个方法。这三个方法都是根据事件触发的。\n\n他们分别是：\n\n- 当接收到消息时的操作，channelRead。\n- 消息读取完成时的方法，channelReadComplete。\n- 出现异常时的方法，exceptionCaught。\n\n**客户端代码**\n\n客户端和服务端的代码基本相似，在初始化时需要输入服务端的 IP 和 Port。\n\n![Netty原理/3.webp](Netty原理/6.webp)\n\n同样在客户端启动函数中包括以下内容：\n\n![Netty原理/3.webp](Netty原理/7.webp)\n\n客户端启动程序的顺序：\n\n- 创建 Bootstrap。\n- 指定 EventLoopGroup 用来监听事件。\n- 定义 Channel 的传输模式为 NIO（Non-BlockingInputOutput）。\n- 设置服务器的 InetSocketAddress。\n- 在创建 Channel 时，向 ChannelPipeline 中添加一个 EchoClientHandler 实例。\n- 连接到远程节点，阻塞等待直到连接完成。\n- 阻塞，直到 Channel 关闭。\n- 关闭线程池并且释放所有的资源。\n\n客户端在完成以上操作以后，会与服务端建立连接从而传输数据。同样在接受到 Channel 中触发的事件时，客户端会触发对应事件的操作。\n\n![Netty原理/3.webp](Netty原理/8.jpg)\n\n例如 Channel 激活，客户端接受到服务端的消息，或者发生异常的捕获。\n\n从代码结构上看还是比较简单的。服务端和客户端分别初始化创建监听和连接。然后分别定义各自的 Handler 处理对方的请求。\n\n![Netty原理/3.webp](Netty原理/9.png)\n\n*服务端/客户端初始化和事件处理*\n\nNetty 核心组件\n\n通过上面的简单例子，发现有些 Netty 组件在服务初始化以及通讯时被用到，下面就来介绍一下这些组件的用途和关系。\n\n### Channel\n\n通过上面例子可以看出，当客户端和服务端连接的时候会建立一个 Channel。\n\n这个 Channel 我们可以理解为 Socket 连接，它负责基本的 IO 操作，例如：bind（），connect（），read（），write（） 等等。\n\n简单的说，Channel 就是代表连接，实体之间的连接，程序之间的连接，文件之间的连接，设备之间的连接。同时它也是数据入站和出站的载体。\n\n### EventLoop 和 EventLoopGroup\n\n既然有了 Channel 连接服务，让信息之间可以流动。如果服务发出的消息称作“出站”消息，服务接受的消息称作“入站”消息。那么消息的“出站”/“入站”就会产生事件（Event）。\n\n例如：连接已激活；数据读取；用户事件；异常事件；打开链接；关闭链接等等。\n\n顺着这个思路往下想，有了数据，数据的流动产生事件，那么就有一个机制去监控和协调事件。\n\n这个机制（组件）就是 EventLoop。在 Netty 中每个 Channel 都会被分配到一个 EventLoop。一个 EventLoop 可以服务于多个 Channel。\n\n每个 EventLoop 会占用一个 Thread，同时这个 Thread 会处理 EventLoop 上面发生的所有 IO 操作和事件（Netty 4.0）。\n\n![EventLoop 与 Channel 关系](Netty原理/10.png)\n\n理解了 EventLoop，再来说 EventLoopGroup 就容易了，EventLoopGroup 是用来生成 EventLoop 的，还记得例子代码中第一行就 new 了 EventLoopGroup 对象。\n\n一个 EventLoopGroup 中包含了多个 EventLoop 对象。\n\n![创建 EventLoopGroup](Netty原理/11.webp)\n\nEventLoopGroup 要做的就是创建一个新的 Channel，并且给它分配一个 EventLoop。\n\n![EventLoopGroup，EventLoop 和 Channel 的关系](Netty原理/12.webp)\n\n在异步传输的情况下，一个 EventLoop 是可以处理多个 Channel 中产生的事件的，它主要的工作就是事件的发现以及通知。\n\n相对于以前一个 Channel 就占用一个 Thread 的情况。Netty 的方式就要合理多了。\n\n客户端发送消息到服务端，EventLoop 发现以后会告诉服务端：“你去获取消息”，同时客户端进行其他的工作。\n\n当 EventLoop 检测到服务端返回的消息，也会通知客户端：“消息返回了，你去取吧“。客户端再去获取消息。整个过程 EventLoop 就是监视器+传声筒。\n\n### ChannelHandler，ChannelPipeline 和ChannelHandlerContext\n\n如果说 EventLoop 是事件的通知者，那么 ChannelHandler 就是事件的处理者。\n\n在 ChannelHandler 中可以添加一些业务代码，例如数据转换，逻辑运算等等。\n\n正如上面例子中展示的，Server 和 Client 分别都有一个 ChannelHandler 来处理，读取信息，网络可用，网络异常之类的信息。\n\n并且，针对出站和入站的事件，有不同的 ChannelHandler，分别是：\n\n- **ChannelInBoundHandler（入站事件处理器）**\n- **ChannelOutBoundHandler（出站事件处理器）**\n\n![Netty原理/3.webp](Netty原理/13.webp)\n\n假设每次请求都会触发事件，而由 ChannelHandler 来处理这些事件，这个事件的处理顺序是由 ChannelPipeline 来决定的。\n\n![ChannelHanlder 处理，出站/入站的事件](Netty原理/14.png)\n\nChannelPipeline 为 ChannelHandler 链提供了容器。到 Channel 被创建的时候，会被 Netty 框架自动分配到 ChannelPipeline 上。\n\nChannelPipeline 保证 ChannelHandler 按照一定顺序处理事件，当事件触发以后，会将数据通过 ChannelPipeline 按照一定的顺序通过 ChannelHandler。\n\n说白了，ChannelPipeline 是负责“排队”的。这里的“排队”是处理事件的顺序。\n\n同时，ChannelPipeline 也可以添加或者删除 ChannelHandler，管理整个队列。\n\n![](Netty原理/15.webp)\n\n如上图，ChannelPipeline 使 ChannelHandler 按照先后顺序排列，信息按照箭头所示方向流动并且被 ChannelHandler 处理。\n\n说完了 ChannelPipeline 和 ChannelHandler，前者管理后者的排列顺序。那么它们之间的关联就由 ChannelHandlerContext 来表示了。\n\n每当有 ChannelHandler 添加到 ChannelPipeline 时，同时会创建 ChannelHandlerContext 。\n\nChannelHandlerContext 的主要功能是管理 ChannelHandler 和 ChannelPipeline 的交互。\n\n不知道大家注意到没有，开始的例子中 ChannelHandler 中处理事件函数，传入的参数就是 ChannelHandlerContext。\n\n![](Netty原理/16.jpg)\n\nChannelHandlerContext 参数贯穿 ChannelPipeline，将信息传递给每个 ChannelHandler，是个合格的“通讯员”。\n\n![ChannelHandlerContext 负责传递消息](Netty原理/17.png)\n\n\n\n把上面提到的几个核心组件归纳一下，用下图表示方便记忆他们之间的关系。\n\n![Netty 核心组件关系图](Netty原理/18.png)\n\nNetty 的数据容器\n\n前面介绍了 Netty 的几个核心组件，服务器在数据传输的时候，产生事件，并且对事件进行监控和处理。\n\n接下来看看数据是如何存放以及是如何读写的。Netty 将 ByteBuf 作为数据容器，来存放数据。\n\n## **ByteBuf 工作原理**\n\n从结构上来说，ByteBuf 由一串字节数组构成。数组中每个字节用来存放信息。\n\nByteBuf 提供了两个索引，一个用于读取数据，一个用于写入数据。这两个索引通过在字节数组中移动，来定位需要读或者写信息的位置。\n\n当从 ByteBuf 读取时，它的 readerIndex（读索引）将会根据读取的字节数递增。\n\n同样，当写 ByteBuf 时，它的 writerIndex 也会根据写入的字节数进行递增。\n\n![ByteBuf 读写索引图例](Netty原理/19.webp)\n\n\n\n需要注意的是极限的情况是 readerIndex 刚好读到了 writerIndex 写入的地方。\n\n如果 readerIndex 超过了 writerIndex 的时候，Netty 会抛出 IndexOutOf-BoundsException 异常。\n\n### ByteBuf 使用模式\n\n谈了 ByteBuf 的工作原理以后，再来看看它的使用模式。\n\n根据存放缓冲区的不同分为三类：\n\n- **堆缓冲区，**ByteBuf 将数据存储在 JVM 的堆中，通过数组实现，可以做到快速分配。\n\n  由于在堆上被 JVM 管理，在不被使用时可以快速释放。可以通过 ByteBuf.array() 来获取 byte[] 数据。\n\n- **直接缓冲区，**在 JVM 的堆之外直接分配内存，用来存储数据。其不占用堆空间，使用时需要考虑内存容量。\n\n  它在使用 Socket 传递时性能较好，因为间接从缓冲区发送数据，在发送之前 JVM 会先将数据复制到直接缓冲区再进行发送。\n\n  由于，直接缓冲区的数据分配在堆之外，通过 JVM 进行垃圾回收，并且分配时也需要做复制的操作，因此使用成本较高。\n\n- **复合缓冲区，**顾名思义就是将上述两类缓冲区聚合在一起。Netty 提供了一个 CompsiteByteBuf，可以将堆缓冲区和直接缓冲区的数据放在一起，让使用更加方便。\n\n### ByteBuf 的分配\n\n聊完了结构和使用模式，再来看看 ByteBuf 是如何分配缓冲区的数据的。\n\nNetty 提供了两种 ByteBufAllocator 的实现，他们分别是：\n\n- **PooledByteBufAllocator，**实现了 ByteBuf 的对象的池化，提高性能减少内存碎片。\n- **Unpooled-ByteBufAllocator，**没有实现对象的池化，每次会生成新的对象实例。\n\n对象池化的技术和线程池，比较相似，主要目的是提高内存的使用率。池化的简单实现思路，是在 JVM 堆内存上构建一层内存池，通过 allocate 方法获取内存池中的空间，通过 release 方法将空间归还给内存池。\n\n对象的生成和销毁，会大量地调用 allocate 和 release 方法，因此内存池面临碎片空间回收的问题，在频繁申请和释放空间后，内存池需要保证连续的内存空间，用于对象的分配。\n\n基于这个需求，有两种算法用于优化这一块的内存分配：伙伴系统和 slab 系统。\n\n伙伴系统，用完全二叉树管理内存区域，左右节点互为伙伴，每个节点代表一个内存块。内存分配将大块内存不断二分，直到找到满足所需的最小内存分片。\n\n内存释放会判断释放内存分片的伙伴（左右节点）是否空闲，如果空闲则将左右节点合成更大块内存。\n\nslab 系统，主要解决内存碎片问题，将大块内存按照一定内存大小进行等分，形成相等大小的内存片构成的内存集。\n\n按照内存申请空间的大小，申请尽量小块内存或者其整数倍的内存，释放内存时，也是将内存分片归还给内存集。\n\nNetty 内存池管理以 Allocate 对象的形式出现。一个 Allocate 对象由多个 Arena 组成，每个 Arena 能执行内存块的分配和回收。\n\nArena 内有三类内存块管理单元：\n\n- **TinySubPage**\n- **SmallSubPage**\n- **ChunkList**\n\nTiny 和 Small 符合 Slab 系统的管理策略，ChunkList 符合伙伴系统的管理策略。\n\n当用户申请内存介于 tinySize 和 smallSize 之间时，从 tinySubPage 中获取内存块。\n\n申请内存介于 smallSize 和 pageSize 之间时，从 smallSubPage 中获取内存块；介于 pageSize 和 chunkSize 之间时，从 ChunkList 中获取内存；大于 ChunkSize（不知道分配内存的大小）的内存块不通过池化分配。\n\n## Netty 的 Bootstrap\n\n说完了 Netty 的核心组件以及数据存储。再回到最开始的例子程序，在程序最开始的时候会 new 一个 Bootstrap 对象，后面所有的配置都是基于这个对象展开的。\n\n![生成 Bootstrap 对象](Netty原理/20.jpg)\n\n\n\nBootstrap 的作用就是将 Netty 核心组件配置到程序中，并且让他们运行起来。\n\n从 Bootstrap 的继承结构来看，分为两类分别是 Bootstrap 和 ServerBootstrap，一个对应客户端的引导，另一个对应服务端的引导。\n\n![支持客户端和服务端的程序引导](Netty原理/21.webp)\n\n\n\n客户端引导 Bootstrap，主要有两个方法 bind（） 和 connect（）。Bootstrap 通过 bind（） 方法创建一个 Channel。\n\n在 bind（） 之后，通过调用 connect（） 方法来创建 Channel 连接。\n\n![Bootstrap 通过 bind 和 connect 方法创建连接](Netty原理/22.png)\n\n\n\n服务端引导 ServerBootstrap，与客户端不同的是在 Bind（） 方法之后会创建一个 ServerChannel，它不仅会创建新的 Channel 还会管理已经存在的 Channel。\n\n![](Netty原理/23.png)\n\nServerBootstrap 通过 bind 方法创建/管理连接\n\n通过上面的描述，服务端和客户端的引导存在两个区别：\n\n- ServerBootstrap（服务端引导）绑定一个端口，用来监听客户端的连接请求。而 Bootstrap（客户端引导）只要知道服务端 IP 和 Port 建立连接就可以了。\n\n- Bootstrap（客户端引导）需要一个 EventLoopGroup，但是 ServerBootstrap（服务端引导）则需要两个 EventLoopGroup。\n\n  因为服务器需要两组不同的 Channel。第一组 ServerChannel 自身监听本地端口的套接字。第二组用来监听客户端请求的套接字。\n\n![ServerBootstrap 有两组 EventLoopGroup](Netty原理/24.png)\n\n## 总结\n\n我们从 NIO 入手，谈到了 Selector 的核心机制。然后通过介绍 Netty 客户端和服务端源代码运行流程，让大家对 Netty 编写代码有基本的认识。\n\n在 Netty 的核心组件中，Channel 提供 Socket 的连接通道，EventLoop 会对应 Channel 监听其产生的事件，并且通知执行者。EventloopGroup 的容器，负责生成和管理 EventLoop。\n\nChannelPipeline 作为 ChannelHandler 的容器会绑定到 Channel 上，然后由 ChannelHandler 提供具体事件处理。另外，ChannelHandlerContext 为 ChannelHandler 和 ChannelPipeline 提供信息共享。\n\nByteBuf 作为 Netty 的数据容器，通过字节数组的方式存储数据，并且通过读索引和写索引来引导读写操作。\n\n上述的核心组件都是通过 Bootstrap 来配置并且引导启动的，Bootstrap 启动方式虽然一致，但是针对客户端和服务端有些许的区别。\n","slug":"Netty原理","published":1,"updated":"2020-02-28T05:24:34.077Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mlay0011vkvypnbuu2rn","content":"<p>对于高性能的 RPC 框架，Netty 作为异步通信框架，几乎成为必备品。例如，Dubbo 框架中通信组件，还有 RocketMQ 中生产者和消费者的通信，都使用了 Netty。今天，我们来看看 Netty 的基本架构和原理。</p>\n<p>Netty 的特点与 NIO</p>\n<p>Netty 是一个异步的、基于事件驱动的网络应用框架，它可以用来开发高性能服务端和客户端。</p>\n<p>以前编写网络调用程序的时候，我们都会在客户端创建一个 Socket，通过这个 Socket 连接到服务端。</p>\n<p>服务端根据这个 Socket 创建一个 Thread，用来发出请求。客户端在发起调用以后，需要等待服务端处理完成，才能继续后面的操作。这样线程会出现等待的状态。</p>\n<p>如果客户端请求数越多，服务端创建的处理线程也会越多，JVM 如此多的线程并不是一件容易的事。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/1.png\" alt=\"使用阻赛 I/O 处理多个连接\"></p>\n<p>为了解决上述的问题，推出了 NIO 的概念，也就是（Non-blocking I/O）。其中，Selector 机制就是 NIO 的核心。</p>\n<p>当每次客户端请求时，会创建一个 Socket Channel，并将其注册到 Selector 上（多路复用器）。</p>\n<p>然后，Selector 关注服务端 IO 读写事件，此时客户端并不用等待 IO 事件完成，可以继续做接下来的工作。</p>\n<p>一旦，服务端完成了 IO 读写操作，Selector 会接到通知，同时告诉客户端 IO 操作已经完成。</p>\n<p>接到通知的客户端，就可以通过 SocketChannel 获取需要的数据了。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/2.png\" alt=\"NIO 机制与 Selector\"></p>\n<p>上面描述的过程有点异步的意思，不过，Selector 实现的并不是真正意义上的异步操作。</p>\n<p>因为 Selector 需要通过线程阻塞的方式监听 IO 事件变更，只是这种方式没有让客户端等待，是 Selector 在等待 IO 返回，并且通知客户端去获取数据。真正“异步 IO”（AIO）这里不展开介绍，有兴趣可以自行查找。</p>\n<p>说好了 NIO 再来谈谈 Netty，Netty 作为 NIO 的实现，它适用于服务器/客户端通讯的场景，以及针对于 TCP 协议下的高并发应用。</p>\n<p>对于开发者来说，它具有以下特点：</p>\n<ul>\n<li>对 NIO 进行封装，开发者不需要关注 NIO 的底层原理，只需要调用 Netty 组件就能够完成工作。</li>\n<li>对网络调用透明，从 Socket 建立 TCP 连接到网络异常的处理都做了包装。</li>\n<li>对数据处理灵活， Netty 支持多种序列化框架，通过“ChannelHandler”机制，可以自定义“编/解码器”。</li>\n<li>对性能调优友好，Netty 提供了线程池模式以及 Buffer 的重用机制（对象池化），不需要构建复杂的多线程模型和操作队列。</li>\n</ul>\n<h2 id=\"组件作用与之间关系\"><a href=\"#组件作用与之间关系\" class=\"headerlink\" title=\"组件作用与之间关系\"></a>组件作用与之间关系</h2><p>开篇讲到了，为了满足高并发下网络请求，引入了 NIO 的概念。Netty 是针对 NIO 的实现，在 NIO 封装，网络调用，数据处理以及性能优化等方面都有不俗的表现。</p>\n<p>学习架构最容易的方式就是从实例入手，从客户端访问服务端的代码来看看 Netty 是如何运作的。再一次介绍代码中调用的组件以及组件的工作原理。</p>\n<p>假设有一个客户端去调用一个服务端，假设服务端叫做 EchoServer，客户端叫做 EchoClient，用 Netty 架构实现代码如下。</p>\n<p><strong>服务端代码</strong></p>\n<p>构建服务器端，假设服务器接受客户端传来的信息，然后在控制台打印。首先，生成 EchoServer，在构造函数中传入需要监听的端口号。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/3.webp\" alt=\"构造函数中传入需要监听的端口号\"></p>\n<p>接下来就是服务的启动方法：</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/4.jpg\" alt=\"启动 NettyServer 的 Start 方法\"></p>\n<p>Server 的启动方法涉及到了一些组件的调用，例如 EventLoopGroup，Channel。这些会在后面详细讲解。</p>\n<p>这里有个大致的印象就好：</p>\n<ul>\n<li>创建 EventLoopGroup。</li>\n<li>创建 ServerBootstrap。</li>\n<li>指定所使用的 NIO 传输 Channel。</li>\n<li>使用指定的端口设置套接字地址。</li>\n<li>添加一个 ServerHandler 到 Channel 的 ChannelPipeline。</li>\n<li>异步地绑定服务器；调用 sync() 方法阻塞等待直到绑定完成。</li>\n<li>获取 Channel 的 CloseFuture，并且阻塞当前线程直到它完成。</li>\n<li>关闭 EventLoopGroup，释放所有的资源。</li>\n</ul>\n<p>NettyServer 启动以后会监听某个端口的请求，当接受到了请求就需要处理了。在 Netty 中客户端请求服务端，被称为“入站”操作。</p>\n<p>可以通过 ChannelInboundHandlerAdapter 实现，具体内容如下：</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/5.jpg\" alt=\"处理来自客户端的请求\"></p>\n<p>从上面的代码可以看出，服务端处理的代码包含了三个方法。这三个方法都是根据事件触发的。</p>\n<p>他们分别是：</p>\n<ul>\n<li>当接收到消息时的操作，channelRead。</li>\n<li>消息读取完成时的方法，channelReadComplete。</li>\n<li>出现异常时的方法，exceptionCaught。</li>\n</ul>\n<p><strong>客户端代码</strong></p>\n<p>客户端和服务端的代码基本相似，在初始化时需要输入服务端的 IP 和 Port。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/6.webp\" alt=\"Netty原理/3.webp\"></p>\n<p>同样在客户端启动函数中包括以下内容：</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/7.webp\" alt=\"Netty原理/3.webp\"></p>\n<p>客户端启动程序的顺序：</p>\n<ul>\n<li>创建 Bootstrap。</li>\n<li>指定 EventLoopGroup 用来监听事件。</li>\n<li>定义 Channel 的传输模式为 NIO（Non-BlockingInputOutput）。</li>\n<li>设置服务器的 InetSocketAddress。</li>\n<li>在创建 Channel 时，向 ChannelPipeline 中添加一个 EchoClientHandler 实例。</li>\n<li>连接到远程节点，阻塞等待直到连接完成。</li>\n<li>阻塞，直到 Channel 关闭。</li>\n<li>关闭线程池并且释放所有的资源。</li>\n</ul>\n<p>客户端在完成以上操作以后，会与服务端建立连接从而传输数据。同样在接受到 Channel 中触发的事件时，客户端会触发对应事件的操作。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/8.jpg\" alt=\"Netty原理/3.webp\"></p>\n<p>例如 Channel 激活，客户端接受到服务端的消息，或者发生异常的捕获。</p>\n<p>从代码结构上看还是比较简单的。服务端和客户端分别初始化创建监听和连接。然后分别定义各自的 Handler 处理对方的请求。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/9.png\" alt=\"Netty原理/3.webp\"></p>\n<p><em>服务端/客户端初始化和事件处理</em></p>\n<p>Netty 核心组件</p>\n<p>通过上面的简单例子，发现有些 Netty 组件在服务初始化以及通讯时被用到，下面就来介绍一下这些组件的用途和关系。</p>\n<h3 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h3><p>通过上面例子可以看出，当客户端和服务端连接的时候会建立一个 Channel。</p>\n<p>这个 Channel 我们可以理解为 Socket 连接，它负责基本的 IO 操作，例如：bind（），connect（），read（），write（） 等等。</p>\n<p>简单的说，Channel 就是代表连接，实体之间的连接，程序之间的连接，文件之间的连接，设备之间的连接。同时它也是数据入站和出站的载体。</p>\n<h3 id=\"EventLoop-和-EventLoopGroup\"><a href=\"#EventLoop-和-EventLoopGroup\" class=\"headerlink\" title=\"EventLoop 和 EventLoopGroup\"></a>EventLoop 和 EventLoopGroup</h3><p>既然有了 Channel 连接服务，让信息之间可以流动。如果服务发出的消息称作“出站”消息，服务接受的消息称作“入站”消息。那么消息的“出站”/“入站”就会产生事件（Event）。</p>\n<p>例如：连接已激活；数据读取；用户事件；异常事件；打开链接；关闭链接等等。</p>\n<p>顺着这个思路往下想，有了数据，数据的流动产生事件，那么就有一个机制去监控和协调事件。</p>\n<p>这个机制（组件）就是 EventLoop。在 Netty 中每个 Channel 都会被分配到一个 EventLoop。一个 EventLoop 可以服务于多个 Channel。</p>\n<p>每个 EventLoop 会占用一个 Thread，同时这个 Thread 会处理 EventLoop 上面发生的所有 IO 操作和事件（Netty 4.0）。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/10.png\" alt=\"EventLoop 与 Channel 关系\"></p>\n<p>理解了 EventLoop，再来说 EventLoopGroup 就容易了，EventLoopGroup 是用来生成 EventLoop 的，还记得例子代码中第一行就 new 了 EventLoopGroup 对象。</p>\n<p>一个 EventLoopGroup 中包含了多个 EventLoop 对象。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/11.webp\" alt=\"创建 EventLoopGroup\"></p>\n<p>EventLoopGroup 要做的就是创建一个新的 Channel，并且给它分配一个 EventLoop。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/12.webp\" alt=\"EventLoopGroup，EventLoop 和 Channel 的关系\"></p>\n<p>在异步传输的情况下，一个 EventLoop 是可以处理多个 Channel 中产生的事件的，它主要的工作就是事件的发现以及通知。</p>\n<p>相对于以前一个 Channel 就占用一个 Thread 的情况。Netty 的方式就要合理多了。</p>\n<p>客户端发送消息到服务端，EventLoop 发现以后会告诉服务端：“你去获取消息”，同时客户端进行其他的工作。</p>\n<p>当 EventLoop 检测到服务端返回的消息，也会通知客户端：“消息返回了，你去取吧“。客户端再去获取消息。整个过程 EventLoop 就是监视器+传声筒。</p>\n<h3 id=\"ChannelHandler，ChannelPipeline-和ChannelHandlerContext\"><a href=\"#ChannelHandler，ChannelPipeline-和ChannelHandlerContext\" class=\"headerlink\" title=\"ChannelHandler，ChannelPipeline 和ChannelHandlerContext\"></a>ChannelHandler，ChannelPipeline 和ChannelHandlerContext</h3><p>如果说 EventLoop 是事件的通知者，那么 ChannelHandler 就是事件的处理者。</p>\n<p>在 ChannelHandler 中可以添加一些业务代码，例如数据转换，逻辑运算等等。</p>\n<p>正如上面例子中展示的，Server 和 Client 分别都有一个 ChannelHandler 来处理，读取信息，网络可用，网络异常之类的信息。</p>\n<p>并且，针对出站和入站的事件，有不同的 ChannelHandler，分别是：</p>\n<ul>\n<li><strong>ChannelInBoundHandler（入站事件处理器）</strong></li>\n<li><strong>ChannelOutBoundHandler（出站事件处理器）</strong></li>\n</ul>\n<p><img src=\"/2020/01/14/netty-yuan-li/13.webp\" alt=\"Netty原理/3.webp\"></p>\n<p>假设每次请求都会触发事件，而由 ChannelHandler 来处理这些事件，这个事件的处理顺序是由 ChannelPipeline 来决定的。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/14.png\" alt=\"ChannelHanlder 处理，出站/入站的事件\"></p>\n<p>ChannelPipeline 为 ChannelHandler 链提供了容器。到 Channel 被创建的时候，会被 Netty 框架自动分配到 ChannelPipeline 上。</p>\n<p>ChannelPipeline 保证 ChannelHandler 按照一定顺序处理事件，当事件触发以后，会将数据通过 ChannelPipeline 按照一定的顺序通过 ChannelHandler。</p>\n<p>说白了，ChannelPipeline 是负责“排队”的。这里的“排队”是处理事件的顺序。</p>\n<p>同时，ChannelPipeline 也可以添加或者删除 ChannelHandler，管理整个队列。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/15.webp\" alt></p>\n<p>如上图，ChannelPipeline 使 ChannelHandler 按照先后顺序排列，信息按照箭头所示方向流动并且被 ChannelHandler 处理。</p>\n<p>说完了 ChannelPipeline 和 ChannelHandler，前者管理后者的排列顺序。那么它们之间的关联就由 ChannelHandlerContext 来表示了。</p>\n<p>每当有 ChannelHandler 添加到 ChannelPipeline 时，同时会创建 ChannelHandlerContext 。</p>\n<p>ChannelHandlerContext 的主要功能是管理 ChannelHandler 和 ChannelPipeline 的交互。</p>\n<p>不知道大家注意到没有，开始的例子中 ChannelHandler 中处理事件函数，传入的参数就是 ChannelHandlerContext。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/16.jpg\" alt></p>\n<p>ChannelHandlerContext 参数贯穿 ChannelPipeline，将信息传递给每个 ChannelHandler，是个合格的“通讯员”。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/17.png\" alt=\"ChannelHandlerContext 负责传递消息\"></p>\n<p>把上面提到的几个核心组件归纳一下，用下图表示方便记忆他们之间的关系。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/18.png\" alt=\"Netty 核心组件关系图\"></p>\n<p>Netty 的数据容器</p>\n<p>前面介绍了 Netty 的几个核心组件，服务器在数据传输的时候，产生事件，并且对事件进行监控和处理。</p>\n<p>接下来看看数据是如何存放以及是如何读写的。Netty 将 ByteBuf 作为数据容器，来存放数据。</p>\n<h2 id=\"ByteBuf-工作原理\"><a href=\"#ByteBuf-工作原理\" class=\"headerlink\" title=\"ByteBuf 工作原理\"></a><strong>ByteBuf 工作原理</strong></h2><p>从结构上来说，ByteBuf 由一串字节数组构成。数组中每个字节用来存放信息。</p>\n<p>ByteBuf 提供了两个索引，一个用于读取数据，一个用于写入数据。这两个索引通过在字节数组中移动，来定位需要读或者写信息的位置。</p>\n<p>当从 ByteBuf 读取时，它的 readerIndex（读索引）将会根据读取的字节数递增。</p>\n<p>同样，当写 ByteBuf 时，它的 writerIndex 也会根据写入的字节数进行递增。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/19.webp\" alt=\"ByteBuf 读写索引图例\"></p>\n<p>需要注意的是极限的情况是 readerIndex 刚好读到了 writerIndex 写入的地方。</p>\n<p>如果 readerIndex 超过了 writerIndex 的时候，Netty 会抛出 IndexOutOf-BoundsException 异常。</p>\n<h3 id=\"ByteBuf-使用模式\"><a href=\"#ByteBuf-使用模式\" class=\"headerlink\" title=\"ByteBuf 使用模式\"></a>ByteBuf 使用模式</h3><p>谈了 ByteBuf 的工作原理以后，再来看看它的使用模式。</p>\n<p>根据存放缓冲区的不同分为三类：</p>\n<ul>\n<li><p><strong>堆缓冲区，</strong>ByteBuf 将数据存储在 JVM 的堆中，通过数组实现，可以做到快速分配。</p>\n<p>由于在堆上被 JVM 管理，在不被使用时可以快速释放。可以通过 ByteBuf.array() 来获取 byte[] 数据。</p>\n</li>\n<li><p><strong>直接缓冲区，</strong>在 JVM 的堆之外直接分配内存，用来存储数据。其不占用堆空间，使用时需要考虑内存容量。</p>\n<p>它在使用 Socket 传递时性能较好，因为间接从缓冲区发送数据，在发送之前 JVM 会先将数据复制到直接缓冲区再进行发送。</p>\n<p>由于，直接缓冲区的数据分配在堆之外，通过 JVM 进行垃圾回收，并且分配时也需要做复制的操作，因此使用成本较高。</p>\n</li>\n<li><p><strong>复合缓冲区，</strong>顾名思义就是将上述两类缓冲区聚合在一起。Netty 提供了一个 CompsiteByteBuf，可以将堆缓冲区和直接缓冲区的数据放在一起，让使用更加方便。</p>\n</li>\n</ul>\n<h3 id=\"ByteBuf-的分配\"><a href=\"#ByteBuf-的分配\" class=\"headerlink\" title=\"ByteBuf 的分配\"></a>ByteBuf 的分配</h3><p>聊完了结构和使用模式，再来看看 ByteBuf 是如何分配缓冲区的数据的。</p>\n<p>Netty 提供了两种 ByteBufAllocator 的实现，他们分别是：</p>\n<ul>\n<li><strong>PooledByteBufAllocator，</strong>实现了 ByteBuf 的对象的池化，提高性能减少内存碎片。</li>\n<li><strong>Unpooled-ByteBufAllocator，</strong>没有实现对象的池化，每次会生成新的对象实例。</li>\n</ul>\n<p>对象池化的技术和线程池，比较相似，主要目的是提高内存的使用率。池化的简单实现思路，是在 JVM 堆内存上构建一层内存池，通过 allocate 方法获取内存池中的空间，通过 release 方法将空间归还给内存池。</p>\n<p>对象的生成和销毁，会大量地调用 allocate 和 release 方法，因此内存池面临碎片空间回收的问题，在频繁申请和释放空间后，内存池需要保证连续的内存空间，用于对象的分配。</p>\n<p>基于这个需求，有两种算法用于优化这一块的内存分配：伙伴系统和 slab 系统。</p>\n<p>伙伴系统，用完全二叉树管理内存区域，左右节点互为伙伴，每个节点代表一个内存块。内存分配将大块内存不断二分，直到找到满足所需的最小内存分片。</p>\n<p>内存释放会判断释放内存分片的伙伴（左右节点）是否空闲，如果空闲则将左右节点合成更大块内存。</p>\n<p>slab 系统，主要解决内存碎片问题，将大块内存按照一定内存大小进行等分，形成相等大小的内存片构成的内存集。</p>\n<p>按照内存申请空间的大小，申请尽量小块内存或者其整数倍的内存，释放内存时，也是将内存分片归还给内存集。</p>\n<p>Netty 内存池管理以 Allocate 对象的形式出现。一个 Allocate 对象由多个 Arena 组成，每个 Arena 能执行内存块的分配和回收。</p>\n<p>Arena 内有三类内存块管理单元：</p>\n<ul>\n<li><strong>TinySubPage</strong></li>\n<li><strong>SmallSubPage</strong></li>\n<li><strong>ChunkList</strong></li>\n</ul>\n<p>Tiny 和 Small 符合 Slab 系统的管理策略，ChunkList 符合伙伴系统的管理策略。</p>\n<p>当用户申请内存介于 tinySize 和 smallSize 之间时，从 tinySubPage 中获取内存块。</p>\n<p>申请内存介于 smallSize 和 pageSize 之间时，从 smallSubPage 中获取内存块；介于 pageSize 和 chunkSize 之间时，从 ChunkList 中获取内存；大于 ChunkSize（不知道分配内存的大小）的内存块不通过池化分配。</p>\n<h2 id=\"Netty-的-Bootstrap\"><a href=\"#Netty-的-Bootstrap\" class=\"headerlink\" title=\"Netty 的 Bootstrap\"></a>Netty 的 Bootstrap</h2><p>说完了 Netty 的核心组件以及数据存储。再回到最开始的例子程序，在程序最开始的时候会 new 一个 Bootstrap 对象，后面所有的配置都是基于这个对象展开的。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/20.jpg\" alt=\"生成 Bootstrap 对象\"></p>\n<p>Bootstrap 的作用就是将 Netty 核心组件配置到程序中，并且让他们运行起来。</p>\n<p>从 Bootstrap 的继承结构来看，分为两类分别是 Bootstrap 和 ServerBootstrap，一个对应客户端的引导，另一个对应服务端的引导。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/21.webp\" alt=\"支持客户端和服务端的程序引导\"></p>\n<p>客户端引导 Bootstrap，主要有两个方法 bind（） 和 connect（）。Bootstrap 通过 bind（） 方法创建一个 Channel。</p>\n<p>在 bind（） 之后，通过调用 connect（） 方法来创建 Channel 连接。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/22.png\" alt=\"Bootstrap 通过 bind 和 connect 方法创建连接\"></p>\n<p>服务端引导 ServerBootstrap，与客户端不同的是在 Bind（） 方法之后会创建一个 ServerChannel，它不仅会创建新的 Channel 还会管理已经存在的 Channel。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/23.png\" alt></p>\n<p>ServerBootstrap 通过 bind 方法创建/管理连接</p>\n<p>通过上面的描述，服务端和客户端的引导存在两个区别：</p>\n<ul>\n<li><p>ServerBootstrap（服务端引导）绑定一个端口，用来监听客户端的连接请求。而 Bootstrap（客户端引导）只要知道服务端 IP 和 Port 建立连接就可以了。</p>\n</li>\n<li><p>Bootstrap（客户端引导）需要一个 EventLoopGroup，但是 ServerBootstrap（服务端引导）则需要两个 EventLoopGroup。</p>\n<p>因为服务器需要两组不同的 Channel。第一组 ServerChannel 自身监听本地端口的套接字。第二组用来监听客户端请求的套接字。</p>\n</li>\n</ul>\n<p><img src=\"/2020/01/14/netty-yuan-li/24.png\" alt=\"ServerBootstrap 有两组 EventLoopGroup\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我们从 NIO 入手，谈到了 Selector 的核心机制。然后通过介绍 Netty 客户端和服务端源代码运行流程，让大家对 Netty 编写代码有基本的认识。</p>\n<p>在 Netty 的核心组件中，Channel 提供 Socket 的连接通道，EventLoop 会对应 Channel 监听其产生的事件，并且通知执行者。EventloopGroup 的容器，负责生成和管理 EventLoop。</p>\n<p>ChannelPipeline 作为 ChannelHandler 的容器会绑定到 Channel 上，然后由 ChannelHandler 提供具体事件处理。另外，ChannelHandlerContext 为 ChannelHandler 和 ChannelPipeline 提供信息共享。</p>\n<p>ByteBuf 作为 Netty 的数据容器，通过字节数组的方式存储数据，并且通过读索引和写索引来引导读写操作。</p>\n<p>上述的核心组件都是通过 Bootstrap 来配置并且引导启动的，Bootstrap 启动方式虽然一致，但是针对客户端和服务端有些许的区别。</p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<p>对于高性能的 RPC 框架，Netty 作为异步通信框架，几乎成为必备品。例如，Dubbo 框架中通信组件，还有 RocketMQ 中生产者和消费者的通信，都使用了 Netty。今天，我们来看看 Netty 的基本架构和原理。</p>\n<p>Netty 的特点与 NIO</p>\n<p>Netty 是一个异步的、基于事件驱动的网络应用框架，它可以用来开发高性能服务端和客户端。</p>\n<p>以前编写网络调用程序的时候，我们都会在客户端创建一个 Socket，通过这个 Socket 连接到服务端。</p>\n<p>服务端根据这个 Socket 创建一个 Thread，用来发出请求。客户端在发起调用以后，需要等待服务端处理完成，才能继续后面的操作。这样线程会出现等待的状态。</p>\n<p>如果客户端请求数越多，服务端创建的处理线程也会越多，JVM 如此多的线程并不是一件容易的事。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/1.png\" alt=\"使用阻赛 I/O 处理多个连接\"></p>\n<p>为了解决上述的问题，推出了 NIO 的概念，也就是（Non-blocking I/O）。其中，Selector 机制就是 NIO 的核心。</p>\n<p>当每次客户端请求时，会创建一个 Socket Channel，并将其注册到 Selector 上（多路复用器）。</p>\n<p>然后，Selector 关注服务端 IO 读写事件，此时客户端并不用等待 IO 事件完成，可以继续做接下来的工作。</p>\n<p>一旦，服务端完成了 IO 读写操作，Selector 会接到通知，同时告诉客户端 IO 操作已经完成。</p>\n<p>接到通知的客户端，就可以通过 SocketChannel 获取需要的数据了。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/2.png\" alt=\"NIO 机制与 Selector\"></p>\n<p>上面描述的过程有点异步的意思，不过，Selector 实现的并不是真正意义上的异步操作。</p>\n<p>因为 Selector 需要通过线程阻塞的方式监听 IO 事件变更，只是这种方式没有让客户端等待，是 Selector 在等待 IO 返回，并且通知客户端去获取数据。真正“异步 IO”（AIO）这里不展开介绍，有兴趣可以自行查找。</p>\n<p>说好了 NIO 再来谈谈 Netty，Netty 作为 NIO 的实现，它适用于服务器/客户端通讯的场景，以及针对于 TCP 协议下的高并发应用。</p>\n<p>对于开发者来说，它具有以下特点：</p>\n<ul>\n<li>对 NIO 进行封装，开发者不需要关注 NIO 的底层原理，只需要调用 Netty 组件就能够完成工作。</li>\n<li>对网络调用透明，从 Socket 建立 TCP 连接到网络异常的处理都做了包装。</li>\n<li>对数据处理灵活， Netty 支持多种序列化框架，通过“ChannelHandler”机制，可以自定义“编/解码器”。</li>\n<li>对性能调优友好，Netty 提供了线程池模式以及 Buffer 的重用机制（对象池化），不需要构建复杂的多线程模型和操作队列。</li>\n</ul>\n<h2 id=\"组件作用与之间关系\"><a href=\"#组件作用与之间关系\" class=\"headerlink\" title=\"组件作用与之间关系\"></a>组件作用与之间关系</h2><p>开篇讲到了，为了满足高并发下网络请求，引入了 NIO 的概念。Netty 是针对 NIO 的实现，在 NIO 封装，网络调用，数据处理以及性能优化等方面都有不俗的表现。</p>\n<p>学习架构最容易的方式就是从实例入手，从客户端访问服务端的代码来看看 Netty 是如何运作的。再一次介绍代码中调用的组件以及组件的工作原理。</p>\n<p>假设有一个客户端去调用一个服务端，假设服务端叫做 EchoServer，客户端叫做 EchoClient，用 Netty 架构实现代码如下。</p>\n<p><strong>服务端代码</strong></p>\n<p>构建服务器端，假设服务器接受客户端传来的信息，然后在控制台打印。首先，生成 EchoServer，在构造函数中传入需要监听的端口号。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/3.webp\" alt=\"构造函数中传入需要监听的端口号\"></p>\n<p>接下来就是服务的启动方法：</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/4.jpg\" alt=\"启动 NettyServer 的 Start 方法\"></p>\n<p>Server 的启动方法涉及到了一些组件的调用，例如 EventLoopGroup，Channel。这些会在后面详细讲解。</p>\n<p>这里有个大致的印象就好：</p>\n<ul>\n<li>创建 EventLoopGroup。</li>\n<li>创建 ServerBootstrap。</li>\n<li>指定所使用的 NIO 传输 Channel。</li>\n<li>使用指定的端口设置套接字地址。</li>\n<li>添加一个 ServerHandler 到 Channel 的 ChannelPipeline。</li>\n<li>异步地绑定服务器；调用 sync() 方法阻塞等待直到绑定完成。</li>\n<li>获取 Channel 的 CloseFuture，并且阻塞当前线程直到它完成。</li>\n<li>关闭 EventLoopGroup，释放所有的资源。</li>\n</ul>\n<p>NettyServer 启动以后会监听某个端口的请求，当接受到了请求就需要处理了。在 Netty 中客户端请求服务端，被称为“入站”操作。</p>\n<p>可以通过 ChannelInboundHandlerAdapter 实现，具体内容如下：</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/5.jpg\" alt=\"处理来自客户端的请求\"></p>\n<p>从上面的代码可以看出，服务端处理的代码包含了三个方法。这三个方法都是根据事件触发的。</p>\n<p>他们分别是：</p>\n<ul>\n<li>当接收到消息时的操作，channelRead。</li>\n<li>消息读取完成时的方法，channelReadComplete。</li>\n<li>出现异常时的方法，exceptionCaught。</li>\n</ul>\n<p><strong>客户端代码</strong></p>\n<p>客户端和服务端的代码基本相似，在初始化时需要输入服务端的 IP 和 Port。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/6.webp\" alt=\"Netty原理/3.webp\"></p>\n<p>同样在客户端启动函数中包括以下内容：</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/7.webp\" alt=\"Netty原理/3.webp\"></p>\n<p>客户端启动程序的顺序：</p>\n<ul>\n<li>创建 Bootstrap。</li>\n<li>指定 EventLoopGroup 用来监听事件。</li>\n<li>定义 Channel 的传输模式为 NIO（Non-BlockingInputOutput）。</li>\n<li>设置服务器的 InetSocketAddress。</li>\n<li>在创建 Channel 时，向 ChannelPipeline 中添加一个 EchoClientHandler 实例。</li>\n<li>连接到远程节点，阻塞等待直到连接完成。</li>\n<li>阻塞，直到 Channel 关闭。</li>\n<li>关闭线程池并且释放所有的资源。</li>\n</ul>\n<p>客户端在完成以上操作以后，会与服务端建立连接从而传输数据。同样在接受到 Channel 中触发的事件时，客户端会触发对应事件的操作。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/8.jpg\" alt=\"Netty原理/3.webp\"></p>\n<p>例如 Channel 激活，客户端接受到服务端的消息，或者发生异常的捕获。</p>\n<p>从代码结构上看还是比较简单的。服务端和客户端分别初始化创建监听和连接。然后分别定义各自的 Handler 处理对方的请求。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/9.png\" alt=\"Netty原理/3.webp\"></p>\n<p><em>服务端/客户端初始化和事件处理</em></p>\n<p>Netty 核心组件</p>\n<p>通过上面的简单例子，发现有些 Netty 组件在服务初始化以及通讯时被用到，下面就来介绍一下这些组件的用途和关系。</p>\n<h3 id=\"Channel\"><a href=\"#Channel\" class=\"headerlink\" title=\"Channel\"></a>Channel</h3><p>通过上面例子可以看出，当客户端和服务端连接的时候会建立一个 Channel。</p>\n<p>这个 Channel 我们可以理解为 Socket 连接，它负责基本的 IO 操作，例如：bind（），connect（），read（），write（） 等等。</p>\n<p>简单的说，Channel 就是代表连接，实体之间的连接，程序之间的连接，文件之间的连接，设备之间的连接。同时它也是数据入站和出站的载体。</p>\n<h3 id=\"EventLoop-和-EventLoopGroup\"><a href=\"#EventLoop-和-EventLoopGroup\" class=\"headerlink\" title=\"EventLoop 和 EventLoopGroup\"></a>EventLoop 和 EventLoopGroup</h3><p>既然有了 Channel 连接服务，让信息之间可以流动。如果服务发出的消息称作“出站”消息，服务接受的消息称作“入站”消息。那么消息的“出站”/“入站”就会产生事件（Event）。</p>\n<p>例如：连接已激活；数据读取；用户事件；异常事件；打开链接；关闭链接等等。</p>\n<p>顺着这个思路往下想，有了数据，数据的流动产生事件，那么就有一个机制去监控和协调事件。</p>\n<p>这个机制（组件）就是 EventLoop。在 Netty 中每个 Channel 都会被分配到一个 EventLoop。一个 EventLoop 可以服务于多个 Channel。</p>\n<p>每个 EventLoop 会占用一个 Thread，同时这个 Thread 会处理 EventLoop 上面发生的所有 IO 操作和事件（Netty 4.0）。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/10.png\" alt=\"EventLoop 与 Channel 关系\"></p>\n<p>理解了 EventLoop，再来说 EventLoopGroup 就容易了，EventLoopGroup 是用来生成 EventLoop 的，还记得例子代码中第一行就 new 了 EventLoopGroup 对象。</p>\n<p>一个 EventLoopGroup 中包含了多个 EventLoop 对象。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/11.webp\" alt=\"创建 EventLoopGroup\"></p>\n<p>EventLoopGroup 要做的就是创建一个新的 Channel，并且给它分配一个 EventLoop。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/12.webp\" alt=\"EventLoopGroup，EventLoop 和 Channel 的关系\"></p>\n<p>在异步传输的情况下，一个 EventLoop 是可以处理多个 Channel 中产生的事件的，它主要的工作就是事件的发现以及通知。</p>\n<p>相对于以前一个 Channel 就占用一个 Thread 的情况。Netty 的方式就要合理多了。</p>\n<p>客户端发送消息到服务端，EventLoop 发现以后会告诉服务端：“你去获取消息”，同时客户端进行其他的工作。</p>\n<p>当 EventLoop 检测到服务端返回的消息，也会通知客户端：“消息返回了，你去取吧“。客户端再去获取消息。整个过程 EventLoop 就是监视器+传声筒。</p>\n<h3 id=\"ChannelHandler，ChannelPipeline-和ChannelHandlerContext\"><a href=\"#ChannelHandler，ChannelPipeline-和ChannelHandlerContext\" class=\"headerlink\" title=\"ChannelHandler，ChannelPipeline 和ChannelHandlerContext\"></a>ChannelHandler，ChannelPipeline 和ChannelHandlerContext</h3><p>如果说 EventLoop 是事件的通知者，那么 ChannelHandler 就是事件的处理者。</p>\n<p>在 ChannelHandler 中可以添加一些业务代码，例如数据转换，逻辑运算等等。</p>\n<p>正如上面例子中展示的，Server 和 Client 分别都有一个 ChannelHandler 来处理，读取信息，网络可用，网络异常之类的信息。</p>\n<p>并且，针对出站和入站的事件，有不同的 ChannelHandler，分别是：</p>\n<ul>\n<li><strong>ChannelInBoundHandler（入站事件处理器）</strong></li>\n<li><strong>ChannelOutBoundHandler（出站事件处理器）</strong></li>\n</ul>\n<p><img src=\"/2020/01/14/netty-yuan-li/13.webp\" alt=\"Netty原理/3.webp\"></p>\n<p>假设每次请求都会触发事件，而由 ChannelHandler 来处理这些事件，这个事件的处理顺序是由 ChannelPipeline 来决定的。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/14.png\" alt=\"ChannelHanlder 处理，出站/入站的事件\"></p>\n<p>ChannelPipeline 为 ChannelHandler 链提供了容器。到 Channel 被创建的时候，会被 Netty 框架自动分配到 ChannelPipeline 上。</p>\n<p>ChannelPipeline 保证 ChannelHandler 按照一定顺序处理事件，当事件触发以后，会将数据通过 ChannelPipeline 按照一定的顺序通过 ChannelHandler。</p>\n<p>说白了，ChannelPipeline 是负责“排队”的。这里的“排队”是处理事件的顺序。</p>\n<p>同时，ChannelPipeline 也可以添加或者删除 ChannelHandler，管理整个队列。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/15.webp\" alt></p>\n<p>如上图，ChannelPipeline 使 ChannelHandler 按照先后顺序排列，信息按照箭头所示方向流动并且被 ChannelHandler 处理。</p>\n<p>说完了 ChannelPipeline 和 ChannelHandler，前者管理后者的排列顺序。那么它们之间的关联就由 ChannelHandlerContext 来表示了。</p>\n<p>每当有 ChannelHandler 添加到 ChannelPipeline 时，同时会创建 ChannelHandlerContext 。</p>\n<p>ChannelHandlerContext 的主要功能是管理 ChannelHandler 和 ChannelPipeline 的交互。</p>\n<p>不知道大家注意到没有，开始的例子中 ChannelHandler 中处理事件函数，传入的参数就是 ChannelHandlerContext。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/16.jpg\" alt></p>\n<p>ChannelHandlerContext 参数贯穿 ChannelPipeline，将信息传递给每个 ChannelHandler，是个合格的“通讯员”。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/17.png\" alt=\"ChannelHandlerContext 负责传递消息\"></p>\n<p>把上面提到的几个核心组件归纳一下，用下图表示方便记忆他们之间的关系。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/18.png\" alt=\"Netty 核心组件关系图\"></p>\n<p>Netty 的数据容器</p>\n<p>前面介绍了 Netty 的几个核心组件，服务器在数据传输的时候，产生事件，并且对事件进行监控和处理。</p>\n<p>接下来看看数据是如何存放以及是如何读写的。Netty 将 ByteBuf 作为数据容器，来存放数据。</p>\n<h2 id=\"ByteBuf-工作原理\"><a href=\"#ByteBuf-工作原理\" class=\"headerlink\" title=\"ByteBuf 工作原理\"></a><strong>ByteBuf 工作原理</strong></h2><p>从结构上来说，ByteBuf 由一串字节数组构成。数组中每个字节用来存放信息。</p>\n<p>ByteBuf 提供了两个索引，一个用于读取数据，一个用于写入数据。这两个索引通过在字节数组中移动，来定位需要读或者写信息的位置。</p>\n<p>当从 ByteBuf 读取时，它的 readerIndex（读索引）将会根据读取的字节数递增。</p>\n<p>同样，当写 ByteBuf 时，它的 writerIndex 也会根据写入的字节数进行递增。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/19.webp\" alt=\"ByteBuf 读写索引图例\"></p>\n<p>需要注意的是极限的情况是 readerIndex 刚好读到了 writerIndex 写入的地方。</p>\n<p>如果 readerIndex 超过了 writerIndex 的时候，Netty 会抛出 IndexOutOf-BoundsException 异常。</p>\n<h3 id=\"ByteBuf-使用模式\"><a href=\"#ByteBuf-使用模式\" class=\"headerlink\" title=\"ByteBuf 使用模式\"></a>ByteBuf 使用模式</h3><p>谈了 ByteBuf 的工作原理以后，再来看看它的使用模式。</p>\n<p>根据存放缓冲区的不同分为三类：</p>\n<ul>\n<li><p><strong>堆缓冲区，</strong>ByteBuf 将数据存储在 JVM 的堆中，通过数组实现，可以做到快速分配。</p>\n<p>由于在堆上被 JVM 管理，在不被使用时可以快速释放。可以通过 ByteBuf.array() 来获取 byte[] 数据。</p>\n</li>\n<li><p><strong>直接缓冲区，</strong>在 JVM 的堆之外直接分配内存，用来存储数据。其不占用堆空间，使用时需要考虑内存容量。</p>\n<p>它在使用 Socket 传递时性能较好，因为间接从缓冲区发送数据，在发送之前 JVM 会先将数据复制到直接缓冲区再进行发送。</p>\n<p>由于，直接缓冲区的数据分配在堆之外，通过 JVM 进行垃圾回收，并且分配时也需要做复制的操作，因此使用成本较高。</p>\n</li>\n<li><p><strong>复合缓冲区，</strong>顾名思义就是将上述两类缓冲区聚合在一起。Netty 提供了一个 CompsiteByteBuf，可以将堆缓冲区和直接缓冲区的数据放在一起，让使用更加方便。</p>\n</li>\n</ul>\n<h3 id=\"ByteBuf-的分配\"><a href=\"#ByteBuf-的分配\" class=\"headerlink\" title=\"ByteBuf 的分配\"></a>ByteBuf 的分配</h3><p>聊完了结构和使用模式，再来看看 ByteBuf 是如何分配缓冲区的数据的。</p>\n<p>Netty 提供了两种 ByteBufAllocator 的实现，他们分别是：</p>\n<ul>\n<li><strong>PooledByteBufAllocator，</strong>实现了 ByteBuf 的对象的池化，提高性能减少内存碎片。</li>\n<li><strong>Unpooled-ByteBufAllocator，</strong>没有实现对象的池化，每次会生成新的对象实例。</li>\n</ul>\n<p>对象池化的技术和线程池，比较相似，主要目的是提高内存的使用率。池化的简单实现思路，是在 JVM 堆内存上构建一层内存池，通过 allocate 方法获取内存池中的空间，通过 release 方法将空间归还给内存池。</p>\n<p>对象的生成和销毁，会大量地调用 allocate 和 release 方法，因此内存池面临碎片空间回收的问题，在频繁申请和释放空间后，内存池需要保证连续的内存空间，用于对象的分配。</p>\n<p>基于这个需求，有两种算法用于优化这一块的内存分配：伙伴系统和 slab 系统。</p>\n<p>伙伴系统，用完全二叉树管理内存区域，左右节点互为伙伴，每个节点代表一个内存块。内存分配将大块内存不断二分，直到找到满足所需的最小内存分片。</p>\n<p>内存释放会判断释放内存分片的伙伴（左右节点）是否空闲，如果空闲则将左右节点合成更大块内存。</p>\n<p>slab 系统，主要解决内存碎片问题，将大块内存按照一定内存大小进行等分，形成相等大小的内存片构成的内存集。</p>\n<p>按照内存申请空间的大小，申请尽量小块内存或者其整数倍的内存，释放内存时，也是将内存分片归还给内存集。</p>\n<p>Netty 内存池管理以 Allocate 对象的形式出现。一个 Allocate 对象由多个 Arena 组成，每个 Arena 能执行内存块的分配和回收。</p>\n<p>Arena 内有三类内存块管理单元：</p>\n<ul>\n<li><strong>TinySubPage</strong></li>\n<li><strong>SmallSubPage</strong></li>\n<li><strong>ChunkList</strong></li>\n</ul>\n<p>Tiny 和 Small 符合 Slab 系统的管理策略，ChunkList 符合伙伴系统的管理策略。</p>\n<p>当用户申请内存介于 tinySize 和 smallSize 之间时，从 tinySubPage 中获取内存块。</p>\n<p>申请内存介于 smallSize 和 pageSize 之间时，从 smallSubPage 中获取内存块；介于 pageSize 和 chunkSize 之间时，从 ChunkList 中获取内存；大于 ChunkSize（不知道分配内存的大小）的内存块不通过池化分配。</p>\n<h2 id=\"Netty-的-Bootstrap\"><a href=\"#Netty-的-Bootstrap\" class=\"headerlink\" title=\"Netty 的 Bootstrap\"></a>Netty 的 Bootstrap</h2><p>说完了 Netty 的核心组件以及数据存储。再回到最开始的例子程序，在程序最开始的时候会 new 一个 Bootstrap 对象，后面所有的配置都是基于这个对象展开的。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/20.jpg\" alt=\"生成 Bootstrap 对象\"></p>\n<p>Bootstrap 的作用就是将 Netty 核心组件配置到程序中，并且让他们运行起来。</p>\n<p>从 Bootstrap 的继承结构来看，分为两类分别是 Bootstrap 和 ServerBootstrap，一个对应客户端的引导，另一个对应服务端的引导。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/21.webp\" alt=\"支持客户端和服务端的程序引导\"></p>\n<p>客户端引导 Bootstrap，主要有两个方法 bind（） 和 connect（）。Bootstrap 通过 bind（） 方法创建一个 Channel。</p>\n<p>在 bind（） 之后，通过调用 connect（） 方法来创建 Channel 连接。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/22.png\" alt=\"Bootstrap 通过 bind 和 connect 方法创建连接\"></p>\n<p>服务端引导 ServerBootstrap，与客户端不同的是在 Bind（） 方法之后会创建一个 ServerChannel，它不仅会创建新的 Channel 还会管理已经存在的 Channel。</p>\n<p><img src=\"/2020/01/14/netty-yuan-li/23.png\" alt></p>\n<p>ServerBootstrap 通过 bind 方法创建/管理连接</p>\n<p>通过上面的描述，服务端和客户端的引导存在两个区别：</p>\n<ul>\n<li><p>ServerBootstrap（服务端引导）绑定一个端口，用来监听客户端的连接请求。而 Bootstrap（客户端引导）只要知道服务端 IP 和 Port 建立连接就可以了。</p>\n</li>\n<li><p>Bootstrap（客户端引导）需要一个 EventLoopGroup，但是 ServerBootstrap（服务端引导）则需要两个 EventLoopGroup。</p>\n<p>因为服务器需要两组不同的 Channel。第一组 ServerChannel 自身监听本地端口的套接字。第二组用来监听客户端请求的套接字。</p>\n</li>\n</ul>\n<p><img src=\"/2020/01/14/netty-yuan-li/24.png\" alt=\"ServerBootstrap 有两组 EventLoopGroup\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我们从 NIO 入手，谈到了 Selector 的核心机制。然后通过介绍 Netty 客户端和服务端源代码运行流程，让大家对 Netty 编写代码有基本的认识。</p>\n<p>在 Netty 的核心组件中，Channel 提供 Socket 的连接通道，EventLoop 会对应 Channel 监听其产生的事件，并且通知执行者。EventloopGroup 的容器，负责生成和管理 EventLoop。</p>\n<p>ChannelPipeline 作为 ChannelHandler 的容器会绑定到 Channel 上，然后由 ChannelHandler 提供具体事件处理。另外，ChannelHandlerContext 为 ChannelHandler 和 ChannelPipeline 提供信息共享。</p>\n<p>ByteBuf 作为 Netty 的数据容器，通过字节数组的方式存储数据，并且通过读索引和写索引来引导读写操作。</p>\n<p>上述的核心组件都是通过 Bootstrap 来配置并且引导启动的，Bootstrap 启动方式虽然一致，但是针对客户端和服务端有些许的区别。</p>\n"},{"title":"Nginx使用心得","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-19T08:15:01.000Z","password":null,"summary":null,"_content":"\n\n\n### 什么是Nginx\n\n![](Nginx使用心得/1526187409033.png)\n\nnginx可以作为web服务器，但更多的时候，我们把它作为网关，因为它具备网关必备的功能：\n\n- 反向代理\n- 负载均衡\n- 动态路由\n- 请求过滤\n\n### nginx作为web服务器\n\nWeb服务器分2类：\n\n- web应用服务器，如：\n  - tomcat\n  - resin\n  - jetty\n- web服务器，如：\n  - Apache 服务器\n  - Nginx\n  - IIS\n\n区分：web服务器不能解析jsp等页面，只能处理js、css、html等静态资源。 并发：web服务器的并发能力远高于web应用服务器。\n\n### nginx作为反向代理\n\n什么是反向代理？\n\n- 代理：通过客户机的配置，实现让一台服务器(代理服务器)代理客户机，客户的所有请求都交给代理服务器处理。\n- 反向代理：用一台服务器，代理真实服务器，用户访问时，不再是访问真实服务器，而是代理服务器。\n\nnginx可以当做反向代理服务器来使用：\n\n- 我们需要提前在nginx中配置好反向代理的规则，不同的请求，交给不同的真实服务器处理\n- 当请求到达nginx，nginx会根据已经定义的规则进行请求的转发，从而实现路由功能\n\n利用反向代理，就可以解决我们前面所说的端口问题，如图\n\n![](Nginx使用心得/1526016663674.png)\n\n### 安装和使用\n\n> ### 安装\n\n安装非常简单，把课前资料提供的nginx直接解压即可，绿色免安装!\n\n解压后，目录结构：\n\n![](Nginx使用心得\\1579422396676.png)\n\n1. conf：配置目录\n2. contrib：第三方依赖\n3. html：默认的静态资源目录，类似于tomcat的webapps\n4. logs：日志目录\n5. nginx.exe：启动程序。可双击运行，但不建议这么做。\n\n> ### 反向代理配置\n\n示例：\n\n![](Nginx使用心得/1526188831504.png)\n\nnginx中的每个server就是一个反向代理配置，可以有多个server\n\n完整配置：\n\n```xml\n#user  nobody;\nworker_processes  1;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n   \n    keepalive_timeout  65;\n\n    gzip  on;\n\tserver {\n        listen       80;\n        server_name  manage.leyou.com;\n\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n        location / {\n\t\t\tproxy_pass http://127.0.0.1:9001;\n\t\t\tproxy_connect_timeout 600;\n\t\t\tproxy_read_timeout 600;\n        }\n    }\n\tserver {\n        listen       80;\n        server_name  api.leyou.com;\n\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n        location / {\n\t\t\tproxy_pass http://127.0.0.1:10010;\n\t\t\tproxy_connect_timeout 600;\n\t\t\tproxy_read_timeout 600;\n        }\n    }\n}\n```\n\n> ### 使用\n\nnginx可以通过命令行来启动，操作命令：\n\n- 启动：`start nginx.exe`\n- 停止：`nginx.exe -s stop`\n- 重新加载：`nginx.exe -s reload`\n\n启动过程会闪烁一下，启动成功后，任务管理器中会有两个nginx进程：\n\n![](Nginx使用心得/sshot-1.png)\n\n现在实现了域名访问网站了，中间的流程是怎样的呢？\n\n![](Nginx使用心得/1526189945180.png)\n\n1. 浏览器准备发起请求，访问http://mamage.leyou.com，但需要进行域名解析\n\n2. 优先进行本地域名解析，因为我们修改了hosts，所以解析成功，得到地址：127.0.0.1\n\n3. 请求被发往解析得到的ip，并且默认使用80端口：http://127.0.0.1:80\n\n   本机的nginx一直监听80端口，因此捕获这个请求\n\n4. nginx中配置了反向代理规则，将manage.leyou.com代理到127.0.0.1:9001，因此请求被转发\n\n5. 后台系统的webpack server监听的端口是9001，得到请求并处理，完成后将响应返回到nginx\n\n6. nginx将得到的结果返回到浏览器使用场景\n\n### 使用场景\n\n平时开发分布式系统的时候,作为自己的调试环境往往是只有一台电脑的,这个时候为了配置和实际生产环境一致,我们的配置都是和线上一致,这个时候就需要使用hosts文件中的映射和nginx配合使用实现一台电脑上部署一个分布式的系统的多个部分的效果.如下配置文件:\n\n```xml\n#cms页面预览\n\tupstream cms_server_pool{\n\t\tserver 127.0.0.1:31001 weight=10;\n\t}\n\n\tupstream static_server_pool{\n\t\tserver 127.0.0.1:91 weight=10;\n\t}\t\n\t\n\t#前端动态门户 \n\tupstream dynamic_portal_server_pool{ \n\t\tserver 127.0.0.1:10000 weight=10; \n\t}\n\t#前端ucenter \n\tupstream ucenter_server_pool{ \n\t\t#server 127.0.0.1:7081 weight=10; \n\t\tserver 127.0.0.1:13000 weight=10; \n\t}\n\t\n\t#后台搜索（公开api） \n\tupstream search_server_pool{\n\t\tserver 127.0.0.1:40100 weight=10; \n\t}\n\t\n\t#媒体服务\n\tupstream video_server_pool {\n\t\tserver 127.0.0.1:90 weight=10;\n\t}\n\t#认证服务 \n\tupstream auth_server_pool{\n\t\tserver 127.0.0.1:40400 weight=10;\n\t}\n\t\n\tserver {\n\t\tlisten       91;\t\n\t\tserver_name  localhost;\n\t\tssi on;\n\t\tssi_silent_errors on;\n\n\t\tlocation /static/company/ {\n\t\t\talias\tD:/皇家java教程/04-java项目/xcEduUI01/static/company/;\n\t\t}\n\t\tlocation /static/teacher/ {\n\t\t\talias\tD:/皇家java教程/04-java项目/xcEduUI01/static/teacher/;\n\t\t}\n\t\tlocation /static/stat/ {\n\t\t\talias\tD:/皇家java教程/04-java项目/xcEduUI01/static/stat/;\n\t\t}\n\t\tlocation /course/detail/ {\n\t\t\talias   D:/皇家java教程/04-java项目/xcEduUI01/static/course/detail/;\n\t\t}\n\t\t#分类信息 \n\t\tlocation /static/category {\n\t\t\tdefault_type application/json;\n\t\t\talias   D:/皇家java教程/04-java项目/xcEduUI01/static/category/;\n\t\t}\n\t}\n    server {\n        listen       80;\t\n        server_name  www.xuecheng.com;\n\t\tssi on;\n\t\tssi_silent_errors on;\n        location / {\n            alias   D:/皇家java教程/04-java项目/xcEduUI01/xc-ui-pc-static-portal/;\n            index  index.html;\n        }\n\t   \n\t\tlocation /cms/preview/{\n\t\t\tproxy_pass http://cms_server_pool/cms/preview/;\n\t\t}\t\t\n\t\tlocation /static/company/{\n\t\t\tproxy_pass http://static_server_pool;\n\t\t}\n\t\tlocation /static/teacher/{\n\t\t\tproxy_pass http://static_server_pool;\n\t\t}\n\t\tlocation /static/stat/{\n\t\t\tproxy_pass http://static_server_pool;\n\t\t}\n\t\tlocation /static/course/detail/{\n\t\t\tproxy_pass http://static_server_pool;\n\t\t}\n\t\tlocation /static/img/{\n\t\t\talias D:/皇家java教程/04-java项目/xcEduUI01/xc-ui-pc-static-portal/img/;\n\t\t}\n\t\tlocation /static/css/{\n\t\t\talias D:/皇家java教程/04-java项目/xcEduUI01/xc-ui-pc-static-portal/css/;\n\t\t}\n\t\tlocation /static/js/{\n\t\t\talias D:/皇家java教程/04-java项目/xcEduUI01/xc-ui-pc-static-portal/js/;\n\t\t}\n\t\tlocation /static/plugins/{\n\t\t\talias D:/皇家java教程/04-java项目/xcEduUI01/xc-ui-pc-static-portal/plugins/;\n\t\t\tadd_header Access-Control-Allow-Origin http://ucenter.xuecheng.com;\n\t\t\tadd_header Access-Control-Allow-Credentials true;\n\t\t\tadd_header Access-Control-Allow-Methods GET;\n\t\t}\n\t\t#前端门户页面搜索\n\t\tlocation ^~ /course/search {\n\t\t\tproxy_pass http://dynamic_portal_server_pool;\n\t\t}\n\t\t#后端搜索服务\n\t\tlocation /openapi/search/ {\n\t\tproxy_pass http://search_server_pool/search/;\n\t\t}\n\t\t#分类信息 \n\t\tlocation /static/category/ {\n\t\t\tproxy_pass http://static_server_pool;\n\t\t}\n\t\t#开发环境webpack定时加载此文件 \n\t\tlocation ^~ /__webpack_hmr {\n\t\t\tproxy_pass http://dynamic_portal_server_pool/__webpack_hmr;\n\t\t}\n\t\t#开发环境nuxt访问_nuxt \n\t\tlocation ^~ /_nuxt/ {\n\t\t\tproxy_pass http://dynamic_portal_server_pool/_nuxt/;\n\t\t}\t\n    }\n\t#学成网媒体服务代理 \n\tmap $http_origin $origin_list{\n\t\tdefault http://www.xuecheng.com;\n\t\t\"~http://www.xuecheng.com\" http://www.xuecheng.com;\n\t\t\"~http://ucenter.xuecheng.com\" http://ucenter.xuecheng.com;\n\t}\n\t#学成网媒体服务代理\n\tserver {\n\t\tlisten 80;\n\t\tserver_name video.xuecheng.com;\n\t\tlocation /video {\n\t\t\tproxy_pass http://video_server_pool;\n\t\t\tadd_header Access‐Control‐Allow‐Origin $origin_list;\n\t\t\t#add_header Access‐Control‐Allow‐Origin *;\n\t\t\tadd_header Access‐Control‐Allow‐Credentials true;\n\t\t\tadd_header Access‐Control‐Allow‐Methods GET;\n\t\t}\n\t}\n\tserver{\n\t\tlisten\t\t90;\n\t\tserver_name\tlocalhost;\n\t\t\n\t\t#视频目录\n\t\tlocation /video/ {\n\t\t\talias\tD:/皇家java教程/04-java项目/xcEduUI01/video/;\n\t\t}\n\t}\n\t#学成网用户中心\n\tserver {\n\t\tlisten 80;\n\t\tserver_name ucenter.xuecheng.com;\n\t\t\n\t\t#认证 \n\t\tlocation ^~ /openapi/auth/ {\n\t\t\tproxy_pass http://auth_server_pool/auth/;\n\t\t}\n\t\t#个人中心 \n\t\tlocation / { \n\t\t\tproxy_pass http://ucenter_server_pool;\n\t\t}\n\t}\n\n```\n\n","source":"_posts/Nginx使用心得.md","raw":"---\ntitle: Nginx使用心得\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-19 16:15:01\npassword:\nsummary:\ntags:\ncategories: tool\n---\n\n\n\n### 什么是Nginx\n\n![](Nginx使用心得/1526187409033.png)\n\nnginx可以作为web服务器，但更多的时候，我们把它作为网关，因为它具备网关必备的功能：\n\n- 反向代理\n- 负载均衡\n- 动态路由\n- 请求过滤\n\n### nginx作为web服务器\n\nWeb服务器分2类：\n\n- web应用服务器，如：\n  - tomcat\n  - resin\n  - jetty\n- web服务器，如：\n  - Apache 服务器\n  - Nginx\n  - IIS\n\n区分：web服务器不能解析jsp等页面，只能处理js、css、html等静态资源。 并发：web服务器的并发能力远高于web应用服务器。\n\n### nginx作为反向代理\n\n什么是反向代理？\n\n- 代理：通过客户机的配置，实现让一台服务器(代理服务器)代理客户机，客户的所有请求都交给代理服务器处理。\n- 反向代理：用一台服务器，代理真实服务器，用户访问时，不再是访问真实服务器，而是代理服务器。\n\nnginx可以当做反向代理服务器来使用：\n\n- 我们需要提前在nginx中配置好反向代理的规则，不同的请求，交给不同的真实服务器处理\n- 当请求到达nginx，nginx会根据已经定义的规则进行请求的转发，从而实现路由功能\n\n利用反向代理，就可以解决我们前面所说的端口问题，如图\n\n![](Nginx使用心得/1526016663674.png)\n\n### 安装和使用\n\n> ### 安装\n\n安装非常简单，把课前资料提供的nginx直接解压即可，绿色免安装!\n\n解压后，目录结构：\n\n![](Nginx使用心得\\1579422396676.png)\n\n1. conf：配置目录\n2. contrib：第三方依赖\n3. html：默认的静态资源目录，类似于tomcat的webapps\n4. logs：日志目录\n5. nginx.exe：启动程序。可双击运行，但不建议这么做。\n\n> ### 反向代理配置\n\n示例：\n\n![](Nginx使用心得/1526188831504.png)\n\nnginx中的每个server就是一个反向代理配置，可以有多个server\n\n完整配置：\n\n```xml\n#user  nobody;\nworker_processes  1;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n   \n    keepalive_timeout  65;\n\n    gzip  on;\n\tserver {\n        listen       80;\n        server_name  manage.leyou.com;\n\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n        location / {\n\t\t\tproxy_pass http://127.0.0.1:9001;\n\t\t\tproxy_connect_timeout 600;\n\t\t\tproxy_read_timeout 600;\n        }\n    }\n\tserver {\n        listen       80;\n        server_name  api.leyou.com;\n\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n        location / {\n\t\t\tproxy_pass http://127.0.0.1:10010;\n\t\t\tproxy_connect_timeout 600;\n\t\t\tproxy_read_timeout 600;\n        }\n    }\n}\n```\n\n> ### 使用\n\nnginx可以通过命令行来启动，操作命令：\n\n- 启动：`start nginx.exe`\n- 停止：`nginx.exe -s stop`\n- 重新加载：`nginx.exe -s reload`\n\n启动过程会闪烁一下，启动成功后，任务管理器中会有两个nginx进程：\n\n![](Nginx使用心得/sshot-1.png)\n\n现在实现了域名访问网站了，中间的流程是怎样的呢？\n\n![](Nginx使用心得/1526189945180.png)\n\n1. 浏览器准备发起请求，访问http://mamage.leyou.com，但需要进行域名解析\n\n2. 优先进行本地域名解析，因为我们修改了hosts，所以解析成功，得到地址：127.0.0.1\n\n3. 请求被发往解析得到的ip，并且默认使用80端口：http://127.0.0.1:80\n\n   本机的nginx一直监听80端口，因此捕获这个请求\n\n4. nginx中配置了反向代理规则，将manage.leyou.com代理到127.0.0.1:9001，因此请求被转发\n\n5. 后台系统的webpack server监听的端口是9001，得到请求并处理，完成后将响应返回到nginx\n\n6. nginx将得到的结果返回到浏览器使用场景\n\n### 使用场景\n\n平时开发分布式系统的时候,作为自己的调试环境往往是只有一台电脑的,这个时候为了配置和实际生产环境一致,我们的配置都是和线上一致,这个时候就需要使用hosts文件中的映射和nginx配合使用实现一台电脑上部署一个分布式的系统的多个部分的效果.如下配置文件:\n\n```xml\n#cms页面预览\n\tupstream cms_server_pool{\n\t\tserver 127.0.0.1:31001 weight=10;\n\t}\n\n\tupstream static_server_pool{\n\t\tserver 127.0.0.1:91 weight=10;\n\t}\t\n\t\n\t#前端动态门户 \n\tupstream dynamic_portal_server_pool{ \n\t\tserver 127.0.0.1:10000 weight=10; \n\t}\n\t#前端ucenter \n\tupstream ucenter_server_pool{ \n\t\t#server 127.0.0.1:7081 weight=10; \n\t\tserver 127.0.0.1:13000 weight=10; \n\t}\n\t\n\t#后台搜索（公开api） \n\tupstream search_server_pool{\n\t\tserver 127.0.0.1:40100 weight=10; \n\t}\n\t\n\t#媒体服务\n\tupstream video_server_pool {\n\t\tserver 127.0.0.1:90 weight=10;\n\t}\n\t#认证服务 \n\tupstream auth_server_pool{\n\t\tserver 127.0.0.1:40400 weight=10;\n\t}\n\t\n\tserver {\n\t\tlisten       91;\t\n\t\tserver_name  localhost;\n\t\tssi on;\n\t\tssi_silent_errors on;\n\n\t\tlocation /static/company/ {\n\t\t\talias\tD:/皇家java教程/04-java项目/xcEduUI01/static/company/;\n\t\t}\n\t\tlocation /static/teacher/ {\n\t\t\talias\tD:/皇家java教程/04-java项目/xcEduUI01/static/teacher/;\n\t\t}\n\t\tlocation /static/stat/ {\n\t\t\talias\tD:/皇家java教程/04-java项目/xcEduUI01/static/stat/;\n\t\t}\n\t\tlocation /course/detail/ {\n\t\t\talias   D:/皇家java教程/04-java项目/xcEduUI01/static/course/detail/;\n\t\t}\n\t\t#分类信息 \n\t\tlocation /static/category {\n\t\t\tdefault_type application/json;\n\t\t\talias   D:/皇家java教程/04-java项目/xcEduUI01/static/category/;\n\t\t}\n\t}\n    server {\n        listen       80;\t\n        server_name  www.xuecheng.com;\n\t\tssi on;\n\t\tssi_silent_errors on;\n        location / {\n            alias   D:/皇家java教程/04-java项目/xcEduUI01/xc-ui-pc-static-portal/;\n            index  index.html;\n        }\n\t   \n\t\tlocation /cms/preview/{\n\t\t\tproxy_pass http://cms_server_pool/cms/preview/;\n\t\t}\t\t\n\t\tlocation /static/company/{\n\t\t\tproxy_pass http://static_server_pool;\n\t\t}\n\t\tlocation /static/teacher/{\n\t\t\tproxy_pass http://static_server_pool;\n\t\t}\n\t\tlocation /static/stat/{\n\t\t\tproxy_pass http://static_server_pool;\n\t\t}\n\t\tlocation /static/course/detail/{\n\t\t\tproxy_pass http://static_server_pool;\n\t\t}\n\t\tlocation /static/img/{\n\t\t\talias D:/皇家java教程/04-java项目/xcEduUI01/xc-ui-pc-static-portal/img/;\n\t\t}\n\t\tlocation /static/css/{\n\t\t\talias D:/皇家java教程/04-java项目/xcEduUI01/xc-ui-pc-static-portal/css/;\n\t\t}\n\t\tlocation /static/js/{\n\t\t\talias D:/皇家java教程/04-java项目/xcEduUI01/xc-ui-pc-static-portal/js/;\n\t\t}\n\t\tlocation /static/plugins/{\n\t\t\talias D:/皇家java教程/04-java项目/xcEduUI01/xc-ui-pc-static-portal/plugins/;\n\t\t\tadd_header Access-Control-Allow-Origin http://ucenter.xuecheng.com;\n\t\t\tadd_header Access-Control-Allow-Credentials true;\n\t\t\tadd_header Access-Control-Allow-Methods GET;\n\t\t}\n\t\t#前端门户页面搜索\n\t\tlocation ^~ /course/search {\n\t\t\tproxy_pass http://dynamic_portal_server_pool;\n\t\t}\n\t\t#后端搜索服务\n\t\tlocation /openapi/search/ {\n\t\tproxy_pass http://search_server_pool/search/;\n\t\t}\n\t\t#分类信息 \n\t\tlocation /static/category/ {\n\t\t\tproxy_pass http://static_server_pool;\n\t\t}\n\t\t#开发环境webpack定时加载此文件 \n\t\tlocation ^~ /__webpack_hmr {\n\t\t\tproxy_pass http://dynamic_portal_server_pool/__webpack_hmr;\n\t\t}\n\t\t#开发环境nuxt访问_nuxt \n\t\tlocation ^~ /_nuxt/ {\n\t\t\tproxy_pass http://dynamic_portal_server_pool/_nuxt/;\n\t\t}\t\n    }\n\t#学成网媒体服务代理 \n\tmap $http_origin $origin_list{\n\t\tdefault http://www.xuecheng.com;\n\t\t\"~http://www.xuecheng.com\" http://www.xuecheng.com;\n\t\t\"~http://ucenter.xuecheng.com\" http://ucenter.xuecheng.com;\n\t}\n\t#学成网媒体服务代理\n\tserver {\n\t\tlisten 80;\n\t\tserver_name video.xuecheng.com;\n\t\tlocation /video {\n\t\t\tproxy_pass http://video_server_pool;\n\t\t\tadd_header Access‐Control‐Allow‐Origin $origin_list;\n\t\t\t#add_header Access‐Control‐Allow‐Origin *;\n\t\t\tadd_header Access‐Control‐Allow‐Credentials true;\n\t\t\tadd_header Access‐Control‐Allow‐Methods GET;\n\t\t}\n\t}\n\tserver{\n\t\tlisten\t\t90;\n\t\tserver_name\tlocalhost;\n\t\t\n\t\t#视频目录\n\t\tlocation /video/ {\n\t\t\talias\tD:/皇家java教程/04-java项目/xcEduUI01/video/;\n\t\t}\n\t}\n\t#学成网用户中心\n\tserver {\n\t\tlisten 80;\n\t\tserver_name ucenter.xuecheng.com;\n\t\t\n\t\t#认证 \n\t\tlocation ^~ /openapi/auth/ {\n\t\t\tproxy_pass http://auth_server_pool/auth/;\n\t\t}\n\t\t#个人中心 \n\t\tlocation / { \n\t\t\tproxy_pass http://ucenter_server_pool;\n\t\t}\n\t}\n\n```\n\n","slug":"Nginx使用心得","published":1,"updated":"2021-04-29T09:44:04.379Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mlb20013vkvyba26qiwj","content":"<h3 id=\"什么是Nginx\"><a href=\"#什么是Nginx\" class=\"headerlink\" title=\"什么是Nginx\"></a>什么是Nginx</h3><p><img src=\"/2020/01/19/nginx-shi-yong-xin-de/1526187409033.png\" alt></p>\n<p>nginx可以作为web服务器，但更多的时候，我们把它作为网关，因为它具备网关必备的功能：</p>\n<ul>\n<li>反向代理</li>\n<li>负载均衡</li>\n<li>动态路由</li>\n<li>请求过滤</li>\n</ul>\n<h3 id=\"nginx作为web服务器\"><a href=\"#nginx作为web服务器\" class=\"headerlink\" title=\"nginx作为web服务器\"></a>nginx作为web服务器</h3><p>Web服务器分2类：</p>\n<ul>\n<li>web应用服务器，如：<ul>\n<li>tomcat</li>\n<li>resin</li>\n<li>jetty</li>\n</ul>\n</li>\n<li>web服务器，如：<ul>\n<li>Apache 服务器</li>\n<li>Nginx</li>\n<li>IIS</li>\n</ul>\n</li>\n</ul>\n<p>区分：web服务器不能解析jsp等页面，只能处理js、css、html等静态资源。 并发：web服务器的并发能力远高于web应用服务器。</p>\n<h3 id=\"nginx作为反向代理\"><a href=\"#nginx作为反向代理\" class=\"headerlink\" title=\"nginx作为反向代理\"></a>nginx作为反向代理</h3><p>什么是反向代理？</p>\n<ul>\n<li>代理：通过客户机的配置，实现让一台服务器(代理服务器)代理客户机，客户的所有请求都交给代理服务器处理。</li>\n<li>反向代理：用一台服务器，代理真实服务器，用户访问时，不再是访问真实服务器，而是代理服务器。</li>\n</ul>\n<p>nginx可以当做反向代理服务器来使用：</p>\n<ul>\n<li>我们需要提前在nginx中配置好反向代理的规则，不同的请求，交给不同的真实服务器处理</li>\n<li>当请求到达nginx，nginx会根据已经定义的规则进行请求的转发，从而实现路由功能</li>\n</ul>\n<p>利用反向代理，就可以解决我们前面所说的端口问题，如图</p>\n<p><img src=\"/2020/01/19/nginx-shi-yong-xin-de/1526016663674.png\" alt></p>\n<h3 id=\"安装和使用\"><a href=\"#安装和使用\" class=\"headerlink\" title=\"安装和使用\"></a>安装和使用</h3><blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3></blockquote>\n<p>安装非常简单，把课前资料提供的nginx直接解压即可，绿色免安装!</p>\n<p>解压后，目录结构：</p>\n<p><img src=\"/2020/01/19/nginx-shi-yong-xin-de/Nginx%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%5C1579422396676.png\" alt></p>\n<ol>\n<li>conf：配置目录</li>\n<li>contrib：第三方依赖</li>\n<li>html：默认的静态资源目录，类似于tomcat的webapps</li>\n<li>logs：日志目录</li>\n<li>nginx.exe：启动程序。可双击运行，但不建议这么做。</li>\n</ol>\n<blockquote>\n<h3 id=\"反向代理配置\"><a href=\"#反向代理配置\" class=\"headerlink\" title=\"反向代理配置\"></a>反向代理配置</h3></blockquote>\n<p>示例：</p>\n<p><img src=\"/2020/01/19/nginx-shi-yong-xin-de/1526188831504.png\" alt></p>\n<p>nginx中的每个server就是一个反向代理配置，可以有多个server</p>\n<p>完整配置：</p>\n<pre class=\"line-numbers language-xml\"><code class=\"language-xml\">#user  nobody;\nworker_processes  1;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n\n    keepalive_timeout  65;\n\n    gzip  on;\n    server {\n        listen       80;\n        server_name  manage.leyou.com;\n\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n        location / {\n            proxy_pass http://127.0.0.1:9001;\n            proxy_connect_timeout 600;\n            proxy_read_timeout 600;\n        }\n    }\n    server {\n        listen       80;\n        server_name  api.leyou.com;\n\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n        location / {\n            proxy_pass http://127.0.0.1:10010;\n            proxy_connect_timeout 600;\n            proxy_read_timeout 600;\n        }\n    }\n}<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3></blockquote>\n<p>nginx可以通过命令行来启动，操作命令：</p>\n<ul>\n<li>启动：<code>start nginx.exe</code></li>\n<li>停止：<code>nginx.exe -s stop</code></li>\n<li>重新加载：<code>nginx.exe -s reload</code></li>\n</ul>\n<p>启动过程会闪烁一下，启动成功后，任务管理器中会有两个nginx进程：</p>\n<p><img src=\"/2020/01/19/nginx-shi-yong-xin-de/sshot-1.png\" alt></p>\n<p>现在实现了域名访问网站了，中间的流程是怎样的呢？</p>\n<p><img src=\"/2020/01/19/nginx-shi-yong-xin-de/1526189945180.png\" alt></p>\n<ol>\n<li><p>浏览器准备发起请求，访问<a href=\"http://mamage.leyou.com，但需要进行域名解析\" target=\"_blank\" rel=\"noopener\">http://mamage.leyou.com，但需要进行域名解析</a></p>\n</li>\n<li><p>优先进行本地域名解析，因为我们修改了hosts，所以解析成功，得到地址：127.0.0.1</p>\n</li>\n<li><p>请求被发往解析得到的ip，并且默认使用80端口：<a href=\"http://127.0.0.1:80\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:80</a></p>\n<p>本机的nginx一直监听80端口，因此捕获这个请求</p>\n</li>\n<li><p>nginx中配置了反向代理规则，将manage.leyou.com代理到127.0.0.1:9001，因此请求被转发</p>\n</li>\n<li><p>后台系统的webpack server监听的端口是9001，得到请求并处理，完成后将响应返回到nginx</p>\n</li>\n<li><p>nginx将得到的结果返回到浏览器使用场景</p>\n</li>\n</ol>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>平时开发分布式系统的时候,作为自己的调试环境往往是只有一台电脑的,这个时候为了配置和实际生产环境一致,我们的配置都是和线上一致,这个时候就需要使用hosts文件中的映射和nginx配合使用实现一台电脑上部署一个分布式的系统的多个部分的效果.如下配置文件:</p>\n<pre class=\"line-numbers language-xml\"><code class=\"language-xml\">#cms页面预览\n    upstream cms_server_pool{\n        server 127.0.0.1:31001 weight=10;\n    }\n\n    upstream static_server_pool{\n        server 127.0.0.1:91 weight=10;\n    }    \n\n    #前端动态门户 \n    upstream dynamic_portal_server_pool{ \n        server 127.0.0.1:10000 weight=10; \n    }\n    #前端ucenter \n    upstream ucenter_server_pool{ \n        #server 127.0.0.1:7081 weight=10; \n        server 127.0.0.1:13000 weight=10; \n    }\n\n    #后台搜索（公开api） \n    upstream search_server_pool{\n        server 127.0.0.1:40100 weight=10; \n    }\n\n    #媒体服务\n    upstream video_server_pool {\n        server 127.0.0.1:90 weight=10;\n    }\n    #认证服务 \n    upstream auth_server_pool{\n        server 127.0.0.1:40400 weight=10;\n    }\n\n    server {\n        listen       91;    \n        server_name  localhost;\n        ssi on;\n        ssi_silent_errors on;\n\n        location /static/company/ {\n            alias    D:/皇家java教程/04-java项目/xcEduUI01/static/company/;\n        }\n        location /static/teacher/ {\n            alias    D:/皇家java教程/04-java项目/xcEduUI01/static/teacher/;\n        }\n        location /static/stat/ {\n            alias    D:/皇家java教程/04-java项目/xcEduUI01/static/stat/;\n        }\n        location /course/detail/ {\n            alias   D:/皇家java教程/04-java项目/xcEduUI01/static/course/detail/;\n        }\n        #分类信息 \n        location /static/category {\n            default_type application/json;\n            alias   D:/皇家java教程/04-java项目/xcEduUI01/static/category/;\n        }\n    }\n    server {\n        listen       80;    \n        server_name  www.xuecheng.com;\n        ssi on;\n        ssi_silent_errors on;\n        location / {\n            alias   D:/皇家java教程/04-java项目/xcEduUI01/xc-ui-pc-static-portal/;\n            index  index.html;\n        }\n\n        location /cms/preview/{\n            proxy_pass http://cms_server_pool/cms/preview/;\n        }        \n        location /static/company/{\n            proxy_pass http://static_server_pool;\n        }\n        location /static/teacher/{\n            proxy_pass http://static_server_pool;\n        }\n        location /static/stat/{\n            proxy_pass http://static_server_pool;\n        }\n        location /static/course/detail/{\n            proxy_pass http://static_server_pool;\n        }\n        location /static/img/{\n            alias D:/皇家java教程/04-java项目/xcEduUI01/xc-ui-pc-static-portal/img/;\n        }\n        location /static/css/{\n            alias D:/皇家java教程/04-java项目/xcEduUI01/xc-ui-pc-static-portal/css/;\n        }\n        location /static/js/{\n            alias D:/皇家java教程/04-java项目/xcEduUI01/xc-ui-pc-static-portal/js/;\n        }\n        location /static/plugins/{\n            alias D:/皇家java教程/04-java项目/xcEduUI01/xc-ui-pc-static-portal/plugins/;\n            add_header Access-Control-Allow-Origin http://ucenter.xuecheng.com;\n            add_header Access-Control-Allow-Credentials true;\n            add_header Access-Control-Allow-Methods GET;\n        }\n        #前端门户页面搜索\n        location ^~ /course/search {\n            proxy_pass http://dynamic_portal_server_pool;\n        }\n        #后端搜索服务\n        location /openapi/search/ {\n        proxy_pass http://search_server_pool/search/;\n        }\n        #分类信息 \n        location /static/category/ {\n            proxy_pass http://static_server_pool;\n        }\n        #开发环境webpack定时加载此文件 \n        location ^~ /__webpack_hmr {\n            proxy_pass http://dynamic_portal_server_pool/__webpack_hmr;\n        }\n        #开发环境nuxt访问_nuxt \n        location ^~ /_nuxt/ {\n            proxy_pass http://dynamic_portal_server_pool/_nuxt/;\n        }    \n    }\n    #学成网媒体服务代理 \n    map $http_origin $origin_list{\n        default http://www.xuecheng.com;\n        \"~http://www.xuecheng.com\" http://www.xuecheng.com;\n        \"~http://ucenter.xuecheng.com\" http://ucenter.xuecheng.com;\n    }\n    #学成网媒体服务代理\n    server {\n        listen 80;\n        server_name video.xuecheng.com;\n        location /video {\n            proxy_pass http://video_server_pool;\n            add_header Access‐Control‐Allow‐Origin $origin_list;\n            #add_header Access‐Control‐Allow‐Origin *;\n            add_header Access‐Control‐Allow‐Credentials true;\n            add_header Access‐Control‐Allow‐Methods GET;\n        }\n    }\n    server{\n        listen        90;\n        server_name    localhost;\n\n        #视频目录\n        location /video/ {\n            alias    D:/皇家java教程/04-java项目/xcEduUI01/video/;\n        }\n    }\n    #学成网用户中心\n    server {\n        listen 80;\n        server_name ucenter.xuecheng.com;\n\n        #认证 \n        location ^~ /openapi/auth/ {\n            proxy_pass http://auth_server_pool/auth/;\n        }\n        #个人中心 \n        location / { \n            proxy_pass http://ucenter_server_pool;\n        }\n    }\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h3 id=\"什么是Nginx\"><a href=\"#什么是Nginx\" class=\"headerlink\" title=\"什么是Nginx\"></a>什么是Nginx</h3><p><img src=\"/2020/01/19/nginx-shi-yong-xin-de/1526187409033.png\" alt></p>\n<p>nginx可以作为web服务器，但更多的时候，我们把它作为网关，因为它具备网关必备的功能：</p>\n<ul>\n<li>反向代理</li>\n<li>负载均衡</li>\n<li>动态路由</li>\n<li>请求过滤</li>\n</ul>\n<h3 id=\"nginx作为web服务器\"><a href=\"#nginx作为web服务器\" class=\"headerlink\" title=\"nginx作为web服务器\"></a>nginx作为web服务器</h3><p>Web服务器分2类：</p>\n<ul>\n<li>web应用服务器，如：<ul>\n<li>tomcat</li>\n<li>resin</li>\n<li>jetty</li>\n</ul>\n</li>\n<li>web服务器，如：<ul>\n<li>Apache 服务器</li>\n<li>Nginx</li>\n<li>IIS</li>\n</ul>\n</li>\n</ul>\n<p>区分：web服务器不能解析jsp等页面，只能处理js、css、html等静态资源。 并发：web服务器的并发能力远高于web应用服务器。</p>\n<h3 id=\"nginx作为反向代理\"><a href=\"#nginx作为反向代理\" class=\"headerlink\" title=\"nginx作为反向代理\"></a>nginx作为反向代理</h3><p>什么是反向代理？</p>\n<ul>\n<li>代理：通过客户机的配置，实现让一台服务器(代理服务器)代理客户机，客户的所有请求都交给代理服务器处理。</li>\n<li>反向代理：用一台服务器，代理真实服务器，用户访问时，不再是访问真实服务器，而是代理服务器。</li>\n</ul>\n<p>nginx可以当做反向代理服务器来使用：</p>\n<ul>\n<li>我们需要提前在nginx中配置好反向代理的规则，不同的请求，交给不同的真实服务器处理</li>\n<li>当请求到达nginx，nginx会根据已经定义的规则进行请求的转发，从而实现路由功能</li>\n</ul>\n<p>利用反向代理，就可以解决我们前面所说的端口问题，如图</p>\n<p><img src=\"/2020/01/19/nginx-shi-yong-xin-de/1526016663674.png\" alt></p>\n<h3 id=\"安装和使用\"><a href=\"#安装和使用\" class=\"headerlink\" title=\"安装和使用\"></a>安装和使用</h3><blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3></blockquote>\n<p>安装非常简单，把课前资料提供的nginx直接解压即可，绿色免安装!</p>\n<p>解压后，目录结构：</p>\n<p><img src=\"/2020/01/19/nginx-shi-yong-xin-de/Nginx%E4%BD%BF%E7%94%A8%E5%BF%83%E5%BE%97%5C1579422396676.png\" alt></p>\n<ol>\n<li>conf：配置目录</li>\n<li>contrib：第三方依赖</li>\n<li>html：默认的静态资源目录，类似于tomcat的webapps</li>\n<li>logs：日志目录</li>\n<li>nginx.exe：启动程序。可双击运行，但不建议这么做。</li>\n</ol>\n<blockquote>\n<h3 id=\"反向代理配置\"><a href=\"#反向代理配置\" class=\"headerlink\" title=\"反向代理配置\"></a>反向代理配置</h3></blockquote>\n<p>示例：</p>\n<p><img src=\"/2020/01/19/nginx-shi-yong-xin-de/1526188831504.png\" alt></p>\n<p>nginx中的每个server就是一个反向代理配置，可以有多个server</p>\n<p>完整配置：</p>\n<pre><code class=\"xml\">#user  nobody;\nworker_processes  1;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n\n    keepalive_timeout  65;\n\n    gzip  on;\n    server {\n        listen       80;\n        server_name  manage.leyou.com;\n\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n        location / {\n            proxy_pass http://127.0.0.1:9001;\n            proxy_connect_timeout 600;\n            proxy_read_timeout 600;\n        }\n    }\n    server {\n        listen       80;\n        server_name  api.leyou.com;\n\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\n        location / {\n            proxy_pass http://127.0.0.1:10010;\n            proxy_connect_timeout 600;\n            proxy_read_timeout 600;\n        }\n    }\n}</code></pre>\n<blockquote>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3></blockquote>\n<p>nginx可以通过命令行来启动，操作命令：</p>\n<ul>\n<li>启动：<code>start nginx.exe</code></li>\n<li>停止：<code>nginx.exe -s stop</code></li>\n<li>重新加载：<code>nginx.exe -s reload</code></li>\n</ul>\n<p>启动过程会闪烁一下，启动成功后，任务管理器中会有两个nginx进程：</p>\n<p><img src=\"/2020/01/19/nginx-shi-yong-xin-de/sshot-1.png\" alt></p>\n<p>现在实现了域名访问网站了，中间的流程是怎样的呢？</p>\n<p><img src=\"/2020/01/19/nginx-shi-yong-xin-de/1526189945180.png\" alt></p>\n<ol>\n<li><p>浏览器准备发起请求，访问<a href=\"http://mamage.leyou.com，但需要进行域名解析\" target=\"_blank\" rel=\"noopener\">http://mamage.leyou.com，但需要进行域名解析</a></p>\n</li>\n<li><p>优先进行本地域名解析，因为我们修改了hosts，所以解析成功，得到地址：127.0.0.1</p>\n</li>\n<li><p>请求被发往解析得到的ip，并且默认使用80端口：<a href=\"http://127.0.0.1:80\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:80</a></p>\n<p>本机的nginx一直监听80端口，因此捕获这个请求</p>\n</li>\n<li><p>nginx中配置了反向代理规则，将manage.leyou.com代理到127.0.0.1:9001，因此请求被转发</p>\n</li>\n<li><p>后台系统的webpack server监听的端口是9001，得到请求并处理，完成后将响应返回到nginx</p>\n</li>\n<li><p>nginx将得到的结果返回到浏览器使用场景</p>\n</li>\n</ol>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>平时开发分布式系统的时候,作为自己的调试环境往往是只有一台电脑的,这个时候为了配置和实际生产环境一致,我们的配置都是和线上一致,这个时候就需要使用hosts文件中的映射和nginx配合使用实现一台电脑上部署一个分布式的系统的多个部分的效果.如下配置文件:</p>\n<pre><code class=\"xml\">#cms页面预览\n    upstream cms_server_pool{\n        server 127.0.0.1:31001 weight=10;\n    }\n\n    upstream static_server_pool{\n        server 127.0.0.1:91 weight=10;\n    }    \n\n    #前端动态门户 \n    upstream dynamic_portal_server_pool{ \n        server 127.0.0.1:10000 weight=10; \n    }\n    #前端ucenter \n    upstream ucenter_server_pool{ \n        #server 127.0.0.1:7081 weight=10; \n        server 127.0.0.1:13000 weight=10; \n    }\n\n    #后台搜索（公开api） \n    upstream search_server_pool{\n        server 127.0.0.1:40100 weight=10; \n    }\n\n    #媒体服务\n    upstream video_server_pool {\n        server 127.0.0.1:90 weight=10;\n    }\n    #认证服务 \n    upstream auth_server_pool{\n        server 127.0.0.1:40400 weight=10;\n    }\n\n    server {\n        listen       91;    \n        server_name  localhost;\n        ssi on;\n        ssi_silent_errors on;\n\n        location /static/company/ {\n            alias    D:/皇家java教程/04-java项目/xcEduUI01/static/company/;\n        }\n        location /static/teacher/ {\n            alias    D:/皇家java教程/04-java项目/xcEduUI01/static/teacher/;\n        }\n        location /static/stat/ {\n            alias    D:/皇家java教程/04-java项目/xcEduUI01/static/stat/;\n        }\n        location /course/detail/ {\n            alias   D:/皇家java教程/04-java项目/xcEduUI01/static/course/detail/;\n        }\n        #分类信息 \n        location /static/category {\n            default_type application/json;\n            alias   D:/皇家java教程/04-java项目/xcEduUI01/static/category/;\n        }\n    }\n    server {\n        listen       80;    \n        server_name  www.xuecheng.com;\n        ssi on;\n        ssi_silent_errors on;\n        location / {\n            alias   D:/皇家java教程/04-java项目/xcEduUI01/xc-ui-pc-static-portal/;\n            index  index.html;\n        }\n\n        location /cms/preview/{\n            proxy_pass http://cms_server_pool/cms/preview/;\n        }        \n        location /static/company/{\n            proxy_pass http://static_server_pool;\n        }\n        location /static/teacher/{\n            proxy_pass http://static_server_pool;\n        }\n        location /static/stat/{\n            proxy_pass http://static_server_pool;\n        }\n        location /static/course/detail/{\n            proxy_pass http://static_server_pool;\n        }\n        location /static/img/{\n            alias D:/皇家java教程/04-java项目/xcEduUI01/xc-ui-pc-static-portal/img/;\n        }\n        location /static/css/{\n            alias D:/皇家java教程/04-java项目/xcEduUI01/xc-ui-pc-static-portal/css/;\n        }\n        location /static/js/{\n            alias D:/皇家java教程/04-java项目/xcEduUI01/xc-ui-pc-static-portal/js/;\n        }\n        location /static/plugins/{\n            alias D:/皇家java教程/04-java项目/xcEduUI01/xc-ui-pc-static-portal/plugins/;\n            add_header Access-Control-Allow-Origin http://ucenter.xuecheng.com;\n            add_header Access-Control-Allow-Credentials true;\n            add_header Access-Control-Allow-Methods GET;\n        }\n        #前端门户页面搜索\n        location ^~ /course/search {\n            proxy_pass http://dynamic_portal_server_pool;\n        }\n        #后端搜索服务\n        location /openapi/search/ {\n        proxy_pass http://search_server_pool/search/;\n        }\n        #分类信息 \n        location /static/category/ {\n            proxy_pass http://static_server_pool;\n        }\n        #开发环境webpack定时加载此文件 \n        location ^~ /__webpack_hmr {\n            proxy_pass http://dynamic_portal_server_pool/__webpack_hmr;\n        }\n        #开发环境nuxt访问_nuxt \n        location ^~ /_nuxt/ {\n            proxy_pass http://dynamic_portal_server_pool/_nuxt/;\n        }    \n    }\n    #学成网媒体服务代理 \n    map $http_origin $origin_list{\n        default http://www.xuecheng.com;\n        &quot;~http://www.xuecheng.com&quot; http://www.xuecheng.com;\n        &quot;~http://ucenter.xuecheng.com&quot; http://ucenter.xuecheng.com;\n    }\n    #学成网媒体服务代理\n    server {\n        listen 80;\n        server_name video.xuecheng.com;\n        location /video {\n            proxy_pass http://video_server_pool;\n            add_header Access‐Control‐Allow‐Origin $origin_list;\n            #add_header Access‐Control‐Allow‐Origin *;\n            add_header Access‐Control‐Allow‐Credentials true;\n            add_header Access‐Control‐Allow‐Methods GET;\n        }\n    }\n    server{\n        listen        90;\n        server_name    localhost;\n\n        #视频目录\n        location /video/ {\n            alias    D:/皇家java教程/04-java项目/xcEduUI01/video/;\n        }\n    }\n    #学成网用户中心\n    server {\n        listen 80;\n        server_name ucenter.xuecheng.com;\n\n        #认证 \n        location ^~ /openapi/auth/ {\n            proxy_pass http://auth_server_pool/auth/;\n        }\n        #个人中心 \n        location / { \n            proxy_pass http://ucenter_server_pool;\n        }\n    }\n</code></pre>\n"},{"title":"Shiro框架原理及简单使用","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-02-04T14:41:47.000Z","password":null,"summary":null,"_content":"\n## **Shiro是什么？**\n\nApache Shiro是Java的一个安全框架，一个强大而灵活的开源安全框架，它干净利落地处理身份认证，授权，企业会话管理和加密。\n\n目前，使用Apache Shiro的人越来越多，因为它相当简单，对比Spring Security，可能没有Spring Security做的功能强大，但是在实际工作时可能并不需要那么复杂的东西，所以使用小而简单的Shiro就足够了。\n\n功能:1.验证用户来核实他们的身份2.对用户执行访问控制\n\n我们可以看一下Apache官网上对Shiro，它都包含哪些功能。\n\n![](Shiro框架原理及简单使用/3.png)\n\nAuthentication：认证，有时也简称为“登录”，这是一个证明用户是他们所说的他们是谁的行为。\n\nAuthorization：授权，访问控制的过程，也就是决定“谁”去访问“什么” 授权用于回答安全问题，例如“用户是否允许编辑帐户”，“该用户是否允许查看此网页”，“该用户是否可以访问”到这个按钮？“这些都是决定用户有权访问的决定，因此都代表授权检查。\n\nCryptography：密码术是通过隐藏信息或将其转换为无意义来保护信息免受不良访问的做法，因此没有其他人可以阅读它。Shiro专注于密码学的两个核心要素：使用公钥或私钥加密数据的密码，以及对密码等数据进行不可逆转加密的哈希（也称为消息摘要）。\n\nShiro Cryptography的主要目标是采用传统上非常复杂的领域，并在提供强大的密码学功能的同时使其他人轻松实现。\n\nSession Management：Session会话，会话是您的用户在使用您的应用程序时携带一段时间的数据桶。传统上，会话专用于Web或EJB环境。不再！Shiro支持任何应用程序环境的会话。此外，Shiro还提供许多其他强大功能来帮助您管理会话。\n\nWeb Support：Shiro的web支持的API能够轻松地帮助保护 Web 应用程序。主要就是用来对Web程序进行一个好的支持的。\n\nCaching：缓存，他是Apache Shiro中的第一层公民，来确保安全操作快速而又高效。\n\nConcurrency：shiro利用它的并发特性来支持多线程应用程序。\n\nTesting：测试支持的存在来帮助你编写单元测试和集成测试，并确保你的能够如预期的一样安全。\n\n\"Run As\"：其实这个就是有是有允许一个用户假设为另外一个用户身份的功能，有时候在管理脚本的时候很有效果。\n\nRemember Me：在会话中记住用户的身份，所以他们只需要在强制时候登录。\n\n## Shiro核心\n\nShiro其实是有三大核心组件的，Subject、SecurityManager和Realms。\n\nSubject：Subject实质上是一个当前执行用户的特定的安全“视图”。鉴于\"User\"一词通常意味着一个人，而一个Subject可以是一个人， 但它还可以代表第三方服务，daemon account，cron job，或其他类似的任何东西——基本上是当前正与软件进行交互的任何东西。 \n\n所有Subject实例都被绑定到（且这是必须的）一个SecurityManager上。当你与一个Subject交互时，那些交互作用转化为与SecurityManager交互的特定subject的交互作用。 我们可以把Subject认为是一个门面，SecurityManager才是真正的执行者。\n\nSecurityManager：安全管理器，也就是说所有与安全有关的操作都会与SecurityManager进行交互，而且他管理着Subject，它其实是Shiro的核心 是Shiro架构的心脏。并作为一种“保护伞”对象来协调内部的安全组件共同构成一个对象图。\n\nRealms： 域，Shiro从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作；可以把Realm看成DataSource，即安全数据源。\n\n当配置Shiro时，你必须指定至少一个Realm用来进行身份验证和/或授权。SecurityManager可能配置多个Realms，但至少有一个是必须的。\n\n![](Shiro框架原理及简单使用/1.png)\n\n**我们看一下它具体的登录图解**\n\n**![](Shiro框架原理及简单使用/2.png)**\n\n****\n\n**1、登陆操作 携带用户名密码给subject，subject调用自己的登陆方法传递用户名和密码给权限管理器，权限管理器将用户名密码传递给开发人员编写的realm的认证方法，realm根据用户名到数据库中查找是否存在该用户，若存在将认证信息存入到session中**\n\n**2、权限管理器会自动判断传递的密码与正确密码是否一致**\n\n**3、访问3类资源（页面） 过滤器寻找权限管理器判断该用户是否拥有xxx权限，权限管理器从session中取出认证信息对象，返回给realm，realm判断该用户拥有什么权限，封装到授权信息中返回给权限管理器，权限管理器将判断的结果返回给过滤器**\n\n**4、访问3类资源（xxx添加需要访问service）（对于过滤器来说属于2类资源），在执行方法时，会到达前置通知（esrvice方法上添加注解@RequiresPermissions(\"courier:list\")），权限通知寻找权限管理器判断该用户是否拥有xxx权限，权限管理器从session中取出认证信息对象，返回给realm，realm判断该用户拥有什么权限，封装到授权信息中返回给权限管理器，权限管理器将判断的结果返回给权限通知**\n\n**其实简单来说 /userAction_login ---------->请求先到达权限过滤器shiroFilter，先判断是几类资源**\n\n**登录属于一类资源直接放行到——------>userActon中（userAction中调用执行subject对象（使用入口是一个操作入口对象，里面有登陆方法，登出方法，获取当前对象方法）的登陆方法subject.login方法（携带着用户名，密码）**\n\n**————>subject对象调用 securityManager的login方法 权限管理器不能判断用户和密码是对的需要**\n\n**————>ream认证|授权器（开发人员编写，判断用户名是否存在，拥有什么权限）————>处理完后把认证信息对象返回给securityManager（）如果认证信息没有问题，权限管理器会把认证信息存入session（证明认证登陆过了）**\n\n**可以自定义一个Realm；**\n\n```java\npublic class LoginRelam extends AuthorizingRealm {\n\n    @Autowired\n    private UserDao userDao;\n\n    @Override\n    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {\n        return null;\n    }\n\n    @Override\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\n        UsernamePasswordToken upToken = (UsernamePasswordToken) authenticationToken;\n        String username = upToken.getUsername();\n        User user = userDao.QueryUser(username);\n        if(user == null){\n            throw new UnknownAccountException(\"不存在用户名\");\n        }\n        return new SimpleAuthenticationInfo(user.getUsername(),user.getPassword(),getName());\n    }\n}\n```\n\n**登陆完以后访问页面资源（页面资源属于三类资源需要权限），**\n\n**shiroFilter（已经配置了哪些资源是一类哪些资源是三类）**\n\n**————>访问权限管理器，找权限管理器判断是否有xxx权限（权限管理器本身不能做出判断），权限管理器把之前登陆时保存在session中的认证信息取出**\n\n**交给————>realm判断(realm中认证方法是登陆时候调用的)，realm查询数据库获得权限，把权限信息返还给————>权限管理器。**\n\n**权限管理器根据realm的授权信息判断是否拥有xxx权限， 判断后把结果通知给————>权限管理器，权限管理器ShiraFilter 如果没有权限跳转到响应页面。**\n\n## Shiro集成Spring\n\n- 导入jar包（shiro的jar有很多，针对不同的项目导入不同的jar包，但是为了防止第一次学习的时候出错，所有使用的是shiro-all-版本号.jar的jar包）；\n\n**步骤一： 在web.xml中配置一个过滤器，是由spring提供的，用于整合shiro：** \n**web.xml文件（一定要注意配置shiro框架以及Spring，Struts之间的顺序问题，否则报错！**\n\n```xml\n<!DOCTYPE web-app PUBLIC\n        \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n        \"http://java.sun.com/dtd/web-app_2_3.dtd\" >\n\n<web-app>\n    <display-name>Archetype Created Web Application</display-name>\n\n    <!-- 配置前端控制器：服务器启动必须加载，需要加载springmvc.xml配置文件 -->\n    <servlet>\n        <servlet-name>dispatcherServlet</servlet-name>\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet\n        </servlet-class>        <!-- 配置初始化参数，创建完DispatcherServlet对象，加载springmvc.xml配置文件 -->\n        <init-param>\n            <param-name>contextConfigLocation</param-name>\n            <param-value>classpath:springmvc.xml</param-value>\n        </init-param>        <!-- 服务器启动的时候，让DispatcherServlet对象创建 -->\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>dispatcherServlet</servlet-name>\n        <url-pattern>/</url-pattern>\n    </servlet-mapping>\n\n    <!-- 配置Spring的监听器 -->\n    <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>    <!-- 配置加载类路径的配置文件 -->\n    <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>classpath:applicationContext.xml</param-value>\n    </context-param>\n    <!-- 配置解决中文乱码的过滤器 -->\n    <filter>\n        <filter-name>characterEncodingFilter</filter-name>\n        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n        <init-param>\n            <param-name>encoding</param-name>\n            <param-value>UTF-8</param-value>\n        </init-param>\n    </filter>\n    <filter-mapping>\n        <filter-name>characterEncodingFilter</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n    <!-- 配置Shiro-->\n    <filter>\n        <filter-name>shiroFilter</filter-name>\n        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n        <init-param>\n            <param-name>targetFilterLifecycle</param-name>\n            <param-value>true</param-value>\n        </init-param>\n    </filter>\n    <filter-mapping>\n        <filter-name>shiroFilter</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n</web-app>\n```\n\n**步骤二： 在applicationContext.xml中配置bean，ID必须为shiroFilter：**\n\n**applicationContext.xml文件配置**\n**shiro 框架由于大量的使用了代理模式，所以在使用的过程中如果配置不当，可能会出现问题，另外在使用注解开发时候尽量的使用Spring的注解，不要使用JDK自带的原生注解，减少出错的几率**\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:task=\"http://www.springframework.org/schema/task\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n          http://www.springframework.org/schema/beans/spring-beans.xsd\n           http://www.springframework.org/schema/context\n           http://www.springframework.org/schema/context/spring-context.xsd\n            http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd\">\n    <!-- 开启注解扫描，要扫描的是service和dao层的注解，要忽略web层注解，因为web层让SpringMVC框架 去管理 -->\n    <context:component-scan base-package=\"cqu\">        <!-- 配置要忽略的注解 -->\n        <context:exclude-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\"/>\n    </context:component-scan>\n    <!--\n    1. 配置 SecurityManager!\n    -->\n    <bean id=\"securityManager\" class=\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\">\n        <property name=\"cacheManager\" ref=\"cacheManager\"/>\n        <property name=\"realm\" ref=\"loginRealm\"/>\n    </bean>\n    <!--\n    2. 配置 CacheManager.\n    2.1 需要加入 ehcache 的 jar 包及配置文件.\n    -->\n    <bean id=\"cacheManager\" class=\"org.apache.shiro.cache.ehcache.EhCacheManager\">\n        <property name=\"cacheManagerConfigFile\" value=\"classpath:ehcache.xml\"/>\n    </bean>\n\n    <!-- 配置C3P0的连接池对象 -->\n    <bean id=\"dataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n        <property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\"/>\n        <property name=\"url\" value=\"jdbc:mysql:///ssm\"/>\n        <property name=\"username\" value=\"root\"/>\n        <property name=\"password\" value=\"root\"/>\n    </bean>\n    <!--\n    3. 配置 Realm\n    3.1 直接配置实现了 org.apache.shiro.realm.Realm 接口的 bean\n    -->\n    <bean id=\"loginRealm\" class=\"cqu.controller.LoginRelam\"></bean>\n    <!--\n  4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法.\n    -->\n    <bean id=\"lifecycleBeanPostProcessor\" class=\"org.apache.shiro.spring.LifecycleBeanPostProcessor\"/>\n    <!--\n    5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用.\n    -->\n    <bean class=\"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator\"\n          depends-on=\"lifecycleBeanPostProcessor\"/>\n    <bean class=\"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor\">\n        <property name=\"securityManager\" ref=\"securityManager\"/>\n    </bean>\n\n    <!--\n    6. 配置 ShiroFilter.\n    6.1 id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 <filter-name> 一致.\n                      若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 IOC 容器中查找和 <filter-name> 名字对应的 filter bean.\n    -->\n    <bean id=\"shiroFilter\" class=\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\">\n        <property name=\"securityManager\" ref=\"securityManager\"/>\n        <property name=\"loginUrl\" value=\"/index.jsp\"/>\n        <property name=\"successUrl\" value=\"/list.jsp\"/>\n        <property name=\"unauthorizedUrl\" value=\"/unauthorized.jsp\"/>\n        <!--\n        \t配置哪些页面需要受保护.\n        \t以及访问这些页面需要的权限.\n        \t1). anon 可以被匿名访问\n        \t2). authc 必须认证(即登录)后才可能访问的页面.\n        \t3). logout 登出.\n        \t4). roles 角色过滤器\n        -->\n        <property name=\"filterChainDefinitions\">\n            <value>\n                /index.jsp = anon\n                /css/** = anon\n                /js/** = anon\n                /images/** = anon\n                /media/** = anon\n                /res/** = anon\n                /index.css = anon\n                # everything else requires authentication:\n                /* = authc\n            </value>\n        </property>\n    </bean>\n\n    <!-- 配置SqlSession的工厂 -->\n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n    </bean>        <!-- 配置扫描dao的包 -->\n    <bean id=\"mapperScanner\" class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n        <property name=\"basePackage\" value=\"cqu.dao\"/>\n    </bean>\n\n    <bean id=\"taskExecutor\" class=\"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor\">\n        <!-- 核心线程数 -->\n        <property name=\"corePoolSize\" value=\"5\" />\n        <!-- 最大线程数 -->\n        <property name=\"maxPoolSize\" value=\"10\" />\n        <!-- 队列最大长度 -->\n        <property name=\"queueCapacity\" value=\"20\" />\n        <!-- 线程池维护线程所允许的空闲时间，默认为60s -->\n        <property name=\"keepAliveSeconds\" value=\"60\" />\n    </bean>\n    <!-- 注解式 -->\n    <task:annotation-driven />\n</beans>\n```\n\n**步骤三： 登录系统使用shrio框架管理，修改Action中login方法：**\n\n```java\n Subject currentUser = SecurityUtils.getSubject();\n if(!currentUser.isAuthenticated()){\n \tUsernamePasswordToken token = new UsernamePasswordToken(username, password);\n \ttoken.setRememberMe(true);\n try {\n \tcurrentUser.login(token);\n } catch (AuthenticationException e) {\n \treturn null;\n }\n}\n```\n\n**步骤四： 开发属于自己的realm类：**\n\n```java\npublic class LoginRelam extends AuthorizingRealm {\n\n    @Autowired\n    private UserDao userDao;\n\n    @Override\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\n        UsernamePasswordToken upToken = (UsernamePasswordToken) authenticationToken;\n        String username = upToken.getUsername();\n        User user = userDao.QueryUser(username);\n        if(user == null){\n            throw new UnknownAccountException(\"不存在用户名\");\n        }\n        return new SimpleAuthenticationInfo(user.getUsername(),user.getPassword(),getName());\n    }\n}\n```\n\n\n\n## 总结\n\n**Shiro是一个功能很齐全的框架，使用起来也很容易，总结一下 三大核心内容：**\n\n**1.Subject2.SecurityManager3.Realms**\n\n**Shiro 功能强大、且 简单、灵活。是Apache 下的项目比较可靠，且不跟任何的框架或者容器绑定，可以独立运行(JavaSE环境也可以使用)**","source":"_posts/Shiro框架原理及简单使用.md","raw":"---\ntitle: Shiro框架原理及简单使用\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-02-04 22:41:47\npassword:\nsummary:\ntags:\ncategories: java\n---\n\n## **Shiro是什么？**\n\nApache Shiro是Java的一个安全框架，一个强大而灵活的开源安全框架，它干净利落地处理身份认证，授权，企业会话管理和加密。\n\n目前，使用Apache Shiro的人越来越多，因为它相当简单，对比Spring Security，可能没有Spring Security做的功能强大，但是在实际工作时可能并不需要那么复杂的东西，所以使用小而简单的Shiro就足够了。\n\n功能:1.验证用户来核实他们的身份2.对用户执行访问控制\n\n我们可以看一下Apache官网上对Shiro，它都包含哪些功能。\n\n![](Shiro框架原理及简单使用/3.png)\n\nAuthentication：认证，有时也简称为“登录”，这是一个证明用户是他们所说的他们是谁的行为。\n\nAuthorization：授权，访问控制的过程，也就是决定“谁”去访问“什么” 授权用于回答安全问题，例如“用户是否允许编辑帐户”，“该用户是否允许查看此网页”，“该用户是否可以访问”到这个按钮？“这些都是决定用户有权访问的决定，因此都代表授权检查。\n\nCryptography：密码术是通过隐藏信息或将其转换为无意义来保护信息免受不良访问的做法，因此没有其他人可以阅读它。Shiro专注于密码学的两个核心要素：使用公钥或私钥加密数据的密码，以及对密码等数据进行不可逆转加密的哈希（也称为消息摘要）。\n\nShiro Cryptography的主要目标是采用传统上非常复杂的领域，并在提供强大的密码学功能的同时使其他人轻松实现。\n\nSession Management：Session会话，会话是您的用户在使用您的应用程序时携带一段时间的数据桶。传统上，会话专用于Web或EJB环境。不再！Shiro支持任何应用程序环境的会话。此外，Shiro还提供许多其他强大功能来帮助您管理会话。\n\nWeb Support：Shiro的web支持的API能够轻松地帮助保护 Web 应用程序。主要就是用来对Web程序进行一个好的支持的。\n\nCaching：缓存，他是Apache Shiro中的第一层公民，来确保安全操作快速而又高效。\n\nConcurrency：shiro利用它的并发特性来支持多线程应用程序。\n\nTesting：测试支持的存在来帮助你编写单元测试和集成测试，并确保你的能够如预期的一样安全。\n\n\"Run As\"：其实这个就是有是有允许一个用户假设为另外一个用户身份的功能，有时候在管理脚本的时候很有效果。\n\nRemember Me：在会话中记住用户的身份，所以他们只需要在强制时候登录。\n\n## Shiro核心\n\nShiro其实是有三大核心组件的，Subject、SecurityManager和Realms。\n\nSubject：Subject实质上是一个当前执行用户的特定的安全“视图”。鉴于\"User\"一词通常意味着一个人，而一个Subject可以是一个人， 但它还可以代表第三方服务，daemon account，cron job，或其他类似的任何东西——基本上是当前正与软件进行交互的任何东西。 \n\n所有Subject实例都被绑定到（且这是必须的）一个SecurityManager上。当你与一个Subject交互时，那些交互作用转化为与SecurityManager交互的特定subject的交互作用。 我们可以把Subject认为是一个门面，SecurityManager才是真正的执行者。\n\nSecurityManager：安全管理器，也就是说所有与安全有关的操作都会与SecurityManager进行交互，而且他管理着Subject，它其实是Shiro的核心 是Shiro架构的心脏。并作为一种“保护伞”对象来协调内部的安全组件共同构成一个对象图。\n\nRealms： 域，Shiro从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作；可以把Realm看成DataSource，即安全数据源。\n\n当配置Shiro时，你必须指定至少一个Realm用来进行身份验证和/或授权。SecurityManager可能配置多个Realms，但至少有一个是必须的。\n\n![](Shiro框架原理及简单使用/1.png)\n\n**我们看一下它具体的登录图解**\n\n**![](Shiro框架原理及简单使用/2.png)**\n\n****\n\n**1、登陆操作 携带用户名密码给subject，subject调用自己的登陆方法传递用户名和密码给权限管理器，权限管理器将用户名密码传递给开发人员编写的realm的认证方法，realm根据用户名到数据库中查找是否存在该用户，若存在将认证信息存入到session中**\n\n**2、权限管理器会自动判断传递的密码与正确密码是否一致**\n\n**3、访问3类资源（页面） 过滤器寻找权限管理器判断该用户是否拥有xxx权限，权限管理器从session中取出认证信息对象，返回给realm，realm判断该用户拥有什么权限，封装到授权信息中返回给权限管理器，权限管理器将判断的结果返回给过滤器**\n\n**4、访问3类资源（xxx添加需要访问service）（对于过滤器来说属于2类资源），在执行方法时，会到达前置通知（esrvice方法上添加注解@RequiresPermissions(\"courier:list\")），权限通知寻找权限管理器判断该用户是否拥有xxx权限，权限管理器从session中取出认证信息对象，返回给realm，realm判断该用户拥有什么权限，封装到授权信息中返回给权限管理器，权限管理器将判断的结果返回给权限通知**\n\n**其实简单来说 /userAction_login ---------->请求先到达权限过滤器shiroFilter，先判断是几类资源**\n\n**登录属于一类资源直接放行到——------>userActon中（userAction中调用执行subject对象（使用入口是一个操作入口对象，里面有登陆方法，登出方法，获取当前对象方法）的登陆方法subject.login方法（携带着用户名，密码）**\n\n**————>subject对象调用 securityManager的login方法 权限管理器不能判断用户和密码是对的需要**\n\n**————>ream认证|授权器（开发人员编写，判断用户名是否存在，拥有什么权限）————>处理完后把认证信息对象返回给securityManager（）如果认证信息没有问题，权限管理器会把认证信息存入session（证明认证登陆过了）**\n\n**可以自定义一个Realm；**\n\n```java\npublic class LoginRelam extends AuthorizingRealm {\n\n    @Autowired\n    private UserDao userDao;\n\n    @Override\n    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {\n        return null;\n    }\n\n    @Override\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\n        UsernamePasswordToken upToken = (UsernamePasswordToken) authenticationToken;\n        String username = upToken.getUsername();\n        User user = userDao.QueryUser(username);\n        if(user == null){\n            throw new UnknownAccountException(\"不存在用户名\");\n        }\n        return new SimpleAuthenticationInfo(user.getUsername(),user.getPassword(),getName());\n    }\n}\n```\n\n**登陆完以后访问页面资源（页面资源属于三类资源需要权限），**\n\n**shiroFilter（已经配置了哪些资源是一类哪些资源是三类）**\n\n**————>访问权限管理器，找权限管理器判断是否有xxx权限（权限管理器本身不能做出判断），权限管理器把之前登陆时保存在session中的认证信息取出**\n\n**交给————>realm判断(realm中认证方法是登陆时候调用的)，realm查询数据库获得权限，把权限信息返还给————>权限管理器。**\n\n**权限管理器根据realm的授权信息判断是否拥有xxx权限， 判断后把结果通知给————>权限管理器，权限管理器ShiraFilter 如果没有权限跳转到响应页面。**\n\n## Shiro集成Spring\n\n- 导入jar包（shiro的jar有很多，针对不同的项目导入不同的jar包，但是为了防止第一次学习的时候出错，所有使用的是shiro-all-版本号.jar的jar包）；\n\n**步骤一： 在web.xml中配置一个过滤器，是由spring提供的，用于整合shiro：** \n**web.xml文件（一定要注意配置shiro框架以及Spring，Struts之间的顺序问题，否则报错！**\n\n```xml\n<!DOCTYPE web-app PUBLIC\n        \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n        \"http://java.sun.com/dtd/web-app_2_3.dtd\" >\n\n<web-app>\n    <display-name>Archetype Created Web Application</display-name>\n\n    <!-- 配置前端控制器：服务器启动必须加载，需要加载springmvc.xml配置文件 -->\n    <servlet>\n        <servlet-name>dispatcherServlet</servlet-name>\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet\n        </servlet-class>        <!-- 配置初始化参数，创建完DispatcherServlet对象，加载springmvc.xml配置文件 -->\n        <init-param>\n            <param-name>contextConfigLocation</param-name>\n            <param-value>classpath:springmvc.xml</param-value>\n        </init-param>        <!-- 服务器启动的时候，让DispatcherServlet对象创建 -->\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n    <servlet-mapping>\n        <servlet-name>dispatcherServlet</servlet-name>\n        <url-pattern>/</url-pattern>\n    </servlet-mapping>\n\n    <!-- 配置Spring的监听器 -->\n    <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>    <!-- 配置加载类路径的配置文件 -->\n    <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>classpath:applicationContext.xml</param-value>\n    </context-param>\n    <!-- 配置解决中文乱码的过滤器 -->\n    <filter>\n        <filter-name>characterEncodingFilter</filter-name>\n        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n        <init-param>\n            <param-name>encoding</param-name>\n            <param-value>UTF-8</param-value>\n        </init-param>\n    </filter>\n    <filter-mapping>\n        <filter-name>characterEncodingFilter</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n    <!-- 配置Shiro-->\n    <filter>\n        <filter-name>shiroFilter</filter-name>\n        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n        <init-param>\n            <param-name>targetFilterLifecycle</param-name>\n            <param-value>true</param-value>\n        </init-param>\n    </filter>\n    <filter-mapping>\n        <filter-name>shiroFilter</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n</web-app>\n```\n\n**步骤二： 在applicationContext.xml中配置bean，ID必须为shiroFilter：**\n\n**applicationContext.xml文件配置**\n**shiro 框架由于大量的使用了代理模式，所以在使用的过程中如果配置不当，可能会出现问题，另外在使用注解开发时候尽量的使用Spring的注解，不要使用JDK自带的原生注解，减少出错的几率**\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:task=\"http://www.springframework.org/schema/task\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n          http://www.springframework.org/schema/beans/spring-beans.xsd\n           http://www.springframework.org/schema/context\n           http://www.springframework.org/schema/context/spring-context.xsd\n            http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd\">\n    <!-- 开启注解扫描，要扫描的是service和dao层的注解，要忽略web层注解，因为web层让SpringMVC框架 去管理 -->\n    <context:component-scan base-package=\"cqu\">        <!-- 配置要忽略的注解 -->\n        <context:exclude-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\"/>\n    </context:component-scan>\n    <!--\n    1. 配置 SecurityManager!\n    -->\n    <bean id=\"securityManager\" class=\"org.apache.shiro.web.mgt.DefaultWebSecurityManager\">\n        <property name=\"cacheManager\" ref=\"cacheManager\"/>\n        <property name=\"realm\" ref=\"loginRealm\"/>\n    </bean>\n    <!--\n    2. 配置 CacheManager.\n    2.1 需要加入 ehcache 的 jar 包及配置文件.\n    -->\n    <bean id=\"cacheManager\" class=\"org.apache.shiro.cache.ehcache.EhCacheManager\">\n        <property name=\"cacheManagerConfigFile\" value=\"classpath:ehcache.xml\"/>\n    </bean>\n\n    <!-- 配置C3P0的连接池对象 -->\n    <bean id=\"dataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n        <property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\"/>\n        <property name=\"url\" value=\"jdbc:mysql:///ssm\"/>\n        <property name=\"username\" value=\"root\"/>\n        <property name=\"password\" value=\"root\"/>\n    </bean>\n    <!--\n    3. 配置 Realm\n    3.1 直接配置实现了 org.apache.shiro.realm.Realm 接口的 bean\n    -->\n    <bean id=\"loginRealm\" class=\"cqu.controller.LoginRelam\"></bean>\n    <!--\n  4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法.\n    -->\n    <bean id=\"lifecycleBeanPostProcessor\" class=\"org.apache.shiro.spring.LifecycleBeanPostProcessor\"/>\n    <!--\n    5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用.\n    -->\n    <bean class=\"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator\"\n          depends-on=\"lifecycleBeanPostProcessor\"/>\n    <bean class=\"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor\">\n        <property name=\"securityManager\" ref=\"securityManager\"/>\n    </bean>\n\n    <!--\n    6. 配置 ShiroFilter.\n    6.1 id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 <filter-name> 一致.\n                      若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 IOC 容器中查找和 <filter-name> 名字对应的 filter bean.\n    -->\n    <bean id=\"shiroFilter\" class=\"org.apache.shiro.spring.web.ShiroFilterFactoryBean\">\n        <property name=\"securityManager\" ref=\"securityManager\"/>\n        <property name=\"loginUrl\" value=\"/index.jsp\"/>\n        <property name=\"successUrl\" value=\"/list.jsp\"/>\n        <property name=\"unauthorizedUrl\" value=\"/unauthorized.jsp\"/>\n        <!--\n        \t配置哪些页面需要受保护.\n        \t以及访问这些页面需要的权限.\n        \t1). anon 可以被匿名访问\n        \t2). authc 必须认证(即登录)后才可能访问的页面.\n        \t3). logout 登出.\n        \t4). roles 角色过滤器\n        -->\n        <property name=\"filterChainDefinitions\">\n            <value>\n                /index.jsp = anon\n                /css/** = anon\n                /js/** = anon\n                /images/** = anon\n                /media/** = anon\n                /res/** = anon\n                /index.css = anon\n                # everything else requires authentication:\n                /* = authc\n            </value>\n        </property>\n    </bean>\n\n    <!-- 配置SqlSession的工厂 -->\n    <bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n        <property name=\"dataSource\" ref=\"dataSource\"/>\n    </bean>        <!-- 配置扫描dao的包 -->\n    <bean id=\"mapperScanner\" class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n        <property name=\"basePackage\" value=\"cqu.dao\"/>\n    </bean>\n\n    <bean id=\"taskExecutor\" class=\"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor\">\n        <!-- 核心线程数 -->\n        <property name=\"corePoolSize\" value=\"5\" />\n        <!-- 最大线程数 -->\n        <property name=\"maxPoolSize\" value=\"10\" />\n        <!-- 队列最大长度 -->\n        <property name=\"queueCapacity\" value=\"20\" />\n        <!-- 线程池维护线程所允许的空闲时间，默认为60s -->\n        <property name=\"keepAliveSeconds\" value=\"60\" />\n    </bean>\n    <!-- 注解式 -->\n    <task:annotation-driven />\n</beans>\n```\n\n**步骤三： 登录系统使用shrio框架管理，修改Action中login方法：**\n\n```java\n Subject currentUser = SecurityUtils.getSubject();\n if(!currentUser.isAuthenticated()){\n \tUsernamePasswordToken token = new UsernamePasswordToken(username, password);\n \ttoken.setRememberMe(true);\n try {\n \tcurrentUser.login(token);\n } catch (AuthenticationException e) {\n \treturn null;\n }\n}\n```\n\n**步骤四： 开发属于自己的realm类：**\n\n```java\npublic class LoginRelam extends AuthorizingRealm {\n\n    @Autowired\n    private UserDao userDao;\n\n    @Override\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\n        UsernamePasswordToken upToken = (UsernamePasswordToken) authenticationToken;\n        String username = upToken.getUsername();\n        User user = userDao.QueryUser(username);\n        if(user == null){\n            throw new UnknownAccountException(\"不存在用户名\");\n        }\n        return new SimpleAuthenticationInfo(user.getUsername(),user.getPassword(),getName());\n    }\n}\n```\n\n\n\n## 总结\n\n**Shiro是一个功能很齐全的框架，使用起来也很容易，总结一下 三大核心内容：**\n\n**1.Subject2.SecurityManager3.Realms**\n\n**Shiro 功能强大、且 简单、灵活。是Apache 下的项目比较可靠，且不跟任何的框架或者容器绑定，可以独立运行(JavaSE环境也可以使用)**","slug":"Shiro框架原理及简单使用","published":1,"updated":"2021-04-29T09:30:26.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mlb60016vkvyxhxtq02k","content":"<h2 id=\"Shiro是什么？\"><a href=\"#Shiro是什么？\" class=\"headerlink\" title=\"Shiro是什么？\"></a><strong>Shiro是什么？</strong></h2><p>Apache Shiro是Java的一个安全框架，一个强大而灵活的开源安全框架，它干净利落地处理身份认证，授权，企业会话管理和加密。</p>\n<p>目前，使用Apache Shiro的人越来越多，因为它相当简单，对比Spring Security，可能没有Spring Security做的功能强大，但是在实际工作时可能并不需要那么复杂的东西，所以使用小而简单的Shiro就足够了。</p>\n<p>功能:1.验证用户来核实他们的身份2.对用户执行访问控制</p>\n<p>我们可以看一下Apache官网上对Shiro，它都包含哪些功能。</p>\n<p><img src=\"/2020/02/04/shiro-kuang-jia-yuan-li-ji-jian-dan-shi-yong/3.png\" alt></p>\n<p>Authentication：认证，有时也简称为“登录”，这是一个证明用户是他们所说的他们是谁的行为。</p>\n<p>Authorization：授权，访问控制的过程，也就是决定“谁”去访问“什么” 授权用于回答安全问题，例如“用户是否允许编辑帐户”，“该用户是否允许查看此网页”，“该用户是否可以访问”到这个按钮？“这些都是决定用户有权访问的决定，因此都代表授权检查。</p>\n<p>Cryptography：密码术是通过隐藏信息或将其转换为无意义来保护信息免受不良访问的做法，因此没有其他人可以阅读它。Shiro专注于密码学的两个核心要素：使用公钥或私钥加密数据的密码，以及对密码等数据进行不可逆转加密的哈希（也称为消息摘要）。</p>\n<p>Shiro Cryptography的主要目标是采用传统上非常复杂的领域，并在提供强大的密码学功能的同时使其他人轻松实现。</p>\n<p>Session Management：Session会话，会话是您的用户在使用您的应用程序时携带一段时间的数据桶。传统上，会话专用于Web或EJB环境。不再！Shiro支持任何应用程序环境的会话。此外，Shiro还提供许多其他强大功能来帮助您管理会话。</p>\n<p>Web Support：Shiro的web支持的API能够轻松地帮助保护 Web 应用程序。主要就是用来对Web程序进行一个好的支持的。</p>\n<p>Caching：缓存，他是Apache Shiro中的第一层公民，来确保安全操作快速而又高效。</p>\n<p>Concurrency：shiro利用它的并发特性来支持多线程应用程序。</p>\n<p>Testing：测试支持的存在来帮助你编写单元测试和集成测试，并确保你的能够如预期的一样安全。</p>\n<p>“Run As”：其实这个就是有是有允许一个用户假设为另外一个用户身份的功能，有时候在管理脚本的时候很有效果。</p>\n<p>Remember Me：在会话中记住用户的身份，所以他们只需要在强制时候登录。</p>\n<h2 id=\"Shiro核心\"><a href=\"#Shiro核心\" class=\"headerlink\" title=\"Shiro核心\"></a>Shiro核心</h2><p>Shiro其实是有三大核心组件的，Subject、SecurityManager和Realms。</p>\n<p>Subject：Subject实质上是一个当前执行用户的特定的安全“视图”。鉴于”User”一词通常意味着一个人，而一个Subject可以是一个人， 但它还可以代表第三方服务，daemon account，cron job，或其他类似的任何东西——基本上是当前正与软件进行交互的任何东西。 </p>\n<p>所有Subject实例都被绑定到（且这是必须的）一个SecurityManager上。当你与一个Subject交互时，那些交互作用转化为与SecurityManager交互的特定subject的交互作用。 我们可以把Subject认为是一个门面，SecurityManager才是真正的执行者。</p>\n<p>SecurityManager：安全管理器，也就是说所有与安全有关的操作都会与SecurityManager进行交互，而且他管理着Subject，它其实是Shiro的核心 是Shiro架构的心脏。并作为一种“保护伞”对象来协调内部的安全组件共同构成一个对象图。</p>\n<p>Realms： 域，Shiro从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作；可以把Realm看成DataSource，即安全数据源。</p>\n<p>当配置Shiro时，你必须指定至少一个Realm用来进行身份验证和/或授权。SecurityManager可能配置多个Realms，但至少有一个是必须的。</p>\n<p><img src=\"/2020/02/04/shiro-kuang-jia-yuan-li-ji-jian-dan-shi-yong/1.png\" alt></p>\n<p><strong>我们看一下它具体的登录图解</strong></p>\n<p><strong><img src=\"/2020/02/04/shiro-kuang-jia-yuan-li-ji-jian-dan-shi-yong/2.png\" alt></strong></p>\n<hr>\n<p><strong>1、登陆操作 携带用户名密码给subject，subject调用自己的登陆方法传递用户名和密码给权限管理器，权限管理器将用户名密码传递给开发人员编写的realm的认证方法，realm根据用户名到数据库中查找是否存在该用户，若存在将认证信息存入到session中</strong></p>\n<p><strong>2、权限管理器会自动判断传递的密码与正确密码是否一致</strong></p>\n<p><strong>3、访问3类资源（页面） 过滤器寻找权限管理器判断该用户是否拥有xxx权限，权限管理器从session中取出认证信息对象，返回给realm，realm判断该用户拥有什么权限，封装到授权信息中返回给权限管理器，权限管理器将判断的结果返回给过滤器</strong></p>\n<p><strong>4、访问3类资源（xxx添加需要访问service）（对于过滤器来说属于2类资源），在执行方法时，会到达前置通知（esrvice方法上添加注解@RequiresPermissions(“courier:list”)），权限通知寻找权限管理器判断该用户是否拥有xxx权限，权限管理器从session中取出认证信息对象，返回给realm，realm判断该用户拥有什么权限，封装到授权信息中返回给权限管理器，权限管理器将判断的结果返回给权限通知</strong></p>\n<p><strong>其实简单来说 /userAction_login ———-&gt;请求先到达权限过滤器shiroFilter，先判断是几类资源</strong></p>\n<p><strong>登录属于一类资源直接放行到————&gt;userActon中（userAction中调用执行subject对象（使用入口是一个操作入口对象，里面有登陆方法，登出方法，获取当前对象方法）的登陆方法subject.login方法（携带着用户名，密码）</strong></p>\n<p><strong>————&gt;subject对象调用 securityManager的login方法 权限管理器不能判断用户和密码是对的需要</strong></p>\n<p><strong>————&gt;ream认证|授权器（开发人员编写，判断用户名是否存在，拥有什么权限）————&gt;处理完后把认证信息对象返回给securityManager（）如果认证信息没有问题，权限管理器会把认证信息存入session（证明认证登陆过了）</strong></p>\n<p><strong>可以自定义一个Realm；</strong></p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginRelam</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AuthorizingRealm</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> UserDao userDao<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> AuthorizationInfo <span class=\"token function\">doGetAuthorizationInfo</span><span class=\"token punctuation\">(</span>PrincipalCollection principalCollection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> AuthenticationInfo <span class=\"token function\">doGetAuthenticationInfo</span><span class=\"token punctuation\">(</span>AuthenticationToken authenticationToken<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> AuthenticationException <span class=\"token punctuation\">{</span>\n        UsernamePasswordToken upToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UsernamePasswordToken<span class=\"token punctuation\">)</span> authenticationToken<span class=\"token punctuation\">;</span>\n        String username <span class=\"token operator\">=</span> upToken<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        User user <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">QueryUser</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnknownAccountException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不存在用户名\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleAuthenticationInfo</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>登陆完以后访问页面资源（页面资源属于三类资源需要权限），</strong></p>\n<p><strong>shiroFilter（已经配置了哪些资源是一类哪些资源是三类）</strong></p>\n<p><strong>————&gt;访问权限管理器，找权限管理器判断是否有xxx权限（权限管理器本身不能做出判断），权限管理器把之前登陆时保存在session中的认证信息取出</strong></p>\n<p><strong>交给————&gt;realm判断(realm中认证方法是登陆时候调用的)，realm查询数据库获得权限，把权限信息返还给————&gt;权限管理器。</strong></p>\n<p><strong>权限管理器根据realm的授权信息判断是否拥有xxx权限， 判断后把结果通知给————&gt;权限管理器，权限管理器ShiraFilter 如果没有权限跳转到响应页面。</strong></p>\n<h2 id=\"Shiro集成Spring\"><a href=\"#Shiro集成Spring\" class=\"headerlink\" title=\"Shiro集成Spring\"></a>Shiro集成Spring</h2><ul>\n<li>导入jar包（shiro的jar有很多，针对不同的项目导入不同的jar包，但是为了防止第一次学习的时候出错，所有使用的是shiro-all-版本号.jar的jar包）；</li>\n</ul>\n<p><strong>步骤一： 在web.xml中配置一个过滤器，是由spring提供的，用于整合shiro：</strong><br><strong>web.xml文件（一定要注意配置shiro框架以及Spring，Struts之间的顺序问题，否则报错！</strong></p>\n<pre class=\"line-numbers language-xml\"><code class=\"language-xml\"><span class=\"token doctype\">&lt;!DOCTYPE web-app PUBLIC\n        \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n        \"http://java.sun.com/dtd/web-app_2_3.dtd\" ></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>web-app</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>display-name</span><span class=\"token punctuation\">></span></span>Archetype Created Web Application<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>display-name</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 配置前端控制器：服务器启动必须加载，需要加载springmvc.xml配置文件 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>dispatcherServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-class</span><span class=\"token punctuation\">></span></span>org.springframework.web.servlet.DispatcherServlet\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-class</span><span class=\"token punctuation\">></span></span>        <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 配置初始化参数，创建完DispatcherServlet对象，加载springmvc.xml配置文件 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>init-param</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-name</span><span class=\"token punctuation\">></span></span>contextConfigLocation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-name</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-value</span><span class=\"token punctuation\">></span></span>classpath:springmvc.xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>init-param</span><span class=\"token punctuation\">></span></span>        <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 服务器启动的时候，让DispatcherServlet对象创建 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>load-on-startup</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>load-on-startup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>dispatcherServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 配置Spring的监听器 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listener</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listener-class</span><span class=\"token punctuation\">></span></span>org.springframework.web.context.ContextLoaderListener<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>listener-class</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>listener</span><span class=\"token punctuation\">></span></span>    <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 配置加载类路径的配置文件 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>context-param</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-name</span><span class=\"token punctuation\">></span></span>contextConfigLocation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-value</span><span class=\"token punctuation\">></span></span>classpath:applicationContext.xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-value</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>context-param</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 配置解决中文乱码的过滤器 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">></span></span>characterEncodingFilter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-class</span><span class=\"token punctuation\">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-class</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>init-param</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-name</span><span class=\"token punctuation\">></span></span>encoding<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-name</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-value</span><span class=\"token punctuation\">></span></span>UTF-8<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>init-param</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-mapping</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">></span></span>characterEncodingFilter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/*<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-mapping</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 配置Shiro--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">></span></span>shiroFilter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-class</span><span class=\"token punctuation\">></span></span>org.springframework.web.filter.DelegatingFilterProxy<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-class</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>init-param</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-name</span><span class=\"token punctuation\">></span></span>targetFilterLifecycle<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-name</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-value</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>init-param</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-mapping</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter-name</span><span class=\"token punctuation\">></span></span>shiroFilter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/*<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter-mapping</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>web-app</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>步骤二： 在applicationContext.xml中配置bean，ID必须为shiroFilter：</strong></p>\n<p><strong>applicationContext.xml文件配置</strong><br><strong>shiro 框架由于大量的使用了代理模式，所以在使用的过程中如果配置不当，可能会出现问题，另外在使用注解开发时候尽量的使用Spring的注解，不要使用JDK自带的原生注解，减少出错的几率</strong></p>\n<pre class=\"line-numbers language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>beans</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>task</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/task<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/context<span class=\"token punctuation\">\"</span></span>\n       <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://www.springframework.org/schema/beans\n          http://www.springframework.org/schema/beans/spring-beans.xsd\n           http://www.springframework.org/schema/context\n           http://www.springframework.org/schema/context/spring-context.xsd\n            http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 开启注解扫描，要扫描的是service和dao层的注解，要忽略web层注解，因为web层让SpringMVC框架 去管理 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>component-scan</span> <span class=\"token attr-name\">base-package</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>cqu<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>        <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 配置要忽略的注解 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">context:</span>exclude-filter</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>annotation<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">expression</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>org.springframework.stereotype.Controller<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">context:</span>component-scan</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!--\n    1. 配置 SecurityManager!\n    --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>securityManager<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>org.apache.shiro.web.mgt.DefaultWebSecurityManager<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>cacheManager<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>cacheManager<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>realm<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>loginRealm<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!--\n    2. 配置 CacheManager.\n    2.1 需要加入 ehcache 的 jar 包及配置文件.\n    --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>cacheManager<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>org.apache.shiro.cache.ehcache.EhCacheManager<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>cacheManagerConfigFile<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>classpath:ehcache.xml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 配置C3P0的连接池对象 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>driverClassName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>com.mysql.jdbc.Driver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>jdbc:mysql:///ssm<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!--\n    3. 配置 Realm\n    3.1 直接配置实现了 org.apache.shiro.realm.Realm 接口的 bean\n    --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>loginRealm<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>cqu.controller.LoginRelam<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!--\n  4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法.\n    --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>lifecycleBeanPostProcessor<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>org.apache.shiro.spring.LifecycleBeanPostProcessor<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!--\n    5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用.\n    --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator<span class=\"token punctuation\">\"</span></span>\n          <span class=\"token attr-name\">depends-on</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>lifecycleBeanPostProcessor<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>securityManager<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>securityManager<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!--\n    6. 配置 ShiroFilter.\n    6.1 id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 &lt;filter-name> 一致.\n                      若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 IOC 容器中查找和 &lt;filter-name> 名字对应的 filter bean.\n    --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>shiroFilter<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>org.apache.shiro.spring.web.ShiroFilterFactoryBean<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>securityManager<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>securityManager<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>loginUrl<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/index.jsp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>successUrl<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/list.jsp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>unauthorizedUrl<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/unauthorized.jsp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!--\n            配置哪些页面需要受保护.\n            以及访问这些页面需要的权限.\n            1). anon 可以被匿名访问\n            2). authc 必须认证(即登录)后才可能访问的页面.\n            3). logout 登出.\n            4). roles 角色过滤器\n        --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>filterChainDefinitions<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>\n                /index.jsp = anon\n                /css/** = anon\n                /js/** = anon\n                /images/** = anon\n                /media/** = anon\n                /res/** = anon\n                /index.css = anon\n                # everything else requires authentication:\n                /* = authc\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 配置SqlSession的工厂 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>sqlSessionFactory<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>org.mybatis.spring.SqlSessionFactoryBean<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>        <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 配置扫描dao的包 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>mapperScanner<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>basePackage<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>cqu.dao<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>taskExecutor<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 核心线程数 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>corePoolSize<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 最大线程数 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>maxPoolSize<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>10<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 队列最大长度 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>queueCapacity<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>20<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 线程池维护线程所允许的空闲时间，默认为60s --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>keepAliveSeconds<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>60<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 注解式 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">task:</span>annotation-driven</span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>beans</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>步骤三： 登录系统使用shrio框架管理，修改Action中login方法：</strong></p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"> Subject currentUser <span class=\"token operator\">=</span> SecurityUtils<span class=\"token punctuation\">.</span><span class=\"token function\">getSubject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>currentUser<span class=\"token punctuation\">.</span><span class=\"token function\">isAuthenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n     UsernamePasswordToken token <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UsernamePasswordToken</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     token<span class=\"token punctuation\">.</span><span class=\"token function\">setRememberMe</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n     currentUser<span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthenticationException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>步骤四： 开发属于自己的realm类：</strong></p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoginRelam</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AuthorizingRealm</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">private</span> UserDao userDao<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> AuthenticationInfo <span class=\"token function\">doGetAuthenticationInfo</span><span class=\"token punctuation\">(</span>AuthenticationToken authenticationToken<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> AuthenticationException <span class=\"token punctuation\">{</span>\n        UsernamePasswordToken upToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>UsernamePasswordToken<span class=\"token punctuation\">)</span> authenticationToken<span class=\"token punctuation\">;</span>\n        String username <span class=\"token operator\">=</span> upToken<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        User user <span class=\"token operator\">=</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">QueryUser</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnknownAccountException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不存在用户名\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleAuthenticationInfo</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getUsername</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getPassword</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>Shiro是一个功能很齐全的框架，使用起来也很容易，总结一下 三大核心内容：</strong></p>\n<p><strong>1.Subject2.SecurityManager3.Realms</strong></p>\n<p><strong>Shiro 功能强大、且 简单、灵活。是Apache 下的项目比较可靠，且不跟任何的框架或者容器绑定，可以独立运行(JavaSE环境也可以使用)</strong></p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h2 id=\"Shiro是什么？\"><a href=\"#Shiro是什么？\" class=\"headerlink\" title=\"Shiro是什么？\"></a><strong>Shiro是什么？</strong></h2><p>Apache Shiro是Java的一个安全框架，一个强大而灵活的开源安全框架，它干净利落地处理身份认证，授权，企业会话管理和加密。</p>\n<p>目前，使用Apache Shiro的人越来越多，因为它相当简单，对比Spring Security，可能没有Spring Security做的功能强大，但是在实际工作时可能并不需要那么复杂的东西，所以使用小而简单的Shiro就足够了。</p>\n<p>功能:1.验证用户来核实他们的身份2.对用户执行访问控制</p>\n<p>我们可以看一下Apache官网上对Shiro，它都包含哪些功能。</p>\n<p><img src=\"/2020/02/04/shiro-kuang-jia-yuan-li-ji-jian-dan-shi-yong/3.png\" alt></p>\n<p>Authentication：认证，有时也简称为“登录”，这是一个证明用户是他们所说的他们是谁的行为。</p>\n<p>Authorization：授权，访问控制的过程，也就是决定“谁”去访问“什么” 授权用于回答安全问题，例如“用户是否允许编辑帐户”，“该用户是否允许查看此网页”，“该用户是否可以访问”到这个按钮？“这些都是决定用户有权访问的决定，因此都代表授权检查。</p>\n<p>Cryptography：密码术是通过隐藏信息或将其转换为无意义来保护信息免受不良访问的做法，因此没有其他人可以阅读它。Shiro专注于密码学的两个核心要素：使用公钥或私钥加密数据的密码，以及对密码等数据进行不可逆转加密的哈希（也称为消息摘要）。</p>\n<p>Shiro Cryptography的主要目标是采用传统上非常复杂的领域，并在提供强大的密码学功能的同时使其他人轻松实现。</p>\n<p>Session Management：Session会话，会话是您的用户在使用您的应用程序时携带一段时间的数据桶。传统上，会话专用于Web或EJB环境。不再！Shiro支持任何应用程序环境的会话。此外，Shiro还提供许多其他强大功能来帮助您管理会话。</p>\n<p>Web Support：Shiro的web支持的API能够轻松地帮助保护 Web 应用程序。主要就是用来对Web程序进行一个好的支持的。</p>\n<p>Caching：缓存，他是Apache Shiro中的第一层公民，来确保安全操作快速而又高效。</p>\n<p>Concurrency：shiro利用它的并发特性来支持多线程应用程序。</p>\n<p>Testing：测试支持的存在来帮助你编写单元测试和集成测试，并确保你的能够如预期的一样安全。</p>\n<p>“Run As”：其实这个就是有是有允许一个用户假设为另外一个用户身份的功能，有时候在管理脚本的时候很有效果。</p>\n<p>Remember Me：在会话中记住用户的身份，所以他们只需要在强制时候登录。</p>\n<h2 id=\"Shiro核心\"><a href=\"#Shiro核心\" class=\"headerlink\" title=\"Shiro核心\"></a>Shiro核心</h2><p>Shiro其实是有三大核心组件的，Subject、SecurityManager和Realms。</p>\n<p>Subject：Subject实质上是一个当前执行用户的特定的安全“视图”。鉴于”User”一词通常意味着一个人，而一个Subject可以是一个人， 但它还可以代表第三方服务，daemon account，cron job，或其他类似的任何东西——基本上是当前正与软件进行交互的任何东西。 </p>\n<p>所有Subject实例都被绑定到（且这是必须的）一个SecurityManager上。当你与一个Subject交互时，那些交互作用转化为与SecurityManager交互的特定subject的交互作用。 我们可以把Subject认为是一个门面，SecurityManager才是真正的执行者。</p>\n<p>SecurityManager：安全管理器，也就是说所有与安全有关的操作都会与SecurityManager进行交互，而且他管理着Subject，它其实是Shiro的核心 是Shiro架构的心脏。并作为一种“保护伞”对象来协调内部的安全组件共同构成一个对象图。</p>\n<p>Realms： 域，Shiro从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么它需要从Realm获取相应的用户进行比较以确定用户身份是否合法；也需要从Realm得到用户相应的角色/权限进行验证用户是否能进行操作；可以把Realm看成DataSource，即安全数据源。</p>\n<p>当配置Shiro时，你必须指定至少一个Realm用来进行身份验证和/或授权。SecurityManager可能配置多个Realms，但至少有一个是必须的。</p>\n<p><img src=\"/2020/02/04/shiro-kuang-jia-yuan-li-ji-jian-dan-shi-yong/1.png\" alt></p>\n<p><strong>我们看一下它具体的登录图解</strong></p>\n<p><strong><img src=\"/2020/02/04/shiro-kuang-jia-yuan-li-ji-jian-dan-shi-yong/2.png\" alt></strong></p>\n<hr>\n<p><strong>1、登陆操作 携带用户名密码给subject，subject调用自己的登陆方法传递用户名和密码给权限管理器，权限管理器将用户名密码传递给开发人员编写的realm的认证方法，realm根据用户名到数据库中查找是否存在该用户，若存在将认证信息存入到session中</strong></p>\n<p><strong>2、权限管理器会自动判断传递的密码与正确密码是否一致</strong></p>\n<p><strong>3、访问3类资源（页面） 过滤器寻找权限管理器判断该用户是否拥有xxx权限，权限管理器从session中取出认证信息对象，返回给realm，realm判断该用户拥有什么权限，封装到授权信息中返回给权限管理器，权限管理器将判断的结果返回给过滤器</strong></p>\n<p><strong>4、访问3类资源（xxx添加需要访问service）（对于过滤器来说属于2类资源），在执行方法时，会到达前置通知（esrvice方法上添加注解@RequiresPermissions(“courier:list”)），权限通知寻找权限管理器判断该用户是否拥有xxx权限，权限管理器从session中取出认证信息对象，返回给realm，realm判断该用户拥有什么权限，封装到授权信息中返回给权限管理器，权限管理器将判断的结果返回给权限通知</strong></p>\n<p><strong>其实简单来说 /userAction_login ———-&gt;请求先到达权限过滤器shiroFilter，先判断是几类资源</strong></p>\n<p><strong>登录属于一类资源直接放行到————&gt;userActon中（userAction中调用执行subject对象（使用入口是一个操作入口对象，里面有登陆方法，登出方法，获取当前对象方法）的登陆方法subject.login方法（携带着用户名，密码）</strong></p>\n<p><strong>————&gt;subject对象调用 securityManager的login方法 权限管理器不能判断用户和密码是对的需要</strong></p>\n<p><strong>————&gt;ream认证|授权器（开发人员编写，判断用户名是否存在，拥有什么权限）————&gt;处理完后把认证信息对象返回给securityManager（）如果认证信息没有问题，权限管理器会把认证信息存入session（证明认证登陆过了）</strong></p>\n<p><strong>可以自定义一个Realm；</strong></p>\n<pre><code class=\"java\">public class LoginRelam extends AuthorizingRealm {\n\n    @Autowired\n    private UserDao userDao;\n\n    @Override\n    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principalCollection) {\n        return null;\n    }\n\n    @Override\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\n        UsernamePasswordToken upToken = (UsernamePasswordToken) authenticationToken;\n        String username = upToken.getUsername();\n        User user = userDao.QueryUser(username);\n        if(user == null){\n            throw new UnknownAccountException(&quot;不存在用户名&quot;);\n        }\n        return new SimpleAuthenticationInfo(user.getUsername(),user.getPassword(),getName());\n    }\n}</code></pre>\n<p><strong>登陆完以后访问页面资源（页面资源属于三类资源需要权限），</strong></p>\n<p><strong>shiroFilter（已经配置了哪些资源是一类哪些资源是三类）</strong></p>\n<p><strong>————&gt;访问权限管理器，找权限管理器判断是否有xxx权限（权限管理器本身不能做出判断），权限管理器把之前登陆时保存在session中的认证信息取出</strong></p>\n<p><strong>交给————&gt;realm判断(realm中认证方法是登陆时候调用的)，realm查询数据库获得权限，把权限信息返还给————&gt;权限管理器。</strong></p>\n<p><strong>权限管理器根据realm的授权信息判断是否拥有xxx权限， 判断后把结果通知给————&gt;权限管理器，权限管理器ShiraFilter 如果没有权限跳转到响应页面。</strong></p>\n<h2 id=\"Shiro集成Spring\"><a href=\"#Shiro集成Spring\" class=\"headerlink\" title=\"Shiro集成Spring\"></a>Shiro集成Spring</h2><ul>\n<li>导入jar包（shiro的jar有很多，针对不同的项目导入不同的jar包，但是为了防止第一次学习的时候出错，所有使用的是shiro-all-版本号.jar的jar包）；</li>\n</ul>\n<p><strong>步骤一： 在web.xml中配置一个过滤器，是由spring提供的，用于整合shiro：</strong><br><strong>web.xml文件（一定要注意配置shiro框架以及Spring，Struts之间的顺序问题，否则报错！</strong></p>\n<pre><code class=\"xml\">&lt;!DOCTYPE web-app PUBLIC\n        &quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;\n        &quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot; &gt;\n\n&lt;web-app&gt;\n    &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;\n\n    &lt;!-- 配置前端控制器：服务器启动必须加载，需要加载springmvc.xml配置文件 --&gt;\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet\n        &lt;/servlet-class&gt;        &lt;!-- 配置初始化参数，创建完DispatcherServlet对象，加载springmvc.xml配置文件 --&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n            &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;\n        &lt;/init-param&gt;        &lt;!-- 服务器启动的时候，让DispatcherServlet对象创建 --&gt;\n        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n    &lt;/servlet&gt;\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n\n    &lt;!-- 配置Spring的监听器 --&gt;\n    &lt;listener&gt;\n        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\n    &lt;/listener&gt;    &lt;!-- 配置加载类路径的配置文件 --&gt;\n    &lt;context-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;\n    &lt;/context-param&gt;\n    &lt;!-- 配置解决中文乱码的过滤器 --&gt;\n    &lt;filter&gt;\n        &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;\n        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;encoding&lt;/param-name&gt;\n            &lt;param-value&gt;UTF-8&lt;/param-value&gt;\n        &lt;/init-param&gt;\n    &lt;/filter&gt;\n    &lt;filter-mapping&gt;\n        &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;\n        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n    &lt;/filter-mapping&gt;\n    &lt;!-- 配置Shiro--&gt;\n    &lt;filter&gt;\n        &lt;filter-name&gt;shiroFilter&lt;/filter-name&gt;\n        &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;targetFilterLifecycle&lt;/param-name&gt;\n            &lt;param-value&gt;true&lt;/param-value&gt;\n        &lt;/init-param&gt;\n    &lt;/filter&gt;\n    &lt;filter-mapping&gt;\n        &lt;filter-name&gt;shiroFilter&lt;/filter-name&gt;\n        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n    &lt;/filter-mapping&gt;\n&lt;/web-app&gt;</code></pre>\n<p><strong>步骤二： 在applicationContext.xml中配置bean，ID必须为shiroFilter：</strong></p>\n<p><strong>applicationContext.xml文件配置</strong><br><strong>shiro 框架由于大量的使用了代理模式，所以在使用的过程中如果配置不当，可能会出现问题，另外在使用注解开发时候尽量的使用Spring的注解，不要使用JDK自带的原生注解，减少出错的几率</strong></p>\n<pre><code class=\"xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n       xmlns:task=&quot;http://www.springframework.org/schema/task&quot;\n       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;\n       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans\n          http://www.springframework.org/schema/beans/spring-beans.xsd\n           http://www.springframework.org/schema/context\n           http://www.springframework.org/schema/context/spring-context.xsd\n            http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd&quot;&gt;\n    &lt;!-- 开启注解扫描，要扫描的是service和dao层的注解，要忽略web层注解，因为web层让SpringMVC框架 去管理 --&gt;\n    &lt;context:component-scan base-package=&quot;cqu&quot;&gt;        &lt;!-- 配置要忽略的注解 --&gt;\n        &lt;context:exclude-filter type=&quot;annotation&quot; expression=&quot;org.springframework.stereotype.Controller&quot;/&gt;\n    &lt;/context:component-scan&gt;\n    &lt;!--\n    1. 配置 SecurityManager!\n    --&gt;\n    &lt;bean id=&quot;securityManager&quot; class=&quot;org.apache.shiro.web.mgt.DefaultWebSecurityManager&quot;&gt;\n        &lt;property name=&quot;cacheManager&quot; ref=&quot;cacheManager&quot;/&gt;\n        &lt;property name=&quot;realm&quot; ref=&quot;loginRealm&quot;/&gt;\n    &lt;/bean&gt;\n    &lt;!--\n    2. 配置 CacheManager.\n    2.1 需要加入 ehcache 的 jar 包及配置文件.\n    --&gt;\n    &lt;bean id=&quot;cacheManager&quot; class=&quot;org.apache.shiro.cache.ehcache.EhCacheManager&quot;&gt;\n        &lt;property name=&quot;cacheManagerConfigFile&quot; value=&quot;classpath:ehcache.xml&quot;/&gt;\n    &lt;/bean&gt;\n\n    &lt;!-- 配置C3P0的连接池对象 --&gt;\n    &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;\n        &lt;property name=&quot;driverClassName&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;\n        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql:///ssm&quot;/&gt;\n        &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;\n        &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;\n    &lt;/bean&gt;\n    &lt;!--\n    3. 配置 Realm\n    3.1 直接配置实现了 org.apache.shiro.realm.Realm 接口的 bean\n    --&gt;\n    &lt;bean id=&quot;loginRealm&quot; class=&quot;cqu.controller.LoginRelam&quot;&gt;&lt;/bean&gt;\n    &lt;!--\n  4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法.\n    --&gt;\n    &lt;bean id=&quot;lifecycleBeanPostProcessor&quot; class=&quot;org.apache.shiro.spring.LifecycleBeanPostProcessor&quot;/&gt;\n    &lt;!--\n    5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用.\n    --&gt;\n    &lt;bean class=&quot;org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator&quot;\n          depends-on=&quot;lifecycleBeanPostProcessor&quot;/&gt;\n    &lt;bean class=&quot;org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor&quot;&gt;\n        &lt;property name=&quot;securityManager&quot; ref=&quot;securityManager&quot;/&gt;\n    &lt;/bean&gt;\n\n    &lt;!--\n    6. 配置 ShiroFilter.\n    6.1 id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 &lt;filter-name&gt; 一致.\n                      若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 IOC 容器中查找和 &lt;filter-name&gt; 名字对应的 filter bean.\n    --&gt;\n    &lt;bean id=&quot;shiroFilter&quot; class=&quot;org.apache.shiro.spring.web.ShiroFilterFactoryBean&quot;&gt;\n        &lt;property name=&quot;securityManager&quot; ref=&quot;securityManager&quot;/&gt;\n        &lt;property name=&quot;loginUrl&quot; value=&quot;/index.jsp&quot;/&gt;\n        &lt;property name=&quot;successUrl&quot; value=&quot;/list.jsp&quot;/&gt;\n        &lt;property name=&quot;unauthorizedUrl&quot; value=&quot;/unauthorized.jsp&quot;/&gt;\n        &lt;!--\n            配置哪些页面需要受保护.\n            以及访问这些页面需要的权限.\n            1). anon 可以被匿名访问\n            2). authc 必须认证(即登录)后才可能访问的页面.\n            3). logout 登出.\n            4). roles 角色过滤器\n        --&gt;\n        &lt;property name=&quot;filterChainDefinitions&quot;&gt;\n            &lt;value&gt;\n                /index.jsp = anon\n                /css/** = anon\n                /js/** = anon\n                /images/** = anon\n                /media/** = anon\n                /res/** = anon\n                /index.css = anon\n                # everything else requires authentication:\n                /* = authc\n            &lt;/value&gt;\n        &lt;/property&gt;\n    &lt;/bean&gt;\n\n    &lt;!-- 配置SqlSession的工厂 --&gt;\n    &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;\n        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;\n    &lt;/bean&gt;        &lt;!-- 配置扫描dao的包 --&gt;\n    &lt;bean id=&quot;mapperScanner&quot; class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;\n        &lt;property name=&quot;basePackage&quot; value=&quot;cqu.dao&quot;/&gt;\n    &lt;/bean&gt;\n\n    &lt;bean id=&quot;taskExecutor&quot; class=&quot;org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor&quot;&gt;\n        &lt;!-- 核心线程数 --&gt;\n        &lt;property name=&quot;corePoolSize&quot; value=&quot;5&quot; /&gt;\n        &lt;!-- 最大线程数 --&gt;\n        &lt;property name=&quot;maxPoolSize&quot; value=&quot;10&quot; /&gt;\n        &lt;!-- 队列最大长度 --&gt;\n        &lt;property name=&quot;queueCapacity&quot; value=&quot;20&quot; /&gt;\n        &lt;!-- 线程池维护线程所允许的空闲时间，默认为60s --&gt;\n        &lt;property name=&quot;keepAliveSeconds&quot; value=&quot;60&quot; /&gt;\n    &lt;/bean&gt;\n    &lt;!-- 注解式 --&gt;\n    &lt;task:annotation-driven /&gt;\n&lt;/beans&gt;</code></pre>\n<p><strong>步骤三： 登录系统使用shrio框架管理，修改Action中login方法：</strong></p>\n<pre><code class=\"java\"> Subject currentUser = SecurityUtils.getSubject();\n if(!currentUser.isAuthenticated()){\n     UsernamePasswordToken token = new UsernamePasswordToken(username, password);\n     token.setRememberMe(true);\n try {\n     currentUser.login(token);\n } catch (AuthenticationException e) {\n     return null;\n }\n}</code></pre>\n<p><strong>步骤四： 开发属于自己的realm类：</strong></p>\n<pre><code class=\"java\">public class LoginRelam extends AuthorizingRealm {\n\n    @Autowired\n    private UserDao userDao;\n\n    @Override\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {\n        UsernamePasswordToken upToken = (UsernamePasswordToken) authenticationToken;\n        String username = upToken.getUsername();\n        User user = userDao.QueryUser(username);\n        if(user == null){\n            throw new UnknownAccountException(&quot;不存在用户名&quot;);\n        }\n        return new SimpleAuthenticationInfo(user.getUsername(),user.getPassword(),getName());\n    }\n}</code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>Shiro是一个功能很齐全的框架，使用起来也很容易，总结一下 三大核心内容：</strong></p>\n<p><strong>1.Subject2.SecurityManager3.Realms</strong></p>\n<p><strong>Shiro 功能强大、且 简单、灵活。是Apache 下的项目比较可靠，且不跟任何的框架或者容器绑定，可以独立运行(JavaSE环境也可以使用)</strong></p>\n"},{"title":"Spark到底好在哪里?","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-16T13:26:35.000Z","password":null,"summary":null,"_content":"\n## Spark简介\n\nApache Spark 是当今最流行的开源大数据处理框架。和人们耳熟能详的 MapReduce 一样，Spark 用于进行分布式、大规模的数据处理，但 Spark 作为 MapReduce 的接任者，提供了更高级的编程接口、更高的性能。除此之外，Spark 不仅能进行常规的批处理计算，还提供了流式计算支持。\n\nApache Spark 诞生于大名鼎鼎的 AMPLab（这里还诞生过 Mesos 和 Alluxio），从创立之初就带有浓厚的学术气质，其设计目标是为各种大数据处理需求提供一个统一的技术栈。如今 Spark 背后的商业公司 Databricks 创始人也是来自 AMPLab 的博士毕业生。\n\nSpark 本身使用 Scala 语言编写，Scala 是一门融合了面向对象与函数式的“双范式”语言，运行在 JVM 之上。Spark 大量使用了它的函数式、即时代码生成等特性。Spark 目前提供了 Java、Scala、Python、R 四种语言的 API，前两者因为同样运行在 JVM 上可以达到更原生的支持。\n\n## MapReduce 的问题所在\n\nHadoop 是大数据处理领域的开创者。严格来说，Hadoop 不只是一个软件，而是一整套生态系统，例如 MapReduce 负责进行分布式计算，而 HDFS 负责存储大量文件。\n\nMapReduce 模型的诞生是大数据处理从无到有的飞跃。但随着技术的进步，对大数据处理的需求也变得越来越复杂，MapReduce 的问题也日渐凸显。通常，我们将 MapReduce 的输入和输出数据保留在 HDFS 上，很多时候，**复杂的 ETL、数据清洗等工作无法用一次 MapReduce 完成，所以需要将多个 MapReduce 过程连接起来**：\n\n![multi-stage-mapreduce](Spark到底好在哪里/1.png)\n\n▲ *上图中只有两个 MapReduce 串联，实际上可能有几十个甚至更多，依赖关系也更复杂。*\n\n这种方式下，**每次中间结果都要写入 HDFS 落盘保存，代价很大**（别忘了，HDFS 的每份数据都需要冗余若干份拷贝）。另外，由于本质上是多次 MapReduce 任务，调度也比较麻烦，实时性无从谈起。\n\n## Spark 与 RDD 模型\n\n针对上面的问题，如果能把中间结果保存在内存里，岂不是快的多？之所以不能这么做，最大的障碍是：分布式系统必须能容忍一定的故障，所谓 fault-tolerance。如果只是放在内存中，一旦某个计算节点宕机，其他节点无法恢复出丢失的数据，只能重启整个计算任务，这对于动辄成百上千节点的集群来说是不可接受的。\n\n一般来说，想做到 fault-tolerance 只有两个方案：要么存储到外部（例如 HDFS），要么拷贝到多个副本。**Spark 大胆地提出了第三种——重算一遍。但是之所以能做到这一点，是依赖于一个额外的假设：所有计算过程都是确定性的（deterministic）。**Spark 借鉴了函数式编程思想，提出了 RDD（Resilient Distributed Datasets），译作“弹性分布式数据集”。\n\n![rdd-example](Spark到底好在哪里/2.png)\n\n**RDD 是一个只读的、分区的（partitioned）数据集合**。RDD 要么来源于不可变的外部文件（例如 HDFS 上的文件），要么由确定的算子由其他 RDD 计算得到。**RDD 通过算子连接构成有向无环图（DAG）**，上图演示了一个简单的例子，其中节点对应 RDD，边对应算子。\n\n回到刚刚的问题，RDD 如何做到 fault-tolerance？很简单，RDD 中的每个分区都能被确定性的计算出来，所以**一旦某个分区丢失了，另一个计算节点可以从它的前继节点出发、用同样的计算过程重算一次，即可得到完全一样的 RDD 分区**。这个过程可以递归的进行下去。\n\n![rdd-example-crash](Spark到底好在哪里/3.png)\n\n▲ *上图演示了 RDD 分区的恢复。为了简洁并没有画出分区，实际上恢复是以分区为单位的。*\n\nSpark 的编程接口和 Java 8 的 Stream 很相似：RDD 作为数据，在多种算子间变换，构成对执行计划 DAG 的描述。最后，一旦遇到类似 `collect()` 这样的输出命令，执行计划会被发往 Spark 集群、开始计算。不难发现，算子分成两类：\n\n- `map()`、`filter()`、`join()` 等算子称为 Transformation，它们输入一个或多个 RDD，输出一个 RDD。\n- `collect()`、`count()`、`save()` 等算子称为 Action，它们通常是将数据收集起来返回；\n\n![spark-rdd-api-example](Spark到底好在哪里/4.png)\n\n▲ *上图的例子用来收集包含“HDFS”关键字的错误日志时间戳。当执行到 collect() 时，右边的执行计划开始运行。*\n\n像之前提到的，RDD 的数据由多个分区（partition）构成，这些分区可以分布在集群的各个机器上，这也就是 RDD 中 “distributed” 的含义。熟悉 DBMS 的同学可以把 RDD 理解为逻辑执行计划，partition 理解为物理执行计划。\n\n此外，RDD 还包含它的每个分区的依赖分区（dependency），以及一个函数指出如何计算出本分区的数据。Spark 的设计者发现，依赖关系依据执行方式的不同可以很自然地分成两种：**窄依赖（Narrow Dependency）和宽依赖（Wide Dependency）**，举例来说：\n\n- `map()`、`filter()` 等算子构成窄依赖：生产的每个分区只依赖父 RDD 中的一个分区。\n- `groupByKey()` 等算子构成宽依赖：生成的每个分区依赖父 RDD 中的多个分区（往往是全部分区）。\n\n![2-kinds-of-dependencies](Spark到底好在哪里/5.png)\n\n▲ *左图展示了宽依赖和窄依赖，其中 Join 算子因为 Join key 分区情况不同二者皆有；右图展示了执行过程，由于宽依赖的存在，执行计划被分成 3 个阶段。*\n\n在执行时，窄依赖可以很容易的按流水线（pipeline）的方式计算：对于每个分区从前到后依次代入各个算子即可。**然而，宽依赖需要等待前继 RDD 中所有分区计算完成；换句话说，宽依赖就像一个栅栏（barrier）会阻塞到之前的所有计算完成。**整个计算过程被宽依赖分割成多个阶段（stage），如上右图所示。\n\n> 了解 MapReduce 的同学可能已经发现，宽依赖本质上就是一个 MapReduce 过程。但是相比 MapReduce 自己写 Map 和 Reduce 函数的编程接口，Spark 的接口要容易的多；并且在 Spark 中，多个阶段的 MapReduce 只需要构造一个 DAG 即可。\n\n## 声明式接口：Spark SQL\n\nSpark 诞生后，大幅简化了 MapReduce 编程模型，但人们并不满足于此。我们知道，**与命令式（imperative）编程相对的是声明式（declarative）编程，前者需要告诉程序怎样得到我需要的结果，后者则是告诉程序我需要的结果是什么**。举例而言：你想知道，各个部门 `<dept_id, dept_name>` 中性别为女 `'female'` 的员工分别有多少？\n\n命令式编程中，你需要编写一个程序。下面给出了一种伪代码实现：\n\n```scala\nemployees = db.getAllEmployees()\ncountByDept = dict() // 统计各部门女生人数 (dept_id -> count)\nfor employee in employees:\n    if (employee.gender == 'female')\n        countByDept[employee.dept_id] += 1\nresults = list() // 加上 dept.name 列\ndepts = db.getAllDepartments()\nfor dept in depts:\n    if (countByDept containsKey dept.id)\n        results.add(row(dept.id, dept.name, countByDept[dept.id]))\nreturn results;\n```\n\n声明式编程中，你只要用关系代数的运算表达出结果：\n\n```scala\nemployees.join(dept, employees.deptId == dept.id)\n         .where(employees.gender == 'female')\n         .groupBy(dept.id, dept.name)\n         .agg()\n```\n\n> 等价地，如果你更熟悉 SQL，也可以写成这样：\n>\n> ```sql\n> SELECT dept.id, dept.name, COUNT(*)\n> FROM employees JOIN dept ON employees.dept_id == dept.id\n> WHERE employees.gender = 'female'\n> GROUP BY dept.id, dept.name\n> ```\n\n显然，声明式的要简洁的多！但声明式编程依赖于执行者产生真正的程序代码，所以除了上面这段程序，还需要把数据模型（即 schema）一并告知执行者。声明式编程最广为人知的形式就是 SQL。\n\nSpark SQL 就是这样一个基于 SQL 的声明式编程接口。**你可以将它看作在 Spark 之上的一层封装，在 RDD 计算模型的基础上，提供了 DataFrame API 以及一个内置的 SQL 执行计划优化器 Catalyst。**\n\n![spark-sql-arch](Spark到底好在哪里/6.png)\n\n▲ *上图黄色部分是 Spark SQL 中新增的部分。*\n\n**DataFrame 就像数据库中的表，除了数据之外它还保存了数据的 schema 信息。**计算中，schema 信息也会经过算子进行相应的变换。DataFrame 的数据是行（row）对象组成的 RDD，对 DataFrame 的操作最终会变成对底层 RDD 的操作。\n\n**Catalyst 是一个内置的 SQL 优化器，负责把用户输入的 SQL 转化成执行计划。**Catelyst 强大之处是它利用了 Scala 提供的代码生成（codegen）机制，物理执行计划经过编译，产出的执行代码效率很高，和直接操作 RDD 的命令式代码几乎没有分别。\n\n![spark-sql-catalyst](Spark到底好在哪里/7.png)\n\n▲ *上图是 Catalyst 的工作流程，与大多数 SQL 优化器一样是一个 Cost-Based Optimizer (CBO)，但最后使用代码生成（codegen）转化成直接对 RDD 的操作。*\n\n## 流计算框架：Spark Streaming\n\n以往，批处理和流计算被看作大数据系统的两个方面。我们常常能看到这样的架构——以 Kafka、Storm 为代表的流计算框架用于实时计算，而 Spark 或 MapReduce 则负责每天、每小时的数据批处理。在 ETL 等场合，这样的设计常常导致同样的计算逻辑被实现两次，耗费人力不说，保证一致性也是个问题。\n\nSpark Streaming 正是诞生于此类需求。传统的流计算框架大多注重于低延迟，采用了持续的（continuous）算子模型；而 Spark Streaming 基于 Spark，另辟蹊径提出了 **D-Stream（Discretized Streams）方案：将流数据切成很小的批（micro-batch），用一系列的短暂、无状态、确定性的批处理实现流处理。**\n\n![spark-streaming](Spark到底好在哪里/8.png)\n\nSpark Streaming 的做法在流计算框架中很有创新性，它虽然牺牲了低延迟（一般流计算能做到 100ms 级别，Spark Streaming 延迟一般为 1s 左右），但是带来了三个诱人的优势：\n\n- 更高的吞吐量（大约是 Storm 的 2-5 倍）\n- 更快速的失败恢复（通常只要 1-2s），因此对于 straggler（性能拖后腿的节点）直接杀掉即可\n- 开发者只需要维护一套 ETL 逻辑即可同时用于批处理和流计算\n\n![continuous-vs-spark-d-stream](Spark到底好在哪里/9.png)\n\n▲ *上左图中，为了在持续算子模型的流计算系统中保证一致性，不得不在主备机之间使用同步机制，导致性能损失，Spark Streaming 完全没有这个问题；右图是 D-Stream 的原理示意图。*\n\n你可能会困惑，流计算中的状态一直是个难题。但我们刚刚提到 D-Stream 方案是无状态的，那诸如 word count 之类的问题，怎么做到保持 count 算子的状态呢？\n\n答案是通过 RDD：**将前一个时间步的 RDD 作为当前时间步的 RDD 的前继节点，就能造成状态不断更替的效果**。实际上，新的状态 RDD 总是不断生成，而旧的 RDD 并不会被“替代”，而是作为新 RDD 的前继依赖。对于底层的 Spark 框架来说，并没有时间步的概念，有的只是不断扩张的 DAG 图和新的 RDD 节点。\n\n![d-stream-state-rdd](Spark到底好在哪里/10.png)\n\n▲ *上图是流式计算 word count 的例子，count 结果在不同时间步中不断累积。*\n\n那么另一个问题也随之而来：随着时间的推进，上图中的状态 RDD `counts` 会越来越多，他的祖先（lineage）变得越来越长，极端情况下，恢复过程可能溯源到很久之前。这是不可接受的！**因此，Spark Streming 会定期地对状态 RDD 做 checkpoint，将其持久化到 HDFS 等存储中，这被称为 lineage cut**，在它之前更早的 RDD 就可以没有顾虑地清理掉了。\n\n## 流计算与 SQL：Spark Structured Streaming\n\nSpark 通过 Spark Streaming 拥有了流计算能力，那 Spark SQL 是否也能具有类似的流处理能力呢？答案是肯定的，只要将**数据流建模成一张不断增长、没有边界的表**，在这样的语义之下，很多 SQL 操作等就能直接应用在流数据上。\n\n> 出人意料的是，Spark Structured Streaming 的流式计算引擎并没有复用 Spark Streaming，而是在 Spark SQL 上设计了新的一套引擎。因此，从 Spark SQL 迁移到 Spark Structured Streaming 十分容易，但从 Spark Streaming 迁移过来就要困难得多。\n\n很自然的，基于这样的模型，Spark SQL 中的大部分接口、实现都得以在 Spark Structured Streaming 中直接复用。将用户的 SQL 执行计划转化成流计算执行计划的过程被称为**增量化**（incrementalize），这一步是由 Spark 框架自动完成的。对于用户来说只要知道：每次计算的输入是某一小段时间的流数据，而输出是对应数据产生的计算结果。\n\n![spark-structured-streaming-mode](Spark到底好在哪里/11.png)\n\n▲ *左图是 Spark Structured Streaming 模型示意图；右图展示了同一个任务的批处理、流计算版本，可以看到，除了输入输出不同，内部计算过程完全相同。*\n\n与 Spark SQL 相比，流式 SQL 计算还有两个额外的特性，分别是窗口（window）和水位（watermark）。\n\n**窗口（window）是对过去某段时间的定义。**批处理中，查询通常是全量的（例如：总用户量是多少）；而流计算中，我们通常关心近期一段时间的数据（例如：最近24小时新增的用户量是多少）。用户通过选用合适的窗口来获得自己所需的计算结果，常见的窗口有滑动窗口（Sliding Window）、滚动窗口（Tumbling Window）等。\n\n**水位（watermark）用来丢弃过早的数据。**在流计算中，上游的输入事件可能存在不确定的延迟，而流计算系统的内存是有限的、只能保存有限的状态，一定时间之后必须丢弃历史数据。以双流 A JOIN B 为例，假设窗口为 1 小时，那么 A 中比当前时间减 1 小时更早的数据（行）会被丢弃；如果 B 中出现 1 小时前的事件，因为无法处理只能忽略。\n\n![spark-structured-streaming-watermark](Spark到底好在哪里/12.png)\n\n▲ *上图为水位的示意图，“迟到”太久的数据（行）由于已经低于当前水位无法处理，将被忽略。*\n\n水位和窗口的概念都是因时间而来。在其他流计算系统中，也存在相同或类似的概念。\n\n> 关于 SQL 的流计算模型，常常被拿来对比的还有另一个流计算框架 [Apache Flink](https://flink.apache.org/)。与 Spark 相比，它们的实现思路有很大不同，但在模型上是很相似的。\n\n## 系统架构\n\nSpark 中有三个角色：Driver, Worker 和 Cluster Manager。\n\n![cluster-overview](Spark到底好在哪里/13.png)\n\n**驱动程序（Driver）**即用户编写的程序，对应一个 `SparkContext`，负责任务的构造、调度、故障恢复等。驱动程序可以直接运行在客户端，例如用户的应用程序中；也可以托管在 Master 上，这被称为集群模式（cluster mode），通常用于流计算等长期任务。\n\n**Cluster Manager** 顾名思义负责集群的资源分配，Spark 自带的 Spark Master 支持任务的资源分配，并包含一个 Web UI 用来监控任务运行状况。多个 Master 可以构成一主多备，通过 ZooKeeper 进行协调和故障恢复。通常 Spark 集群使用 Spark Master 即可，但如果用户的集群中不仅有 Spark 框架、还要承担其他任务，官方推荐使用 Mesos 作为集群调度器。\n\n**Worker** 节点负责执行计算任务，上面保存了 RDD 等数据。","source":"_posts/Spark到底好在哪里.md","raw":"---\ntitle: Spark到底好在哪里?\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-16 21:26:35\npassword:\nsummary:\ntags:\ncategories: 大数据\n---\n\n## Spark简介\n\nApache Spark 是当今最流行的开源大数据处理框架。和人们耳熟能详的 MapReduce 一样，Spark 用于进行分布式、大规模的数据处理，但 Spark 作为 MapReduce 的接任者，提供了更高级的编程接口、更高的性能。除此之外，Spark 不仅能进行常规的批处理计算，还提供了流式计算支持。\n\nApache Spark 诞生于大名鼎鼎的 AMPLab（这里还诞生过 Mesos 和 Alluxio），从创立之初就带有浓厚的学术气质，其设计目标是为各种大数据处理需求提供一个统一的技术栈。如今 Spark 背后的商业公司 Databricks 创始人也是来自 AMPLab 的博士毕业生。\n\nSpark 本身使用 Scala 语言编写，Scala 是一门融合了面向对象与函数式的“双范式”语言，运行在 JVM 之上。Spark 大量使用了它的函数式、即时代码生成等特性。Spark 目前提供了 Java、Scala、Python、R 四种语言的 API，前两者因为同样运行在 JVM 上可以达到更原生的支持。\n\n## MapReduce 的问题所在\n\nHadoop 是大数据处理领域的开创者。严格来说，Hadoop 不只是一个软件，而是一整套生态系统，例如 MapReduce 负责进行分布式计算，而 HDFS 负责存储大量文件。\n\nMapReduce 模型的诞生是大数据处理从无到有的飞跃。但随着技术的进步，对大数据处理的需求也变得越来越复杂，MapReduce 的问题也日渐凸显。通常，我们将 MapReduce 的输入和输出数据保留在 HDFS 上，很多时候，**复杂的 ETL、数据清洗等工作无法用一次 MapReduce 完成，所以需要将多个 MapReduce 过程连接起来**：\n\n![multi-stage-mapreduce](Spark到底好在哪里/1.png)\n\n▲ *上图中只有两个 MapReduce 串联，实际上可能有几十个甚至更多，依赖关系也更复杂。*\n\n这种方式下，**每次中间结果都要写入 HDFS 落盘保存，代价很大**（别忘了，HDFS 的每份数据都需要冗余若干份拷贝）。另外，由于本质上是多次 MapReduce 任务，调度也比较麻烦，实时性无从谈起。\n\n## Spark 与 RDD 模型\n\n针对上面的问题，如果能把中间结果保存在内存里，岂不是快的多？之所以不能这么做，最大的障碍是：分布式系统必须能容忍一定的故障，所谓 fault-tolerance。如果只是放在内存中，一旦某个计算节点宕机，其他节点无法恢复出丢失的数据，只能重启整个计算任务，这对于动辄成百上千节点的集群来说是不可接受的。\n\n一般来说，想做到 fault-tolerance 只有两个方案：要么存储到外部（例如 HDFS），要么拷贝到多个副本。**Spark 大胆地提出了第三种——重算一遍。但是之所以能做到这一点，是依赖于一个额外的假设：所有计算过程都是确定性的（deterministic）。**Spark 借鉴了函数式编程思想，提出了 RDD（Resilient Distributed Datasets），译作“弹性分布式数据集”。\n\n![rdd-example](Spark到底好在哪里/2.png)\n\n**RDD 是一个只读的、分区的（partitioned）数据集合**。RDD 要么来源于不可变的外部文件（例如 HDFS 上的文件），要么由确定的算子由其他 RDD 计算得到。**RDD 通过算子连接构成有向无环图（DAG）**，上图演示了一个简单的例子，其中节点对应 RDD，边对应算子。\n\n回到刚刚的问题，RDD 如何做到 fault-tolerance？很简单，RDD 中的每个分区都能被确定性的计算出来，所以**一旦某个分区丢失了，另一个计算节点可以从它的前继节点出发、用同样的计算过程重算一次，即可得到完全一样的 RDD 分区**。这个过程可以递归的进行下去。\n\n![rdd-example-crash](Spark到底好在哪里/3.png)\n\n▲ *上图演示了 RDD 分区的恢复。为了简洁并没有画出分区，实际上恢复是以分区为单位的。*\n\nSpark 的编程接口和 Java 8 的 Stream 很相似：RDD 作为数据，在多种算子间变换，构成对执行计划 DAG 的描述。最后，一旦遇到类似 `collect()` 这样的输出命令，执行计划会被发往 Spark 集群、开始计算。不难发现，算子分成两类：\n\n- `map()`、`filter()`、`join()` 等算子称为 Transformation，它们输入一个或多个 RDD，输出一个 RDD。\n- `collect()`、`count()`、`save()` 等算子称为 Action，它们通常是将数据收集起来返回；\n\n![spark-rdd-api-example](Spark到底好在哪里/4.png)\n\n▲ *上图的例子用来收集包含“HDFS”关键字的错误日志时间戳。当执行到 collect() 时，右边的执行计划开始运行。*\n\n像之前提到的，RDD 的数据由多个分区（partition）构成，这些分区可以分布在集群的各个机器上，这也就是 RDD 中 “distributed” 的含义。熟悉 DBMS 的同学可以把 RDD 理解为逻辑执行计划，partition 理解为物理执行计划。\n\n此外，RDD 还包含它的每个分区的依赖分区（dependency），以及一个函数指出如何计算出本分区的数据。Spark 的设计者发现，依赖关系依据执行方式的不同可以很自然地分成两种：**窄依赖（Narrow Dependency）和宽依赖（Wide Dependency）**，举例来说：\n\n- `map()`、`filter()` 等算子构成窄依赖：生产的每个分区只依赖父 RDD 中的一个分区。\n- `groupByKey()` 等算子构成宽依赖：生成的每个分区依赖父 RDD 中的多个分区（往往是全部分区）。\n\n![2-kinds-of-dependencies](Spark到底好在哪里/5.png)\n\n▲ *左图展示了宽依赖和窄依赖，其中 Join 算子因为 Join key 分区情况不同二者皆有；右图展示了执行过程，由于宽依赖的存在，执行计划被分成 3 个阶段。*\n\n在执行时，窄依赖可以很容易的按流水线（pipeline）的方式计算：对于每个分区从前到后依次代入各个算子即可。**然而，宽依赖需要等待前继 RDD 中所有分区计算完成；换句话说，宽依赖就像一个栅栏（barrier）会阻塞到之前的所有计算完成。**整个计算过程被宽依赖分割成多个阶段（stage），如上右图所示。\n\n> 了解 MapReduce 的同学可能已经发现，宽依赖本质上就是一个 MapReduce 过程。但是相比 MapReduce 自己写 Map 和 Reduce 函数的编程接口，Spark 的接口要容易的多；并且在 Spark 中，多个阶段的 MapReduce 只需要构造一个 DAG 即可。\n\n## 声明式接口：Spark SQL\n\nSpark 诞生后，大幅简化了 MapReduce 编程模型，但人们并不满足于此。我们知道，**与命令式（imperative）编程相对的是声明式（declarative）编程，前者需要告诉程序怎样得到我需要的结果，后者则是告诉程序我需要的结果是什么**。举例而言：你想知道，各个部门 `<dept_id, dept_name>` 中性别为女 `'female'` 的员工分别有多少？\n\n命令式编程中，你需要编写一个程序。下面给出了一种伪代码实现：\n\n```scala\nemployees = db.getAllEmployees()\ncountByDept = dict() // 统计各部门女生人数 (dept_id -> count)\nfor employee in employees:\n    if (employee.gender == 'female')\n        countByDept[employee.dept_id] += 1\nresults = list() // 加上 dept.name 列\ndepts = db.getAllDepartments()\nfor dept in depts:\n    if (countByDept containsKey dept.id)\n        results.add(row(dept.id, dept.name, countByDept[dept.id]))\nreturn results;\n```\n\n声明式编程中，你只要用关系代数的运算表达出结果：\n\n```scala\nemployees.join(dept, employees.deptId == dept.id)\n         .where(employees.gender == 'female')\n         .groupBy(dept.id, dept.name)\n         .agg()\n```\n\n> 等价地，如果你更熟悉 SQL，也可以写成这样：\n>\n> ```sql\n> SELECT dept.id, dept.name, COUNT(*)\n> FROM employees JOIN dept ON employees.dept_id == dept.id\n> WHERE employees.gender = 'female'\n> GROUP BY dept.id, dept.name\n> ```\n\n显然，声明式的要简洁的多！但声明式编程依赖于执行者产生真正的程序代码，所以除了上面这段程序，还需要把数据模型（即 schema）一并告知执行者。声明式编程最广为人知的形式就是 SQL。\n\nSpark SQL 就是这样一个基于 SQL 的声明式编程接口。**你可以将它看作在 Spark 之上的一层封装，在 RDD 计算模型的基础上，提供了 DataFrame API 以及一个内置的 SQL 执行计划优化器 Catalyst。**\n\n![spark-sql-arch](Spark到底好在哪里/6.png)\n\n▲ *上图黄色部分是 Spark SQL 中新增的部分。*\n\n**DataFrame 就像数据库中的表，除了数据之外它还保存了数据的 schema 信息。**计算中，schema 信息也会经过算子进行相应的变换。DataFrame 的数据是行（row）对象组成的 RDD，对 DataFrame 的操作最终会变成对底层 RDD 的操作。\n\n**Catalyst 是一个内置的 SQL 优化器，负责把用户输入的 SQL 转化成执行计划。**Catelyst 强大之处是它利用了 Scala 提供的代码生成（codegen）机制，物理执行计划经过编译，产出的执行代码效率很高，和直接操作 RDD 的命令式代码几乎没有分别。\n\n![spark-sql-catalyst](Spark到底好在哪里/7.png)\n\n▲ *上图是 Catalyst 的工作流程，与大多数 SQL 优化器一样是一个 Cost-Based Optimizer (CBO)，但最后使用代码生成（codegen）转化成直接对 RDD 的操作。*\n\n## 流计算框架：Spark Streaming\n\n以往，批处理和流计算被看作大数据系统的两个方面。我们常常能看到这样的架构——以 Kafka、Storm 为代表的流计算框架用于实时计算，而 Spark 或 MapReduce 则负责每天、每小时的数据批处理。在 ETL 等场合，这样的设计常常导致同样的计算逻辑被实现两次，耗费人力不说，保证一致性也是个问题。\n\nSpark Streaming 正是诞生于此类需求。传统的流计算框架大多注重于低延迟，采用了持续的（continuous）算子模型；而 Spark Streaming 基于 Spark，另辟蹊径提出了 **D-Stream（Discretized Streams）方案：将流数据切成很小的批（micro-batch），用一系列的短暂、无状态、确定性的批处理实现流处理。**\n\n![spark-streaming](Spark到底好在哪里/8.png)\n\nSpark Streaming 的做法在流计算框架中很有创新性，它虽然牺牲了低延迟（一般流计算能做到 100ms 级别，Spark Streaming 延迟一般为 1s 左右），但是带来了三个诱人的优势：\n\n- 更高的吞吐量（大约是 Storm 的 2-5 倍）\n- 更快速的失败恢复（通常只要 1-2s），因此对于 straggler（性能拖后腿的节点）直接杀掉即可\n- 开发者只需要维护一套 ETL 逻辑即可同时用于批处理和流计算\n\n![continuous-vs-spark-d-stream](Spark到底好在哪里/9.png)\n\n▲ *上左图中，为了在持续算子模型的流计算系统中保证一致性，不得不在主备机之间使用同步机制，导致性能损失，Spark Streaming 完全没有这个问题；右图是 D-Stream 的原理示意图。*\n\n你可能会困惑，流计算中的状态一直是个难题。但我们刚刚提到 D-Stream 方案是无状态的，那诸如 word count 之类的问题，怎么做到保持 count 算子的状态呢？\n\n答案是通过 RDD：**将前一个时间步的 RDD 作为当前时间步的 RDD 的前继节点，就能造成状态不断更替的效果**。实际上，新的状态 RDD 总是不断生成，而旧的 RDD 并不会被“替代”，而是作为新 RDD 的前继依赖。对于底层的 Spark 框架来说，并没有时间步的概念，有的只是不断扩张的 DAG 图和新的 RDD 节点。\n\n![d-stream-state-rdd](Spark到底好在哪里/10.png)\n\n▲ *上图是流式计算 word count 的例子，count 结果在不同时间步中不断累积。*\n\n那么另一个问题也随之而来：随着时间的推进，上图中的状态 RDD `counts` 会越来越多，他的祖先（lineage）变得越来越长，极端情况下，恢复过程可能溯源到很久之前。这是不可接受的！**因此，Spark Streming 会定期地对状态 RDD 做 checkpoint，将其持久化到 HDFS 等存储中，这被称为 lineage cut**，在它之前更早的 RDD 就可以没有顾虑地清理掉了。\n\n## 流计算与 SQL：Spark Structured Streaming\n\nSpark 通过 Spark Streaming 拥有了流计算能力，那 Spark SQL 是否也能具有类似的流处理能力呢？答案是肯定的，只要将**数据流建模成一张不断增长、没有边界的表**，在这样的语义之下，很多 SQL 操作等就能直接应用在流数据上。\n\n> 出人意料的是，Spark Structured Streaming 的流式计算引擎并没有复用 Spark Streaming，而是在 Spark SQL 上设计了新的一套引擎。因此，从 Spark SQL 迁移到 Spark Structured Streaming 十分容易，但从 Spark Streaming 迁移过来就要困难得多。\n\n很自然的，基于这样的模型，Spark SQL 中的大部分接口、实现都得以在 Spark Structured Streaming 中直接复用。将用户的 SQL 执行计划转化成流计算执行计划的过程被称为**增量化**（incrementalize），这一步是由 Spark 框架自动完成的。对于用户来说只要知道：每次计算的输入是某一小段时间的流数据，而输出是对应数据产生的计算结果。\n\n![spark-structured-streaming-mode](Spark到底好在哪里/11.png)\n\n▲ *左图是 Spark Structured Streaming 模型示意图；右图展示了同一个任务的批处理、流计算版本，可以看到，除了输入输出不同，内部计算过程完全相同。*\n\n与 Spark SQL 相比，流式 SQL 计算还有两个额外的特性，分别是窗口（window）和水位（watermark）。\n\n**窗口（window）是对过去某段时间的定义。**批处理中，查询通常是全量的（例如：总用户量是多少）；而流计算中，我们通常关心近期一段时间的数据（例如：最近24小时新增的用户量是多少）。用户通过选用合适的窗口来获得自己所需的计算结果，常见的窗口有滑动窗口（Sliding Window）、滚动窗口（Tumbling Window）等。\n\n**水位（watermark）用来丢弃过早的数据。**在流计算中，上游的输入事件可能存在不确定的延迟，而流计算系统的内存是有限的、只能保存有限的状态，一定时间之后必须丢弃历史数据。以双流 A JOIN B 为例，假设窗口为 1 小时，那么 A 中比当前时间减 1 小时更早的数据（行）会被丢弃；如果 B 中出现 1 小时前的事件，因为无法处理只能忽略。\n\n![spark-structured-streaming-watermark](Spark到底好在哪里/12.png)\n\n▲ *上图为水位的示意图，“迟到”太久的数据（行）由于已经低于当前水位无法处理，将被忽略。*\n\n水位和窗口的概念都是因时间而来。在其他流计算系统中，也存在相同或类似的概念。\n\n> 关于 SQL 的流计算模型，常常被拿来对比的还有另一个流计算框架 [Apache Flink](https://flink.apache.org/)。与 Spark 相比，它们的实现思路有很大不同，但在模型上是很相似的。\n\n## 系统架构\n\nSpark 中有三个角色：Driver, Worker 和 Cluster Manager。\n\n![cluster-overview](Spark到底好在哪里/13.png)\n\n**驱动程序（Driver）**即用户编写的程序，对应一个 `SparkContext`，负责任务的构造、调度、故障恢复等。驱动程序可以直接运行在客户端，例如用户的应用程序中；也可以托管在 Master 上，这被称为集群模式（cluster mode），通常用于流计算等长期任务。\n\n**Cluster Manager** 顾名思义负责集群的资源分配，Spark 自带的 Spark Master 支持任务的资源分配，并包含一个 Web UI 用来监控任务运行状况。多个 Master 可以构成一主多备，通过 ZooKeeper 进行协调和故障恢复。通常 Spark 集群使用 Spark Master 即可，但如果用户的集群中不仅有 Spark 框架、还要承担其他任务，官方推荐使用 Mesos 作为集群调度器。\n\n**Worker** 节点负责执行计算任务，上面保存了 RDD 等数据。","slug":"Spark到底好在哪里","published":1,"updated":"2021-04-29T10:05:54.220Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mlb90018vkvyvgun9ein","content":"<h2 id=\"Spark简介\"><a href=\"#Spark简介\" class=\"headerlink\" title=\"Spark简介\"></a>Spark简介</h2><p>Apache Spark 是当今最流行的开源大数据处理框架。和人们耳熟能详的 MapReduce 一样，Spark 用于进行分布式、大规模的数据处理，但 Spark 作为 MapReduce 的接任者，提供了更高级的编程接口、更高的性能。除此之外，Spark 不仅能进行常规的批处理计算，还提供了流式计算支持。</p>\n<p>Apache Spark 诞生于大名鼎鼎的 AMPLab（这里还诞生过 Mesos 和 Alluxio），从创立之初就带有浓厚的学术气质，其设计目标是为各种大数据处理需求提供一个统一的技术栈。如今 Spark 背后的商业公司 Databricks 创始人也是来自 AMPLab 的博士毕业生。</p>\n<p>Spark 本身使用 Scala 语言编写，Scala 是一门融合了面向对象与函数式的“双范式”语言，运行在 JVM 之上。Spark 大量使用了它的函数式、即时代码生成等特性。Spark 目前提供了 Java、Scala、Python、R 四种语言的 API，前两者因为同样运行在 JVM 上可以达到更原生的支持。</p>\n<h2 id=\"MapReduce-的问题所在\"><a href=\"#MapReduce-的问题所在\" class=\"headerlink\" title=\"MapReduce 的问题所在\"></a>MapReduce 的问题所在</h2><p>Hadoop 是大数据处理领域的开创者。严格来说，Hadoop 不只是一个软件，而是一整套生态系统，例如 MapReduce 负责进行分布式计算，而 HDFS 负责存储大量文件。</p>\n<p>MapReduce 模型的诞生是大数据处理从无到有的飞跃。但随着技术的进步，对大数据处理的需求也变得越来越复杂，MapReduce 的问题也日渐凸显。通常，我们将 MapReduce 的输入和输出数据保留在 HDFS 上，很多时候，<strong>复杂的 ETL、数据清洗等工作无法用一次 MapReduce 完成，所以需要将多个 MapReduce 过程连接起来</strong>：</p>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/1.png\" alt=\"multi-stage-mapreduce\"></p>\n<p>▲ <em>上图中只有两个 MapReduce 串联，实际上可能有几十个甚至更多，依赖关系也更复杂。</em></p>\n<p>这种方式下，<strong>每次中间结果都要写入 HDFS 落盘保存，代价很大</strong>（别忘了，HDFS 的每份数据都需要冗余若干份拷贝）。另外，由于本质上是多次 MapReduce 任务，调度也比较麻烦，实时性无从谈起。</p>\n<h2 id=\"Spark-与-RDD-模型\"><a href=\"#Spark-与-RDD-模型\" class=\"headerlink\" title=\"Spark 与 RDD 模型\"></a>Spark 与 RDD 模型</h2><p>针对上面的问题，如果能把中间结果保存在内存里，岂不是快的多？之所以不能这么做，最大的障碍是：分布式系统必须能容忍一定的故障，所谓 fault-tolerance。如果只是放在内存中，一旦某个计算节点宕机，其他节点无法恢复出丢失的数据，只能重启整个计算任务，这对于动辄成百上千节点的集群来说是不可接受的。</p>\n<p>一般来说，想做到 fault-tolerance 只有两个方案：要么存储到外部（例如 HDFS），要么拷贝到多个副本。<strong>Spark 大胆地提出了第三种——重算一遍。但是之所以能做到这一点，是依赖于一个额外的假设：所有计算过程都是确定性的（deterministic）。</strong>Spark 借鉴了函数式编程思想，提出了 RDD（Resilient Distributed Datasets），译作“弹性分布式数据集”。</p>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/2.png\" alt=\"rdd-example\"></p>\n<p><strong>RDD 是一个只读的、分区的（partitioned）数据集合</strong>。RDD 要么来源于不可变的外部文件（例如 HDFS 上的文件），要么由确定的算子由其他 RDD 计算得到。<strong>RDD 通过算子连接构成有向无环图（DAG）</strong>，上图演示了一个简单的例子，其中节点对应 RDD，边对应算子。</p>\n<p>回到刚刚的问题，RDD 如何做到 fault-tolerance？很简单，RDD 中的每个分区都能被确定性的计算出来，所以<strong>一旦某个分区丢失了，另一个计算节点可以从它的前继节点出发、用同样的计算过程重算一次，即可得到完全一样的 RDD 分区</strong>。这个过程可以递归的进行下去。</p>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/3.png\" alt=\"rdd-example-crash\"></p>\n<p>▲ <em>上图演示了 RDD 分区的恢复。为了简洁并没有画出分区，实际上恢复是以分区为单位的。</em></p>\n<p>Spark 的编程接口和 Java 8 的 Stream 很相似：RDD 作为数据，在多种算子间变换，构成对执行计划 DAG 的描述。最后，一旦遇到类似 <code>collect()</code> 这样的输出命令，执行计划会被发往 Spark 集群、开始计算。不难发现，算子分成两类：</p>\n<ul>\n<li><code>map()</code>、<code>filter()</code>、<code>join()</code> 等算子称为 Transformation，它们输入一个或多个 RDD，输出一个 RDD。</li>\n<li><code>collect()</code>、<code>count()</code>、<code>save()</code> 等算子称为 Action，它们通常是将数据收集起来返回；</li>\n</ul>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/4.png\" alt=\"spark-rdd-api-example\"></p>\n<p>▲ <em>上图的例子用来收集包含“HDFS”关键字的错误日志时间戳。当执行到 collect() 时，右边的执行计划开始运行。</em></p>\n<p>像之前提到的，RDD 的数据由多个分区（partition）构成，这些分区可以分布在集群的各个机器上，这也就是 RDD 中 “distributed” 的含义。熟悉 DBMS 的同学可以把 RDD 理解为逻辑执行计划，partition 理解为物理执行计划。</p>\n<p>此外，RDD 还包含它的每个分区的依赖分区（dependency），以及一个函数指出如何计算出本分区的数据。Spark 的设计者发现，依赖关系依据执行方式的不同可以很自然地分成两种：<strong>窄依赖（Narrow Dependency）和宽依赖（Wide Dependency）</strong>，举例来说：</p>\n<ul>\n<li><code>map()</code>、<code>filter()</code> 等算子构成窄依赖：生产的每个分区只依赖父 RDD 中的一个分区。</li>\n<li><code>groupByKey()</code> 等算子构成宽依赖：生成的每个分区依赖父 RDD 中的多个分区（往往是全部分区）。</li>\n</ul>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/5.png\" alt=\"2-kinds-of-dependencies\"></p>\n<p>▲ <em>左图展示了宽依赖和窄依赖，其中 Join 算子因为 Join key 分区情况不同二者皆有；右图展示了执行过程，由于宽依赖的存在，执行计划被分成 3 个阶段。</em></p>\n<p>在执行时，窄依赖可以很容易的按流水线（pipeline）的方式计算：对于每个分区从前到后依次代入各个算子即可。<strong>然而，宽依赖需要等待前继 RDD 中所有分区计算完成；换句话说，宽依赖就像一个栅栏（barrier）会阻塞到之前的所有计算完成。</strong>整个计算过程被宽依赖分割成多个阶段（stage），如上右图所示。</p>\n<blockquote>\n<p>了解 MapReduce 的同学可能已经发现，宽依赖本质上就是一个 MapReduce 过程。但是相比 MapReduce 自己写 Map 和 Reduce 函数的编程接口，Spark 的接口要容易的多；并且在 Spark 中，多个阶段的 MapReduce 只需要构造一个 DAG 即可。</p>\n</blockquote>\n<h2 id=\"声明式接口：Spark-SQL\"><a href=\"#声明式接口：Spark-SQL\" class=\"headerlink\" title=\"声明式接口：Spark SQL\"></a>声明式接口：Spark SQL</h2><p>Spark 诞生后，大幅简化了 MapReduce 编程模型，但人们并不满足于此。我们知道，<strong>与命令式（imperative）编程相对的是声明式（declarative）编程，前者需要告诉程序怎样得到我需要的结果，后者则是告诉程序我需要的结果是什么</strong>。举例而言：你想知道，各个部门 <code>&lt;dept_id, dept_name&gt;</code> 中性别为女 <code>&#39;female&#39;</code> 的员工分别有多少？</p>\n<p>命令式编程中，你需要编写一个程序。下面给出了一种伪代码实现：</p>\n<pre class=\"line-numbers language-scala\"><code class=\"language-scala\">employees <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>getAllEmployees<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ncountByDept <span class=\"token operator\">=</span> dict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 统计各部门女生人数 (dept_id -> count)</span>\n<span class=\"token keyword\">for</span> employee in employees<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>employee<span class=\"token punctuation\">.</span>gender <span class=\"token operator\">==</span> <span class=\"token string\">'female'</span><span class=\"token punctuation\">)</span>\n        countByDept<span class=\"token punctuation\">[</span>employee<span class=\"token punctuation\">.</span>dept_id<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\nresults <span class=\"token operator\">=</span> list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// 加上 dept.name 列</span>\ndepts <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>getAllDepartments<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> dept in depts<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>countByDept containsKey dept<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n        results<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">(</span>dept<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> countByDept<span class=\"token punctuation\">[</span>dept<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">return</span> results<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>声明式编程中，你只要用关系代数的运算表达出结果：</p>\n<pre class=\"line-numbers language-scala\"><code class=\"language-scala\">employees<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>dept<span class=\"token punctuation\">,</span> employees<span class=\"token punctuation\">.</span>deptId <span class=\"token operator\">==</span> dept<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">.</span>where<span class=\"token punctuation\">(</span>employees<span class=\"token punctuation\">.</span>gender <span class=\"token operator\">==</span> <span class=\"token string\">'female'</span><span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span>dept<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">.</span>agg<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>等价地，如果你更熟悉 SQL，也可以写成这样：</p>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> dept<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">FROM</span> employees <span class=\"token keyword\">JOIN</span> dept <span class=\"token keyword\">ON</span> employees<span class=\"token punctuation\">.</span>dept_id <span class=\"token operator\">=</span><span class=\"token operator\">=</span> dept<span class=\"token punctuation\">.</span>id\n<span class=\"token keyword\">WHERE</span> employees<span class=\"token punctuation\">.</span>gender <span class=\"token operator\">=</span> <span class=\"token string\">'female'</span>\n<span class=\"token keyword\">GROUP</span> <span class=\"token keyword\">BY</span> dept<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> dept<span class=\"token punctuation\">.</span>name<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n</blockquote>\n<p>显然，声明式的要简洁的多！但声明式编程依赖于执行者产生真正的程序代码，所以除了上面这段程序，还需要把数据模型（即 schema）一并告知执行者。声明式编程最广为人知的形式就是 SQL。</p>\n<p>Spark SQL 就是这样一个基于 SQL 的声明式编程接口。<strong>你可以将它看作在 Spark 之上的一层封装，在 RDD 计算模型的基础上，提供了 DataFrame API 以及一个内置的 SQL 执行计划优化器 Catalyst。</strong></p>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/6.png\" alt=\"spark-sql-arch\"></p>\n<p>▲ <em>上图黄色部分是 Spark SQL 中新增的部分。</em></p>\n<p><strong>DataFrame 就像数据库中的表，除了数据之外它还保存了数据的 schema 信息。</strong>计算中，schema 信息也会经过算子进行相应的变换。DataFrame 的数据是行（row）对象组成的 RDD，对 DataFrame 的操作最终会变成对底层 RDD 的操作。</p>\n<p><strong>Catalyst 是一个内置的 SQL 优化器，负责把用户输入的 SQL 转化成执行计划。</strong>Catelyst 强大之处是它利用了 Scala 提供的代码生成（codegen）机制，物理执行计划经过编译，产出的执行代码效率很高，和直接操作 RDD 的命令式代码几乎没有分别。</p>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/7.png\" alt=\"spark-sql-catalyst\"></p>\n<p>▲ <em>上图是 Catalyst 的工作流程，与大多数 SQL 优化器一样是一个 Cost-Based Optimizer (CBO)，但最后使用代码生成（codegen）转化成直接对 RDD 的操作。</em></p>\n<h2 id=\"流计算框架：Spark-Streaming\"><a href=\"#流计算框架：Spark-Streaming\" class=\"headerlink\" title=\"流计算框架：Spark Streaming\"></a>流计算框架：Spark Streaming</h2><p>以往，批处理和流计算被看作大数据系统的两个方面。我们常常能看到这样的架构——以 Kafka、Storm 为代表的流计算框架用于实时计算，而 Spark 或 MapReduce 则负责每天、每小时的数据批处理。在 ETL 等场合，这样的设计常常导致同样的计算逻辑被实现两次，耗费人力不说，保证一致性也是个问题。</p>\n<p>Spark Streaming 正是诞生于此类需求。传统的流计算框架大多注重于低延迟，采用了持续的（continuous）算子模型；而 Spark Streaming 基于 Spark，另辟蹊径提出了 <strong>D-Stream（Discretized Streams）方案：将流数据切成很小的批（micro-batch），用一系列的短暂、无状态、确定性的批处理实现流处理。</strong></p>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/8.png\" alt=\"spark-streaming\"></p>\n<p>Spark Streaming 的做法在流计算框架中很有创新性，它虽然牺牲了低延迟（一般流计算能做到 100ms 级别，Spark Streaming 延迟一般为 1s 左右），但是带来了三个诱人的优势：</p>\n<ul>\n<li>更高的吞吐量（大约是 Storm 的 2-5 倍）</li>\n<li>更快速的失败恢复（通常只要 1-2s），因此对于 straggler（性能拖后腿的节点）直接杀掉即可</li>\n<li>开发者只需要维护一套 ETL 逻辑即可同时用于批处理和流计算</li>\n</ul>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/9.png\" alt=\"continuous-vs-spark-d-stream\"></p>\n<p>▲ <em>上左图中，为了在持续算子模型的流计算系统中保证一致性，不得不在主备机之间使用同步机制，导致性能损失，Spark Streaming 完全没有这个问题；右图是 D-Stream 的原理示意图。</em></p>\n<p>你可能会困惑，流计算中的状态一直是个难题。但我们刚刚提到 D-Stream 方案是无状态的，那诸如 word count 之类的问题，怎么做到保持 count 算子的状态呢？</p>\n<p>答案是通过 RDD：<strong>将前一个时间步的 RDD 作为当前时间步的 RDD 的前继节点，就能造成状态不断更替的效果</strong>。实际上，新的状态 RDD 总是不断生成，而旧的 RDD 并不会被“替代”，而是作为新 RDD 的前继依赖。对于底层的 Spark 框架来说，并没有时间步的概念，有的只是不断扩张的 DAG 图和新的 RDD 节点。</p>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/10.png\" alt=\"d-stream-state-rdd\"></p>\n<p>▲ <em>上图是流式计算 word count 的例子，count 结果在不同时间步中不断累积。</em></p>\n<p>那么另一个问题也随之而来：随着时间的推进，上图中的状态 RDD <code>counts</code> 会越来越多，他的祖先（lineage）变得越来越长，极端情况下，恢复过程可能溯源到很久之前。这是不可接受的！<strong>因此，Spark Streming 会定期地对状态 RDD 做 checkpoint，将其持久化到 HDFS 等存储中，这被称为 lineage cut</strong>，在它之前更早的 RDD 就可以没有顾虑地清理掉了。</p>\n<h2 id=\"流计算与-SQL：Spark-Structured-Streaming\"><a href=\"#流计算与-SQL：Spark-Structured-Streaming\" class=\"headerlink\" title=\"流计算与 SQL：Spark Structured Streaming\"></a>流计算与 SQL：Spark Structured Streaming</h2><p>Spark 通过 Spark Streaming 拥有了流计算能力，那 Spark SQL 是否也能具有类似的流处理能力呢？答案是肯定的，只要将<strong>数据流建模成一张不断增长、没有边界的表</strong>，在这样的语义之下，很多 SQL 操作等就能直接应用在流数据上。</p>\n<blockquote>\n<p>出人意料的是，Spark Structured Streaming 的流式计算引擎并没有复用 Spark Streaming，而是在 Spark SQL 上设计了新的一套引擎。因此，从 Spark SQL 迁移到 Spark Structured Streaming 十分容易，但从 Spark Streaming 迁移过来就要困难得多。</p>\n</blockquote>\n<p>很自然的，基于这样的模型，Spark SQL 中的大部分接口、实现都得以在 Spark Structured Streaming 中直接复用。将用户的 SQL 执行计划转化成流计算执行计划的过程被称为<strong>增量化</strong>（incrementalize），这一步是由 Spark 框架自动完成的。对于用户来说只要知道：每次计算的输入是某一小段时间的流数据，而输出是对应数据产生的计算结果。</p>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/11.png\" alt=\"spark-structured-streaming-mode\"></p>\n<p>▲ <em>左图是 Spark Structured Streaming 模型示意图；右图展示了同一个任务的批处理、流计算版本，可以看到，除了输入输出不同，内部计算过程完全相同。</em></p>\n<p>与 Spark SQL 相比，流式 SQL 计算还有两个额外的特性，分别是窗口（window）和水位（watermark）。</p>\n<p><strong>窗口（window）是对过去某段时间的定义。</strong>批处理中，查询通常是全量的（例如：总用户量是多少）；而流计算中，我们通常关心近期一段时间的数据（例如：最近24小时新增的用户量是多少）。用户通过选用合适的窗口来获得自己所需的计算结果，常见的窗口有滑动窗口（Sliding Window）、滚动窗口（Tumbling Window）等。</p>\n<p><strong>水位（watermark）用来丢弃过早的数据。</strong>在流计算中，上游的输入事件可能存在不确定的延迟，而流计算系统的内存是有限的、只能保存有限的状态，一定时间之后必须丢弃历史数据。以双流 A JOIN B 为例，假设窗口为 1 小时，那么 A 中比当前时间减 1 小时更早的数据（行）会被丢弃；如果 B 中出现 1 小时前的事件，因为无法处理只能忽略。</p>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/12.png\" alt=\"spark-structured-streaming-watermark\"></p>\n<p>▲ <em>上图为水位的示意图，“迟到”太久的数据（行）由于已经低于当前水位无法处理，将被忽略。</em></p>\n<p>水位和窗口的概念都是因时间而来。在其他流计算系统中，也存在相同或类似的概念。</p>\n<blockquote>\n<p>关于 SQL 的流计算模型，常常被拿来对比的还有另一个流计算框架 <a href=\"https://flink.apache.org/\" target=\"_blank\" rel=\"noopener\">Apache Flink</a>。与 Spark 相比，它们的实现思路有很大不同，但在模型上是很相似的。</p>\n</blockquote>\n<h2 id=\"系统架构\"><a href=\"#系统架构\" class=\"headerlink\" title=\"系统架构\"></a>系统架构</h2><p>Spark 中有三个角色：Driver, Worker 和 Cluster Manager。</p>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/13.png\" alt=\"cluster-overview\"></p>\n<p><strong>驱动程序（Driver）</strong>即用户编写的程序，对应一个 <code>SparkContext</code>，负责任务的构造、调度、故障恢复等。驱动程序可以直接运行在客户端，例如用户的应用程序中；也可以托管在 Master 上，这被称为集群模式（cluster mode），通常用于流计算等长期任务。</p>\n<p><strong>Cluster Manager</strong> 顾名思义负责集群的资源分配，Spark 自带的 Spark Master 支持任务的资源分配，并包含一个 Web UI 用来监控任务运行状况。多个 Master 可以构成一主多备，通过 ZooKeeper 进行协调和故障恢复。通常 Spark 集群使用 Spark Master 即可，但如果用户的集群中不仅有 Spark 框架、还要承担其他任务，官方推荐使用 Mesos 作为集群调度器。</p>\n<p><strong>Worker</strong> 节点负责执行计算任务，上面保存了 RDD 等数据。</p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h2 id=\"Spark简介\"><a href=\"#Spark简介\" class=\"headerlink\" title=\"Spark简介\"></a>Spark简介</h2><p>Apache Spark 是当今最流行的开源大数据处理框架。和人们耳熟能详的 MapReduce 一样，Spark 用于进行分布式、大规模的数据处理，但 Spark 作为 MapReduce 的接任者，提供了更高级的编程接口、更高的性能。除此之外，Spark 不仅能进行常规的批处理计算，还提供了流式计算支持。</p>\n<p>Apache Spark 诞生于大名鼎鼎的 AMPLab（这里还诞生过 Mesos 和 Alluxio），从创立之初就带有浓厚的学术气质，其设计目标是为各种大数据处理需求提供一个统一的技术栈。如今 Spark 背后的商业公司 Databricks 创始人也是来自 AMPLab 的博士毕业生。</p>\n<p>Spark 本身使用 Scala 语言编写，Scala 是一门融合了面向对象与函数式的“双范式”语言，运行在 JVM 之上。Spark 大量使用了它的函数式、即时代码生成等特性。Spark 目前提供了 Java、Scala、Python、R 四种语言的 API，前两者因为同样运行在 JVM 上可以达到更原生的支持。</p>\n<h2 id=\"MapReduce-的问题所在\"><a href=\"#MapReduce-的问题所在\" class=\"headerlink\" title=\"MapReduce 的问题所在\"></a>MapReduce 的问题所在</h2><p>Hadoop 是大数据处理领域的开创者。严格来说，Hadoop 不只是一个软件，而是一整套生态系统，例如 MapReduce 负责进行分布式计算，而 HDFS 负责存储大量文件。</p>\n<p>MapReduce 模型的诞生是大数据处理从无到有的飞跃。但随着技术的进步，对大数据处理的需求也变得越来越复杂，MapReduce 的问题也日渐凸显。通常，我们将 MapReduce 的输入和输出数据保留在 HDFS 上，很多时候，<strong>复杂的 ETL、数据清洗等工作无法用一次 MapReduce 完成，所以需要将多个 MapReduce 过程连接起来</strong>：</p>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/1.png\" alt=\"multi-stage-mapreduce\"></p>\n<p>▲ <em>上图中只有两个 MapReduce 串联，实际上可能有几十个甚至更多，依赖关系也更复杂。</em></p>\n<p>这种方式下，<strong>每次中间结果都要写入 HDFS 落盘保存，代价很大</strong>（别忘了，HDFS 的每份数据都需要冗余若干份拷贝）。另外，由于本质上是多次 MapReduce 任务，调度也比较麻烦，实时性无从谈起。</p>\n<h2 id=\"Spark-与-RDD-模型\"><a href=\"#Spark-与-RDD-模型\" class=\"headerlink\" title=\"Spark 与 RDD 模型\"></a>Spark 与 RDD 模型</h2><p>针对上面的问题，如果能把中间结果保存在内存里，岂不是快的多？之所以不能这么做，最大的障碍是：分布式系统必须能容忍一定的故障，所谓 fault-tolerance。如果只是放在内存中，一旦某个计算节点宕机，其他节点无法恢复出丢失的数据，只能重启整个计算任务，这对于动辄成百上千节点的集群来说是不可接受的。</p>\n<p>一般来说，想做到 fault-tolerance 只有两个方案：要么存储到外部（例如 HDFS），要么拷贝到多个副本。<strong>Spark 大胆地提出了第三种——重算一遍。但是之所以能做到这一点，是依赖于一个额外的假设：所有计算过程都是确定性的（deterministic）。</strong>Spark 借鉴了函数式编程思想，提出了 RDD（Resilient Distributed Datasets），译作“弹性分布式数据集”。</p>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/2.png\" alt=\"rdd-example\"></p>\n<p><strong>RDD 是一个只读的、分区的（partitioned）数据集合</strong>。RDD 要么来源于不可变的外部文件（例如 HDFS 上的文件），要么由确定的算子由其他 RDD 计算得到。<strong>RDD 通过算子连接构成有向无环图（DAG）</strong>，上图演示了一个简单的例子，其中节点对应 RDD，边对应算子。</p>\n<p>回到刚刚的问题，RDD 如何做到 fault-tolerance？很简单，RDD 中的每个分区都能被确定性的计算出来，所以<strong>一旦某个分区丢失了，另一个计算节点可以从它的前继节点出发、用同样的计算过程重算一次，即可得到完全一样的 RDD 分区</strong>。这个过程可以递归的进行下去。</p>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/3.png\" alt=\"rdd-example-crash\"></p>\n<p>▲ <em>上图演示了 RDD 分区的恢复。为了简洁并没有画出分区，实际上恢复是以分区为单位的。</em></p>\n<p>Spark 的编程接口和 Java 8 的 Stream 很相似：RDD 作为数据，在多种算子间变换，构成对执行计划 DAG 的描述。最后，一旦遇到类似 <code>collect()</code> 这样的输出命令，执行计划会被发往 Spark 集群、开始计算。不难发现，算子分成两类：</p>\n<ul>\n<li><code>map()</code>、<code>filter()</code>、<code>join()</code> 等算子称为 Transformation，它们输入一个或多个 RDD，输出一个 RDD。</li>\n<li><code>collect()</code>、<code>count()</code>、<code>save()</code> 等算子称为 Action，它们通常是将数据收集起来返回；</li>\n</ul>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/4.png\" alt=\"spark-rdd-api-example\"></p>\n<p>▲ <em>上图的例子用来收集包含“HDFS”关键字的错误日志时间戳。当执行到 collect() 时，右边的执行计划开始运行。</em></p>\n<p>像之前提到的，RDD 的数据由多个分区（partition）构成，这些分区可以分布在集群的各个机器上，这也就是 RDD 中 “distributed” 的含义。熟悉 DBMS 的同学可以把 RDD 理解为逻辑执行计划，partition 理解为物理执行计划。</p>\n<p>此外，RDD 还包含它的每个分区的依赖分区（dependency），以及一个函数指出如何计算出本分区的数据。Spark 的设计者发现，依赖关系依据执行方式的不同可以很自然地分成两种：<strong>窄依赖（Narrow Dependency）和宽依赖（Wide Dependency）</strong>，举例来说：</p>\n<ul>\n<li><code>map()</code>、<code>filter()</code> 等算子构成窄依赖：生产的每个分区只依赖父 RDD 中的一个分区。</li>\n<li><code>groupByKey()</code> 等算子构成宽依赖：生成的每个分区依赖父 RDD 中的多个分区（往往是全部分区）。</li>\n</ul>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/5.png\" alt=\"2-kinds-of-dependencies\"></p>\n<p>▲ <em>左图展示了宽依赖和窄依赖，其中 Join 算子因为 Join key 分区情况不同二者皆有；右图展示了执行过程，由于宽依赖的存在，执行计划被分成 3 个阶段。</em></p>\n<p>在执行时，窄依赖可以很容易的按流水线（pipeline）的方式计算：对于每个分区从前到后依次代入各个算子即可。<strong>然而，宽依赖需要等待前继 RDD 中所有分区计算完成；换句话说，宽依赖就像一个栅栏（barrier）会阻塞到之前的所有计算完成。</strong>整个计算过程被宽依赖分割成多个阶段（stage），如上右图所示。</p>\n<blockquote>\n<p>了解 MapReduce 的同学可能已经发现，宽依赖本质上就是一个 MapReduce 过程。但是相比 MapReduce 自己写 Map 和 Reduce 函数的编程接口，Spark 的接口要容易的多；并且在 Spark 中，多个阶段的 MapReduce 只需要构造一个 DAG 即可。</p>\n</blockquote>\n<h2 id=\"声明式接口：Spark-SQL\"><a href=\"#声明式接口：Spark-SQL\" class=\"headerlink\" title=\"声明式接口：Spark SQL\"></a>声明式接口：Spark SQL</h2><p>Spark 诞生后，大幅简化了 MapReduce 编程模型，但人们并不满足于此。我们知道，<strong>与命令式（imperative）编程相对的是声明式（declarative）编程，前者需要告诉程序怎样得到我需要的结果，后者则是告诉程序我需要的结果是什么</strong>。举例而言：你想知道，各个部门 <code>&lt;dept_id, dept_name&gt;</code> 中性别为女 <code>&#39;female&#39;</code> 的员工分别有多少？</p>\n<p>命令式编程中，你需要编写一个程序。下面给出了一种伪代码实现：</p>\n<pre><code class=\"scala\">employees = db.getAllEmployees()\ncountByDept = dict() // 统计各部门女生人数 (dept_id -&gt; count)\nfor employee in employees:\n    if (employee.gender == &#39;female&#39;)\n        countByDept[employee.dept_id] += 1\nresults = list() // 加上 dept.name 列\ndepts = db.getAllDepartments()\nfor dept in depts:\n    if (countByDept containsKey dept.id)\n        results.add(row(dept.id, dept.name, countByDept[dept.id]))\nreturn results;</code></pre>\n<p>声明式编程中，你只要用关系代数的运算表达出结果：</p>\n<pre><code class=\"scala\">employees.join(dept, employees.deptId == dept.id)\n         .where(employees.gender == &#39;female&#39;)\n         .groupBy(dept.id, dept.name)\n         .agg()</code></pre>\n<blockquote>\n<p>等价地，如果你更熟悉 SQL，也可以写成这样：</p>\n<pre><code class=\"sql\">SELECT dept.id, dept.name, COUNT(*)\nFROM employees JOIN dept ON employees.dept_id == dept.id\nWHERE employees.gender = &#39;female&#39;\nGROUP BY dept.id, dept.name</code></pre>\n</blockquote>\n<p>显然，声明式的要简洁的多！但声明式编程依赖于执行者产生真正的程序代码，所以除了上面这段程序，还需要把数据模型（即 schema）一并告知执行者。声明式编程最广为人知的形式就是 SQL。</p>\n<p>Spark SQL 就是这样一个基于 SQL 的声明式编程接口。<strong>你可以将它看作在 Spark 之上的一层封装，在 RDD 计算模型的基础上，提供了 DataFrame API 以及一个内置的 SQL 执行计划优化器 Catalyst。</strong></p>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/6.png\" alt=\"spark-sql-arch\"></p>\n<p>▲ <em>上图黄色部分是 Spark SQL 中新增的部分。</em></p>\n<p><strong>DataFrame 就像数据库中的表，除了数据之外它还保存了数据的 schema 信息。</strong>计算中，schema 信息也会经过算子进行相应的变换。DataFrame 的数据是行（row）对象组成的 RDD，对 DataFrame 的操作最终会变成对底层 RDD 的操作。</p>\n<p><strong>Catalyst 是一个内置的 SQL 优化器，负责把用户输入的 SQL 转化成执行计划。</strong>Catelyst 强大之处是它利用了 Scala 提供的代码生成（codegen）机制，物理执行计划经过编译，产出的执行代码效率很高，和直接操作 RDD 的命令式代码几乎没有分别。</p>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/7.png\" alt=\"spark-sql-catalyst\"></p>\n<p>▲ <em>上图是 Catalyst 的工作流程，与大多数 SQL 优化器一样是一个 Cost-Based Optimizer (CBO)，但最后使用代码生成（codegen）转化成直接对 RDD 的操作。</em></p>\n<h2 id=\"流计算框架：Spark-Streaming\"><a href=\"#流计算框架：Spark-Streaming\" class=\"headerlink\" title=\"流计算框架：Spark Streaming\"></a>流计算框架：Spark Streaming</h2><p>以往，批处理和流计算被看作大数据系统的两个方面。我们常常能看到这样的架构——以 Kafka、Storm 为代表的流计算框架用于实时计算，而 Spark 或 MapReduce 则负责每天、每小时的数据批处理。在 ETL 等场合，这样的设计常常导致同样的计算逻辑被实现两次，耗费人力不说，保证一致性也是个问题。</p>\n<p>Spark Streaming 正是诞生于此类需求。传统的流计算框架大多注重于低延迟，采用了持续的（continuous）算子模型；而 Spark Streaming 基于 Spark，另辟蹊径提出了 <strong>D-Stream（Discretized Streams）方案：将流数据切成很小的批（micro-batch），用一系列的短暂、无状态、确定性的批处理实现流处理。</strong></p>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/8.png\" alt=\"spark-streaming\"></p>\n<p>Spark Streaming 的做法在流计算框架中很有创新性，它虽然牺牲了低延迟（一般流计算能做到 100ms 级别，Spark Streaming 延迟一般为 1s 左右），但是带来了三个诱人的优势：</p>\n<ul>\n<li>更高的吞吐量（大约是 Storm 的 2-5 倍）</li>\n<li>更快速的失败恢复（通常只要 1-2s），因此对于 straggler（性能拖后腿的节点）直接杀掉即可</li>\n<li>开发者只需要维护一套 ETL 逻辑即可同时用于批处理和流计算</li>\n</ul>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/9.png\" alt=\"continuous-vs-spark-d-stream\"></p>\n<p>▲ <em>上左图中，为了在持续算子模型的流计算系统中保证一致性，不得不在主备机之间使用同步机制，导致性能损失，Spark Streaming 完全没有这个问题；右图是 D-Stream 的原理示意图。</em></p>\n<p>你可能会困惑，流计算中的状态一直是个难题。但我们刚刚提到 D-Stream 方案是无状态的，那诸如 word count 之类的问题，怎么做到保持 count 算子的状态呢？</p>\n<p>答案是通过 RDD：<strong>将前一个时间步的 RDD 作为当前时间步的 RDD 的前继节点，就能造成状态不断更替的效果</strong>。实际上，新的状态 RDD 总是不断生成，而旧的 RDD 并不会被“替代”，而是作为新 RDD 的前继依赖。对于底层的 Spark 框架来说，并没有时间步的概念，有的只是不断扩张的 DAG 图和新的 RDD 节点。</p>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/10.png\" alt=\"d-stream-state-rdd\"></p>\n<p>▲ <em>上图是流式计算 word count 的例子，count 结果在不同时间步中不断累积。</em></p>\n<p>那么另一个问题也随之而来：随着时间的推进，上图中的状态 RDD <code>counts</code> 会越来越多，他的祖先（lineage）变得越来越长，极端情况下，恢复过程可能溯源到很久之前。这是不可接受的！<strong>因此，Spark Streming 会定期地对状态 RDD 做 checkpoint，将其持久化到 HDFS 等存储中，这被称为 lineage cut</strong>，在它之前更早的 RDD 就可以没有顾虑地清理掉了。</p>\n<h2 id=\"流计算与-SQL：Spark-Structured-Streaming\"><a href=\"#流计算与-SQL：Spark-Structured-Streaming\" class=\"headerlink\" title=\"流计算与 SQL：Spark Structured Streaming\"></a>流计算与 SQL：Spark Structured Streaming</h2><p>Spark 通过 Spark Streaming 拥有了流计算能力，那 Spark SQL 是否也能具有类似的流处理能力呢？答案是肯定的，只要将<strong>数据流建模成一张不断增长、没有边界的表</strong>，在这样的语义之下，很多 SQL 操作等就能直接应用在流数据上。</p>\n<blockquote>\n<p>出人意料的是，Spark Structured Streaming 的流式计算引擎并没有复用 Spark Streaming，而是在 Spark SQL 上设计了新的一套引擎。因此，从 Spark SQL 迁移到 Spark Structured Streaming 十分容易，但从 Spark Streaming 迁移过来就要困难得多。</p>\n</blockquote>\n<p>很自然的，基于这样的模型，Spark SQL 中的大部分接口、实现都得以在 Spark Structured Streaming 中直接复用。将用户的 SQL 执行计划转化成流计算执行计划的过程被称为<strong>增量化</strong>（incrementalize），这一步是由 Spark 框架自动完成的。对于用户来说只要知道：每次计算的输入是某一小段时间的流数据，而输出是对应数据产生的计算结果。</p>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/11.png\" alt=\"spark-structured-streaming-mode\"></p>\n<p>▲ <em>左图是 Spark Structured Streaming 模型示意图；右图展示了同一个任务的批处理、流计算版本，可以看到，除了输入输出不同，内部计算过程完全相同。</em></p>\n<p>与 Spark SQL 相比，流式 SQL 计算还有两个额外的特性，分别是窗口（window）和水位（watermark）。</p>\n<p><strong>窗口（window）是对过去某段时间的定义。</strong>批处理中，查询通常是全量的（例如：总用户量是多少）；而流计算中，我们通常关心近期一段时间的数据（例如：最近24小时新增的用户量是多少）。用户通过选用合适的窗口来获得自己所需的计算结果，常见的窗口有滑动窗口（Sliding Window）、滚动窗口（Tumbling Window）等。</p>\n<p><strong>水位（watermark）用来丢弃过早的数据。</strong>在流计算中，上游的输入事件可能存在不确定的延迟，而流计算系统的内存是有限的、只能保存有限的状态，一定时间之后必须丢弃历史数据。以双流 A JOIN B 为例，假设窗口为 1 小时，那么 A 中比当前时间减 1 小时更早的数据（行）会被丢弃；如果 B 中出现 1 小时前的事件，因为无法处理只能忽略。</p>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/12.png\" alt=\"spark-structured-streaming-watermark\"></p>\n<p>▲ <em>上图为水位的示意图，“迟到”太久的数据（行）由于已经低于当前水位无法处理，将被忽略。</em></p>\n<p>水位和窗口的概念都是因时间而来。在其他流计算系统中，也存在相同或类似的概念。</p>\n<blockquote>\n<p>关于 SQL 的流计算模型，常常被拿来对比的还有另一个流计算框架 <a href=\"https://flink.apache.org/\" target=\"_blank\" rel=\"noopener\">Apache Flink</a>。与 Spark 相比，它们的实现思路有很大不同，但在模型上是很相似的。</p>\n</blockquote>\n<h2 id=\"系统架构\"><a href=\"#系统架构\" class=\"headerlink\" title=\"系统架构\"></a>系统架构</h2><p>Spark 中有三个角色：Driver, Worker 和 Cluster Manager。</p>\n<p><img src=\"/2020/01/16/spark-dao-di-hao-zai-na-li/13.png\" alt=\"cluster-overview\"></p>\n<p><strong>驱动程序（Driver）</strong>即用户编写的程序，对应一个 <code>SparkContext</code>，负责任务的构造、调度、故障恢复等。驱动程序可以直接运行在客户端，例如用户的应用程序中；也可以托管在 Master 上，这被称为集群模式（cluster mode），通常用于流计算等长期任务。</p>\n<p><strong>Cluster Manager</strong> 顾名思义负责集群的资源分配，Spark 自带的 Spark Master 支持任务的资源分配，并包含一个 Web UI 用来监控任务运行状况。多个 Master 可以构成一主多备，通过 ZooKeeper 进行协调和故障恢复。通常 Spark 集群使用 Spark Master 即可，但如果用户的集群中不仅有 Spark 框架、还要承担其他任务，官方推荐使用 Mesos 作为集群调度器。</p>\n<p><strong>Worker</strong> 节点负责执行计算任务，上面保存了 RDD 等数据。</p>\n"},{"title":"SpringMVC原理","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-04T13:40:42.000Z","password":null,"summary":null,"_content":"\n## 概述\n\n[spring](http://lib.csdn.net/base/javaee) MVC主要由DispatcherServlet、处理器映射、处理器(控制器)、视图解析器、视图组成。他的两个核心是:\n\n**处理器映射：** 选择使用哪个控制器来处理请求。 \n**视图解析器：** 选择结果应该如何渲染。\n\n## 运行原理\n\n下图是在Spring官网开发手册上找到的，它清晰的诠释了Spring MVC的运行原理\n\n![](SpringMVC原理/16b5eb3870589ac4.png)\n\n①客户端的所有请求都交给前端控制器DispatcherServlet来处理，它会负责调用系统的其他模块来真正处理用户的请求。\n\n② DispatcherServlet收到请求后，将根据请求的信息（包括URL、HTTP协议方法、请求头、请求参数、Cookie等）以及HandlerMapping的配置找到处理该请求的Handler（任何一个对象都可以作为请求的Handler）。\n\n③在这个地方Spring会通过HandlerAdapter对该处理器进行封装。\n\n④ HandlerAdapter是一个适配器，它用统一的接口对各种Handler中的方法进行调用。\n\n⑤ Handler完成对用户请求的处理后，会返回一个ModelAndView对象给DispatcherServlet，ModelAndView顾名思义，包含了数据模型以及相应的视图的信息。\n\n⑥ ModelAndView的视图是逻辑视图，DispatcherServlet还要借助ViewResolver完成从逻辑视图到真实视图对象的解析工作。⑦ 当得到真正的视图对象后，DispatcherServlet会利用视图对象对模型数据进行渲染。\n\n⑧ 客户端得到响应，可能是一个普通的HTML页面，也可以是XML或JSON字符串，还可以是一张图片或者一个PDF文件。\n\n![](SpringMVC原理/16b5eb3870589ac4.png)\n\n## 接口的解释\n\n| 接口名称          | 功能                                                         |\n| ----------------- | ------------------------------------------------------------ |\n| DispatcherServlet | Spring提供的前端控制器，客户端的所有请求都由DispatcherServlet负责分发，当然在DispatcherServlet分发之前，还需要一个匹配请求的过程，这个由HandlerMapping来完成。 |\n| HandlerMapping    | 完成客户端请求到Controller映射的工作                         |\n| Controller        | 用于处理用户请求，返回处理结果                               |\n| ViewResolver      | Web应用中查找View对象，从而将相应结果渲染给客户端            |\n\n## DispatcherServlet：\n\n是整个Spring MVC的核心。它负责接收HTTP请求组织协调Spring MVC的各个组成部分。\n\n其主要工作有以下三项：\n\n1. 截获符合特定格式的URL请求。\n2. 初始化DispatcherServlet上下文对应WebApplicationContext，并将其与业务层、持久化层的WebApplicationContext建立关联。\n3. 初始化Spring MVC的各个组成组件，并装配到DispatcherServlet中。\n\n## SpringMVC启动流程\n\n#### 前置知识\n\n大家都知道，我们在使用spring mvc时通常会在`web.xml`文件中做如下配置：\n\n`web.xml`\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app version=\"3.0\" xmlns=\"http://java.sun.com/xml/ns/javaee\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\">\n    \n    \n    <!-- 上下文参数，在监听器中被使用 -->\n    <context-param>\n    \t<param-name>contextConfigLocation</param-name>\n    \t<param-value>\n        \tclasspath:applicationContext.xml\n        </param-value>\n    </context-param>\n    \n    \n    <!-- 监听器配置 -->\n    <listener>\n    \t<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n    \n    <!-- 前端控制器配置 -->\n    <servlet>\n    \t<servlet-name>dispatcher</servlet-name>\n    \t<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    \t<init-param>\n    \t\t<param-name>contextConfigLocation</param-name>\n    \t\t<param-value>classpath:applicationContext-mvc.xml</param-value>\n    \t</init-param>\n    \t<load-on-startup>1</load-on-startup>\n    </servlet>\n    <servlet-mapping>\n    \t<servlet-name>dispatcher</servlet-name>\n    \t<url-pattern>/</url-pattern>\n    </servlet-mapping>\n\n</web-app>\n```\n\n上面的配置总结起来有几点内容，分别是：\n\n- 1、配置Spring Web上下文监听器，该监听器同时是Spring mvc启动的入口，至于为什么，后面第二节将会讲到\n- 2、前端控制器`DispatcherServlet`,该控制器是Spring mvc处理各种请求的入口及处理器\n\n当我们将spring mvc应用部署到tomcat时，当你不配置任何的`context-param`和`listener`参数,只配置一个`DispatcherServlet`时，那么tomcat在启动的时候是不会初始化spring web上下文的，换句话说，tomcat是不会初始化spring框架的，因为你并没有告诉它们spring的配置文件放在什么地方，以及怎么去加载。所以`listener`监听器帮了我们这个忙，那么为什么配置监听器之后就可以告诉tomcat怎么去加载呢？因为`listener`是实现了servlet技术规范的监听器组件，tomcat在启动时会先加载`web.xml`中是否有servlet监听器存在，有则启动它们。`ContextLoaderListener`是spring框架对servlet监听器的一个封装，本质上还是一个servlet监听器，所以会被执行，但由于`ContextLoaderListener`源码中是基于`contextConfigLocation`和`contextClass`两个配置参数去加载相应配置的，因此就有了我们配置的`context-param`参数了，`servlet`标签里的初始化参数也是同样的道理，即告诉web服务器在启动的同时把spring web上下文（`WebApplicationContext`）也给初始化了。\n\n上面讲了下tomcat加载spring mvc应用的大致流程，接下来将从源码入手分析启动原理。\n\n#### Spring MVC web 上下文启动源码分析\n\n假设现在我们把上面`web.xml`文件中的`<load-on-startup>1</load-on-startup>`给去掉，那么默认tomcat启动时只会初始化spring web上下文，也就是说只会加载到`applicationContext.xml`这个文件，对于`applicationContext-mvc.xml`这个配置文件是加载不到的，`<load-on-startup>1</load-on-startup>`的意思就是让`DispatcherServlet`延迟到使用的时候(`也就是处理请求的时候`)再做初始化。\n\n我们已经知道spring web是基于`servlet`标准去封装的，那么很明显，servlet怎么初始化，`WebApplicationContext`web上下文就应该怎么初始化。我们先看看`ContextLoaderListener`的源码是怎样的。\n\n```java\npublic class ContextLoaderListener extends ContextLoader implements ServletContextListener {\n    // 初始化方法\n    @Override\n    public void contextInitialized(ServletContextEvent event) {\n    \tinitWebApplicationContext(event.getServletContext());\n    }\n    // 销毁方法\n    @Override\n    public void contextDestroyed(ServletContextEvent event) {\n    \tcloseWebApplicationContext(event.getServletContext());\n    \tContextCleanupListener.cleanupAttributes(event.getServletContext());\n    }\n}\n```\n\n`ContextLoaderListener`类实现了`ServletContextListener`，本质上是一个servlet监听器，tomcat将会优先加载servlet监听器组件，并调用`contextInitialized`方法,在`contextInitialized`方法中调用`initWebApplicationContext`方法初始化Spring web上下文，看到这焕然大悟，原来Spring mvc的入口就在这里，哈哈~~~赶紧跟进去`initWebApplicationContext`方法看看吧！\n\n`initWebApplicationContext()`方法：\n\n```java\n// 创建web上下文，默认是XmlWebApplicationContext\nif (this.context == null) {\n    this.context = createWebApplicationContext(servletContext);\n}\n\nif (this.context instanceof ConfigurableWebApplicationContext) {\n    ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context;\n    // 如果该容器还没有刷新过\n    if (!cwac.isActive()) {\n    \tif (cwac.getParent() == null) {\n    \t\tApplicationContext parent = loadParentContext(servletContext);\n    \t\tcwac.setParent(parent);\n    \t}\n    \t// 配置并刷新容器\n    \tconfigureAndRefreshWebApplicationContext(cwac, servletContext);\n    }\n}\n```\n\n上面的方法只做了两件事：\n\n- 1、如果spring web容器还没有创建，那么就创建一个全新的spring web容器，并且该容器为root根容器，下面第三节讲到的servlet spring web容器是在此根容器上创建起来的\n- 2、配置并刷新容器\n\n上面代码注释说到默认创建的上下文容器是`XmlWebApplicationContext`,为什么不是其他web上下文呢？为啥不是下面上下文的任何一种呢？\n\n![img](https://user-gold-cdn.xitu.io/2018/7/23/164c646d5fb17327?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n我们可以跟进去`createWebApplicationContext`后就可以发现默认是从一个叫`ContextLoader.properties`文件加载配置的，该文件的内容为：\n\n```html\norg.springframework.web.context.WebApplicationContext=org.springframework.web.context.support.XmlWebApplicationContext\n```\n\n具体实现为：\n\n```java\nprotected Class<?> determineContextClass(ServletContext servletContext) {\n    // 自定义上下文，否则就默认创建XmlWebApplicationContext\n    String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM);\n    if (contextClassName != null) {\n        try {\n        \treturn ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader());\n        }\n        catch (ClassNotFoundException ex) {\n        \tthrow new ApplicationContextException(\n        \t\t\t\"Failed to load custom context class [\" + contextClassName + \"]\", ex);\n        }\n    }\n    else {\n        // 从属性文件中加载类名，也就是org.springframework.web.context.support.XmlWebApplicationContext\n        contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName());\n        try {\n        \treturn ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader());\n        }\n        catch (ClassNotFoundException ex) {\n        \tthrow new ApplicationContextException(\n        \t\t\t\"Failed to load default context class [\" + contextClassName + \"]\", ex);\n        }\n    }\n}\n```\n\n上面可以看出其实我们也可以自定义spring web的上下文的，那么怎么去指定我们自定义的上下文呢？答案是通过在`web.xml`中指定`contextClass`参数，因此第一小结结尾时说`contextClass`参数和`contextConfigLocation`很重要~~至于`contextConfigLocation`参数，我们跟进`configureAndRefreshWebApplicationContext`即可看到，如下图：\n\n![img](SpringMVC原理/3.png)\n\n**总结：**\n\nspring mvc启动流程大致就是从一个叫`ContextLoaderListener`开始的，它是一个servlet监听器，能够被web容器发现并加载，初始化监听器`ContextLoaderListener`之后，接着就是根据配置如`contextConfigLocation`和`contextClass`创建web容器了，如果你不指定`contextClass`参数值，则默认创建的spring web容器类型为`XmlWebApplicationContext`,最后一步就是根据你配置的`contextConfigLocation`文件路径去配置并刷新容器了。\n\n#### DispatcherServlet控制器的初始化\n\n好了，上面我们简单地分析了Spring mvc容器初始化的源码，我们永远不会忘记，我们默认创建的容器类型为`XmlWebApplicationContext`,当然我们也不会忘记，在`web.xml`中，我们还有一个重要的配置，那就是`DispatcherServlet`。下面我们就来分析下`DispatcherServlet`的初始化过程。\n\n`DispatcherServlet`，就是一个servlet，一个用来处理request请求的servlet，它是spring mvc的核心，所有的请求都经过它，并由它指定后续操作该怎么执行，咋一看像一扇门，因此我管它叫“闸门”。在我们继续之前，我们应该共同遵守一个常识，那就是-------无论是监听器还是servlet，都是servlet规范组件，web服务器都可以发现并加载它们。\n\n下面我们先看看`DispatcherServlet`的继承关系：\n\n![img](SpringMVC原理/4.png)\n\n看到这我们是不是一目了然了，`DispatcherServlet`继承了`HttpServlet`这个类，`HttpServlet`是servlet技术规范中专门用于处理http请求的servlet，这就不难解释为什么spring mvc会将`DispatcherServlet`作为统一请求入口了。\n\n因为一个servlet的生命周期是`init()`->`service()`->`destory()`，那么`DispatcherServlet`怎么初始化呢？看上面的继承图，我们进到`HttpServletBean`去看看。\n\n果不其然，`HttpServletBean`类中有一个`init()`方法，`HttpServletBean`是一个抽象类，`init()`方法如下：\n\n![img](SpringMVC原理/5.png)\n\n可以看出方法采用`final`修饰，因为`final`修饰的方法是不能被子类继承的，也就是子类没有同样的`init()`方法了，这个`init`方法就是`DispatcherServlet`的初始化入口了。\n\n接着我们跟进`FrameworkServlet`的`initServletBean()`方法：\n\n![img](SpringMVC原理/6.png)\n\n在方法中将会初始化不同于第一小节的web容器，请记住，这个新的spring web 容器是专门为`dispactherServlet`服务的，而且这个新容器是在第一小节根ROOT容器的基础上创建的，我们在`<servlet>`标签中配置的初始化参数被加入到新容器中去。\n\n至此，`DispatcherSevlet`的初始化完成了，听着有点蒙蔽，但其实也是这样，上面的分析仅仅只围绕一个方法，它叫`init()`，所有的servlet初始化都将调用该方法。\n\n**总结:**\n\n`dispactherServlet`的初始化做了两件事情，第一件事情就是根据根web容器，也就是我们第一小节创建的`XmlWebApplicationContext`，然后创建一个专门为`dispactherServlet`服务的web容器，第二件事情就是将你在web.xml文件中对`dispactherServlet`进行的相关配置加载到新容器当中。\n\n发现其实大致流程就差不多了。","source":"_posts/SpringMVC原理.md","raw":"---\ntitle: SpringMVC原理\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-04 21:40:42\npassword:\nsummary:\ntags:\ncategories: java\n---\n\n## 概述\n\n[spring](http://lib.csdn.net/base/javaee) MVC主要由DispatcherServlet、处理器映射、处理器(控制器)、视图解析器、视图组成。他的两个核心是:\n\n**处理器映射：** 选择使用哪个控制器来处理请求。 \n**视图解析器：** 选择结果应该如何渲染。\n\n## 运行原理\n\n下图是在Spring官网开发手册上找到的，它清晰的诠释了Spring MVC的运行原理\n\n![](SpringMVC原理/16b5eb3870589ac4.png)\n\n①客户端的所有请求都交给前端控制器DispatcherServlet来处理，它会负责调用系统的其他模块来真正处理用户的请求。\n\n② DispatcherServlet收到请求后，将根据请求的信息（包括URL、HTTP协议方法、请求头、请求参数、Cookie等）以及HandlerMapping的配置找到处理该请求的Handler（任何一个对象都可以作为请求的Handler）。\n\n③在这个地方Spring会通过HandlerAdapter对该处理器进行封装。\n\n④ HandlerAdapter是一个适配器，它用统一的接口对各种Handler中的方法进行调用。\n\n⑤ Handler完成对用户请求的处理后，会返回一个ModelAndView对象给DispatcherServlet，ModelAndView顾名思义，包含了数据模型以及相应的视图的信息。\n\n⑥ ModelAndView的视图是逻辑视图，DispatcherServlet还要借助ViewResolver完成从逻辑视图到真实视图对象的解析工作。⑦ 当得到真正的视图对象后，DispatcherServlet会利用视图对象对模型数据进行渲染。\n\n⑧ 客户端得到响应，可能是一个普通的HTML页面，也可以是XML或JSON字符串，还可以是一张图片或者一个PDF文件。\n\n![](SpringMVC原理/16b5eb3870589ac4.png)\n\n## 接口的解释\n\n| 接口名称          | 功能                                                         |\n| ----------------- | ------------------------------------------------------------ |\n| DispatcherServlet | Spring提供的前端控制器，客户端的所有请求都由DispatcherServlet负责分发，当然在DispatcherServlet分发之前，还需要一个匹配请求的过程，这个由HandlerMapping来完成。 |\n| HandlerMapping    | 完成客户端请求到Controller映射的工作                         |\n| Controller        | 用于处理用户请求，返回处理结果                               |\n| ViewResolver      | Web应用中查找View对象，从而将相应结果渲染给客户端            |\n\n## DispatcherServlet：\n\n是整个Spring MVC的核心。它负责接收HTTP请求组织协调Spring MVC的各个组成部分。\n\n其主要工作有以下三项：\n\n1. 截获符合特定格式的URL请求。\n2. 初始化DispatcherServlet上下文对应WebApplicationContext，并将其与业务层、持久化层的WebApplicationContext建立关联。\n3. 初始化Spring MVC的各个组成组件，并装配到DispatcherServlet中。\n\n## SpringMVC启动流程\n\n#### 前置知识\n\n大家都知道，我们在使用spring mvc时通常会在`web.xml`文件中做如下配置：\n\n`web.xml`\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app version=\"3.0\" xmlns=\"http://java.sun.com/xml/ns/javaee\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\">\n    \n    \n    <!-- 上下文参数，在监听器中被使用 -->\n    <context-param>\n    \t<param-name>contextConfigLocation</param-name>\n    \t<param-value>\n        \tclasspath:applicationContext.xml\n        </param-value>\n    </context-param>\n    \n    \n    <!-- 监听器配置 -->\n    <listener>\n    \t<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n    \n    <!-- 前端控制器配置 -->\n    <servlet>\n    \t<servlet-name>dispatcher</servlet-name>\n    \t<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    \t<init-param>\n    \t\t<param-name>contextConfigLocation</param-name>\n    \t\t<param-value>classpath:applicationContext-mvc.xml</param-value>\n    \t</init-param>\n    \t<load-on-startup>1</load-on-startup>\n    </servlet>\n    <servlet-mapping>\n    \t<servlet-name>dispatcher</servlet-name>\n    \t<url-pattern>/</url-pattern>\n    </servlet-mapping>\n\n</web-app>\n```\n\n上面的配置总结起来有几点内容，分别是：\n\n- 1、配置Spring Web上下文监听器，该监听器同时是Spring mvc启动的入口，至于为什么，后面第二节将会讲到\n- 2、前端控制器`DispatcherServlet`,该控制器是Spring mvc处理各种请求的入口及处理器\n\n当我们将spring mvc应用部署到tomcat时，当你不配置任何的`context-param`和`listener`参数,只配置一个`DispatcherServlet`时，那么tomcat在启动的时候是不会初始化spring web上下文的，换句话说，tomcat是不会初始化spring框架的，因为你并没有告诉它们spring的配置文件放在什么地方，以及怎么去加载。所以`listener`监听器帮了我们这个忙，那么为什么配置监听器之后就可以告诉tomcat怎么去加载呢？因为`listener`是实现了servlet技术规范的监听器组件，tomcat在启动时会先加载`web.xml`中是否有servlet监听器存在，有则启动它们。`ContextLoaderListener`是spring框架对servlet监听器的一个封装，本质上还是一个servlet监听器，所以会被执行，但由于`ContextLoaderListener`源码中是基于`contextConfigLocation`和`contextClass`两个配置参数去加载相应配置的，因此就有了我们配置的`context-param`参数了，`servlet`标签里的初始化参数也是同样的道理，即告诉web服务器在启动的同时把spring web上下文（`WebApplicationContext`）也给初始化了。\n\n上面讲了下tomcat加载spring mvc应用的大致流程，接下来将从源码入手分析启动原理。\n\n#### Spring MVC web 上下文启动源码分析\n\n假设现在我们把上面`web.xml`文件中的`<load-on-startup>1</load-on-startup>`给去掉，那么默认tomcat启动时只会初始化spring web上下文，也就是说只会加载到`applicationContext.xml`这个文件，对于`applicationContext-mvc.xml`这个配置文件是加载不到的，`<load-on-startup>1</load-on-startup>`的意思就是让`DispatcherServlet`延迟到使用的时候(`也就是处理请求的时候`)再做初始化。\n\n我们已经知道spring web是基于`servlet`标准去封装的，那么很明显，servlet怎么初始化，`WebApplicationContext`web上下文就应该怎么初始化。我们先看看`ContextLoaderListener`的源码是怎样的。\n\n```java\npublic class ContextLoaderListener extends ContextLoader implements ServletContextListener {\n    // 初始化方法\n    @Override\n    public void contextInitialized(ServletContextEvent event) {\n    \tinitWebApplicationContext(event.getServletContext());\n    }\n    // 销毁方法\n    @Override\n    public void contextDestroyed(ServletContextEvent event) {\n    \tcloseWebApplicationContext(event.getServletContext());\n    \tContextCleanupListener.cleanupAttributes(event.getServletContext());\n    }\n}\n```\n\n`ContextLoaderListener`类实现了`ServletContextListener`，本质上是一个servlet监听器，tomcat将会优先加载servlet监听器组件，并调用`contextInitialized`方法,在`contextInitialized`方法中调用`initWebApplicationContext`方法初始化Spring web上下文，看到这焕然大悟，原来Spring mvc的入口就在这里，哈哈~~~赶紧跟进去`initWebApplicationContext`方法看看吧！\n\n`initWebApplicationContext()`方法：\n\n```java\n// 创建web上下文，默认是XmlWebApplicationContext\nif (this.context == null) {\n    this.context = createWebApplicationContext(servletContext);\n}\n\nif (this.context instanceof ConfigurableWebApplicationContext) {\n    ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context;\n    // 如果该容器还没有刷新过\n    if (!cwac.isActive()) {\n    \tif (cwac.getParent() == null) {\n    \t\tApplicationContext parent = loadParentContext(servletContext);\n    \t\tcwac.setParent(parent);\n    \t}\n    \t// 配置并刷新容器\n    \tconfigureAndRefreshWebApplicationContext(cwac, servletContext);\n    }\n}\n```\n\n上面的方法只做了两件事：\n\n- 1、如果spring web容器还没有创建，那么就创建一个全新的spring web容器，并且该容器为root根容器，下面第三节讲到的servlet spring web容器是在此根容器上创建起来的\n- 2、配置并刷新容器\n\n上面代码注释说到默认创建的上下文容器是`XmlWebApplicationContext`,为什么不是其他web上下文呢？为啥不是下面上下文的任何一种呢？\n\n![img](https://user-gold-cdn.xitu.io/2018/7/23/164c646d5fb17327?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n我们可以跟进去`createWebApplicationContext`后就可以发现默认是从一个叫`ContextLoader.properties`文件加载配置的，该文件的内容为：\n\n```html\norg.springframework.web.context.WebApplicationContext=org.springframework.web.context.support.XmlWebApplicationContext\n```\n\n具体实现为：\n\n```java\nprotected Class<?> determineContextClass(ServletContext servletContext) {\n    // 自定义上下文，否则就默认创建XmlWebApplicationContext\n    String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM);\n    if (contextClassName != null) {\n        try {\n        \treturn ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader());\n        }\n        catch (ClassNotFoundException ex) {\n        \tthrow new ApplicationContextException(\n        \t\t\t\"Failed to load custom context class [\" + contextClassName + \"]\", ex);\n        }\n    }\n    else {\n        // 从属性文件中加载类名，也就是org.springframework.web.context.support.XmlWebApplicationContext\n        contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName());\n        try {\n        \treturn ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader());\n        }\n        catch (ClassNotFoundException ex) {\n        \tthrow new ApplicationContextException(\n        \t\t\t\"Failed to load default context class [\" + contextClassName + \"]\", ex);\n        }\n    }\n}\n```\n\n上面可以看出其实我们也可以自定义spring web的上下文的，那么怎么去指定我们自定义的上下文呢？答案是通过在`web.xml`中指定`contextClass`参数，因此第一小结结尾时说`contextClass`参数和`contextConfigLocation`很重要~~至于`contextConfigLocation`参数，我们跟进`configureAndRefreshWebApplicationContext`即可看到，如下图：\n\n![img](SpringMVC原理/3.png)\n\n**总结：**\n\nspring mvc启动流程大致就是从一个叫`ContextLoaderListener`开始的，它是一个servlet监听器，能够被web容器发现并加载，初始化监听器`ContextLoaderListener`之后，接着就是根据配置如`contextConfigLocation`和`contextClass`创建web容器了，如果你不指定`contextClass`参数值，则默认创建的spring web容器类型为`XmlWebApplicationContext`,最后一步就是根据你配置的`contextConfigLocation`文件路径去配置并刷新容器了。\n\n#### DispatcherServlet控制器的初始化\n\n好了，上面我们简单地分析了Spring mvc容器初始化的源码，我们永远不会忘记，我们默认创建的容器类型为`XmlWebApplicationContext`,当然我们也不会忘记，在`web.xml`中，我们还有一个重要的配置，那就是`DispatcherServlet`。下面我们就来分析下`DispatcherServlet`的初始化过程。\n\n`DispatcherServlet`，就是一个servlet，一个用来处理request请求的servlet，它是spring mvc的核心，所有的请求都经过它，并由它指定后续操作该怎么执行，咋一看像一扇门，因此我管它叫“闸门”。在我们继续之前，我们应该共同遵守一个常识，那就是-------无论是监听器还是servlet，都是servlet规范组件，web服务器都可以发现并加载它们。\n\n下面我们先看看`DispatcherServlet`的继承关系：\n\n![img](SpringMVC原理/4.png)\n\n看到这我们是不是一目了然了，`DispatcherServlet`继承了`HttpServlet`这个类，`HttpServlet`是servlet技术规范中专门用于处理http请求的servlet，这就不难解释为什么spring mvc会将`DispatcherServlet`作为统一请求入口了。\n\n因为一个servlet的生命周期是`init()`->`service()`->`destory()`，那么`DispatcherServlet`怎么初始化呢？看上面的继承图，我们进到`HttpServletBean`去看看。\n\n果不其然，`HttpServletBean`类中有一个`init()`方法，`HttpServletBean`是一个抽象类，`init()`方法如下：\n\n![img](SpringMVC原理/5.png)\n\n可以看出方法采用`final`修饰，因为`final`修饰的方法是不能被子类继承的，也就是子类没有同样的`init()`方法了，这个`init`方法就是`DispatcherServlet`的初始化入口了。\n\n接着我们跟进`FrameworkServlet`的`initServletBean()`方法：\n\n![img](SpringMVC原理/6.png)\n\n在方法中将会初始化不同于第一小节的web容器，请记住，这个新的spring web 容器是专门为`dispactherServlet`服务的，而且这个新容器是在第一小节根ROOT容器的基础上创建的，我们在`<servlet>`标签中配置的初始化参数被加入到新容器中去。\n\n至此，`DispatcherSevlet`的初始化完成了，听着有点蒙蔽，但其实也是这样，上面的分析仅仅只围绕一个方法，它叫`init()`，所有的servlet初始化都将调用该方法。\n\n**总结:**\n\n`dispactherServlet`的初始化做了两件事情，第一件事情就是根据根web容器，也就是我们第一小节创建的`XmlWebApplicationContext`，然后创建一个专门为`dispactherServlet`服务的web容器，第二件事情就是将你在web.xml文件中对`dispactherServlet`进行的相关配置加载到新容器当中。\n\n发现其实大致流程就差不多了。","slug":"SpringMVC原理","published":1,"updated":"2021-04-29T10:36:06.689Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mlbe001bvkvytsyeismh","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><a href=\"http://lib.csdn.net/base/javaee\" target=\"_blank\" rel=\"noopener\">spring</a> MVC主要由DispatcherServlet、处理器映射、处理器(控制器)、视图解析器、视图组成。他的两个核心是:</p>\n<p><strong>处理器映射：</strong> 选择使用哪个控制器来处理请求。<br><strong>视图解析器：</strong> 选择结果应该如何渲染。</p>\n<h2 id=\"运行原理\"><a href=\"#运行原理\" class=\"headerlink\" title=\"运行原理\"></a>运行原理</h2><p>下图是在Spring官网开发手册上找到的，它清晰的诠释了Spring MVC的运行原理</p>\n<p><img src=\"/2020/01/04/springmvc-yuan-li/16b5eb3870589ac4.png\" alt></p>\n<p>①客户端的所有请求都交给前端控制器DispatcherServlet来处理，它会负责调用系统的其他模块来真正处理用户的请求。</p>\n<p>② DispatcherServlet收到请求后，将根据请求的信息（包括URL、HTTP协议方法、请求头、请求参数、Cookie等）以及HandlerMapping的配置找到处理该请求的Handler（任何一个对象都可以作为请求的Handler）。</p>\n<p>③在这个地方Spring会通过HandlerAdapter对该处理器进行封装。</p>\n<p>④ HandlerAdapter是一个适配器，它用统一的接口对各种Handler中的方法进行调用。</p>\n<p>⑤ Handler完成对用户请求的处理后，会返回一个ModelAndView对象给DispatcherServlet，ModelAndView顾名思义，包含了数据模型以及相应的视图的信息。</p>\n<p>⑥ ModelAndView的视图是逻辑视图，DispatcherServlet还要借助ViewResolver完成从逻辑视图到真实视图对象的解析工作。⑦ 当得到真正的视图对象后，DispatcherServlet会利用视图对象对模型数据进行渲染。</p>\n<p>⑧ 客户端得到响应，可能是一个普通的HTML页面，也可以是XML或JSON字符串，还可以是一张图片或者一个PDF文件。</p>\n<p><img src=\"/2020/01/04/springmvc-yuan-li/16b5eb3870589ac4.png\" alt></p>\n<h2 id=\"接口的解释\"><a href=\"#接口的解释\" class=\"headerlink\" title=\"接口的解释\"></a>接口的解释</h2><table>\n<thead>\n<tr>\n<th>接口名称</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>DispatcherServlet</td>\n<td>Spring提供的前端控制器，客户端的所有请求都由DispatcherServlet负责分发，当然在DispatcherServlet分发之前，还需要一个匹配请求的过程，这个由HandlerMapping来完成。</td>\n</tr>\n<tr>\n<td>HandlerMapping</td>\n<td>完成客户端请求到Controller映射的工作</td>\n</tr>\n<tr>\n<td>Controller</td>\n<td>用于处理用户请求，返回处理结果</td>\n</tr>\n<tr>\n<td>ViewResolver</td>\n<td>Web应用中查找View对象，从而将相应结果渲染给客户端</td>\n</tr>\n</tbody></table>\n<h2 id=\"DispatcherServlet：\"><a href=\"#DispatcherServlet：\" class=\"headerlink\" title=\"DispatcherServlet：\"></a>DispatcherServlet：</h2><p>是整个Spring MVC的核心。它负责接收HTTP请求组织协调Spring MVC的各个组成部分。</p>\n<p>其主要工作有以下三项：</p>\n<ol>\n<li>截获符合特定格式的URL请求。</li>\n<li>初始化DispatcherServlet上下文对应WebApplicationContext，并将其与业务层、持久化层的WebApplicationContext建立关联。</li>\n<li>初始化Spring MVC的各个组成组件，并装配到DispatcherServlet中。</li>\n</ol>\n<h2 id=\"SpringMVC启动流程\"><a href=\"#SpringMVC启动流程\" class=\"headerlink\" title=\"SpringMVC启动流程\"></a>SpringMVC启动流程</h2><h4 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h4><p>大家都知道，我们在使用spring mvc时通常会在<code>web.xml</code>文件中做如下配置：</p>\n<p><code>web.xml</code></p>\n<pre class=\"line-numbers language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>web-app</span> <span class=\"token attr-name\">version</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>3.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://java.sun.com/xml/ns/javaee<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>xsi</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://www.w3.org/2001/XMLSchema-instance<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">xsi:</span>schemaLocation</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 上下文参数，在监听器中被使用 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>context-param</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-name</span><span class=\"token punctuation\">></span></span>contextConfigLocation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-value</span><span class=\"token punctuation\">></span></span>\n            classpath:applicationContext.xml\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-value</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>context-param</span><span class=\"token punctuation\">></span></span>\n\n\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 监听器配置 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listener</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>listener-class</span><span class=\"token punctuation\">></span></span>org.springframework.web.context.ContextLoaderListener<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>listener-class</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>listener</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 前端控制器配置 --></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>dispatcher<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-class</span><span class=\"token punctuation\">></span></span>org.springframework.web.servlet.DispatcherServlet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-class</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>init-param</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-name</span><span class=\"token punctuation\">></span></span>contextConfigLocation<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-name</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>param-value</span><span class=\"token punctuation\">></span></span>classpath:applicationContext-mvc.xml<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>param-value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>init-param</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>load-on-startup</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>load-on-startup</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>servlet-name</span><span class=\"token punctuation\">></span></span>dispatcher<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>url-pattern</span><span class=\"token punctuation\">></span></span>/<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>url-pattern</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>servlet-mapping</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>web-app</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面的配置总结起来有几点内容，分别是：</p>\n<ul>\n<li>1、配置Spring Web上下文监听器，该监听器同时是Spring mvc启动的入口，至于为什么，后面第二节将会讲到</li>\n<li>2、前端控制器<code>DispatcherServlet</code>,该控制器是Spring mvc处理各种请求的入口及处理器</li>\n</ul>\n<p>当我们将spring mvc应用部署到tomcat时，当你不配置任何的<code>context-param</code>和<code>listener</code>参数,只配置一个<code>DispatcherServlet</code>时，那么tomcat在启动的时候是不会初始化spring web上下文的，换句话说，tomcat是不会初始化spring框架的，因为你并没有告诉它们spring的配置文件放在什么地方，以及怎么去加载。所以<code>listener</code>监听器帮了我们这个忙，那么为什么配置监听器之后就可以告诉tomcat怎么去加载呢？因为<code>listener</code>是实现了servlet技术规范的监听器组件，tomcat在启动时会先加载<code>web.xml</code>中是否有servlet监听器存在，有则启动它们。<code>ContextLoaderListener</code>是spring框架对servlet监听器的一个封装，本质上还是一个servlet监听器，所以会被执行，但由于<code>ContextLoaderListener</code>源码中是基于<code>contextConfigLocation</code>和<code>contextClass</code>两个配置参数去加载相应配置的，因此就有了我们配置的<code>context-param</code>参数了，<code>servlet</code>标签里的初始化参数也是同样的道理，即告诉web服务器在启动的同时把spring web上下文（<code>WebApplicationContext</code>）也给初始化了。</p>\n<p>上面讲了下tomcat加载spring mvc应用的大致流程，接下来将从源码入手分析启动原理。</p>\n<h4 id=\"Spring-MVC-web-上下文启动源码分析\"><a href=\"#Spring-MVC-web-上下文启动源码分析\" class=\"headerlink\" title=\"Spring MVC web 上下文启动源码分析\"></a>Spring MVC web 上下文启动源码分析</h4><p>假设现在我们把上面<code>web.xml</code>文件中的<code>&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</code>给去掉，那么默认tomcat启动时只会初始化spring web上下文，也就是说只会加载到<code>applicationContext.xml</code>这个文件，对于<code>applicationContext-mvc.xml</code>这个配置文件是加载不到的，<code>&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</code>的意思就是让<code>DispatcherServlet</code>延迟到使用的时候(<code>也就是处理请求的时候</code>)再做初始化。</p>\n<p>我们已经知道spring web是基于<code>servlet</code>标准去封装的，那么很明显，servlet怎么初始化，<code>WebApplicationContext</code>web上下文就应该怎么初始化。我们先看看<code>ContextLoaderListener</code>的源码是怎样的。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ContextLoaderListener</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ContextLoader</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ServletContextListener</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 初始化方法</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">contextInitialized</span><span class=\"token punctuation\">(</span>ServletContextEvent event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">initWebApplicationContext</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 销毁方法</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">contextDestroyed</span><span class=\"token punctuation\">(</span>ServletContextEvent event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">closeWebApplicationContext</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ContextCleanupListener<span class=\"token punctuation\">.</span><span class=\"token function\">cleanupAttributes</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getServletContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>ContextLoaderListener</code>类实现了<code>ServletContextListener</code>，本质上是一个servlet监听器，tomcat将会优先加载servlet监听器组件，并调用<code>contextInitialized</code>方法,在<code>contextInitialized</code>方法中调用<code>initWebApplicationContext</code>方法初始化Spring web上下文，看到这焕然大悟，原来Spring mvc的入口就在这里，哈哈<del>~</del>赶紧跟进去<code>initWebApplicationContext</code>方法看看吧！</p>\n<p><code>initWebApplicationContext()</code>方法：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// 创建web上下文，默认是XmlWebApplicationContext</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context <span class=\"token operator\">=</span> <span class=\"token function\">createWebApplicationContext</span><span class=\"token punctuation\">(</span>servletContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ConfigurableWebApplicationContext</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ConfigurableWebApplicationContext cwac <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ConfigurableWebApplicationContext<span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 如果该容器还没有刷新过</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cwac<span class=\"token punctuation\">.</span><span class=\"token function\">isActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cwac<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ApplicationContext parent <span class=\"token operator\">=</span> <span class=\"token function\">loadParentContext</span><span class=\"token punctuation\">(</span>servletContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cwac<span class=\"token punctuation\">.</span><span class=\"token function\">setParent</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 配置并刷新容器</span>\n        <span class=\"token function\">configureAndRefreshWebApplicationContext</span><span class=\"token punctuation\">(</span>cwac<span class=\"token punctuation\">,</span> servletContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面的方法只做了两件事：</p>\n<ul>\n<li>1、如果spring web容器还没有创建，那么就创建一个全新的spring web容器，并且该容器为root根容器，下面第三节讲到的servlet spring web容器是在此根容器上创建起来的</li>\n<li>2、配置并刷新容器</li>\n</ul>\n<p>上面代码注释说到默认创建的上下文容器是<code>XmlWebApplicationContext</code>,为什么不是其他web上下文呢？为啥不是下面上下文的任何一种呢？</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/7/23/164c646d5fb17327?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"img\"></p>\n<p>我们可以跟进去<code>createWebApplicationContext</code>后就可以发现默认是从一个叫<code>ContextLoader.properties</code>文件加载配置的，该文件的内容为：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">org.springframework.web.context.WebApplicationContext=org.springframework.web.context.support.XmlWebApplicationContext<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>具体实现为：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token function\">determineContextClass</span><span class=\"token punctuation\">(</span>ServletContext servletContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 自定义上下文，否则就默认创建XmlWebApplicationContext</span>\n    String contextClassName <span class=\"token operator\">=</span> servletContext<span class=\"token punctuation\">.</span><span class=\"token function\">getInitParameter</span><span class=\"token punctuation\">(</span>CONTEXT_CLASS_PARAM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>contextClassName <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> ClassUtils<span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>contextClassName<span class=\"token punctuation\">,</span> ClassUtils<span class=\"token punctuation\">.</span><span class=\"token function\">getDefaultClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApplicationContextException</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token string\">\"Failed to load custom context class [\"</span> <span class=\"token operator\">+</span> contextClassName <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 从属性文件中加载类名，也就是org.springframework.web.context.support.XmlWebApplicationContext</span>\n        contextClassName <span class=\"token operator\">=</span> defaultStrategies<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span>WebApplicationContext<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> ClassUtils<span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>contextClassName<span class=\"token punctuation\">,</span> ContextLoader<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApplicationContextException</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token string\">\"Failed to load default context class [\"</span> <span class=\"token operator\">+</span> contextClassName <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面可以看出其实我们也可以自定义spring web的上下文的，那么怎么去指定我们自定义的上下文呢？答案是通过在<code>web.xml</code>中指定<code>contextClass</code>参数，因此第一小结结尾时说<code>contextClass</code>参数和<code>contextConfigLocation</code>很重要~~至于<code>contextConfigLocation</code>参数，我们跟进<code>configureAndRefreshWebApplicationContext</code>即可看到，如下图：</p>\n<p><img src=\"/2020/01/04/springmvc-yuan-li/3.png\" alt=\"img\"></p>\n<p><strong>总结：</strong></p>\n<p>spring mvc启动流程大致就是从一个叫<code>ContextLoaderListener</code>开始的，它是一个servlet监听器，能够被web容器发现并加载，初始化监听器<code>ContextLoaderListener</code>之后，接着就是根据配置如<code>contextConfigLocation</code>和<code>contextClass</code>创建web容器了，如果你不指定<code>contextClass</code>参数值，则默认创建的spring web容器类型为<code>XmlWebApplicationContext</code>,最后一步就是根据你配置的<code>contextConfigLocation</code>文件路径去配置并刷新容器了。</p>\n<h4 id=\"DispatcherServlet控制器的初始化\"><a href=\"#DispatcherServlet控制器的初始化\" class=\"headerlink\" title=\"DispatcherServlet控制器的初始化\"></a>DispatcherServlet控制器的初始化</h4><p>好了，上面我们简单地分析了Spring mvc容器初始化的源码，我们永远不会忘记，我们默认创建的容器类型为<code>XmlWebApplicationContext</code>,当然我们也不会忘记，在<code>web.xml</code>中，我们还有一个重要的配置，那就是<code>DispatcherServlet</code>。下面我们就来分析下<code>DispatcherServlet</code>的初始化过程。</p>\n<p><code>DispatcherServlet</code>，就是一个servlet，一个用来处理request请求的servlet，它是spring mvc的核心，所有的请求都经过它，并由它指定后续操作该怎么执行，咋一看像一扇门，因此我管它叫“闸门”。在我们继续之前，我们应该共同遵守一个常识，那就是——-无论是监听器还是servlet，都是servlet规范组件，web服务器都可以发现并加载它们。</p>\n<p>下面我们先看看<code>DispatcherServlet</code>的继承关系：</p>\n<p><img src=\"/2020/01/04/springmvc-yuan-li/4.png\" alt=\"img\"></p>\n<p>看到这我们是不是一目了然了，<code>DispatcherServlet</code>继承了<code>HttpServlet</code>这个类，<code>HttpServlet</code>是servlet技术规范中专门用于处理http请求的servlet，这就不难解释为什么spring mvc会将<code>DispatcherServlet</code>作为统一请求入口了。</p>\n<p>因为一个servlet的生命周期是<code>init()</code>-&gt;<code>service()</code>-&gt;<code>destory()</code>，那么<code>DispatcherServlet</code>怎么初始化呢？看上面的继承图，我们进到<code>HttpServletBean</code>去看看。</p>\n<p>果不其然，<code>HttpServletBean</code>类中有一个<code>init()</code>方法，<code>HttpServletBean</code>是一个抽象类，<code>init()</code>方法如下：</p>\n<p><img src=\"/2020/01/04/springmvc-yuan-li/5.png\" alt=\"img\"></p>\n<p>可以看出方法采用<code>final</code>修饰，因为<code>final</code>修饰的方法是不能被子类继承的，也就是子类没有同样的<code>init()</code>方法了，这个<code>init</code>方法就是<code>DispatcherServlet</code>的初始化入口了。</p>\n<p>接着我们跟进<code>FrameworkServlet</code>的<code>initServletBean()</code>方法：</p>\n<p><img src=\"/2020/01/04/springmvc-yuan-li/6.png\" alt=\"img\"></p>\n<p>在方法中将会初始化不同于第一小节的web容器，请记住，这个新的spring web 容器是专门为<code>dispactherServlet</code>服务的，而且这个新容器是在第一小节根ROOT容器的基础上创建的，我们在<code>&lt;servlet&gt;</code>标签中配置的初始化参数被加入到新容器中去。</p>\n<p>至此，<code>DispatcherSevlet</code>的初始化完成了，听着有点蒙蔽，但其实也是这样，上面的分析仅仅只围绕一个方法，它叫<code>init()</code>，所有的servlet初始化都将调用该方法。</p>\n<p><strong>总结:</strong></p>\n<p><code>dispactherServlet</code>的初始化做了两件事情，第一件事情就是根据根web容器，也就是我们第一小节创建的<code>XmlWebApplicationContext</code>，然后创建一个专门为<code>dispactherServlet</code>服务的web容器，第二件事情就是将你在web.xml文件中对<code>dispactherServlet</code>进行的相关配置加载到新容器当中。</p>\n<p>发现其实大致流程就差不多了。</p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><a href=\"http://lib.csdn.net/base/javaee\" target=\"_blank\" rel=\"noopener\">spring</a> MVC主要由DispatcherServlet、处理器映射、处理器(控制器)、视图解析器、视图组成。他的两个核心是:</p>\n<p><strong>处理器映射：</strong> 选择使用哪个控制器来处理请求。<br><strong>视图解析器：</strong> 选择结果应该如何渲染。</p>\n<h2 id=\"运行原理\"><a href=\"#运行原理\" class=\"headerlink\" title=\"运行原理\"></a>运行原理</h2><p>下图是在Spring官网开发手册上找到的，它清晰的诠释了Spring MVC的运行原理</p>\n<p><img src=\"/2020/01/04/springmvc-yuan-li/16b5eb3870589ac4.png\" alt></p>\n<p>①客户端的所有请求都交给前端控制器DispatcherServlet来处理，它会负责调用系统的其他模块来真正处理用户的请求。</p>\n<p>② DispatcherServlet收到请求后，将根据请求的信息（包括URL、HTTP协议方法、请求头、请求参数、Cookie等）以及HandlerMapping的配置找到处理该请求的Handler（任何一个对象都可以作为请求的Handler）。</p>\n<p>③在这个地方Spring会通过HandlerAdapter对该处理器进行封装。</p>\n<p>④ HandlerAdapter是一个适配器，它用统一的接口对各种Handler中的方法进行调用。</p>\n<p>⑤ Handler完成对用户请求的处理后，会返回一个ModelAndView对象给DispatcherServlet，ModelAndView顾名思义，包含了数据模型以及相应的视图的信息。</p>\n<p>⑥ ModelAndView的视图是逻辑视图，DispatcherServlet还要借助ViewResolver完成从逻辑视图到真实视图对象的解析工作。⑦ 当得到真正的视图对象后，DispatcherServlet会利用视图对象对模型数据进行渲染。</p>\n<p>⑧ 客户端得到响应，可能是一个普通的HTML页面，也可以是XML或JSON字符串，还可以是一张图片或者一个PDF文件。</p>\n<p><img src=\"/2020/01/04/springmvc-yuan-li/16b5eb3870589ac4.png\" alt></p>\n<h2 id=\"接口的解释\"><a href=\"#接口的解释\" class=\"headerlink\" title=\"接口的解释\"></a>接口的解释</h2><table>\n<thead>\n<tr>\n<th>接口名称</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>DispatcherServlet</td>\n<td>Spring提供的前端控制器，客户端的所有请求都由DispatcherServlet负责分发，当然在DispatcherServlet分发之前，还需要一个匹配请求的过程，这个由HandlerMapping来完成。</td>\n</tr>\n<tr>\n<td>HandlerMapping</td>\n<td>完成客户端请求到Controller映射的工作</td>\n</tr>\n<tr>\n<td>Controller</td>\n<td>用于处理用户请求，返回处理结果</td>\n</tr>\n<tr>\n<td>ViewResolver</td>\n<td>Web应用中查找View对象，从而将相应结果渲染给客户端</td>\n</tr>\n</tbody></table>\n<h2 id=\"DispatcherServlet：\"><a href=\"#DispatcherServlet：\" class=\"headerlink\" title=\"DispatcherServlet：\"></a>DispatcherServlet：</h2><p>是整个Spring MVC的核心。它负责接收HTTP请求组织协调Spring MVC的各个组成部分。</p>\n<p>其主要工作有以下三项：</p>\n<ol>\n<li>截获符合特定格式的URL请求。</li>\n<li>初始化DispatcherServlet上下文对应WebApplicationContext，并将其与业务层、持久化层的WebApplicationContext建立关联。</li>\n<li>初始化Spring MVC的各个组成组件，并装配到DispatcherServlet中。</li>\n</ol>\n<h2 id=\"SpringMVC启动流程\"><a href=\"#SpringMVC启动流程\" class=\"headerlink\" title=\"SpringMVC启动流程\"></a>SpringMVC启动流程</h2><h4 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h4><p>大家都知道，我们在使用spring mvc时通常会在<code>web.xml</code>文件中做如下配置：</p>\n<p><code>web.xml</code></p>\n<pre><code class=\"xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;web-app version=&quot;3.0&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;\n    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n    xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;&gt;\n\n\n    &lt;!-- 上下文参数，在监听器中被使用 --&gt;\n    &lt;context-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;\n            classpath:applicationContext.xml\n        &lt;/param-value&gt;\n    &lt;/context-param&gt;\n\n\n    &lt;!-- 监听器配置 --&gt;\n    &lt;listener&gt;\n        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;\n    &lt;/listener&gt;\n\n    &lt;!-- 前端控制器配置 --&gt;\n    &lt;servlet&gt;\n        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;\n        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n        &lt;init-param&gt;\n            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n            &lt;param-value&gt;classpath:applicationContext-mvc.xml&lt;/param-value&gt;\n        &lt;/init-param&gt;\n        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;\n    &lt;/servlet&gt;\n    &lt;servlet-mapping&gt;\n        &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt;\n        &lt;url-pattern&gt;/&lt;/url-pattern&gt;\n    &lt;/servlet-mapping&gt;\n\n&lt;/web-app&gt;</code></pre>\n<p>上面的配置总结起来有几点内容，分别是：</p>\n<ul>\n<li>1、配置Spring Web上下文监听器，该监听器同时是Spring mvc启动的入口，至于为什么，后面第二节将会讲到</li>\n<li>2、前端控制器<code>DispatcherServlet</code>,该控制器是Spring mvc处理各种请求的入口及处理器</li>\n</ul>\n<p>当我们将spring mvc应用部署到tomcat时，当你不配置任何的<code>context-param</code>和<code>listener</code>参数,只配置一个<code>DispatcherServlet</code>时，那么tomcat在启动的时候是不会初始化spring web上下文的，换句话说，tomcat是不会初始化spring框架的，因为你并没有告诉它们spring的配置文件放在什么地方，以及怎么去加载。所以<code>listener</code>监听器帮了我们这个忙，那么为什么配置监听器之后就可以告诉tomcat怎么去加载呢？因为<code>listener</code>是实现了servlet技术规范的监听器组件，tomcat在启动时会先加载<code>web.xml</code>中是否有servlet监听器存在，有则启动它们。<code>ContextLoaderListener</code>是spring框架对servlet监听器的一个封装，本质上还是一个servlet监听器，所以会被执行，但由于<code>ContextLoaderListener</code>源码中是基于<code>contextConfigLocation</code>和<code>contextClass</code>两个配置参数去加载相应配置的，因此就有了我们配置的<code>context-param</code>参数了，<code>servlet</code>标签里的初始化参数也是同样的道理，即告诉web服务器在启动的同时把spring web上下文（<code>WebApplicationContext</code>）也给初始化了。</p>\n<p>上面讲了下tomcat加载spring mvc应用的大致流程，接下来将从源码入手分析启动原理。</p>\n<h4 id=\"Spring-MVC-web-上下文启动源码分析\"><a href=\"#Spring-MVC-web-上下文启动源码分析\" class=\"headerlink\" title=\"Spring MVC web 上下文启动源码分析\"></a>Spring MVC web 上下文启动源码分析</h4><p>假设现在我们把上面<code>web.xml</code>文件中的<code>&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</code>给去掉，那么默认tomcat启动时只会初始化spring web上下文，也就是说只会加载到<code>applicationContext.xml</code>这个文件，对于<code>applicationContext-mvc.xml</code>这个配置文件是加载不到的，<code>&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</code>的意思就是让<code>DispatcherServlet</code>延迟到使用的时候(<code>也就是处理请求的时候</code>)再做初始化。</p>\n<p>我们已经知道spring web是基于<code>servlet</code>标准去封装的，那么很明显，servlet怎么初始化，<code>WebApplicationContext</code>web上下文就应该怎么初始化。我们先看看<code>ContextLoaderListener</code>的源码是怎样的。</p>\n<pre><code class=\"java\">public class ContextLoaderListener extends ContextLoader implements ServletContextListener {\n    // 初始化方法\n    @Override\n    public void contextInitialized(ServletContextEvent event) {\n        initWebApplicationContext(event.getServletContext());\n    }\n    // 销毁方法\n    @Override\n    public void contextDestroyed(ServletContextEvent event) {\n        closeWebApplicationContext(event.getServletContext());\n        ContextCleanupListener.cleanupAttributes(event.getServletContext());\n    }\n}</code></pre>\n<p><code>ContextLoaderListener</code>类实现了<code>ServletContextListener</code>，本质上是一个servlet监听器，tomcat将会优先加载servlet监听器组件，并调用<code>contextInitialized</code>方法,在<code>contextInitialized</code>方法中调用<code>initWebApplicationContext</code>方法初始化Spring web上下文，看到这焕然大悟，原来Spring mvc的入口就在这里，哈哈<del>~</del>赶紧跟进去<code>initWebApplicationContext</code>方法看看吧！</p>\n<p><code>initWebApplicationContext()</code>方法：</p>\n<pre><code class=\"java\">// 创建web上下文，默认是XmlWebApplicationContext\nif (this.context == null) {\n    this.context = createWebApplicationContext(servletContext);\n}\n\nif (this.context instanceof ConfigurableWebApplicationContext) {\n    ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) this.context;\n    // 如果该容器还没有刷新过\n    if (!cwac.isActive()) {\n        if (cwac.getParent() == null) {\n            ApplicationContext parent = loadParentContext(servletContext);\n            cwac.setParent(parent);\n        }\n        // 配置并刷新容器\n        configureAndRefreshWebApplicationContext(cwac, servletContext);\n    }\n}</code></pre>\n<p>上面的方法只做了两件事：</p>\n<ul>\n<li>1、如果spring web容器还没有创建，那么就创建一个全新的spring web容器，并且该容器为root根容器，下面第三节讲到的servlet spring web容器是在此根容器上创建起来的</li>\n<li>2、配置并刷新容器</li>\n</ul>\n<p>上面代码注释说到默认创建的上下文容器是<code>XmlWebApplicationContext</code>,为什么不是其他web上下文呢？为啥不是下面上下文的任何一种呢？</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2018/7/23/164c646d5fb17327?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"img\"></p>\n<p>我们可以跟进去<code>createWebApplicationContext</code>后就可以发现默认是从一个叫<code>ContextLoader.properties</code>文件加载配置的，该文件的内容为：</p>\n<pre><code class=\"html\">org.springframework.web.context.WebApplicationContext=org.springframework.web.context.support.XmlWebApplicationContext</code></pre>\n<p>具体实现为：</p>\n<pre><code class=\"java\">protected Class&lt;?&gt; determineContextClass(ServletContext servletContext) {\n    // 自定义上下文，否则就默认创建XmlWebApplicationContext\n    String contextClassName = servletContext.getInitParameter(CONTEXT_CLASS_PARAM);\n    if (contextClassName != null) {\n        try {\n            return ClassUtils.forName(contextClassName, ClassUtils.getDefaultClassLoader());\n        }\n        catch (ClassNotFoundException ex) {\n            throw new ApplicationContextException(\n                    &quot;Failed to load custom context class [&quot; + contextClassName + &quot;]&quot;, ex);\n        }\n    }\n    else {\n        // 从属性文件中加载类名，也就是org.springframework.web.context.support.XmlWebApplicationContext\n        contextClassName = defaultStrategies.getProperty(WebApplicationContext.class.getName());\n        try {\n            return ClassUtils.forName(contextClassName, ContextLoader.class.getClassLoader());\n        }\n        catch (ClassNotFoundException ex) {\n            throw new ApplicationContextException(\n                    &quot;Failed to load default context class [&quot; + contextClassName + &quot;]&quot;, ex);\n        }\n    }\n}</code></pre>\n<p>上面可以看出其实我们也可以自定义spring web的上下文的，那么怎么去指定我们自定义的上下文呢？答案是通过在<code>web.xml</code>中指定<code>contextClass</code>参数，因此第一小结结尾时说<code>contextClass</code>参数和<code>contextConfigLocation</code>很重要~~至于<code>contextConfigLocation</code>参数，我们跟进<code>configureAndRefreshWebApplicationContext</code>即可看到，如下图：</p>\n<p><img src=\"/2020/01/04/springmvc-yuan-li/3.png\" alt=\"img\"></p>\n<p><strong>总结：</strong></p>\n<p>spring mvc启动流程大致就是从一个叫<code>ContextLoaderListener</code>开始的，它是一个servlet监听器，能够被web容器发现并加载，初始化监听器<code>ContextLoaderListener</code>之后，接着就是根据配置如<code>contextConfigLocation</code>和<code>contextClass</code>创建web容器了，如果你不指定<code>contextClass</code>参数值，则默认创建的spring web容器类型为<code>XmlWebApplicationContext</code>,最后一步就是根据你配置的<code>contextConfigLocation</code>文件路径去配置并刷新容器了。</p>\n<h4 id=\"DispatcherServlet控制器的初始化\"><a href=\"#DispatcherServlet控制器的初始化\" class=\"headerlink\" title=\"DispatcherServlet控制器的初始化\"></a>DispatcherServlet控制器的初始化</h4><p>好了，上面我们简单地分析了Spring mvc容器初始化的源码，我们永远不会忘记，我们默认创建的容器类型为<code>XmlWebApplicationContext</code>,当然我们也不会忘记，在<code>web.xml</code>中，我们还有一个重要的配置，那就是<code>DispatcherServlet</code>。下面我们就来分析下<code>DispatcherServlet</code>的初始化过程。</p>\n<p><code>DispatcherServlet</code>，就是一个servlet，一个用来处理request请求的servlet，它是spring mvc的核心，所有的请求都经过它，并由它指定后续操作该怎么执行，咋一看像一扇门，因此我管它叫“闸门”。在我们继续之前，我们应该共同遵守一个常识，那就是——-无论是监听器还是servlet，都是servlet规范组件，web服务器都可以发现并加载它们。</p>\n<p>下面我们先看看<code>DispatcherServlet</code>的继承关系：</p>\n<p><img src=\"/2020/01/04/springmvc-yuan-li/4.png\" alt=\"img\"></p>\n<p>看到这我们是不是一目了然了，<code>DispatcherServlet</code>继承了<code>HttpServlet</code>这个类，<code>HttpServlet</code>是servlet技术规范中专门用于处理http请求的servlet，这就不难解释为什么spring mvc会将<code>DispatcherServlet</code>作为统一请求入口了。</p>\n<p>因为一个servlet的生命周期是<code>init()</code>-&gt;<code>service()</code>-&gt;<code>destory()</code>，那么<code>DispatcherServlet</code>怎么初始化呢？看上面的继承图，我们进到<code>HttpServletBean</code>去看看。</p>\n<p>果不其然，<code>HttpServletBean</code>类中有一个<code>init()</code>方法，<code>HttpServletBean</code>是一个抽象类，<code>init()</code>方法如下：</p>\n<p><img src=\"/2020/01/04/springmvc-yuan-li/5.png\" alt=\"img\"></p>\n<p>可以看出方法采用<code>final</code>修饰，因为<code>final</code>修饰的方法是不能被子类继承的，也就是子类没有同样的<code>init()</code>方法了，这个<code>init</code>方法就是<code>DispatcherServlet</code>的初始化入口了。</p>\n<p>接着我们跟进<code>FrameworkServlet</code>的<code>initServletBean()</code>方法：</p>\n<p><img src=\"/2020/01/04/springmvc-yuan-li/6.png\" alt=\"img\"></p>\n<p>在方法中将会初始化不同于第一小节的web容器，请记住，这个新的spring web 容器是专门为<code>dispactherServlet</code>服务的，而且这个新容器是在第一小节根ROOT容器的基础上创建的，我们在<code>&lt;servlet&gt;</code>标签中配置的初始化参数被加入到新容器中去。</p>\n<p>至此，<code>DispatcherSevlet</code>的初始化完成了，听着有点蒙蔽，但其实也是这样，上面的分析仅仅只围绕一个方法，它叫<code>init()</code>，所有的servlet初始化都将调用该方法。</p>\n<p><strong>总结:</strong></p>\n<p><code>dispactherServlet</code>的初始化做了两件事情，第一件事情就是根据根web容器，也就是我们第一小节创建的<code>XmlWebApplicationContext</code>，然后创建一个专门为<code>dispactherServlet</code>服务的web容器，第二件事情就是将你在web.xml文件中对<code>dispactherServlet</code>进行的相关配置加载到新容器当中。</p>\n<p>发现其实大致流程就差不多了。</p>\n"},{"title":"Sqoop-HDFS与外界交互数据的工具","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-16T13:34:23.000Z","password":null,"summary":null,"_content":"\n# Sqoop简介\n\nSqoop是一款开源的工具，主要用于在Hadoop(Hive)与传统的数据库(mysql、postgresql...)间进行数据的传递，可以将一个关系型数据库（例如 ： MySQL ,Oracle ,Postgres等）中的数据导进到Hadoop的HDFS中，也可以将HDFS的数据导进到关系型数据库中。\n\nSqoop项目开始于2009年，最早是作为Hadoop的一个第三方模块存在，后来为了让使用者能够快速部署，也为了让开发人员能够更快速的迭代开发，Sqoop独立成为一个[Apache](https://baike.baidu.com/item/Apache/6265)项目。\n\nSqoop2的最新版本是1.99.7。请注意，2与1不兼容，且特征不完整，它并不打算用于生产部署。\n\n# Sqoop原理\n\n将导入或导出命令翻译成mapreduce程序来实现。\n\n在翻译出的mapreduce中主要是对inputformat和outputformat进行定制。\n\n# Sqoop安装\n\n安装Sqoop的前提是已经具备Java和Hadoop的环境。\n\n## 3.1 下载并解压\n\n1) 下载地址：<http://mirrors.hust.edu.cn/apache/sqoop/1.4.6/>\n\n2) 上传安装包sqoop-1.4.6.bin__hadoop-2.0.4-alpha.tar.gz到虚拟机中\n\n3) 解压sqoop安装包到指定目录，如：\n\n```shell\n tar -zxf sqoop-1.4.6.bin__hadoop-2.0.4-alpha.tar.gz -C /opt/module/\n```\n\n## 3.2 修改配置文件\n\nSqoop的配置文件与大多数大数据框架类似，在sqoop根目录下的conf目录中。\n\n1) 重命名配置文件\n\n```shell\n mv sqoop-env-template.sh sqoop-env.sh\n```\n\n2) 修改配置文件\n\n```html\n# sqoop-env.sh\nexport HADOOP_COMMON_HOME=/opt/module/hadoop-2.7.2\nexport HADOOP_MAPRED_HOME=/opt/module/hadoop-2.7.2\nexport HIVE_HOME=/opt/module/hive\nexport ZOOKEEPER_HOME=/opt/module/zookeeper-3.4.10\nexport ZOOCFGDIR=/opt/module/zookeeper-3.4.10\nexport HBASE_HOME=/opt/module/hbase\n```\n\n## 3.3 拷贝JDBC驱动\n\n拷贝jdbc驱动到sqoop的lib目录下，如：\n\n```shell\ncp mysql-connector-java-5.1.27-bin.jar /opt/module/sqoop-1.4.6.bin__hadoop-2.0.4-alpha/lib/\n```\n\n## 3.4 验证Sqoop\n\n我们可以通过某一个command来验证sqoop配置是否正确：\n\n$ bin/sqoop help\n\n出现一些Warning警告（警告信息已省略），并伴随着帮助命令的输出：\n\n```html\nAvailable commands:\n  codegen            Generate code to interact with database records\n  create-hive-table     Import a table definition into Hive\n  eval               Evaluate a SQL statement and display the results\n  export             Export an HDFS directory to a database table\n  help               List available commands\n  import             Import a table from a database to HDFS\n  import-all-tables     Import tables from a database to HDFS\n  import-mainframe    Import datasets from a mainframe server to HDFS\n  job                Work with saved jobs\n  list-databases        List available databases on a server\n  list-tables           List available tables in a database\n  merge              Merge results of incremental imports\n  metastore           Run a standalone Sqoop metastore\n  version            Display version information\n```\n\n## 3.5 测试Sqoop是否能够成功连接数据库\n\n```shell\n bin/sqoop list-databases --connect jdbc:mysql://slave2:3306/ --username root --password 000000\n```\n\n出现如下输出：\n\n```html\ninformation_schema\nmetastore\nmysql\noozie\nperformance_schema\n```\n\n# 第4章 Sqoop的简单使用案例\n\n## 4.1 导入数据\n\n在Sqoop中，“导入”概念指：从非大数据集群（RDBMS）向大数据集群（HDFS，HIVE，HBASE）中传输数据，叫做：导入，即使用import关键字。\n\n### 4.1.1 RDBMS到HDFS\n\n1) 确定Mysql服务开启正常\n\n2) 在Mysql中新建一张表并插入一些数据\n\n```sql\nmysql -uroot -p000000\nmysql> create database company;\nmysql> create table company.staff(id int(4) primary key not null auto_increment, name varchar(255), sex varchar(255));\nmysql> insert into company.staff(name, sex) values('Thomas', 'Male');\nmysql> insert into company.staff(name, sex) values('Catalina', 'FeMale');\n```\n\n3) 导入数据\n\n```shell\n bin/sqoop import \\\n--connect jdbc:mysql://hadoop102:3306/company \\\n--username root \\\n--password 000000 \\\n--table staff \\\n--target-dir /user/company \\\n--delete-target-dir \\\n--num-mappers 1 \\\n--fields-terminated-by \"\\t\"\n```\n\n## 4.2、导出数据\n\n在Sqoop中，“导出”概念指：从大数据集群（HDFS，HIVE，HBASE）向非大数据集群（RDBMS）中传输数据，叫做：导出，即使用export关键字。\n\n### 4.2.1 HIVE/HDFS到RDBMS\n\n```shell\nbin/sqoop export \\\n--connect jdbc:mysql://hadoop102:3306/company \\\n--username root \\\n--password 000000 \\\n--table staff \\\n--num-mappers 1 \\\n--export-dir /user/hive/warehouse/staff_hive \\\n--input-fields-terminated-by \"\\t\"\n```\n\n提示：Mysql中如果表不存在，不会自动创建","source":"_posts/Sqoop-HDFS与外界交互数据的工具.md","raw":"---\ntitle: Sqoop-HDFS与外界交互数据的工具\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-16 21:34:23\npassword:\nsummary:\ntags:\ncategories: 大数据\n---\n\n# Sqoop简介\n\nSqoop是一款开源的工具，主要用于在Hadoop(Hive)与传统的数据库(mysql、postgresql...)间进行数据的传递，可以将一个关系型数据库（例如 ： MySQL ,Oracle ,Postgres等）中的数据导进到Hadoop的HDFS中，也可以将HDFS的数据导进到关系型数据库中。\n\nSqoop项目开始于2009年，最早是作为Hadoop的一个第三方模块存在，后来为了让使用者能够快速部署，也为了让开发人员能够更快速的迭代开发，Sqoop独立成为一个[Apache](https://baike.baidu.com/item/Apache/6265)项目。\n\nSqoop2的最新版本是1.99.7。请注意，2与1不兼容，且特征不完整，它并不打算用于生产部署。\n\n# Sqoop原理\n\n将导入或导出命令翻译成mapreduce程序来实现。\n\n在翻译出的mapreduce中主要是对inputformat和outputformat进行定制。\n\n# Sqoop安装\n\n安装Sqoop的前提是已经具备Java和Hadoop的环境。\n\n## 3.1 下载并解压\n\n1) 下载地址：<http://mirrors.hust.edu.cn/apache/sqoop/1.4.6/>\n\n2) 上传安装包sqoop-1.4.6.bin__hadoop-2.0.4-alpha.tar.gz到虚拟机中\n\n3) 解压sqoop安装包到指定目录，如：\n\n```shell\n tar -zxf sqoop-1.4.6.bin__hadoop-2.0.4-alpha.tar.gz -C /opt/module/\n```\n\n## 3.2 修改配置文件\n\nSqoop的配置文件与大多数大数据框架类似，在sqoop根目录下的conf目录中。\n\n1) 重命名配置文件\n\n```shell\n mv sqoop-env-template.sh sqoop-env.sh\n```\n\n2) 修改配置文件\n\n```html\n# sqoop-env.sh\nexport HADOOP_COMMON_HOME=/opt/module/hadoop-2.7.2\nexport HADOOP_MAPRED_HOME=/opt/module/hadoop-2.7.2\nexport HIVE_HOME=/opt/module/hive\nexport ZOOKEEPER_HOME=/opt/module/zookeeper-3.4.10\nexport ZOOCFGDIR=/opt/module/zookeeper-3.4.10\nexport HBASE_HOME=/opt/module/hbase\n```\n\n## 3.3 拷贝JDBC驱动\n\n拷贝jdbc驱动到sqoop的lib目录下，如：\n\n```shell\ncp mysql-connector-java-5.1.27-bin.jar /opt/module/sqoop-1.4.6.bin__hadoop-2.0.4-alpha/lib/\n```\n\n## 3.4 验证Sqoop\n\n我们可以通过某一个command来验证sqoop配置是否正确：\n\n$ bin/sqoop help\n\n出现一些Warning警告（警告信息已省略），并伴随着帮助命令的输出：\n\n```html\nAvailable commands:\n  codegen            Generate code to interact with database records\n  create-hive-table     Import a table definition into Hive\n  eval               Evaluate a SQL statement and display the results\n  export             Export an HDFS directory to a database table\n  help               List available commands\n  import             Import a table from a database to HDFS\n  import-all-tables     Import tables from a database to HDFS\n  import-mainframe    Import datasets from a mainframe server to HDFS\n  job                Work with saved jobs\n  list-databases        List available databases on a server\n  list-tables           List available tables in a database\n  merge              Merge results of incremental imports\n  metastore           Run a standalone Sqoop metastore\n  version            Display version information\n```\n\n## 3.5 测试Sqoop是否能够成功连接数据库\n\n```shell\n bin/sqoop list-databases --connect jdbc:mysql://slave2:3306/ --username root --password 000000\n```\n\n出现如下输出：\n\n```html\ninformation_schema\nmetastore\nmysql\noozie\nperformance_schema\n```\n\n# 第4章 Sqoop的简单使用案例\n\n## 4.1 导入数据\n\n在Sqoop中，“导入”概念指：从非大数据集群（RDBMS）向大数据集群（HDFS，HIVE，HBASE）中传输数据，叫做：导入，即使用import关键字。\n\n### 4.1.1 RDBMS到HDFS\n\n1) 确定Mysql服务开启正常\n\n2) 在Mysql中新建一张表并插入一些数据\n\n```sql\nmysql -uroot -p000000\nmysql> create database company;\nmysql> create table company.staff(id int(4) primary key not null auto_increment, name varchar(255), sex varchar(255));\nmysql> insert into company.staff(name, sex) values('Thomas', 'Male');\nmysql> insert into company.staff(name, sex) values('Catalina', 'FeMale');\n```\n\n3) 导入数据\n\n```shell\n bin/sqoop import \\\n--connect jdbc:mysql://hadoop102:3306/company \\\n--username root \\\n--password 000000 \\\n--table staff \\\n--target-dir /user/company \\\n--delete-target-dir \\\n--num-mappers 1 \\\n--fields-terminated-by \"\\t\"\n```\n\n## 4.2、导出数据\n\n在Sqoop中，“导出”概念指：从大数据集群（HDFS，HIVE，HBASE）向非大数据集群（RDBMS）中传输数据，叫做：导出，即使用export关键字。\n\n### 4.2.1 HIVE/HDFS到RDBMS\n\n```shell\nbin/sqoop export \\\n--connect jdbc:mysql://hadoop102:3306/company \\\n--username root \\\n--password 000000 \\\n--table staff \\\n--num-mappers 1 \\\n--export-dir /user/hive/warehouse/staff_hive \\\n--input-fields-terminated-by \"\\t\"\n```\n\n提示：Mysql中如果表不存在，不会自动创建","slug":"Sqoop-HDFS与外界交互数据的工具","published":1,"updated":"2021-04-29T10:00:38.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mlbh001dvkvy9vypk7tg","content":"<h1 id=\"Sqoop简介\"><a href=\"#Sqoop简介\" class=\"headerlink\" title=\"Sqoop简介\"></a>Sqoop简介</h1><p>Sqoop是一款开源的工具，主要用于在Hadoop(Hive)与传统的数据库(mysql、postgresql…)间进行数据的传递，可以将一个关系型数据库（例如 ： MySQL ,Oracle ,Postgres等）中的数据导进到Hadoop的HDFS中，也可以将HDFS的数据导进到关系型数据库中。</p>\n<p>Sqoop项目开始于2009年，最早是作为Hadoop的一个第三方模块存在，后来为了让使用者能够快速部署，也为了让开发人员能够更快速的迭代开发，Sqoop独立成为一个<a href=\"https://baike.baidu.com/item/Apache/6265\" target=\"_blank\" rel=\"noopener\">Apache</a>项目。</p>\n<p>Sqoop2的最新版本是1.99.7。请注意，2与1不兼容，且特征不完整，它并不打算用于生产部署。</p>\n<h1 id=\"Sqoop原理\"><a href=\"#Sqoop原理\" class=\"headerlink\" title=\"Sqoop原理\"></a>Sqoop原理</h1><p>将导入或导出命令翻译成mapreduce程序来实现。</p>\n<p>在翻译出的mapreduce中主要是对inputformat和outputformat进行定制。</p>\n<h1 id=\"Sqoop安装\"><a href=\"#Sqoop安装\" class=\"headerlink\" title=\"Sqoop安装\"></a>Sqoop安装</h1><p>安装Sqoop的前提是已经具备Java和Hadoop的环境。</p>\n<h2 id=\"3-1-下载并解压\"><a href=\"#3-1-下载并解压\" class=\"headerlink\" title=\"3.1 下载并解压\"></a>3.1 下载并解压</h2><p>1) 下载地址：<a href=\"http://mirrors.hust.edu.cn/apache/sqoop/1.4.6/\" target=\"_blank\" rel=\"noopener\">http://mirrors.hust.edu.cn/apache/sqoop/1.4.6/</a></p>\n<p>2) 上传安装包sqoop-1.4.6.bin__hadoop-2.0.4-alpha.tar.gz到虚拟机中</p>\n<p>3) 解压sqoop安装包到指定目录，如：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"> tar -zxf sqoop-1.4.6.bin__hadoop-2.0.4-alpha.tar.gz -C /opt/module/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"3-2-修改配置文件\"><a href=\"#3-2-修改配置文件\" class=\"headerlink\" title=\"3.2 修改配置文件\"></a>3.2 修改配置文件</h2><p>Sqoop的配置文件与大多数大数据框架类似，在sqoop根目录下的conf目录中。</p>\n<p>1) 重命名配置文件</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"> mv sqoop-env-template.sh sqoop-env.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2) 修改配置文件</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"># sqoop-env.sh\nexport HADOOP_COMMON_HOME=/opt/module/hadoop-2.7.2\nexport HADOOP_MAPRED_HOME=/opt/module/hadoop-2.7.2\nexport HIVE_HOME=/opt/module/hive\nexport ZOOKEEPER_HOME=/opt/module/zookeeper-3.4.10\nexport ZOOCFGDIR=/opt/module/zookeeper-3.4.10\nexport HBASE_HOME=/opt/module/hbase<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-3-拷贝JDBC驱动\"><a href=\"#3-3-拷贝JDBC驱动\" class=\"headerlink\" title=\"3.3 拷贝JDBC驱动\"></a>3.3 拷贝JDBC驱动</h2><p>拷贝jdbc驱动到sqoop的lib目录下，如：</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">cp mysql-connector-java-5.1.27-bin.jar /opt/module/sqoop-1.4.6.bin__hadoop-2.0.4-alpha/lib/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"3-4-验证Sqoop\"><a href=\"#3-4-验证Sqoop\" class=\"headerlink\" title=\"3.4 验证Sqoop\"></a>3.4 验证Sqoop</h2><p>我们可以通过某一个command来验证sqoop配置是否正确：</p>\n<p>$ bin/sqoop help</p>\n<p>出现一些Warning警告（警告信息已省略），并伴随着帮助命令的输出：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">Available commands:\n  codegen            Generate code to interact with database records\n  create-hive-table     Import a table definition into Hive\n  eval               Evaluate a SQL statement and display the results\n  export             Export an HDFS directory to a database table\n  help               List available commands\n  import             Import a table from a database to HDFS\n  import-all-tables     Import tables from a database to HDFS\n  import-mainframe    Import datasets from a mainframe server to HDFS\n  job                Work with saved jobs\n  list-databases        List available databases on a server\n  list-tables           List available tables in a database\n  merge              Merge results of incremental imports\n  metastore           Run a standalone Sqoop metastore\n  version            Display version information<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"3-5-测试Sqoop是否能够成功连接数据库\"><a href=\"#3-5-测试Sqoop是否能够成功连接数据库\" class=\"headerlink\" title=\"3.5 测试Sqoop是否能够成功连接数据库\"></a>3.5 测试Sqoop是否能够成功连接数据库</h2><pre class=\"line-numbers language-shell\"><code class=\"language-shell\"> bin/sqoop list-databases --connect jdbc:mysql://slave2:3306/ --username root --password 000000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>出现如下输出：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">information_schema\nmetastore\nmysql\noozie\nperformance_schema<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"第4章-Sqoop的简单使用案例\"><a href=\"#第4章-Sqoop的简单使用案例\" class=\"headerlink\" title=\"第4章 Sqoop的简单使用案例\"></a>第4章 Sqoop的简单使用案例</h1><h2 id=\"4-1-导入数据\"><a href=\"#4-1-导入数据\" class=\"headerlink\" title=\"4.1 导入数据\"></a>4.1 导入数据</h2><p>在Sqoop中，“导入”概念指：从非大数据集群（RDBMS）向大数据集群（HDFS，HIVE，HBASE）中传输数据，叫做：导入，即使用import关键字。</p>\n<h3 id=\"4-1-1-RDBMS到HDFS\"><a href=\"#4-1-1-RDBMS到HDFS\" class=\"headerlink\" title=\"4.1.1 RDBMS到HDFS\"></a>4.1.1 RDBMS到HDFS</h3><p>1) 确定Mysql服务开启正常</p>\n<p>2) 在Mysql中新建一张表并插入一些数据</p>\n<pre class=\"line-numbers language-sql\"><code class=\"language-sql\">mysql <span class=\"token operator\">-</span>uroot <span class=\"token operator\">-</span>p000000\nmysql<span class=\"token operator\">></span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> company<span class=\"token punctuation\">;</span>\nmysql<span class=\"token operator\">></span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> company<span class=\"token punctuation\">.</span>staff<span class=\"token punctuation\">(</span>id <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">auto_increment</span><span class=\"token punctuation\">,</span> name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sex <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmysql<span class=\"token operator\">></span> <span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> company<span class=\"token punctuation\">.</span>staff<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> sex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Thomas'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Male'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmysql<span class=\"token operator\">></span> <span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> company<span class=\"token punctuation\">.</span>staff<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> sex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Catalina'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'FeMale'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>3) 导入数据</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"> bin/sqoop import \\\n--connect jdbc:mysql://hadoop102:3306/company \\\n--username root \\\n--password 000000 \\\n--table staff \\\n--target-dir /user/company \\\n--delete-target-dir \\\n--num-mappers 1 \\\n--fields-terminated-by \"\\t\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-2、导出数据\"><a href=\"#4-2、导出数据\" class=\"headerlink\" title=\"4.2、导出数据\"></a>4.2、导出数据</h2><p>在Sqoop中，“导出”概念指：从大数据集群（HDFS，HIVE，HBASE）向非大数据集群（RDBMS）中传输数据，叫做：导出，即使用export关键字。</p>\n<h3 id=\"4-2-1-HIVE-HDFS到RDBMS\"><a href=\"#4-2-1-HIVE-HDFS到RDBMS\" class=\"headerlink\" title=\"4.2.1 HIVE/HDFS到RDBMS\"></a>4.2.1 HIVE/HDFS到RDBMS</h3><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">bin/sqoop export \\\n--connect jdbc:mysql://hadoop102:3306/company \\\n--username root \\\n--password 000000 \\\n--table staff \\\n--num-mappers 1 \\\n--export-dir /user/hive/warehouse/staff_hive \\\n--input-fields-terminated-by \"\\t\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>提示：Mysql中如果表不存在，不会自动创建</p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h1 id=\"Sqoop简介\"><a href=\"#Sqoop简介\" class=\"headerlink\" title=\"Sqoop简介\"></a>Sqoop简介</h1><p>Sqoop是一款开源的工具，主要用于在Hadoop(Hive)与传统的数据库(mysql、postgresql…)间进行数据的传递，可以将一个关系型数据库（例如 ： MySQL ,Oracle ,Postgres等）中的数据导进到Hadoop的HDFS中，也可以将HDFS的数据导进到关系型数据库中。</p>\n<p>Sqoop项目开始于2009年，最早是作为Hadoop的一个第三方模块存在，后来为了让使用者能够快速部署，也为了让开发人员能够更快速的迭代开发，Sqoop独立成为一个<a href=\"https://baike.baidu.com/item/Apache/6265\" target=\"_blank\" rel=\"noopener\">Apache</a>项目。</p>\n<p>Sqoop2的最新版本是1.99.7。请注意，2与1不兼容，且特征不完整，它并不打算用于生产部署。</p>\n<h1 id=\"Sqoop原理\"><a href=\"#Sqoop原理\" class=\"headerlink\" title=\"Sqoop原理\"></a>Sqoop原理</h1><p>将导入或导出命令翻译成mapreduce程序来实现。</p>\n<p>在翻译出的mapreduce中主要是对inputformat和outputformat进行定制。</p>\n<h1 id=\"Sqoop安装\"><a href=\"#Sqoop安装\" class=\"headerlink\" title=\"Sqoop安装\"></a>Sqoop安装</h1><p>安装Sqoop的前提是已经具备Java和Hadoop的环境。</p>\n<h2 id=\"3-1-下载并解压\"><a href=\"#3-1-下载并解压\" class=\"headerlink\" title=\"3.1 下载并解压\"></a>3.1 下载并解压</h2><p>1) 下载地址：<a href=\"http://mirrors.hust.edu.cn/apache/sqoop/1.4.6/\" target=\"_blank\" rel=\"noopener\">http://mirrors.hust.edu.cn/apache/sqoop/1.4.6/</a></p>\n<p>2) 上传安装包sqoop-1.4.6.bin__hadoop-2.0.4-alpha.tar.gz到虚拟机中</p>\n<p>3) 解压sqoop安装包到指定目录，如：</p>\n<pre><code class=\"shell\"> tar -zxf sqoop-1.4.6.bin__hadoop-2.0.4-alpha.tar.gz -C /opt/module/</code></pre>\n<h2 id=\"3-2-修改配置文件\"><a href=\"#3-2-修改配置文件\" class=\"headerlink\" title=\"3.2 修改配置文件\"></a>3.2 修改配置文件</h2><p>Sqoop的配置文件与大多数大数据框架类似，在sqoop根目录下的conf目录中。</p>\n<p>1) 重命名配置文件</p>\n<pre><code class=\"shell\"> mv sqoop-env-template.sh sqoop-env.sh</code></pre>\n<p>2) 修改配置文件</p>\n<pre><code class=\"html\"># sqoop-env.sh\nexport HADOOP_COMMON_HOME=/opt/module/hadoop-2.7.2\nexport HADOOP_MAPRED_HOME=/opt/module/hadoop-2.7.2\nexport HIVE_HOME=/opt/module/hive\nexport ZOOKEEPER_HOME=/opt/module/zookeeper-3.4.10\nexport ZOOCFGDIR=/opt/module/zookeeper-3.4.10\nexport HBASE_HOME=/opt/module/hbase</code></pre>\n<h2 id=\"3-3-拷贝JDBC驱动\"><a href=\"#3-3-拷贝JDBC驱动\" class=\"headerlink\" title=\"3.3 拷贝JDBC驱动\"></a>3.3 拷贝JDBC驱动</h2><p>拷贝jdbc驱动到sqoop的lib目录下，如：</p>\n<pre><code class=\"shell\">cp mysql-connector-java-5.1.27-bin.jar /opt/module/sqoop-1.4.6.bin__hadoop-2.0.4-alpha/lib/</code></pre>\n<h2 id=\"3-4-验证Sqoop\"><a href=\"#3-4-验证Sqoop\" class=\"headerlink\" title=\"3.4 验证Sqoop\"></a>3.4 验证Sqoop</h2><p>我们可以通过某一个command来验证sqoop配置是否正确：</p>\n<p>$ bin/sqoop help</p>\n<p>出现一些Warning警告（警告信息已省略），并伴随着帮助命令的输出：</p>\n<pre><code class=\"html\">Available commands:\n  codegen            Generate code to interact with database records\n  create-hive-table     Import a table definition into Hive\n  eval               Evaluate a SQL statement and display the results\n  export             Export an HDFS directory to a database table\n  help               List available commands\n  import             Import a table from a database to HDFS\n  import-all-tables     Import tables from a database to HDFS\n  import-mainframe    Import datasets from a mainframe server to HDFS\n  job                Work with saved jobs\n  list-databases        List available databases on a server\n  list-tables           List available tables in a database\n  merge              Merge results of incremental imports\n  metastore           Run a standalone Sqoop metastore\n  version            Display version information</code></pre>\n<h2 id=\"3-5-测试Sqoop是否能够成功连接数据库\"><a href=\"#3-5-测试Sqoop是否能够成功连接数据库\" class=\"headerlink\" title=\"3.5 测试Sqoop是否能够成功连接数据库\"></a>3.5 测试Sqoop是否能够成功连接数据库</h2><pre><code class=\"shell\"> bin/sqoop list-databases --connect jdbc:mysql://slave2:3306/ --username root --password 000000</code></pre>\n<p>出现如下输出：</p>\n<pre><code class=\"html\">information_schema\nmetastore\nmysql\noozie\nperformance_schema</code></pre>\n<h1 id=\"第4章-Sqoop的简单使用案例\"><a href=\"#第4章-Sqoop的简单使用案例\" class=\"headerlink\" title=\"第4章 Sqoop的简单使用案例\"></a>第4章 Sqoop的简单使用案例</h1><h2 id=\"4-1-导入数据\"><a href=\"#4-1-导入数据\" class=\"headerlink\" title=\"4.1 导入数据\"></a>4.1 导入数据</h2><p>在Sqoop中，“导入”概念指：从非大数据集群（RDBMS）向大数据集群（HDFS，HIVE，HBASE）中传输数据，叫做：导入，即使用import关键字。</p>\n<h3 id=\"4-1-1-RDBMS到HDFS\"><a href=\"#4-1-1-RDBMS到HDFS\" class=\"headerlink\" title=\"4.1.1 RDBMS到HDFS\"></a>4.1.1 RDBMS到HDFS</h3><p>1) 确定Mysql服务开启正常</p>\n<p>2) 在Mysql中新建一张表并插入一些数据</p>\n<pre><code class=\"sql\">mysql -uroot -p000000\nmysql&gt; create database company;\nmysql&gt; create table company.staff(id int(4) primary key not null auto_increment, name varchar(255), sex varchar(255));\nmysql&gt; insert into company.staff(name, sex) values(&#39;Thomas&#39;, &#39;Male&#39;);\nmysql&gt; insert into company.staff(name, sex) values(&#39;Catalina&#39;, &#39;FeMale&#39;);</code></pre>\n<p>3) 导入数据</p>\n<pre><code class=\"shell\"> bin/sqoop import \\\n--connect jdbc:mysql://hadoop102:3306/company \\\n--username root \\\n--password 000000 \\\n--table staff \\\n--target-dir /user/company \\\n--delete-target-dir \\\n--num-mappers 1 \\\n--fields-terminated-by &quot;\\t&quot;</code></pre>\n<h2 id=\"4-2、导出数据\"><a href=\"#4-2、导出数据\" class=\"headerlink\" title=\"4.2、导出数据\"></a>4.2、导出数据</h2><p>在Sqoop中，“导出”概念指：从大数据集群（HDFS，HIVE，HBASE）向非大数据集群（RDBMS）中传输数据，叫做：导出，即使用export关键字。</p>\n<h3 id=\"4-2-1-HIVE-HDFS到RDBMS\"><a href=\"#4-2-1-HIVE-HDFS到RDBMS\" class=\"headerlink\" title=\"4.2.1 HIVE/HDFS到RDBMS\"></a>4.2.1 HIVE/HDFS到RDBMS</h3><pre><code class=\"shell\">bin/sqoop export \\\n--connect jdbc:mysql://hadoop102:3306/company \\\n--username root \\\n--password 000000 \\\n--table staff \\\n--num-mappers 1 \\\n--export-dir /user/hive/warehouse/staff_hive \\\n--input-fields-terminated-by &quot;\\t&quot;</code></pre>\n<p>提示：Mysql中如果表不存在，不会自动创建</p>\n"},{"title":"docker原理及基本使用","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-04-27T15:00:03.000Z","password":null,"summary":null,"_content":"\n### Docker安装\n\n- 环境要求,Linux要求内核3.0以上\n\n  ```shell\n  #系统信息\n  [root@master ~]# cat /etc/os-release \n  NAME=\"CentOS Linux\"\n  VERSION=\"7 (Core)\"\n  ID=\"centos\"\n  ID_LIKE=\"rhel fedora\"\n  VERSION_ID=\"7\"\n  PRETTY_NAME=\"CentOS Linux 7 (Core)\"\n  ANSI_COLOR=\"0;31\"\n  CPE_NAME=\"cpe:/o:centos:centos:7\"\n  HOME_URL=\"https://www.centos.org/\"\n  BUG_REPORT_URL=\"https://bugs.centos.org/\"\n\n  CENTOS_MANTISBT_PROJECT=\"CentOS-7\"\n  CENTOS_MANTISBT_PROJECT_VERSION=\"7\"\n  REDHAT_SUPPORT_PRODUCT=\"centos\"\n  REDHAT_SUPPORT_PRODUCT_VERSION=\"7\"\n\n  [root@master ~]# uname -r\n  3.10.0-862.el7.x86_64\n  ```\n\n- 安装步骤,[官方文档地址](https://docs.docker.com/engine/install/)\n\n  ```shell\n  #1.卸载旧版本\n   sudo yum remove docker \\\n                    docker-client \\\n                    docker-client-latest \\\n                    docker-common \\\n                    docker-latest \\\n                    docker-latest-logrotate \\\n                    docker-logrotate \\\n                    docker-engine\n  #2.需要的安装包\n   sudo yum install -y yum-utils\n  #3.设置镜像的仓库,默认是国外的,推荐使用国内的\n   sudo yum-config-manager \\\n      --add-repo \\\n      https://download.docker.com/linux/centos/docker-ce.repo\n      \n      https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo #阿里云镜像\n  #4.更新yum软件包索引,非必须操作\n    yum makecache fast\n  #5.安装docker相关的docker-ce社区版\n   sudo yum install docker-ce docker-ce-cli containerd.io\n  #6.使用docker version查看安装是否成功\n    docker version\n  #7.测试\n    docker run hello-world`\n  ```\n\n- 卸载docker\n\n  ```shell\n  #1.卸载依赖\n  yum remove docker-ce docker-ce-cli containerd.io\n  #2.删除资源\n  rm -rf /var/lib/docker\n  ```\n\n  ​\n\n**note:运行`docker run xxx`命令启动容器时出现错误如下:**\n\n**Error response from daemon: Get <https://registry-1.docker.io/v2/>: x509: certificate has expired or is not yet valid**\n\n则是系统时间未同步,需要同步时间,执行如下命令\n\n```shell\nntpdate -u cn.pool.ntp.org\n```\n\n### Docker底层原理\n\nDocker是怎么工作的？\n\nDocker是一个Client-Server结构的系统，Docker的守护进程运行在主机上。通过Socket从客户端访问！\n\nDocker-Server接收到Docker-Client的指令，就会执行这个命令！\n\n**为什么Docker比Vm快**\n\n1、docker有着比虚拟机更少的抽象层。由于docker不需要Hypervisor实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。\n2、docker利用的是宿主机的内核,而不需要Guest OS。\n\n> ```shell\n> GuestOS： VM（虚拟机）里的的系统（OS）;\n> HostOS：物理机里的系统（OS）；\n> ```\n>\n> ![](docker/1.png)\n\n因此,==当新建一个容器时,**docker不需要和虚拟机一样重新加载一个操作系统内核**。从而避免引导、加载操作系统内核返个比较费时费资源的过程==,当新建一个虚拟机时,虚拟机软件需要加载GuestOS,返个新建过程是分钟级别的。而==docker由于直接利用宿主机的操作系统==,则省略了这个复杂的过程,因此新建一个docker容器只需要几秒钟。\n\n### docker常用命令\n\n#### **帮助命令**\n\n```shell\ndocker version\t\t#显示docker的版本信息\ndocker info\t\t\t#显示docker的系统信息,包括镜像和容器的数量\ndocker xxx --help\t#帮助命令\n```\n\n#### **镜像命令**\n\n```shell\ndocker images\t\t#查看所有本地主机上的镜像,可以使用docker image ls 代替\ndocker search\t\t#搜索镜像\ndocker pull 镜像名[:tag]\t#下载镜像,如果不写tag,默认latest,即最新版 docker pull mysql:5.7\ndocker rmi -f\t\t#删除镜像,-f为强制删除,即可以删除正在运行的镜像\ndocker rmi -f $(docker images -aq)\t#删除全部镜像\n```\n\n**docker pull** 下载镜像\n\n```shell\n# 下载镜像 docker pull 镜像名[:tag]\n[root@master ~]# docker pull nginx\nUsing default tag: latest # 如果不写,tag默认就是latest\nlatest: Pulling from library/nginx\nf7ec5a41d630: Already exists #分层下载,docker image的核心 联合文件系统(镜像间重复的部分不重复下载)\naa1efa14b3bf: Pull complete \nb78b95af9b17: Pull complete \nc7d6bca2b8dc: Pull complete \ncf16cd8e71e0: Pull complete \n0241c68333ef: Pull complete \nDigest: sha256:75a55d33ecc73c2a242450a9f1cc858499d468f077ea942867e662c247b5e412 #签名\nStatus: Downloaded newer image for nginx:latest #真实地址\ndocker.io/library/nginx:latest\n\n#等价于它\ndocker pull mysql\ndocker pull docker.io/library/nginx:latest\n```\n\n#### 容器命令\n\n```shell\ndocker run 镜像id\t\t#新建容器并启动\ndocker run [可选参数] image | docker container run [可选参数] image\n#参数说明\n--name=\"Name\"\t\t容器名字 nginx01 nginx02 用来区分容器\n-d\t\t\t\t\t后台方式运行\n-it\t\t\t\t\t使用交互式方式运行,进入容器查看内容\n-p\t\t\t\t\t指定容器的端口 -p 8080(宿主机):8080(容器)\n\t\t\t-p ip:主机端口:容器端口\n\t\t\t-p 主机端口:容器端口\n\t\t\t-p 容器端口\n-P\t\t\t随即指定端口\t\t\ndocker ps                 # 列出所有运行的容器 docker container list\n  -a, --all             Show all containers (default shows just running)\n  -n, --last int        Show n last created containers (includes all states) (default -1)\n  -q, --quiet           Only display numeric IDs\ndocker rm                 # 容器id 删除指定容器\ndocker start 容器id         #启动容器\ndocker restart 容器id     #重启容器\ndocker stop 容器id         #停止当前正在运行的容器\ndocker kill 容器id         #强制停止当前容器\n\nexit #容器直接退出\nctrl +P +Q #容器不停止退出\n```\n\n#### 常用其他命令\n\n> **后台启动命令**\n\n```shell\n#命令 docker run -d 镜像名\n[root@master ~]# docker run -d centos\n#问题 docker ps.发现centos停止了\n\n#常见的坑,docker 容器使用后台运行,就必须要有一个前台进程,docker发现没有应用,就会停止\n#nginx,容器启动后,发现自己没有提供服务,就会立刻停止,就没有程序了\n```\n\n> **查看日志**\n\n```shell\ndocker logs --help\nOptions:\n      --details        Show extra details provided to logs\n  -f, --follow         Follow log output\n      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)\n  -n, --tail string    Number of lines to show from the end of the logs (default \"all\")\n  -t, --timestamps     Show timestamps\n      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)\n[root@master ~]# docker run -d centos /bin/sh -c \"while true;do echo 6666;sleep 1;done\" #模拟日志      \n#显示日志\n-tf        #显示日志信息（一直更新）\n--tail number #需要显示日志条数\ndocker logs -t --tail n 容器id #查看n行日志\ndocker logs -ft 容器id #跟着日志\n```\n\n> **查看镜像元数据**\n\n```shell\ndocker inspect 容器id\n```\n\n> 进入当前正在运行的容器\n\n```shell\n # 我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置\n \n docker exec -it 容器id bash\n \n #测试\n [root@master ~]# docker ps\nCONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS       PORTS     NAMES\na40effcf407c   centos    \"bash -c 'while true…\"   5 hours ago   Up 5 hours             gifted_matsumoto\n#方式一\n[root@master ~]# docker exec -it a40effcf407c bash\n# 方式二\n[root@master ~]# docker attach a40effcf407c\n\n# 区别\n#docker exec     # 进入当前容器后开启一个新的终端，可以在里面操作。（常用）\n#docker attach     # 进入容器正在执行的终端\n```\n\n> **从容器内拷贝文件到主机上**\n\n```shell\ndocker cp 容器id:容器内路径 主机目标路径\n#进入docker容器内部\n[root@master tiger]# docker exec -it a40effcf4 bash\n[root@a40effcf407c /]# ls\nbin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\n[root@a40effcf407c /]# cd /home/\n#新建一个文件\n[root@a40effcf407c home]# touch test.go \n[root@a40effcf407c home]# read escape sequence\n[root@master tiger]# docker cp a40effcf4:/home/test.go /home/tiger/\n[root@master tiger]# ls #可以看见test.go的存在\n# 拷贝是一个手动过程,未来我们使用-v卷的技术,可以实现自动同步\n```\n\n#### **小结**\n\n```shell\n attach      Attach local standard input, output, and error streams to a running container #当前shell下 attach连接指定运行的镜像\n  build       Build an image from a Dockerfile # 通过Dockerfile定制镜像\n  commit      Create a new image from a container's changes #提交当前容器为新的镜像\n  cp          Copy files/folders between a container and the local filesystem #拷贝文件\n  create      Create a new container #创建一个新的容器\n  diff        Inspect changes to files or directories on a container's filesystem #查看docker容器的变化\n  events      Get real time events from the server # 从服务获取容器实时时间\n  exec        Run a command in a running container # 在运行中的容器上运行命令\n  export      Export a container's filesystem as a tar archive #导出容器文件系统作为一个tar归档文件[对应import]\n  history     Show the history of an image # 展示一个镜像形成历史\n  images      List images #列出系统当前的镜像\n  import      Import the contents from a tarball to create a filesystem image #从tar包中导入内容创建一个文件系统镜像\n  info        Display system-wide information # 显示全系统信息\n  inspect     Return low-level information on Docker objects #查看容器详细信息\n  kill        Kill one or more running containers # kill指定docker容器\n  load        Load an image from a tar archive or STDIN #从一个tar包或标准输入中加载一个镜像[对应save]\n  login       Log in to a Docker registry #\n  logout      Log out from a Docker registry\n  logs        Fetch the logs of a container\n  pause       Pause all processes within one or more containers\n  port        List port mappings or a specific mapping for the container\n  ps          List containers\n  pull        Pull an image or a repository from a registry\n  push        Push an image or a repository to a registry\n  rename      Rename a container\n  restart     Restart one or more containers\n  rm          Remove one or more containers\n  rmi         Remove one or more images\n  run         Run a command in a new container\n  save        Save one or more images to a tar archive (streamed to STDOUT by default)\n  search      Search the Docker Hub for images\n  start       Start one or more stopped containers\n  stats       Display a live stream of container(s) resource usage statistics\n  stop        Stop one or more running containers\n  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE\n  top         Display the running processes of a container\n  unpause     Unpause all processes within one or more containers\n  update      Update configuration of one or more containers\n  version     Show the Docker version information\n  wait        Block until one or more containers stop, then print their exit codes\n```\n\n![](docker/2.png)\n\n#### 作业练习\n\n> docker安装nginx\n\n```shell\n[root@master tiger]# docker pull nginx\nUsing default tag: latest\nlatest: Pulling from library/nginx\nDigest: sha256:75a55d33ecc73c2a242450a9f1cc858499d468f077ea942867e662c247b5e412\nStatus: Image is up to date for nginx:latest\ndocker.io/library/nginx:latest\n[root@master tiger]# docker images\nREPOSITORY   TAG       IMAGE ID       CREATED        SIZE\nmysql        latest    0627ec6901db   10 days ago    556MB\nnginx        latest    62d49f9bab67   2 weeks ago    133MB\ncentos       latest    300e315adb2f   4 months ago   209MB\n[root@master tiger]# docker run -d -p 8080:8080 nginx\n8b1ade9ca03a86942261182fab9541d433a81ed7332f12d9a9e9cd5acb459828\n[root@master tiger]# docker run -d -p 8080:80 nginx\n[[root@master tiger]# docker ps\nCONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                               NAMES\n8b1ade9ca03a   nginx     \"/docker-entrypoint.…\"   42 seconds ago   Up 29 seconds   80/tcp, 0.0.0.0:8080->80/tcp, :::8080->8080/tcp   wizardly_northcutt\n\n[root@master tiger]# curl localhost:8080\n```\n\n> docker安装tomcat\n\n```shell\n# 官方建议\n$ docker run -it --rm tomcat:9.0 # 之前的方式都是后台启动,停止了容器之后,容器还可以查到  docker run -it --rm 一般用来测试,用完之后直接删除镜像与容器\n\n# 下载启动tomcat\ndocker pull tomcat\ndocker run -d -p 8081:8080 tomcat #测试会是一个404界面,因为webapp里面没有东西\n```\n\n- 思考问题\n\n  > 每次部署项目，如果都要进入容器会很麻烦，如果可以通过在容器外部提供一个映射路径webapps，在外部放入项目，就自动同步到内部就很方便。\n\n> docker部署 es + kibana\n\n```shell\n# es 暴露的端口很多\n# es 十分的耗内存\n# es 的数据一般需要放置到安全目录！挂载\n# --net somenetwork 网络配置\ndocker run -d --name elasticsearch --net somenetwork -p 9200:9200 -p 9300:9300 -e \"discovery.type=single-node\" elasticsearch:tag\n# 启动后linux就卡住了，docker status查看状态，可以看出es非常耗费内存，普通机器（阿里云低配）带不动\nCONTAINER ID   NAME            CPU %     MEM USAGE / LIMIT     MEM %     NET I/O       BLOCK I/O        PIDS\nb0573b79879e   elasticsearch   1.28%     1.254GiB / 2.763GiB   45.39%    2.41kB / 0B   52.3MB / 807kB   44\n\n\n# 增加内存限制，修改配置文件 -e 环境修改\n```\n\n\n\n\n\n\n\n> 使用常遇到的坑\n\n1.Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?重启电脑后使用docker命令出现上述提示。\n\n解决思路：因为没有设置开机自启动docker服务，所以需要重新启动 运行`service docker start`即可","source":"_posts/docker.md","raw":"---\ntitle: docker原理及基本使用\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-04-27 23:00:03\npassword:\nsummary:\ntags:\ncategories: tool\n---\n\n### Docker安装\n\n- 环境要求,Linux要求内核3.0以上\n\n  ```shell\n  #系统信息\n  [root@master ~]# cat /etc/os-release \n  NAME=\"CentOS Linux\"\n  VERSION=\"7 (Core)\"\n  ID=\"centos\"\n  ID_LIKE=\"rhel fedora\"\n  VERSION_ID=\"7\"\n  PRETTY_NAME=\"CentOS Linux 7 (Core)\"\n  ANSI_COLOR=\"0;31\"\n  CPE_NAME=\"cpe:/o:centos:centos:7\"\n  HOME_URL=\"https://www.centos.org/\"\n  BUG_REPORT_URL=\"https://bugs.centos.org/\"\n\n  CENTOS_MANTISBT_PROJECT=\"CentOS-7\"\n  CENTOS_MANTISBT_PROJECT_VERSION=\"7\"\n  REDHAT_SUPPORT_PRODUCT=\"centos\"\n  REDHAT_SUPPORT_PRODUCT_VERSION=\"7\"\n\n  [root@master ~]# uname -r\n  3.10.0-862.el7.x86_64\n  ```\n\n- 安装步骤,[官方文档地址](https://docs.docker.com/engine/install/)\n\n  ```shell\n  #1.卸载旧版本\n   sudo yum remove docker \\\n                    docker-client \\\n                    docker-client-latest \\\n                    docker-common \\\n                    docker-latest \\\n                    docker-latest-logrotate \\\n                    docker-logrotate \\\n                    docker-engine\n  #2.需要的安装包\n   sudo yum install -y yum-utils\n  #3.设置镜像的仓库,默认是国外的,推荐使用国内的\n   sudo yum-config-manager \\\n      --add-repo \\\n      https://download.docker.com/linux/centos/docker-ce.repo\n      \n      https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo #阿里云镜像\n  #4.更新yum软件包索引,非必须操作\n    yum makecache fast\n  #5.安装docker相关的docker-ce社区版\n   sudo yum install docker-ce docker-ce-cli containerd.io\n  #6.使用docker version查看安装是否成功\n    docker version\n  #7.测试\n    docker run hello-world`\n  ```\n\n- 卸载docker\n\n  ```shell\n  #1.卸载依赖\n  yum remove docker-ce docker-ce-cli containerd.io\n  #2.删除资源\n  rm -rf /var/lib/docker\n  ```\n\n  ​\n\n**note:运行`docker run xxx`命令启动容器时出现错误如下:**\n\n**Error response from daemon: Get <https://registry-1.docker.io/v2/>: x509: certificate has expired or is not yet valid**\n\n则是系统时间未同步,需要同步时间,执行如下命令\n\n```shell\nntpdate -u cn.pool.ntp.org\n```\n\n### Docker底层原理\n\nDocker是怎么工作的？\n\nDocker是一个Client-Server结构的系统，Docker的守护进程运行在主机上。通过Socket从客户端访问！\n\nDocker-Server接收到Docker-Client的指令，就会执行这个命令！\n\n**为什么Docker比Vm快**\n\n1、docker有着比虚拟机更少的抽象层。由于docker不需要Hypervisor实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。\n2、docker利用的是宿主机的内核,而不需要Guest OS。\n\n> ```shell\n> GuestOS： VM（虚拟机）里的的系统（OS）;\n> HostOS：物理机里的系统（OS）；\n> ```\n>\n> ![](docker/1.png)\n\n因此,==当新建一个容器时,**docker不需要和虚拟机一样重新加载一个操作系统内核**。从而避免引导、加载操作系统内核返个比较费时费资源的过程==,当新建一个虚拟机时,虚拟机软件需要加载GuestOS,返个新建过程是分钟级别的。而==docker由于直接利用宿主机的操作系统==,则省略了这个复杂的过程,因此新建一个docker容器只需要几秒钟。\n\n### docker常用命令\n\n#### **帮助命令**\n\n```shell\ndocker version\t\t#显示docker的版本信息\ndocker info\t\t\t#显示docker的系统信息,包括镜像和容器的数量\ndocker xxx --help\t#帮助命令\n```\n\n#### **镜像命令**\n\n```shell\ndocker images\t\t#查看所有本地主机上的镜像,可以使用docker image ls 代替\ndocker search\t\t#搜索镜像\ndocker pull 镜像名[:tag]\t#下载镜像,如果不写tag,默认latest,即最新版 docker pull mysql:5.7\ndocker rmi -f\t\t#删除镜像,-f为强制删除,即可以删除正在运行的镜像\ndocker rmi -f $(docker images -aq)\t#删除全部镜像\n```\n\n**docker pull** 下载镜像\n\n```shell\n# 下载镜像 docker pull 镜像名[:tag]\n[root@master ~]# docker pull nginx\nUsing default tag: latest # 如果不写,tag默认就是latest\nlatest: Pulling from library/nginx\nf7ec5a41d630: Already exists #分层下载,docker image的核心 联合文件系统(镜像间重复的部分不重复下载)\naa1efa14b3bf: Pull complete \nb78b95af9b17: Pull complete \nc7d6bca2b8dc: Pull complete \ncf16cd8e71e0: Pull complete \n0241c68333ef: Pull complete \nDigest: sha256:75a55d33ecc73c2a242450a9f1cc858499d468f077ea942867e662c247b5e412 #签名\nStatus: Downloaded newer image for nginx:latest #真实地址\ndocker.io/library/nginx:latest\n\n#等价于它\ndocker pull mysql\ndocker pull docker.io/library/nginx:latest\n```\n\n#### 容器命令\n\n```shell\ndocker run 镜像id\t\t#新建容器并启动\ndocker run [可选参数] image | docker container run [可选参数] image\n#参数说明\n--name=\"Name\"\t\t容器名字 nginx01 nginx02 用来区分容器\n-d\t\t\t\t\t后台方式运行\n-it\t\t\t\t\t使用交互式方式运行,进入容器查看内容\n-p\t\t\t\t\t指定容器的端口 -p 8080(宿主机):8080(容器)\n\t\t\t-p ip:主机端口:容器端口\n\t\t\t-p 主机端口:容器端口\n\t\t\t-p 容器端口\n-P\t\t\t随即指定端口\t\t\ndocker ps                 # 列出所有运行的容器 docker container list\n  -a, --all             Show all containers (default shows just running)\n  -n, --last int        Show n last created containers (includes all states) (default -1)\n  -q, --quiet           Only display numeric IDs\ndocker rm                 # 容器id 删除指定容器\ndocker start 容器id         #启动容器\ndocker restart 容器id     #重启容器\ndocker stop 容器id         #停止当前正在运行的容器\ndocker kill 容器id         #强制停止当前容器\n\nexit #容器直接退出\nctrl +P +Q #容器不停止退出\n```\n\n#### 常用其他命令\n\n> **后台启动命令**\n\n```shell\n#命令 docker run -d 镜像名\n[root@master ~]# docker run -d centos\n#问题 docker ps.发现centos停止了\n\n#常见的坑,docker 容器使用后台运行,就必须要有一个前台进程,docker发现没有应用,就会停止\n#nginx,容器启动后,发现自己没有提供服务,就会立刻停止,就没有程序了\n```\n\n> **查看日志**\n\n```shell\ndocker logs --help\nOptions:\n      --details        Show extra details provided to logs\n  -f, --follow         Follow log output\n      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)\n  -n, --tail string    Number of lines to show from the end of the logs (default \"all\")\n  -t, --timestamps     Show timestamps\n      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)\n[root@master ~]# docker run -d centos /bin/sh -c \"while true;do echo 6666;sleep 1;done\" #模拟日志      \n#显示日志\n-tf        #显示日志信息（一直更新）\n--tail number #需要显示日志条数\ndocker logs -t --tail n 容器id #查看n行日志\ndocker logs -ft 容器id #跟着日志\n```\n\n> **查看镜像元数据**\n\n```shell\ndocker inspect 容器id\n```\n\n> 进入当前正在运行的容器\n\n```shell\n # 我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置\n \n docker exec -it 容器id bash\n \n #测试\n [root@master ~]# docker ps\nCONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS       PORTS     NAMES\na40effcf407c   centos    \"bash -c 'while true…\"   5 hours ago   Up 5 hours             gifted_matsumoto\n#方式一\n[root@master ~]# docker exec -it a40effcf407c bash\n# 方式二\n[root@master ~]# docker attach a40effcf407c\n\n# 区别\n#docker exec     # 进入当前容器后开启一个新的终端，可以在里面操作。（常用）\n#docker attach     # 进入容器正在执行的终端\n```\n\n> **从容器内拷贝文件到主机上**\n\n```shell\ndocker cp 容器id:容器内路径 主机目标路径\n#进入docker容器内部\n[root@master tiger]# docker exec -it a40effcf4 bash\n[root@a40effcf407c /]# ls\nbin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\n[root@a40effcf407c /]# cd /home/\n#新建一个文件\n[root@a40effcf407c home]# touch test.go \n[root@a40effcf407c home]# read escape sequence\n[root@master tiger]# docker cp a40effcf4:/home/test.go /home/tiger/\n[root@master tiger]# ls #可以看见test.go的存在\n# 拷贝是一个手动过程,未来我们使用-v卷的技术,可以实现自动同步\n```\n\n#### **小结**\n\n```shell\n attach      Attach local standard input, output, and error streams to a running container #当前shell下 attach连接指定运行的镜像\n  build       Build an image from a Dockerfile # 通过Dockerfile定制镜像\n  commit      Create a new image from a container's changes #提交当前容器为新的镜像\n  cp          Copy files/folders between a container and the local filesystem #拷贝文件\n  create      Create a new container #创建一个新的容器\n  diff        Inspect changes to files or directories on a container's filesystem #查看docker容器的变化\n  events      Get real time events from the server # 从服务获取容器实时时间\n  exec        Run a command in a running container # 在运行中的容器上运行命令\n  export      Export a container's filesystem as a tar archive #导出容器文件系统作为一个tar归档文件[对应import]\n  history     Show the history of an image # 展示一个镜像形成历史\n  images      List images #列出系统当前的镜像\n  import      Import the contents from a tarball to create a filesystem image #从tar包中导入内容创建一个文件系统镜像\n  info        Display system-wide information # 显示全系统信息\n  inspect     Return low-level information on Docker objects #查看容器详细信息\n  kill        Kill one or more running containers # kill指定docker容器\n  load        Load an image from a tar archive or STDIN #从一个tar包或标准输入中加载一个镜像[对应save]\n  login       Log in to a Docker registry #\n  logout      Log out from a Docker registry\n  logs        Fetch the logs of a container\n  pause       Pause all processes within one or more containers\n  port        List port mappings or a specific mapping for the container\n  ps          List containers\n  pull        Pull an image or a repository from a registry\n  push        Push an image or a repository to a registry\n  rename      Rename a container\n  restart     Restart one or more containers\n  rm          Remove one or more containers\n  rmi         Remove one or more images\n  run         Run a command in a new container\n  save        Save one or more images to a tar archive (streamed to STDOUT by default)\n  search      Search the Docker Hub for images\n  start       Start one or more stopped containers\n  stats       Display a live stream of container(s) resource usage statistics\n  stop        Stop one or more running containers\n  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE\n  top         Display the running processes of a container\n  unpause     Unpause all processes within one or more containers\n  update      Update configuration of one or more containers\n  version     Show the Docker version information\n  wait        Block until one or more containers stop, then print their exit codes\n```\n\n![](docker/2.png)\n\n#### 作业练习\n\n> docker安装nginx\n\n```shell\n[root@master tiger]# docker pull nginx\nUsing default tag: latest\nlatest: Pulling from library/nginx\nDigest: sha256:75a55d33ecc73c2a242450a9f1cc858499d468f077ea942867e662c247b5e412\nStatus: Image is up to date for nginx:latest\ndocker.io/library/nginx:latest\n[root@master tiger]# docker images\nREPOSITORY   TAG       IMAGE ID       CREATED        SIZE\nmysql        latest    0627ec6901db   10 days ago    556MB\nnginx        latest    62d49f9bab67   2 weeks ago    133MB\ncentos       latest    300e315adb2f   4 months ago   209MB\n[root@master tiger]# docker run -d -p 8080:8080 nginx\n8b1ade9ca03a86942261182fab9541d433a81ed7332f12d9a9e9cd5acb459828\n[root@master tiger]# docker run -d -p 8080:80 nginx\n[[root@master tiger]# docker ps\nCONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                               NAMES\n8b1ade9ca03a   nginx     \"/docker-entrypoint.…\"   42 seconds ago   Up 29 seconds   80/tcp, 0.0.0.0:8080->80/tcp, :::8080->8080/tcp   wizardly_northcutt\n\n[root@master tiger]# curl localhost:8080\n```\n\n> docker安装tomcat\n\n```shell\n# 官方建议\n$ docker run -it --rm tomcat:9.0 # 之前的方式都是后台启动,停止了容器之后,容器还可以查到  docker run -it --rm 一般用来测试,用完之后直接删除镜像与容器\n\n# 下载启动tomcat\ndocker pull tomcat\ndocker run -d -p 8081:8080 tomcat #测试会是一个404界面,因为webapp里面没有东西\n```\n\n- 思考问题\n\n  > 每次部署项目，如果都要进入容器会很麻烦，如果可以通过在容器外部提供一个映射路径webapps，在外部放入项目，就自动同步到内部就很方便。\n\n> docker部署 es + kibana\n\n```shell\n# es 暴露的端口很多\n# es 十分的耗内存\n# es 的数据一般需要放置到安全目录！挂载\n# --net somenetwork 网络配置\ndocker run -d --name elasticsearch --net somenetwork -p 9200:9200 -p 9300:9300 -e \"discovery.type=single-node\" elasticsearch:tag\n# 启动后linux就卡住了，docker status查看状态，可以看出es非常耗费内存，普通机器（阿里云低配）带不动\nCONTAINER ID   NAME            CPU %     MEM USAGE / LIMIT     MEM %     NET I/O       BLOCK I/O        PIDS\nb0573b79879e   elasticsearch   1.28%     1.254GiB / 2.763GiB   45.39%    2.41kB / 0B   52.3MB / 807kB   44\n\n\n# 增加内存限制，修改配置文件 -e 环境修改\n```\n\n\n\n\n\n\n\n> 使用常遇到的坑\n\n1.Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?重启电脑后使用docker命令出现上述提示。\n\n解决思路：因为没有设置开机自启动docker服务，所以需要重新启动 运行`service docker start`即可","slug":"docker","published":1,"updated":"2021-05-08T06:14:59.117Z","_id":"ckof6mlbn001hvkvywybthhnh","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h3><ul>\n<li><p>环境要求,Linux要求内核3.0以上</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">#系统信息\n[root@master ~]# cat /etc/os-release \nNAME=\"CentOS Linux\"\nVERSION=\"7 (Core)\"\nID=\"centos\"\nID_LIKE=\"rhel fedora\"\nVERSION_ID=\"7\"\nPRETTY_NAME=\"CentOS Linux 7 (Core)\"\nANSI_COLOR=\"0;31\"\nCPE_NAME=\"cpe:/o:centos:centos:7\"\nHOME_URL=\"https://www.centos.org/\"\nBUG_REPORT_URL=\"https://bugs.centos.org/\"\n\nCENTOS_MANTISBT_PROJECT=\"CentOS-7\"\nCENTOS_MANTISBT_PROJECT_VERSION=\"7\"\nREDHAT_SUPPORT_PRODUCT=\"centos\"\nREDHAT_SUPPORT_PRODUCT_VERSION=\"7\"\n\n[root@master ~]# uname -r\n3.10.0-862.el7.x86_64<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>安装步骤,<a href=\"https://docs.docker.com/engine/install/\" target=\"_blank\" rel=\"noopener\">官方文档地址</a></p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">#1.卸载旧版本\n sudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n#2.需要的安装包\n sudo yum install -y yum-utils\n#3.设置镜像的仓库,默认是国外的,推荐使用国内的\n sudo yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n\n    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo #阿里云镜像\n#4.更新yum软件包索引,非必须操作\n  yum makecache fast\n#5.安装docker相关的docker-ce社区版\n sudo yum install docker-ce docker-ce-cli containerd.io\n#6.使用docker version查看安装是否成功\n  docker version\n#7.测试\n  docker run hello-world`<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n<li><p>卸载docker</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">#1.卸载依赖\nyum remove docker-ce docker-ce-cli containerd.io\n#2.删除资源\nrm -rf /var/lib/docker<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>​</p>\n</li>\n</ul>\n<p><strong>note:运行<code>docker run xxx</code>命令启动容器时出现错误如下:</strong></p>\n<p><strong>Error response from daemon: Get <a href=\"https://registry-1.docker.io/v2/\" target=\"_blank\" rel=\"noopener\">https://registry-1.docker.io/v2/</a>: x509: certificate has expired or is not yet valid</strong></p>\n<p>则是系统时间未同步,需要同步时间,执行如下命令</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">ntpdate -u cn.pool.ntp.org<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"Docker底层原理\"><a href=\"#Docker底层原理\" class=\"headerlink\" title=\"Docker底层原理\"></a>Docker底层原理</h3><p>Docker是怎么工作的？</p>\n<p>Docker是一个Client-Server结构的系统，Docker的守护进程运行在主机上。通过Socket从客户端访问！</p>\n<p>Docker-Server接收到Docker-Client的指令，就会执行这个命令！</p>\n<p><strong>为什么Docker比Vm快</strong></p>\n<p>1、docker有着比虚拟机更少的抽象层。由于docker不需要Hypervisor实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。<br>2、docker利用的是宿主机的内核,而不需要Guest OS。</p>\n<blockquote>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">GuestOS： VM（虚拟机）里的的系统（OS）;\nHostOS：物理机里的系统（OS）；<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"/2021/04/27/docker/1.png\" alt></p>\n</blockquote>\n<p>因此,==当新建一个容器时,<strong>docker不需要和虚拟机一样重新加载一个操作系统内核</strong>。从而避免引导、加载操作系统内核返个比较费时费资源的过程==,当新建一个虚拟机时,虚拟机软件需要加载GuestOS,返个新建过程是分钟级别的。而==docker由于直接利用宿主机的操作系统==,则省略了这个复杂的过程,因此新建一个docker容器只需要几秒钟。</p>\n<h3 id=\"docker常用命令\"><a href=\"#docker常用命令\" class=\"headerlink\" title=\"docker常用命令\"></a>docker常用命令</h3><h4 id=\"帮助命令\"><a href=\"#帮助命令\" class=\"headerlink\" title=\"帮助命令\"></a><strong>帮助命令</strong></h4><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">docker version        #显示docker的版本信息\ndocker info            #显示docker的系统信息,包括镜像和容器的数量\ndocker xxx --help    #帮助命令<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"镜像命令\"><a href=\"#镜像命令\" class=\"headerlink\" title=\"镜像命令\"></a><strong>镜像命令</strong></h4><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">docker images        #查看所有本地主机上的镜像,可以使用docker image ls 代替\ndocker search        #搜索镜像\ndocker pull 镜像名[:tag]    #下载镜像,如果不写tag,默认latest,即最新版 docker pull mysql:5.7\ndocker rmi -f        #删除镜像,-f为强制删除,即可以删除正在运行的镜像\ndocker rmi -f $(docker images -aq)    #删除全部镜像<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>docker pull</strong> 下载镜像</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"># 下载镜像 docker pull 镜像名[:tag]\n[root@master ~]# docker pull nginx\nUsing default tag: latest # 如果不写,tag默认就是latest\nlatest: Pulling from library/nginx\nf7ec5a41d630: Already exists #分层下载,docker image的核心 联合文件系统(镜像间重复的部分不重复下载)\naa1efa14b3bf: Pull complete \nb78b95af9b17: Pull complete \nc7d6bca2b8dc: Pull complete \ncf16cd8e71e0: Pull complete \n0241c68333ef: Pull complete \nDigest: sha256:75a55d33ecc73c2a242450a9f1cc858499d468f077ea942867e662c247b5e412 #签名\nStatus: Downloaded newer image for nginx:latest #真实地址\ndocker.io/library/nginx:latest\n\n#等价于它\ndocker pull mysql\ndocker pull docker.io/library/nginx:latest<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"容器命令\"><a href=\"#容器命令\" class=\"headerlink\" title=\"容器命令\"></a>容器命令</h4><pre class=\"line-numbers language-shell\"><code class=\"language-shell\">docker run 镜像id        #新建容器并启动\ndocker run [可选参数] image | docker container run [可选参数] image\n#参数说明\n--name=\"Name\"        容器名字 nginx01 nginx02 用来区分容器\n-d                    后台方式运行\n-it                    使用交互式方式运行,进入容器查看内容\n-p                    指定容器的端口 -p 8080(宿主机):8080(容器)\n            -p ip:主机端口:容器端口\n            -p 主机端口:容器端口\n            -p 容器端口\n-P            随即指定端口        \ndocker ps                 # 列出所有运行的容器 docker container list\n  -a, --all             Show all containers (default shows just running)\n  -n, --last int        Show n last created containers (includes all states) (default -1)\n  -q, --quiet           Only display numeric IDs\ndocker rm                 # 容器id 删除指定容器\ndocker start 容器id         #启动容器\ndocker restart 容器id     #重启容器\ndocker stop 容器id         #停止当前正在运行的容器\ndocker kill 容器id         #强制停止当前容器\n\nexit #容器直接退出\nctrl +P +Q #容器不停止退出<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"常用其他命令\"><a href=\"#常用其他命令\" class=\"headerlink\" title=\"常用其他命令\"></a>常用其他命令</h4><blockquote>\n<p><strong>后台启动命令</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">#命令 docker run -d 镜像名\n[root@master ~]# docker run -d centos\n#问题 docker ps.发现centos停止了\n\n#常见的坑,docker 容器使用后台运行,就必须要有一个前台进程,docker发现没有应用,就会停止\n#nginx,容器启动后,发现自己没有提供服务,就会立刻停止,就没有程序了<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>查看日志</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">docker logs --help\nOptions:\n      --details        Show extra details provided to logs\n  -f, --follow         Follow log output\n      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)\n  -n, --tail string    Number of lines to show from the end of the logs (default \"all\")\n  -t, --timestamps     Show timestamps\n      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)\n[root@master ~]# docker run -d centos /bin/sh -c \"while true;do echo 6666;sleep 1;done\" #模拟日志      \n#显示日志\n-tf        #显示日志信息（一直更新）\n--tail number #需要显示日志条数\ndocker logs -t --tail n 容器id #查看n行日志\ndocker logs -ft 容器id #跟着日志<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>查看镜像元数据</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">docker inspect 容器id<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>进入当前正在运行的容器</p>\n</blockquote>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"> # 我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置\n\n docker exec -it 容器id bash\n\n #测试\n [root@master ~]# docker ps\nCONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS       PORTS     NAMES\na40effcf407c   centos    \"bash -c 'while true…\"   5 hours ago   Up 5 hours             gifted_matsumoto\n#方式一\n[root@master ~]# docker exec -it a40effcf407c bash\n# 方式二\n[root@master ~]# docker attach a40effcf407c\n\n# 区别\n#docker exec     # 进入当前容器后开启一个新的终端，可以在里面操作。（常用）\n#docker attach     # 进入容器正在执行的终端<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p><strong>从容器内拷贝文件到主机上</strong></p>\n</blockquote>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">docker cp 容器id:容器内路径 主机目标路径\n#进入docker容器内部\n[root@master tiger]# docker exec -it a40effcf4 bash\n[root@a40effcf407c /]# ls\nbin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\n[root@a40effcf407c /]# cd /home/\n#新建一个文件\n[root@a40effcf407c home]# touch test.go \n[root@a40effcf407c home]# read escape sequence\n[root@master tiger]# docker cp a40effcf4:/home/test.go /home/tiger/\n[root@master tiger]# ls #可以看见test.go的存在\n# 拷贝是一个手动过程,未来我们使用-v卷的技术,可以实现自动同步<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a><strong>小结</strong></h4><pre class=\"line-numbers language-shell\"><code class=\"language-shell\"> attach      Attach local standard input, output, and error streams to a running container #当前shell下 attach连接指定运行的镜像\n  build       Build an image from a Dockerfile # 通过Dockerfile定制镜像\n  commit      Create a new image from a container's changes #提交当前容器为新的镜像\n  cp          Copy files/folders between a container and the local filesystem #拷贝文件\n  create      Create a new container #创建一个新的容器\n  diff        Inspect changes to files or directories on a container's filesystem #查看docker容器的变化\n  events      Get real time events from the server # 从服务获取容器实时时间\n  exec        Run a command in a running container # 在运行中的容器上运行命令\n  export      Export a container's filesystem as a tar archive #导出容器文件系统作为一个tar归档文件[对应import]\n  history     Show the history of an image # 展示一个镜像形成历史\n  images      List images #列出系统当前的镜像\n  import      Import the contents from a tarball to create a filesystem image #从tar包中导入内容创建一个文件系统镜像\n  info        Display system-wide information # 显示全系统信息\n  inspect     Return low-level information on Docker objects #查看容器详细信息\n  kill        Kill one or more running containers # kill指定docker容器\n  load        Load an image from a tar archive or STDIN #从一个tar包或标准输入中加载一个镜像[对应save]\n  login       Log in to a Docker registry #\n  logout      Log out from a Docker registry\n  logs        Fetch the logs of a container\n  pause       Pause all processes within one or more containers\n  port        List port mappings or a specific mapping for the container\n  ps          List containers\n  pull        Pull an image or a repository from a registry\n  push        Push an image or a repository to a registry\n  rename      Rename a container\n  restart     Restart one or more containers\n  rm          Remove one or more containers\n  rmi         Remove one or more images\n  run         Run a command in a new container\n  save        Save one or more images to a tar archive (streamed to STDOUT by default)\n  search      Search the Docker Hub for images\n  start       Start one or more stopped containers\n  stats       Display a live stream of container(s) resource usage statistics\n  stop        Stop one or more running containers\n  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE\n  top         Display the running processes of a container\n  unpause     Unpause all processes within one or more containers\n  update      Update configuration of one or more containers\n  version     Show the Docker version information\n  wait        Block until one or more containers stop, then print their exit codes<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"/2021/04/27/docker/2.png\" alt></p>\n<h4 id=\"作业练习\"><a href=\"#作业练习\" class=\"headerlink\" title=\"作业练习\"></a>作业练习</h4><blockquote>\n<p>docker安装nginx</p>\n</blockquote>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[root@master tiger]# docker pull nginx\nUsing default tag: latest\nlatest: Pulling from library/nginx\nDigest: sha256:75a55d33ecc73c2a242450a9f1cc858499d468f077ea942867e662c247b5e412\nStatus: Image is up to date for nginx:latest\ndocker.io/library/nginx:latest\n[root@master tiger]# docker images\nREPOSITORY   TAG       IMAGE ID       CREATED        SIZE\nmysql        latest    0627ec6901db   10 days ago    556MB\nnginx        latest    62d49f9bab67   2 weeks ago    133MB\ncentos       latest    300e315adb2f   4 months ago   209MB\n[root@master tiger]# docker run -d -p 8080:8080 nginx\n8b1ade9ca03a86942261182fab9541d433a81ed7332f12d9a9e9cd5acb459828\n[root@master tiger]# docker run -d -p 8080:80 nginx\n[[root@master tiger]# docker ps\nCONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                               NAMES\n8b1ade9ca03a   nginx     \"/docker-entrypoint.…\"   42 seconds ago   Up 29 seconds   80/tcp, 0.0.0.0:8080->80/tcp, :::8080->8080/tcp   wizardly_northcutt\n\n[root@master tiger]# curl localhost:8080<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>docker安装tomcat</p>\n</blockquote>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"># 官方建议\n$ docker run -it --rm tomcat:9.0 # 之前的方式都是后台启动,停止了容器之后,容器还可以查到  docker run -it --rm 一般用来测试,用完之后直接删除镜像与容器\n\n# 下载启动tomcat\ndocker pull tomcat\ndocker run -d -p 8081:8080 tomcat #测试会是一个404界面,因为webapp里面没有东西<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><p>思考问题</p>\n<blockquote>\n<p>每次部署项目，如果都要进入容器会很麻烦，如果可以通过在容器外部提供一个映射路径webapps，在外部放入项目，就自动同步到内部就很方便。</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>docker部署 es + kibana</p>\n</blockquote>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\"># es 暴露的端口很多\n# es 十分的耗内存\n# es 的数据一般需要放置到安全目录！挂载\n# --net somenetwork 网络配置\ndocker run -d --name elasticsearch --net somenetwork -p 9200:9200 -p 9300:9300 -e \"discovery.type=single-node\" elasticsearch:tag\n# 启动后linux就卡住了，docker status查看状态，可以看出es非常耗费内存，普通机器（阿里云低配）带不动\nCONTAINER ID   NAME            CPU %     MEM USAGE / LIMIT     MEM %     NET I/O       BLOCK I/O        PIDS\nb0573b79879e   elasticsearch   1.28%     1.254GiB / 2.763GiB   45.39%    2.41kB / 0B   52.3MB / 807kB   44\n\n\n# 增加内存限制，修改配置文件 -e 环境修改<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>使用常遇到的坑</p>\n</blockquote>\n<p>1.Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?重启电脑后使用docker命令出现上述提示。</p>\n<p>解决思路：因为没有设置开机自启动docker服务，所以需要重新启动 运行<code>service docker start</code>即可</p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h3 id=\"Docker安装\"><a href=\"#Docker安装\" class=\"headerlink\" title=\"Docker安装\"></a>Docker安装</h3><ul>\n<li><p>环境要求,Linux要求内核3.0以上</p>\n<pre><code class=\"shell\">#系统信息\n[root@master ~]# cat /etc/os-release \nNAME=&quot;CentOS Linux&quot;\nVERSION=&quot;7 (Core)&quot;\nID=&quot;centos&quot;\nID_LIKE=&quot;rhel fedora&quot;\nVERSION_ID=&quot;7&quot;\nPRETTY_NAME=&quot;CentOS Linux 7 (Core)&quot;\nANSI_COLOR=&quot;0;31&quot;\nCPE_NAME=&quot;cpe:/o:centos:centos:7&quot;\nHOME_URL=&quot;https://www.centos.org/&quot;\nBUG_REPORT_URL=&quot;https://bugs.centos.org/&quot;\n\nCENTOS_MANTISBT_PROJECT=&quot;CentOS-7&quot;\nCENTOS_MANTISBT_PROJECT_VERSION=&quot;7&quot;\nREDHAT_SUPPORT_PRODUCT=&quot;centos&quot;\nREDHAT_SUPPORT_PRODUCT_VERSION=&quot;7&quot;\n\n[root@master ~]# uname -r\n3.10.0-862.el7.x86_64</code></pre>\n</li>\n<li><p>安装步骤,<a href=\"https://docs.docker.com/engine/install/\" target=\"_blank\" rel=\"noopener\">官方文档地址</a></p>\n<pre><code class=\"shell\">#1.卸载旧版本\n sudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n#2.需要的安装包\n sudo yum install -y yum-utils\n#3.设置镜像的仓库,默认是国外的,推荐使用国内的\n sudo yum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n\n    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo #阿里云镜像\n#4.更新yum软件包索引,非必须操作\n  yum makecache fast\n#5.安装docker相关的docker-ce社区版\n sudo yum install docker-ce docker-ce-cli containerd.io\n#6.使用docker version查看安装是否成功\n  docker version\n#7.测试\n  docker run hello-world`</code></pre>\n</li>\n<li><p>卸载docker</p>\n<pre><code class=\"shell\">#1.卸载依赖\nyum remove docker-ce docker-ce-cli containerd.io\n#2.删除资源\nrm -rf /var/lib/docker</code></pre>\n<p>​</p>\n</li>\n</ul>\n<p><strong>note:运行<code>docker run xxx</code>命令启动容器时出现错误如下:</strong></p>\n<p><strong>Error response from daemon: Get <a href=\"https://registry-1.docker.io/v2/\" target=\"_blank\" rel=\"noopener\">https://registry-1.docker.io/v2/</a>: x509: certificate has expired or is not yet valid</strong></p>\n<p>则是系统时间未同步,需要同步时间,执行如下命令</p>\n<pre><code class=\"shell\">ntpdate -u cn.pool.ntp.org</code></pre>\n<h3 id=\"Docker底层原理\"><a href=\"#Docker底层原理\" class=\"headerlink\" title=\"Docker底层原理\"></a>Docker底层原理</h3><p>Docker是怎么工作的？</p>\n<p>Docker是一个Client-Server结构的系统，Docker的守护进程运行在主机上。通过Socket从客户端访问！</p>\n<p>Docker-Server接收到Docker-Client的指令，就会执行这个命令！</p>\n<p><strong>为什么Docker比Vm快</strong></p>\n<p>1、docker有着比虚拟机更少的抽象层。由于docker不需要Hypervisor实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。<br>2、docker利用的是宿主机的内核,而不需要Guest OS。</p>\n<blockquote>\n<pre><code class=\"shell\">GuestOS： VM（虚拟机）里的的系统（OS）;\nHostOS：物理机里的系统（OS）；</code></pre>\n<p><img src=\"/2021/04/27/docker/1.png\" alt></p>\n</blockquote>\n<p>因此,==当新建一个容器时,<strong>docker不需要和虚拟机一样重新加载一个操作系统内核</strong>。从而避免引导、加载操作系统内核返个比较费时费资源的过程==,当新建一个虚拟机时,虚拟机软件需要加载GuestOS,返个新建过程是分钟级别的。而==docker由于直接利用宿主机的操作系统==,则省略了这个复杂的过程,因此新建一个docker容器只需要几秒钟。</p>\n<h3 id=\"docker常用命令\"><a href=\"#docker常用命令\" class=\"headerlink\" title=\"docker常用命令\"></a>docker常用命令</h3><h4 id=\"帮助命令\"><a href=\"#帮助命令\" class=\"headerlink\" title=\"帮助命令\"></a><strong>帮助命令</strong></h4><pre><code class=\"shell\">docker version        #显示docker的版本信息\ndocker info            #显示docker的系统信息,包括镜像和容器的数量\ndocker xxx --help    #帮助命令</code></pre>\n<h4 id=\"镜像命令\"><a href=\"#镜像命令\" class=\"headerlink\" title=\"镜像命令\"></a><strong>镜像命令</strong></h4><pre><code class=\"shell\">docker images        #查看所有本地主机上的镜像,可以使用docker image ls 代替\ndocker search        #搜索镜像\ndocker pull 镜像名[:tag]    #下载镜像,如果不写tag,默认latest,即最新版 docker pull mysql:5.7\ndocker rmi -f        #删除镜像,-f为强制删除,即可以删除正在运行的镜像\ndocker rmi -f $(docker images -aq)    #删除全部镜像</code></pre>\n<p><strong>docker pull</strong> 下载镜像</p>\n<pre><code class=\"shell\"># 下载镜像 docker pull 镜像名[:tag]\n[root@master ~]# docker pull nginx\nUsing default tag: latest # 如果不写,tag默认就是latest\nlatest: Pulling from library/nginx\nf7ec5a41d630: Already exists #分层下载,docker image的核心 联合文件系统(镜像间重复的部分不重复下载)\naa1efa14b3bf: Pull complete \nb78b95af9b17: Pull complete \nc7d6bca2b8dc: Pull complete \ncf16cd8e71e0: Pull complete \n0241c68333ef: Pull complete \nDigest: sha256:75a55d33ecc73c2a242450a9f1cc858499d468f077ea942867e662c247b5e412 #签名\nStatus: Downloaded newer image for nginx:latest #真实地址\ndocker.io/library/nginx:latest\n\n#等价于它\ndocker pull mysql\ndocker pull docker.io/library/nginx:latest</code></pre>\n<h4 id=\"容器命令\"><a href=\"#容器命令\" class=\"headerlink\" title=\"容器命令\"></a>容器命令</h4><pre><code class=\"shell\">docker run 镜像id        #新建容器并启动\ndocker run [可选参数] image | docker container run [可选参数] image\n#参数说明\n--name=&quot;Name&quot;        容器名字 nginx01 nginx02 用来区分容器\n-d                    后台方式运行\n-it                    使用交互式方式运行,进入容器查看内容\n-p                    指定容器的端口 -p 8080(宿主机):8080(容器)\n            -p ip:主机端口:容器端口\n            -p 主机端口:容器端口\n            -p 容器端口\n-P            随即指定端口        \ndocker ps                 # 列出所有运行的容器 docker container list\n  -a, --all             Show all containers (default shows just running)\n  -n, --last int        Show n last created containers (includes all states) (default -1)\n  -q, --quiet           Only display numeric IDs\ndocker rm                 # 容器id 删除指定容器\ndocker start 容器id         #启动容器\ndocker restart 容器id     #重启容器\ndocker stop 容器id         #停止当前正在运行的容器\ndocker kill 容器id         #强制停止当前容器\n\nexit #容器直接退出\nctrl +P +Q #容器不停止退出</code></pre>\n<h4 id=\"常用其他命令\"><a href=\"#常用其他命令\" class=\"headerlink\" title=\"常用其他命令\"></a>常用其他命令</h4><blockquote>\n<p><strong>后台启动命令</strong></p>\n</blockquote>\n<pre><code class=\"shell\">#命令 docker run -d 镜像名\n[root@master ~]# docker run -d centos\n#问题 docker ps.发现centos停止了\n\n#常见的坑,docker 容器使用后台运行,就必须要有一个前台进程,docker发现没有应用,就会停止\n#nginx,容器启动后,发现自己没有提供服务,就会立刻停止,就没有程序了</code></pre>\n<blockquote>\n<p><strong>查看日志</strong></p>\n</blockquote>\n<pre><code class=\"shell\">docker logs --help\nOptions:\n      --details        Show extra details provided to logs\n  -f, --follow         Follow log output\n      --since string   Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)\n  -n, --tail string    Number of lines to show from the end of the logs (default &quot;all&quot;)\n  -t, --timestamps     Show timestamps\n      --until string   Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)\n[root@master ~]# docker run -d centos /bin/sh -c &quot;while true;do echo 6666;sleep 1;done&quot; #模拟日志      \n#显示日志\n-tf        #显示日志信息（一直更新）\n--tail number #需要显示日志条数\ndocker logs -t --tail n 容器id #查看n行日志\ndocker logs -ft 容器id #跟着日志</code></pre>\n<blockquote>\n<p><strong>查看镜像元数据</strong></p>\n</blockquote>\n<pre><code class=\"shell\">docker inspect 容器id</code></pre>\n<blockquote>\n<p>进入当前正在运行的容器</p>\n</blockquote>\n<pre><code class=\"shell\"> # 我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置\n\n docker exec -it 容器id bash\n\n #测试\n [root@master ~]# docker ps\nCONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS       PORTS     NAMES\na40effcf407c   centos    &quot;bash -c &#39;while true…&quot;   5 hours ago   Up 5 hours             gifted_matsumoto\n#方式一\n[root@master ~]# docker exec -it a40effcf407c bash\n# 方式二\n[root@master ~]# docker attach a40effcf407c\n\n# 区别\n#docker exec     # 进入当前容器后开启一个新的终端，可以在里面操作。（常用）\n#docker attach     # 进入容器正在执行的终端</code></pre>\n<blockquote>\n<p><strong>从容器内拷贝文件到主机上</strong></p>\n</blockquote>\n<pre><code class=\"shell\">docker cp 容器id:容器内路径 主机目标路径\n#进入docker容器内部\n[root@master tiger]# docker exec -it a40effcf4 bash\n[root@a40effcf407c /]# ls\nbin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\n[root@a40effcf407c /]# cd /home/\n#新建一个文件\n[root@a40effcf407c home]# touch test.go \n[root@a40effcf407c home]# read escape sequence\n[root@master tiger]# docker cp a40effcf4:/home/test.go /home/tiger/\n[root@master tiger]# ls #可以看见test.go的存在\n# 拷贝是一个手动过程,未来我们使用-v卷的技术,可以实现自动同步</code></pre>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a><strong>小结</strong></h4><pre><code class=\"shell\"> attach      Attach local standard input, output, and error streams to a running container #当前shell下 attach连接指定运行的镜像\n  build       Build an image from a Dockerfile # 通过Dockerfile定制镜像\n  commit      Create a new image from a container&#39;s changes #提交当前容器为新的镜像\n  cp          Copy files/folders between a container and the local filesystem #拷贝文件\n  create      Create a new container #创建一个新的容器\n  diff        Inspect changes to files or directories on a container&#39;s filesystem #查看docker容器的变化\n  events      Get real time events from the server # 从服务获取容器实时时间\n  exec        Run a command in a running container # 在运行中的容器上运行命令\n  export      Export a container&#39;s filesystem as a tar archive #导出容器文件系统作为一个tar归档文件[对应import]\n  history     Show the history of an image # 展示一个镜像形成历史\n  images      List images #列出系统当前的镜像\n  import      Import the contents from a tarball to create a filesystem image #从tar包中导入内容创建一个文件系统镜像\n  info        Display system-wide information # 显示全系统信息\n  inspect     Return low-level information on Docker objects #查看容器详细信息\n  kill        Kill one or more running containers # kill指定docker容器\n  load        Load an image from a tar archive or STDIN #从一个tar包或标准输入中加载一个镜像[对应save]\n  login       Log in to a Docker registry #\n  logout      Log out from a Docker registry\n  logs        Fetch the logs of a container\n  pause       Pause all processes within one or more containers\n  port        List port mappings or a specific mapping for the container\n  ps          List containers\n  pull        Pull an image or a repository from a registry\n  push        Push an image or a repository to a registry\n  rename      Rename a container\n  restart     Restart one or more containers\n  rm          Remove one or more containers\n  rmi         Remove one or more images\n  run         Run a command in a new container\n  save        Save one or more images to a tar archive (streamed to STDOUT by default)\n  search      Search the Docker Hub for images\n  start       Start one or more stopped containers\n  stats       Display a live stream of container(s) resource usage statistics\n  stop        Stop one or more running containers\n  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE\n  top         Display the running processes of a container\n  unpause     Unpause all processes within one or more containers\n  update      Update configuration of one or more containers\n  version     Show the Docker version information\n  wait        Block until one or more containers stop, then print their exit codes</code></pre>\n<p><img src=\"/2021/04/27/docker/2.png\" alt></p>\n<h4 id=\"作业练习\"><a href=\"#作业练习\" class=\"headerlink\" title=\"作业练习\"></a>作业练习</h4><blockquote>\n<p>docker安装nginx</p>\n</blockquote>\n<pre><code class=\"shell\">[root@master tiger]# docker pull nginx\nUsing default tag: latest\nlatest: Pulling from library/nginx\nDigest: sha256:75a55d33ecc73c2a242450a9f1cc858499d468f077ea942867e662c247b5e412\nStatus: Image is up to date for nginx:latest\ndocker.io/library/nginx:latest\n[root@master tiger]# docker images\nREPOSITORY   TAG       IMAGE ID       CREATED        SIZE\nmysql        latest    0627ec6901db   10 days ago    556MB\nnginx        latest    62d49f9bab67   2 weeks ago    133MB\ncentos       latest    300e315adb2f   4 months ago   209MB\n[root@master tiger]# docker run -d -p 8080:8080 nginx\n8b1ade9ca03a86942261182fab9541d433a81ed7332f12d9a9e9cd5acb459828\n[root@master tiger]# docker run -d -p 8080:80 nginx\n[[root@master tiger]# docker ps\nCONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                               NAMES\n8b1ade9ca03a   nginx     &quot;/docker-entrypoint.…&quot;   42 seconds ago   Up 29 seconds   80/tcp, 0.0.0.0:8080-&gt;80/tcp, :::8080-&gt;8080/tcp   wizardly_northcutt\n\n[root@master tiger]# curl localhost:8080</code></pre>\n<blockquote>\n<p>docker安装tomcat</p>\n</blockquote>\n<pre><code class=\"shell\"># 官方建议\n$ docker run -it --rm tomcat:9.0 # 之前的方式都是后台启动,停止了容器之后,容器还可以查到  docker run -it --rm 一般用来测试,用完之后直接删除镜像与容器\n\n# 下载启动tomcat\ndocker pull tomcat\ndocker run -d -p 8081:8080 tomcat #测试会是一个404界面,因为webapp里面没有东西</code></pre>\n<ul>\n<li><p>思考问题</p>\n<blockquote>\n<p>每次部署项目，如果都要进入容器会很麻烦，如果可以通过在容器外部提供一个映射路径webapps，在外部放入项目，就自动同步到内部就很方便。</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>docker部署 es + kibana</p>\n</blockquote>\n<pre><code class=\"shell\"># es 暴露的端口很多\n# es 十分的耗内存\n# es 的数据一般需要放置到安全目录！挂载\n# --net somenetwork 网络配置\ndocker run -d --name elasticsearch --net somenetwork -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:tag\n# 启动后linux就卡住了，docker status查看状态，可以看出es非常耗费内存，普通机器（阿里云低配）带不动\nCONTAINER ID   NAME            CPU %     MEM USAGE / LIMIT     MEM %     NET I/O       BLOCK I/O        PIDS\nb0573b79879e   elasticsearch   1.28%     1.254GiB / 2.763GiB   45.39%    2.41kB / 0B   52.3MB / 807kB   44\n\n\n# 增加内存限制，修改配置文件 -e 环境修改</code></pre>\n<blockquote>\n<p>使用常遇到的坑</p>\n</blockquote>\n<p>1.Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?重启电脑后使用docker命令出现上述提示。</p>\n<p>解决思路：因为没有设置开机自启动docker服务，所以需要重新启动 运行<code>service docker start</code>即可</p>\n"},{"title":"hexo博文包含图片的坑","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-29T02:52:53.000Z","password":null,"summary":null,"_content":"\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=414414&auto=0&height=66\"></iframe></div>\n\n# hexo博文包含图片的坑\n\n### 网上有很多关于这个的教程,主要的总结如下\n\n- ①修改博客目录下的_config_yml的post_asset_folder为true\n\n```yaml\npost_asset_folder: true\n```\n\n- ②安装hexo-asset-image插件\n\n```shell\nnpm install hexo-asset-image --save\n```\n\n- ③hexo new  file_name 时会在source/_post/下生成file_name的文件夹,将需要使用的图片放置在里面,然后使用相对路径引入\n\n```html\n![用于图片加载失败时显示的内容](file_name/image_name)\n```\n\n- 如此博客中的图片最后会和.md文件一起生成到public\\2019\\12\\27\\file_name中,这样在hexe g 时,可以看到命令窗口会打印修改后的路径,如下\n\n```html\nStart processing\nupdate link as:-->/2019/12/27/first/1577523021175.png\nupdate link as:-->/2019/12/27/first/1577523021175.png\n```\n\n### 我遇到的问题\n\n```html\nStart processing\nupdate link as:-->.io//2019/12/27/first/1577523021175.png\nupdate link as:-->.io//2019/12/27/first/1577523021175.png\n```\n\n- 经过一番搜寻,发现hexo-asset-image会将图片的地址修改,具体的源码信息可见\\node_modules\\hexo-asset-image\\index.js,打开后内容如下:\n\n```javascript\n'use strict';\nvar cheerio = require('cheerio');\nfunction getPosition(str, m, i) {\n  return str.split(m, i).join(m).length;\n}\n\nhexo.extend.filter.register('after_post_render', function(data){\n  var config = hexo.config;\n  if(config.post_asset_folder){\n    var link = data.permalink;\n    var beginPos = getPosition(link, '/', 3) + 1;\n    var appendLink = '';\n    // In hexo 3.1.1, the permalink of \"about\" page is like \".../about/index.html\".\n    // if not with index.html endpos = link.lastIndexOf('.') + 1 support hexo-abbrlink\n    if(/.*\\/index\\.html$/.test(link)) {\n      // when permalink is end with index.html, for example 2019/02/20/xxtitle/index.html\n      // image in xxtitle/ will go to xxtitle/index/\n      appendLink = 'index/';\n      var endPos = link.lastIndexOf('/');\n    }\n    else {\n      var endPos = link.lastIndexOf('.') ;\n    }\n    link = link.substring(beginPos, endPos) + '/' + appendLink;\n\n    var toprocess = ['excerpt', 'more', 'content'];\n    for(var i = 0; i < toprocess.length; i++){\n      var key = toprocess[i];\n\n      var $ = cheerio.load(data[key], {\n        ignoreWhitespace: false,\n        xmlMode: false,\n        lowerCaseTags: false,\n        decodeEntities: false\n      });\n      $('img').each(function(){\n        if ($(this).attr('src')){\n          // For windows style path, we replace '\\' to '/'.\n          var src = $(this).attr('src').replace('\\\\', '/');\n          if(!(/http[s]*.*|\\/\\/.*/.test(src)\n            || /^\\s+\\//.test(src)\n            || /^\\s*\\/uploads|images\\//.test(src))) {\n            // For \"about\" page, the first part of \"src\" can't be removed.\n            // In addition, to support multi-level local directory.\n            var linkArray = link.split('/').filter(function(elem){\n              return elem != '';\n            });\n            var srcArray = src.split('/').filter(function(elem){\n              return elem != '' && elem != '.';\n            });\n            if(srcArray.length > 1)\n            srcArray.shift();\n            src = srcArray.join('/');\n\n            $(this).attr('src', config.root + link + src);\n            console.info&&console.info(\"update link as:-->\"+config.root + link + src);\n          }\n        }else{\n          console.info&&console.info(\"no src attr, skipped...\");\n          console.info&&console.info($(this));\n        }\n      });\n      data[key] = $.html();\n    }\n  }\n});\n\n```\n\n- 通过查看源码发现里面有对生成博客图片的地址修改:\n\n```javascript\nlink = link.substring(beginPos, endPos) + '/' + appendLink;\n```\n\n- 通过排查发现图片的路径的endPos为:\n\n```javascript\nvar endPos = link.lastIndexOf('.') ;\n```\n\n- 我打印data.permalink得到\n\n```html\nhttp://tigerLuHai.github.io/2019/12/27/first/\n```\n\n如此在截取字符串的时候就会多出四个字符  **.io/**\n\n最后发现这段代码的作用就是要将data.permalink中路径的https://tigerLuhai.gituhub.io/去掉,因为在后面部署到github时使用相对路径访问会重新加上这个前缀,如果这里有就会重复,导致地址为https://tigerLuhai.gituhub.io/http://tigerLuHai.github.io/2019/12/27/first/的现象.\n\n明白了需求就可以修改代码为\n\n```javascript\nvar endPos = link.lastIndexOf('/') ;\n```\n\n这样就可以正常部署了.","source":"_posts/hexo博文包含图片的坑.md","raw":"---\ntitle: hexo博文包含图片的坑\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-29 10:52:53\npassword:\nsummary:\ntags:\ncategories: tool\n---\n\n<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=414414&auto=0&height=66\"></iframe></div>\n\n# hexo博文包含图片的坑\n\n### 网上有很多关于这个的教程,主要的总结如下\n\n- ①修改博客目录下的_config_yml的post_asset_folder为true\n\n```yaml\npost_asset_folder: true\n```\n\n- ②安装hexo-asset-image插件\n\n```shell\nnpm install hexo-asset-image --save\n```\n\n- ③hexo new  file_name 时会在source/_post/下生成file_name的文件夹,将需要使用的图片放置在里面,然后使用相对路径引入\n\n```html\n![用于图片加载失败时显示的内容](file_name/image_name)\n```\n\n- 如此博客中的图片最后会和.md文件一起生成到public\\2019\\12\\27\\file_name中,这样在hexe g 时,可以看到命令窗口会打印修改后的路径,如下\n\n```html\nStart processing\nupdate link as:-->/2019/12/27/first/1577523021175.png\nupdate link as:-->/2019/12/27/first/1577523021175.png\n```\n\n### 我遇到的问题\n\n```html\nStart processing\nupdate link as:-->.io//2019/12/27/first/1577523021175.png\nupdate link as:-->.io//2019/12/27/first/1577523021175.png\n```\n\n- 经过一番搜寻,发现hexo-asset-image会将图片的地址修改,具体的源码信息可见\\node_modules\\hexo-asset-image\\index.js,打开后内容如下:\n\n```javascript\n'use strict';\nvar cheerio = require('cheerio');\nfunction getPosition(str, m, i) {\n  return str.split(m, i).join(m).length;\n}\n\nhexo.extend.filter.register('after_post_render', function(data){\n  var config = hexo.config;\n  if(config.post_asset_folder){\n    var link = data.permalink;\n    var beginPos = getPosition(link, '/', 3) + 1;\n    var appendLink = '';\n    // In hexo 3.1.1, the permalink of \"about\" page is like \".../about/index.html\".\n    // if not with index.html endpos = link.lastIndexOf('.') + 1 support hexo-abbrlink\n    if(/.*\\/index\\.html$/.test(link)) {\n      // when permalink is end with index.html, for example 2019/02/20/xxtitle/index.html\n      // image in xxtitle/ will go to xxtitle/index/\n      appendLink = 'index/';\n      var endPos = link.lastIndexOf('/');\n    }\n    else {\n      var endPos = link.lastIndexOf('.') ;\n    }\n    link = link.substring(beginPos, endPos) + '/' + appendLink;\n\n    var toprocess = ['excerpt', 'more', 'content'];\n    for(var i = 0; i < toprocess.length; i++){\n      var key = toprocess[i];\n\n      var $ = cheerio.load(data[key], {\n        ignoreWhitespace: false,\n        xmlMode: false,\n        lowerCaseTags: false,\n        decodeEntities: false\n      });\n      $('img').each(function(){\n        if ($(this).attr('src')){\n          // For windows style path, we replace '\\' to '/'.\n          var src = $(this).attr('src').replace('\\\\', '/');\n          if(!(/http[s]*.*|\\/\\/.*/.test(src)\n            || /^\\s+\\//.test(src)\n            || /^\\s*\\/uploads|images\\//.test(src))) {\n            // For \"about\" page, the first part of \"src\" can't be removed.\n            // In addition, to support multi-level local directory.\n            var linkArray = link.split('/').filter(function(elem){\n              return elem != '';\n            });\n            var srcArray = src.split('/').filter(function(elem){\n              return elem != '' && elem != '.';\n            });\n            if(srcArray.length > 1)\n            srcArray.shift();\n            src = srcArray.join('/');\n\n            $(this).attr('src', config.root + link + src);\n            console.info&&console.info(\"update link as:-->\"+config.root + link + src);\n          }\n        }else{\n          console.info&&console.info(\"no src attr, skipped...\");\n          console.info&&console.info($(this));\n        }\n      });\n      data[key] = $.html();\n    }\n  }\n});\n\n```\n\n- 通过查看源码发现里面有对生成博客图片的地址修改:\n\n```javascript\nlink = link.substring(beginPos, endPos) + '/' + appendLink;\n```\n\n- 通过排查发现图片的路径的endPos为:\n\n```javascript\nvar endPos = link.lastIndexOf('.') ;\n```\n\n- 我打印data.permalink得到\n\n```html\nhttp://tigerLuHai.github.io/2019/12/27/first/\n```\n\n如此在截取字符串的时候就会多出四个字符  **.io/**\n\n最后发现这段代码的作用就是要将data.permalink中路径的https://tigerLuhai.gituhub.io/去掉,因为在后面部署到github时使用相对路径访问会重新加上这个前缀,如果这里有就会重复,导致地址为https://tigerLuhai.gituhub.io/http://tigerLuHai.github.io/2019/12/27/first/的现象.\n\n明白了需求就可以修改代码为\n\n```javascript\nvar endPos = link.lastIndexOf('/') ;\n```\n\n这样就可以正常部署了.","slug":"hexo博文包含图片的坑","published":1,"updated":"2021-04-29T10:41:35.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mlbp001jvkvyum29verv","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=414414&auto=0&height=66\"></iframe></div>\n\n<h1 id=\"hexo博文包含图片的坑\"><a href=\"#hexo博文包含图片的坑\" class=\"headerlink\" title=\"hexo博文包含图片的坑\"></a>hexo博文包含图片的坑</h1><h3 id=\"网上有很多关于这个的教程-主要的总结如下\"><a href=\"#网上有很多关于这个的教程-主要的总结如下\" class=\"headerlink\" title=\"网上有很多关于这个的教程,主要的总结如下\"></a>网上有很多关于这个的教程,主要的总结如下</h3><ul>\n<li>①修改博客目录下的_config_yml的post_asset_folder为true</li>\n</ul>\n<pre class=\"line-numbers language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">post_asset_folder</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>②安装hexo-asset-image插件</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">npm install hexo-asset-image --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>③hexo new  file_name 时会在source/_post/下生成file_name的文件夹,将需要使用的图片放置在里面,然后使用相对路径引入</li>\n</ul>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">![用于图片加载失败时显示的内容](file_name/image_name)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>如此博客中的图片最后会和.md文件一起生成到public\\2019\\12\\27\\file_name中,这样在hexe g 时,可以看到命令窗口会打印修改后的路径,如下</li>\n</ul>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">Start processing\nupdate link as:-->/2019/12/27/first/1577523021175.png\nupdate link as:-->/2019/12/27/first/1577523021175.png<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"我遇到的问题\"><a href=\"#我遇到的问题\" class=\"headerlink\" title=\"我遇到的问题\"></a>我遇到的问题</h3><pre class=\"line-numbers language-html\"><code class=\"language-html\">Start processing\nupdate link as:-->.io//2019/12/27/first/1577523021175.png\nupdate link as:-->.io//2019/12/27/first/1577523021175.png<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>经过一番搜寻,发现hexo-asset-image会将图片的地址修改,具体的源码信息可见\\node_modules\\hexo-asset-image\\index.js,打开后内容如下:</li>\n</ul>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> cheerio <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cheerio'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nhexo<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">'after_post_render'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> config <span class=\"token operator\">=</span> hexo<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>post_asset_folder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> link <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>permalink<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> beginPos <span class=\"token operator\">=</span> <span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">,</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> appendLink <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// In hexo 3.1.1, the permalink of \"about\" page is like \".../about/index.html\".</span>\n    <span class=\"token comment\" spellcheck=\"true\">// if not with index.html endpos = link.lastIndexOf('.') + 1 support hexo-abbrlink</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/.*\\/index\\.html$/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// when permalink is end with index.html, for example 2019/02/20/xxtitle/index.html</span>\n      <span class=\"token comment\" spellcheck=\"true\">// image in xxtitle/ will go to xxtitle/index/</span>\n      appendLink <span class=\"token operator\">=</span> <span class=\"token string\">'index/'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">var</span> endPos <span class=\"token operator\">=</span> link<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> endPos <span class=\"token operator\">=</span> link<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    link <span class=\"token operator\">=</span> link<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>beginPos<span class=\"token punctuation\">,</span> endPos<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">+</span> appendLink<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">var</span> toprocess <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'excerpt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'more'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'content'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> toprocess<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> key <span class=\"token operator\">=</span> toprocess<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">var</span> $ <span class=\"token operator\">=</span> cheerio<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        ignoreWhitespace<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        xmlMode<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        lowerCaseTags<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        decodeEntities<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">each</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token comment\" spellcheck=\"true\">// For windows style path, we replace '\\' to '/'.</span>\n          <span class=\"token keyword\">var</span> src <span class=\"token operator\">=</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/http[s]*.*|\\/\\/.*/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">||</span> <span class=\"token regex\">/^\\s+\\//</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span>\n            <span class=\"token operator\">||</span> <span class=\"token regex\">/^\\s*\\/uploads|images\\//</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// For \"about\" page, the first part of \"src\" can't be removed.</span>\n            <span class=\"token comment\" spellcheck=\"true\">// In addition, to support multi-level local directory.</span>\n            <span class=\"token keyword\">var</span> linkArray <span class=\"token operator\">=</span> link<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">return</span> elem <span class=\"token operator\">!=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> srcArray <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">return</span> elem <span class=\"token operator\">!=</span> <span class=\"token string\">''</span> <span class=\"token operator\">&amp;&amp;</span> elem <span class=\"token operator\">!=</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>srcArray<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            srcArray<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            src <span class=\"token operator\">=</span> srcArray<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">attr</span><span class=\"token punctuation\">(</span><span class=\"token string\">'src'</span><span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>root <span class=\"token operator\">+</span> link <span class=\"token operator\">+</span> src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            console<span class=\"token punctuation\">.</span>info<span class=\"token operator\">&amp;&amp;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update link as:-->\"</span><span class=\"token operator\">+</span>config<span class=\"token punctuation\">.</span>root <span class=\"token operator\">+</span> link <span class=\"token operator\">+</span> src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n          console<span class=\"token punctuation\">.</span>info<span class=\"token operator\">&amp;&amp;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no src attr, skipped...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          console<span class=\"token punctuation\">.</span>info<span class=\"token operator\">&amp;&amp;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      data<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>通过查看源码发现里面有对生成博客图片的地址修改:</li>\n</ul>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\">link <span class=\"token operator\">=</span> link<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>beginPos<span class=\"token punctuation\">,</span> endPos<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">+</span> appendLink<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>通过排查发现图片的路径的endPos为:</li>\n</ul>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> endPos <span class=\"token operator\">=</span> link<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>我打印data.permalink得到</li>\n</ul>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">http://tigerLuHai.github.io/2019/12/27/first/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如此在截取字符串的时候就会多出四个字符  <strong>.io/</strong></p>\n<p>最后发现这段代码的作用就是要将data.permalink中路径的<a href=\"https://tigerLuhai.gituhub.io/去掉,因为在后面部署到github时使用相对路径访问会重新加上这个前缀,如果这里有就会重复,导致地址为https://tigerLuhai.gituhub.io/http://tigerLuHai.github.io/2019/12/27/first/的现象\" target=\"_blank\" rel=\"noopener\">https://tigerLuhai.gituhub.io/去掉,因为在后面部署到github时使用相对路径访问会重新加上这个前缀,如果这里有就会重复,导致地址为https://tigerLuhai.gituhub.io/http://tigerLuHai.github.io/2019/12/27/first/的现象</a>.</p>\n<p>明白了需求就可以修改代码为</p>\n<pre class=\"line-numbers language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> endPos <span class=\"token operator\">=</span> link<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这样就可以正常部署了.</p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=414414&auto=0&height=66\"></iframe></div>\n\n<h1 id=\"hexo博文包含图片的坑\"><a href=\"#hexo博文包含图片的坑\" class=\"headerlink\" title=\"hexo博文包含图片的坑\"></a>hexo博文包含图片的坑</h1><h3 id=\"网上有很多关于这个的教程-主要的总结如下\"><a href=\"#网上有很多关于这个的教程-主要的总结如下\" class=\"headerlink\" title=\"网上有很多关于这个的教程,主要的总结如下\"></a>网上有很多关于这个的教程,主要的总结如下</h3><ul>\n<li>①修改博客目录下的_config_yml的post_asset_folder为true</li>\n</ul>\n<pre><code class=\"yaml\">post_asset_folder: true</code></pre>\n<ul>\n<li>②安装hexo-asset-image插件</li>\n</ul>\n<pre><code class=\"shell\">npm install hexo-asset-image --save</code></pre>\n<ul>\n<li>③hexo new  file_name 时会在source/_post/下生成file_name的文件夹,将需要使用的图片放置在里面,然后使用相对路径引入</li>\n</ul>\n<pre><code class=\"html\">![用于图片加载失败时显示的内容](file_name/image_name)</code></pre>\n<ul>\n<li>如此博客中的图片最后会和.md文件一起生成到public\\2019\\12\\27\\file_name中,这样在hexe g 时,可以看到命令窗口会打印修改后的路径,如下</li>\n</ul>\n<pre><code class=\"html\">Start processing\nupdate link as:--&gt;/2019/12/27/first/1577523021175.png\nupdate link as:--&gt;/2019/12/27/first/1577523021175.png</code></pre>\n<h3 id=\"我遇到的问题\"><a href=\"#我遇到的问题\" class=\"headerlink\" title=\"我遇到的问题\"></a>我遇到的问题</h3><pre><code class=\"html\">Start processing\nupdate link as:--&gt;.io//2019/12/27/first/1577523021175.png\nupdate link as:--&gt;.io//2019/12/27/first/1577523021175.png</code></pre>\n<ul>\n<li>经过一番搜寻,发现hexo-asset-image会将图片的地址修改,具体的源码信息可见\\node_modules\\hexo-asset-image\\index.js,打开后内容如下:</li>\n</ul>\n<pre><code class=\"javascript\">&#39;use strict&#39;;\nvar cheerio = require(&#39;cheerio&#39;);\nfunction getPosition(str, m, i) {\n  return str.split(m, i).join(m).length;\n}\n\nhexo.extend.filter.register(&#39;after_post_render&#39;, function(data){\n  var config = hexo.config;\n  if(config.post_asset_folder){\n    var link = data.permalink;\n    var beginPos = getPosition(link, &#39;/&#39;, 3) + 1;\n    var appendLink = &#39;&#39;;\n    // In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.\n    // if not with index.html endpos = link.lastIndexOf(&#39;.&#39;) + 1 support hexo-abbrlink\n    if(/.*\\/index\\.html$/.test(link)) {\n      // when permalink is end with index.html, for example 2019/02/20/xxtitle/index.html\n      // image in xxtitle/ will go to xxtitle/index/\n      appendLink = &#39;index/&#39;;\n      var endPos = link.lastIndexOf(&#39;/&#39;);\n    }\n    else {\n      var endPos = link.lastIndexOf(&#39;.&#39;) ;\n    }\n    link = link.substring(beginPos, endPos) + &#39;/&#39; + appendLink;\n\n    var toprocess = [&#39;excerpt&#39;, &#39;more&#39;, &#39;content&#39;];\n    for(var i = 0; i &lt; toprocess.length; i++){\n      var key = toprocess[i];\n\n      var $ = cheerio.load(data[key], {\n        ignoreWhitespace: false,\n        xmlMode: false,\n        lowerCaseTags: false,\n        decodeEntities: false\n      });\n      $(&#39;img&#39;).each(function(){\n        if ($(this).attr(&#39;src&#39;)){\n          // For windows style path, we replace &#39;\\&#39; to &#39;/&#39;.\n          var src = $(this).attr(&#39;src&#39;).replace(&#39;\\\\&#39;, &#39;/&#39;);\n          if(!(/http[s]*.*|\\/\\/.*/.test(src)\n            || /^\\s+\\//.test(src)\n            || /^\\s*\\/uploads|images\\//.test(src))) {\n            // For &quot;about&quot; page, the first part of &quot;src&quot; can&#39;t be removed.\n            // In addition, to support multi-level local directory.\n            var linkArray = link.split(&#39;/&#39;).filter(function(elem){\n              return elem != &#39;&#39;;\n            });\n            var srcArray = src.split(&#39;/&#39;).filter(function(elem){\n              return elem != &#39;&#39; &amp;&amp; elem != &#39;.&#39;;\n            });\n            if(srcArray.length &gt; 1)\n            srcArray.shift();\n            src = srcArray.join(&#39;/&#39;);\n\n            $(this).attr(&#39;src&#39;, config.root + link + src);\n            console.info&amp;&amp;console.info(&quot;update link as:--&gt;&quot;+config.root + link + src);\n          }\n        }else{\n          console.info&amp;&amp;console.info(&quot;no src attr, skipped...&quot;);\n          console.info&amp;&amp;console.info($(this));\n        }\n      });\n      data[key] = $.html();\n    }\n  }\n});\n</code></pre>\n<ul>\n<li>通过查看源码发现里面有对生成博客图片的地址修改:</li>\n</ul>\n<pre><code class=\"javascript\">link = link.substring(beginPos, endPos) + &#39;/&#39; + appendLink;</code></pre>\n<ul>\n<li>通过排查发现图片的路径的endPos为:</li>\n</ul>\n<pre><code class=\"javascript\">var endPos = link.lastIndexOf(&#39;.&#39;) ;</code></pre>\n<ul>\n<li>我打印data.permalink得到</li>\n</ul>\n<pre><code class=\"html\">http://tigerLuHai.github.io/2019/12/27/first/</code></pre>\n<p>如此在截取字符串的时候就会多出四个字符  <strong>.io/</strong></p>\n<p>最后发现这段代码的作用就是要将data.permalink中路径的<a href=\"https://tigerLuhai.gituhub.io/去掉,因为在后面部署到github时使用相对路径访问会重新加上这个前缀,如果这里有就会重复,导致地址为https://tigerLuhai.gituhub.io/http://tigerLuHai.github.io/2019/12/27/first/的现象\" target=\"_blank\" rel=\"noopener\">https://tigerLuhai.gituhub.io/去掉,因为在后面部署到github时使用相对路径访问会重新加上这个前缀,如果这里有就会重复,导致地址为https://tigerLuhai.gituhub.io/http://tigerLuHai.github.io/2019/12/27/first/的现象</a>.</p>\n<p>明白了需求就可以修改代码为</p>\n<pre><code class=\"javascript\">var endPos = link.lastIndexOf(&#39;/&#39;) ;</code></pre>\n<p>这样就可以正常部署了.</p>\n"},{"title":"javaWeb三大核心组件之servlet","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-04T14:05:03.000Z","password":null,"summary":null,"_content":"\n# javaWeb三大核心组件之Servlet\n\n### 什么是Servlet\n\nJava Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。\n\n使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。\n\nJava Servlet 通常情况下与使用 CGI（Common Gateway Interface，公共网关接口）实现的程序可以达到异曲同工的效果。但是相比于 CGI，Servlet 有以下几点优势：\n\n性能明显更好。\n\nServlet 在 Web 服务器的地址空间内执行。这样它就没有必要再创建一个单独的进程来处理每个客户端请求。\n\nServlet 是独立于平台的，因为它们是用 Java 编写的。\n\n服务器上的 Java 安全管理器执行了一系列限制，以保护服务器计算机上的资源。因此，Servlet 是可信的。\n\nJava 类库的全部功能对 Servlet 来说都是可用的。它可以通过 sockets 和 RMI 机制与 applets、数据库或其他软件进行交互。\n\n### Tomcat与Servlet的关系\n\nTomcat 是Web应用服务器,是一个Servlet/JSP容器. Tomcat 作为Servlet容器,负责处理客户请求,把请求传送给Servlet,并将Servlet的响应传送回给客户.而Servlet是一种运行在支持Java语言的服务器上的组件.。\n\nServlet最常见的用途是扩展Java Web服务器功能,提供非常安全的,可移植的,易于使用的CGI替代品。从http协议中的请求和响应可以得知，浏览器发出的请求是一个请求文本，而浏览器接收到的也应该是一个响应文本。\n\n![](javaWeb三大核心组件之servlet/1)\n\n1. Tomcat将http请求文本接收并解析，然后封装成HttpServletRequest类型的request对象，所有的HTTP头数据读可以通过request对象调用对应的方法查询到。\n2. Tomcat同时会要响应的信息封装为HttpServletResponse类型的response对象，通过设置response属性就可以控制要输出到浏览器的内容，然后将response交给tomcat，tomcat就会将其变成响应文本的格式发送给浏览器。\n\nJava Servlet API 是Servlet容器(tomcat)和servlet之间的接口，它定义了serlvet的各种方法，还定义了Servlet容器传送给Servlet的对象类，其中最重要的就是ServletRequest和ServletResponse。所以说我们在编写servlet时，需要实现Servlet接口，按照其规范进行操作。\n\n### Servlet执行过程\n\n 在浏览器的地址栏输入：http://ip:port/appNames/servlet\n\n  1）通过浏览器和ip：port和这个服务器建立连接。\n  2） 浏览器会生成一个请求数据包（路径appNames/servlet）向服务器发送请求。\n  3） 服务器收到请求数据包，分析请求资源路径做精准定位，通过请求的appName查找webapps文件下面的appName做匹配，匹配上了需要获取web.xml中的servlet(mapping)。 \n  4） 服务器创建两个对象：\n    第一个对象：请求对象，该对象实现了HttpServletRequest接口，服务器会将请求数据包中的数据解析出来,存储在该对象里。这样做的好处是没有必要理解http协议，只需要读取request。\n    第二个对象：响应对象，实现了HttpServletResponse接口，作用是servlet处理完成后的结果可以存放到该对象上，然后服务器依据该对象的数据生成响应数据包。\n  5） servlet在执行servlet()方法时，可以通过request获取请求数据，也可以将处理结果存放到response上。然后服务器与响应对象直接形成一个默契，生成一个响应数据包给浏览器。\n  6）浏览器解析服务器返回的响应数据包，生成响应的结果。\n\n  \n\n![](javaWeb三大核心组件之servlet/2.png)\n\nServlet访问的过程：\nHttp请求---->web.xml-------->  url -pattern----->servlet-name----->servlet-class----->   QuickStratServlet(对应的Class文件)\n\n### Servlet生命周期\n\nSpringMVC是基于servlet，控制器基于方法级别的拦截，处理器设计为单实例，所以应该了解一下Servlet的生命周期。\n\nServlet 加载—>实例化—>服务—>销毁。\n\n**init**（）：\n\n在Servlet的生命周期中，仅执行一次init()方法。它是在服务器装入Servlet时执行的，负责初始化Servlet对象。可以配置服务器，以在启动服务器或客户机首次访问Servlet时装入Servlet。无论有多少客户机访问Servlet，都不会重复执行init（）。\n\n**service**（）：\n\n它是Servlet的核心，负责响应客户的请求。每当一个客户请求一个HttpServlet对象，该对象的Service()方法就要调用，而且传递给这个方法一个“请求”（ServletRequest）对象和一个“响应”（ServletResponse）对象作为参数。在HttpServlet中已存在Service()方法。默认的服务功能是调用与HTTP请求的方法相应的do功能。\n\n**destroy**（）：\n\n仅执行一次，在服务器端停止且卸载Servlet时执行该方法。当Servlet对象退出生命周期时，负责释放占用的资源。一个Servlet在运行service()方法时可能会产生其他的线程，因此需要确认在调用destroy()方法时，这些线程已经终止或完成。","source":"_posts/javaWeb三大核心组件之servlet.md","raw":"---\ntitle: javaWeb三大核心组件之servlet\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-04 22:05:03\npassword:\nsummary:\ntags:\ncategories: java\n---\n\n# javaWeb三大核心组件之Servlet\n\n### 什么是Servlet\n\nJava Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。\n\n使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。\n\nJava Servlet 通常情况下与使用 CGI（Common Gateway Interface，公共网关接口）实现的程序可以达到异曲同工的效果。但是相比于 CGI，Servlet 有以下几点优势：\n\n性能明显更好。\n\nServlet 在 Web 服务器的地址空间内执行。这样它就没有必要再创建一个单独的进程来处理每个客户端请求。\n\nServlet 是独立于平台的，因为它们是用 Java 编写的。\n\n服务器上的 Java 安全管理器执行了一系列限制，以保护服务器计算机上的资源。因此，Servlet 是可信的。\n\nJava 类库的全部功能对 Servlet 来说都是可用的。它可以通过 sockets 和 RMI 机制与 applets、数据库或其他软件进行交互。\n\n### Tomcat与Servlet的关系\n\nTomcat 是Web应用服务器,是一个Servlet/JSP容器. Tomcat 作为Servlet容器,负责处理客户请求,把请求传送给Servlet,并将Servlet的响应传送回给客户.而Servlet是一种运行在支持Java语言的服务器上的组件.。\n\nServlet最常见的用途是扩展Java Web服务器功能,提供非常安全的,可移植的,易于使用的CGI替代品。从http协议中的请求和响应可以得知，浏览器发出的请求是一个请求文本，而浏览器接收到的也应该是一个响应文本。\n\n![](javaWeb三大核心组件之servlet/1)\n\n1. Tomcat将http请求文本接收并解析，然后封装成HttpServletRequest类型的request对象，所有的HTTP头数据读可以通过request对象调用对应的方法查询到。\n2. Tomcat同时会要响应的信息封装为HttpServletResponse类型的response对象，通过设置response属性就可以控制要输出到浏览器的内容，然后将response交给tomcat，tomcat就会将其变成响应文本的格式发送给浏览器。\n\nJava Servlet API 是Servlet容器(tomcat)和servlet之间的接口，它定义了serlvet的各种方法，还定义了Servlet容器传送给Servlet的对象类，其中最重要的就是ServletRequest和ServletResponse。所以说我们在编写servlet时，需要实现Servlet接口，按照其规范进行操作。\n\n### Servlet执行过程\n\n 在浏览器的地址栏输入：http://ip:port/appNames/servlet\n\n  1）通过浏览器和ip：port和这个服务器建立连接。\n  2） 浏览器会生成一个请求数据包（路径appNames/servlet）向服务器发送请求。\n  3） 服务器收到请求数据包，分析请求资源路径做精准定位，通过请求的appName查找webapps文件下面的appName做匹配，匹配上了需要获取web.xml中的servlet(mapping)。 \n  4） 服务器创建两个对象：\n    第一个对象：请求对象，该对象实现了HttpServletRequest接口，服务器会将请求数据包中的数据解析出来,存储在该对象里。这样做的好处是没有必要理解http协议，只需要读取request。\n    第二个对象：响应对象，实现了HttpServletResponse接口，作用是servlet处理完成后的结果可以存放到该对象上，然后服务器依据该对象的数据生成响应数据包。\n  5） servlet在执行servlet()方法时，可以通过request获取请求数据，也可以将处理结果存放到response上。然后服务器与响应对象直接形成一个默契，生成一个响应数据包给浏览器。\n  6）浏览器解析服务器返回的响应数据包，生成响应的结果。\n\n  \n\n![](javaWeb三大核心组件之servlet/2.png)\n\nServlet访问的过程：\nHttp请求---->web.xml-------->  url -pattern----->servlet-name----->servlet-class----->   QuickStratServlet(对应的Class文件)\n\n### Servlet生命周期\n\nSpringMVC是基于servlet，控制器基于方法级别的拦截，处理器设计为单实例，所以应该了解一下Servlet的生命周期。\n\nServlet 加载—>实例化—>服务—>销毁。\n\n**init**（）：\n\n在Servlet的生命周期中，仅执行一次init()方法。它是在服务器装入Servlet时执行的，负责初始化Servlet对象。可以配置服务器，以在启动服务器或客户机首次访问Servlet时装入Servlet。无论有多少客户机访问Servlet，都不会重复执行init（）。\n\n**service**（）：\n\n它是Servlet的核心，负责响应客户的请求。每当一个客户请求一个HttpServlet对象，该对象的Service()方法就要调用，而且传递给这个方法一个“请求”（ServletRequest）对象和一个“响应”（ServletResponse）对象作为参数。在HttpServlet中已存在Service()方法。默认的服务功能是调用与HTTP请求的方法相应的do功能。\n\n**destroy**（）：\n\n仅执行一次，在服务器端停止且卸载Servlet时执行该方法。当Servlet对象退出生命周期时，负责释放占用的资源。一个Servlet在运行service()方法时可能会产生其他的线程，因此需要确认在调用destroy()方法时，这些线程已经终止或完成。","slug":"javaWeb三大核心组件之servlet","published":1,"updated":"2020-02-26T06:48:25.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mlbt001lvkvy1u6s4y9h","content":"<h1 id=\"javaWeb三大核心组件之Servlet\"><a href=\"#javaWeb三大核心组件之Servlet\" class=\"headerlink\" title=\"javaWeb三大核心组件之Servlet\"></a>javaWeb三大核心组件之Servlet</h1><h3 id=\"什么是Servlet\"><a href=\"#什么是Servlet\" class=\"headerlink\" title=\"什么是Servlet\"></a>什么是Servlet</h3><p>Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p>\n<p>使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。</p>\n<p>Java Servlet 通常情况下与使用 CGI（Common Gateway Interface，公共网关接口）实现的程序可以达到异曲同工的效果。但是相比于 CGI，Servlet 有以下几点优势：</p>\n<p>性能明显更好。</p>\n<p>Servlet 在 Web 服务器的地址空间内执行。这样它就没有必要再创建一个单独的进程来处理每个客户端请求。</p>\n<p>Servlet 是独立于平台的，因为它们是用 Java 编写的。</p>\n<p>服务器上的 Java 安全管理器执行了一系列限制，以保护服务器计算机上的资源。因此，Servlet 是可信的。</p>\n<p>Java 类库的全部功能对 Servlet 来说都是可用的。它可以通过 sockets 和 RMI 机制与 applets、数据库或其他软件进行交互。</p>\n<h3 id=\"Tomcat与Servlet的关系\"><a href=\"#Tomcat与Servlet的关系\" class=\"headerlink\" title=\"Tomcat与Servlet的关系\"></a>Tomcat与Servlet的关系</h3><p>Tomcat 是Web应用服务器,是一个Servlet/JSP容器. Tomcat 作为Servlet容器,负责处理客户请求,把请求传送给Servlet,并将Servlet的响应传送回给客户.而Servlet是一种运行在支持Java语言的服务器上的组件.。</p>\n<p>Servlet最常见的用途是扩展Java Web服务器功能,提供非常安全的,可移植的,易于使用的CGI替代品。从http协议中的请求和响应可以得知，浏览器发出的请求是一个请求文本，而浏览器接收到的也应该是一个响应文本。</p>\n<p><img src=\"/2020/01/04/javaweb-san-da-he-xin-zu-jian-zhi-servlet/1\" alt></p>\n<ol>\n<li>Tomcat将http请求文本接收并解析，然后封装成HttpServletRequest类型的request对象，所有的HTTP头数据读可以通过request对象调用对应的方法查询到。</li>\n<li>Tomcat同时会要响应的信息封装为HttpServletResponse类型的response对象，通过设置response属性就可以控制要输出到浏览器的内容，然后将response交给tomcat，tomcat就会将其变成响应文本的格式发送给浏览器。</li>\n</ol>\n<p>Java Servlet API 是Servlet容器(tomcat)和servlet之间的接口，它定义了serlvet的各种方法，还定义了Servlet容器传送给Servlet的对象类，其中最重要的就是ServletRequest和ServletResponse。所以说我们在编写servlet时，需要实现Servlet接口，按照其规范进行操作。</p>\n<h3 id=\"Servlet执行过程\"><a href=\"#Servlet执行过程\" class=\"headerlink\" title=\"Servlet执行过程\"></a>Servlet执行过程</h3><p> 在浏览器的地址栏输入：<a href=\"http://ip:port/appNames/servlet\" target=\"_blank\" rel=\"noopener\">http://ip:port/appNames/servlet</a></p>\n<p>  1）通过浏览器和ip：port和这个服务器建立连接。<br>  2） 浏览器会生成一个请求数据包（路径appNames/servlet）向服务器发送请求。<br>  3） 服务器收到请求数据包，分析请求资源路径做精准定位，通过请求的appName查找webapps文件下面的appName做匹配，匹配上了需要获取web.xml中的servlet(mapping)。 <br>  4） 服务器创建两个对象：<br>    第一个对象：请求对象，该对象实现了HttpServletRequest接口，服务器会将请求数据包中的数据解析出来,存储在该对象里。这样做的好处是没有必要理解http协议，只需要读取request。<br>    第二个对象：响应对象，实现了HttpServletResponse接口，作用是servlet处理完成后的结果可以存放到该对象上，然后服务器依据该对象的数据生成响应数据包。<br>  5） servlet在执行servlet()方法时，可以通过request获取请求数据，也可以将处理结果存放到response上。然后服务器与响应对象直接形成一个默契，生成一个响应数据包给浏览器。<br>  6）浏览器解析服务器返回的响应数据包，生成响应的结果。</p>\n<p>  </p>\n<p><img src=\"/2020/01/04/javaweb-san-da-he-xin-zu-jian-zhi-servlet/2.png\" alt></p>\n<p>Servlet访问的过程：<br>Http请求—-&gt;web.xml——–&gt;  url -pattern—–&gt;servlet-name—–&gt;servlet-class—–&gt;   QuickStratServlet(对应的Class文件)</p>\n<h3 id=\"Servlet生命周期\"><a href=\"#Servlet生命周期\" class=\"headerlink\" title=\"Servlet生命周期\"></a>Servlet生命周期</h3><p>SpringMVC是基于servlet，控制器基于方法级别的拦截，处理器设计为单实例，所以应该了解一下Servlet的生命周期。</p>\n<p>Servlet 加载—&gt;实例化—&gt;服务—&gt;销毁。</p>\n<p><strong>init</strong>（）：</p>\n<p>在Servlet的生命周期中，仅执行一次init()方法。它是在服务器装入Servlet时执行的，负责初始化Servlet对象。可以配置服务器，以在启动服务器或客户机首次访问Servlet时装入Servlet。无论有多少客户机访问Servlet，都不会重复执行init（）。</p>\n<p><strong>service</strong>（）：</p>\n<p>它是Servlet的核心，负责响应客户的请求。每当一个客户请求一个HttpServlet对象，该对象的Service()方法就要调用，而且传递给这个方法一个“请求”（ServletRequest）对象和一个“响应”（ServletResponse）对象作为参数。在HttpServlet中已存在Service()方法。默认的服务功能是调用与HTTP请求的方法相应的do功能。</p>\n<p><strong>destroy</strong>（）：</p>\n<p>仅执行一次，在服务器端停止且卸载Servlet时执行该方法。当Servlet对象退出生命周期时，负责释放占用的资源。一个Servlet在运行service()方法时可能会产生其他的线程，因此需要确认在调用destroy()方法时，这些线程已经终止或完成。</p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h1 id=\"javaWeb三大核心组件之Servlet\"><a href=\"#javaWeb三大核心组件之Servlet\" class=\"headerlink\" title=\"javaWeb三大核心组件之Servlet\"></a>javaWeb三大核心组件之Servlet</h1><h3 id=\"什么是Servlet\"><a href=\"#什么是Servlet\" class=\"headerlink\" title=\"什么是Servlet\"></a>什么是Servlet</h3><p>Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p>\n<p>使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。</p>\n<p>Java Servlet 通常情况下与使用 CGI（Common Gateway Interface，公共网关接口）实现的程序可以达到异曲同工的效果。但是相比于 CGI，Servlet 有以下几点优势：</p>\n<p>性能明显更好。</p>\n<p>Servlet 在 Web 服务器的地址空间内执行。这样它就没有必要再创建一个单独的进程来处理每个客户端请求。</p>\n<p>Servlet 是独立于平台的，因为它们是用 Java 编写的。</p>\n<p>服务器上的 Java 安全管理器执行了一系列限制，以保护服务器计算机上的资源。因此，Servlet 是可信的。</p>\n<p>Java 类库的全部功能对 Servlet 来说都是可用的。它可以通过 sockets 和 RMI 机制与 applets、数据库或其他软件进行交互。</p>\n<h3 id=\"Tomcat与Servlet的关系\"><a href=\"#Tomcat与Servlet的关系\" class=\"headerlink\" title=\"Tomcat与Servlet的关系\"></a>Tomcat与Servlet的关系</h3><p>Tomcat 是Web应用服务器,是一个Servlet/JSP容器. Tomcat 作为Servlet容器,负责处理客户请求,把请求传送给Servlet,并将Servlet的响应传送回给客户.而Servlet是一种运行在支持Java语言的服务器上的组件.。</p>\n<p>Servlet最常见的用途是扩展Java Web服务器功能,提供非常安全的,可移植的,易于使用的CGI替代品。从http协议中的请求和响应可以得知，浏览器发出的请求是一个请求文本，而浏览器接收到的也应该是一个响应文本。</p>\n<p><img src=\"/2020/01/04/javaweb-san-da-he-xin-zu-jian-zhi-servlet/1\" alt></p>\n<ol>\n<li>Tomcat将http请求文本接收并解析，然后封装成HttpServletRequest类型的request对象，所有的HTTP头数据读可以通过request对象调用对应的方法查询到。</li>\n<li>Tomcat同时会要响应的信息封装为HttpServletResponse类型的response对象，通过设置response属性就可以控制要输出到浏览器的内容，然后将response交给tomcat，tomcat就会将其变成响应文本的格式发送给浏览器。</li>\n</ol>\n<p>Java Servlet API 是Servlet容器(tomcat)和servlet之间的接口，它定义了serlvet的各种方法，还定义了Servlet容器传送给Servlet的对象类，其中最重要的就是ServletRequest和ServletResponse。所以说我们在编写servlet时，需要实现Servlet接口，按照其规范进行操作。</p>\n<h3 id=\"Servlet执行过程\"><a href=\"#Servlet执行过程\" class=\"headerlink\" title=\"Servlet执行过程\"></a>Servlet执行过程</h3><p> 在浏览器的地址栏输入：<a href=\"http://ip:port/appNames/servlet\" target=\"_blank\" rel=\"noopener\">http://ip:port/appNames/servlet</a></p>\n<p>  1）通过浏览器和ip：port和这个服务器建立连接。<br>  2） 浏览器会生成一个请求数据包（路径appNames/servlet）向服务器发送请求。<br>  3） 服务器收到请求数据包，分析请求资源路径做精准定位，通过请求的appName查找webapps文件下面的appName做匹配，匹配上了需要获取web.xml中的servlet(mapping)。 <br>  4） 服务器创建两个对象：<br>    第一个对象：请求对象，该对象实现了HttpServletRequest接口，服务器会将请求数据包中的数据解析出来,存储在该对象里。这样做的好处是没有必要理解http协议，只需要读取request。<br>    第二个对象：响应对象，实现了HttpServletResponse接口，作用是servlet处理完成后的结果可以存放到该对象上，然后服务器依据该对象的数据生成响应数据包。<br>  5） servlet在执行servlet()方法时，可以通过request获取请求数据，也可以将处理结果存放到response上。然后服务器与响应对象直接形成一个默契，生成一个响应数据包给浏览器。<br>  6）浏览器解析服务器返回的响应数据包，生成响应的结果。</p>\n<p>  </p>\n<p><img src=\"/2020/01/04/javaweb-san-da-he-xin-zu-jian-zhi-servlet/2.png\" alt></p>\n<p>Servlet访问的过程：<br>Http请求—-&gt;web.xml——–&gt;  url -pattern—–&gt;servlet-name—–&gt;servlet-class—–&gt;   QuickStratServlet(对应的Class文件)</p>\n<h3 id=\"Servlet生命周期\"><a href=\"#Servlet生命周期\" class=\"headerlink\" title=\"Servlet生命周期\"></a>Servlet生命周期</h3><p>SpringMVC是基于servlet，控制器基于方法级别的拦截，处理器设计为单实例，所以应该了解一下Servlet的生命周期。</p>\n<p>Servlet 加载—&gt;实例化—&gt;服务—&gt;销毁。</p>\n<p><strong>init</strong>（）：</p>\n<p>在Servlet的生命周期中，仅执行一次init()方法。它是在服务器装入Servlet时执行的，负责初始化Servlet对象。可以配置服务器，以在启动服务器或客户机首次访问Servlet时装入Servlet。无论有多少客户机访问Servlet，都不会重复执行init（）。</p>\n<p><strong>service</strong>（）：</p>\n<p>它是Servlet的核心，负责响应客户的请求。每当一个客户请求一个HttpServlet对象，该对象的Service()方法就要调用，而且传递给这个方法一个“请求”（ServletRequest）对象和一个“响应”（ServletResponse）对象作为参数。在HttpServlet中已存在Service()方法。默认的服务功能是调用与HTTP请求的方法相应的do功能。</p>\n<p><strong>destroy</strong>（）：</p>\n<p>仅执行一次，在服务器端停止且卸载Servlet时执行该方法。当Servlet对象退出生命周期时，负责释放占用的资源。一个Servlet在运行service()方法时可能会产生其他的线程，因此需要确认在调用destroy()方法时，这些线程已经终止或完成。</p>\n"},{"title":"java异常","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-05T14:47:02.000Z","password":null,"summary":null,"_content":"\n## Java异常介绍\n\n异常时什么？就是指阻止当前方法或作用域继续执行的问题,当程序运行时出现异常时,系统就会自动生成一个Exception对象来通知程序进行相应的处理。Java异常的类型有很多种，下面我们就使用一张图来看一下Java异常的继承层次结构：\n\n![](java异常/1.png)\n\n### Java异常中的Error\n\nError一般表示编译时或者系统错误，例如：虚拟机相关的错误，系统崩溃（例如：我们开发中有时会遇到的OutOfMemoryError）等。这种错误无法恢复或不可捕获,将导致应用程序中断,通常应用程序无法处理这些错误,因此也不应该试图用catch来进行捕获。\n\n### Java异常中的Exception\n\n上面我们有介绍，Java异常的中的Exception分为受检查异常和运行时异常（不受检查异常）。下面我们展开介绍。\n\n#### Java中的受检查异常\n\n相信大家在写IO操作的代码的时候，一定有过这样的记忆，对File或者Stream进行操作的时候一定需要使用try-catch包起来，否则编译会失败，这是因为这些异常类型是受检查的异常类型。编译器在编译时，对于受检异常必须进行try...catch或throws处理,否则无法通过编译。常见的受检查异常包括：IO操作、ClassNotFoundException、线程操作等。\n\n#### Java中的非受检查异常（运行时异常）\n\nRuntimeException及其子类都统称为非受检查异常，例如：NullPointExecrption、NumberFormatException（字符串转换为数字）、ArrayIndexOutOfBoundsException（数组越界）、ClassCastException（类型转换错误）、ArithmeticException（算术错误）等。\n\n### Java的异常处理\n\nJava处理异常的一般格式是这样的：\n\n```java\ntry{\n    ///可能会抛出异常的代码\n}catch(Type1 id1){\n    //处理Type1类型异常的代码\n}catch(Type2 id2){\n    //处理Type2类型异常的代码\n}\n```\n\ntry块中放置可能会发生异常的代码(但是我们不知道具体会发生哪种异常)。如果异常发生了，try块抛出系统自动生成的异常对象，然后异常处理机制将负责搜寻参数与异常类型相匹配的第一个处理程序，然后进行catch语句执行(不会在向下查找)。如果我们的catch语句没有匹配到，那么JVM虚拟机还是会抛出异常的。\n\n#### Java中的throws关键字\n\n如果在当前方法不知道该如何处理该异常时，则可以使用throws对异常进行抛出给调用者处理或者交给JVM。JVM对异常的处理方式是：打印异常的跟踪栈信息并终止程序运行。throws在使用时应处于方法签名之后使用，可以抛出多种异常并用英文字符逗号’,’隔开。下面是一个例子：\n\n```java\npublic void f() throws ClassNotFoundException,IOException{}\n```\n\n这样我们调用f()方法的时候必须要catch-ClassNotFoundException和IOException这两个异常或者catch-Exception基类。\n注意：\nthrows的这种使用方式只是Java编译期要求我们这样做的，我们完全可以只在方法声明中throws相关异常，但是在方法里面却不抛出任何异常，这样也能通过编译，我们通过这种方式间接的绕过了Java编译期的检查。这种方式有一个好处：为异常先占一个位置，以后就可以抛出这种异常而不需要修改已有的代码。在定义抽象类和接口的时候这种设计很重要，这样派生类或者接口实现就可以抛出这些预先声明的异常。\n\n#### 打印异常信息\n\n异常类的基类Exception中提供了一组方法用来获取异常的一些信息.所以如果我们获得了一个异常对象,那么我们就可以打印出一些有用的信息,最常用的就是void printStackTrace()这个方法,这个方法将返回一个由栈轨迹中的元素所构成的数组,其中每个元素都表示栈中的一帧.元素0是栈顶元素,并且是调用序列中的最后一个方法调用(这个异常被创建和抛出之处);他有几个不同的重载版本,可以将信息输出到不同的流中去.下面的代码显示了如何打印基本的异常信息:\n\n```java\npublic void f() throws IOException{\n    System.out.println(\"Throws SimpleException from f()\"); \n    throw new IOException(\"Crash\");\n }\n public static void main(String[] agrs) {\n    try {\n    \tnew B().f();\n    } catch (IOException e) {\n    \tSystem.out.println(\"Caught  Exception\");\n        System.out.println(\"getMessage(): \"+e.getMessage());\n        System.out.println(\"getLocalizedMessage(): \"+e.getLocalizedMessage());\n        System.out.println(\"toString(): \"+e.toString());\n        System.out.println(\"printStackTrace(): \");\n        e.printStackTrace(System.out);\n    }\n}\n```\n\n我们来看输出：\n\n```html\nThrows SimpleException from f()\nCaught  Exception\ngetMessage(): Crash\ngetLocalizedMessage(): Crash\ntoString(): java.io.IOException: Crash\nprintStackTrace(): \njava.io.IOException: Crash\n\tat com.learn.example.B.f(RunMain.java:19)\n\tat com.learn.example.RunMain.main(RunMain.java:26)\n```\n\n#### 使用finally进行清理\n\n引入finally语句的原因是我们希望一些代码总是能得到执行,无论try块中是否抛出异常.这样异常处理的基本格式变成了下面这样:\n\n```java\ntry{\n    //可能会抛出异常的代码\n}\ncatch(Type1 id1){\n    //处理Type1类型异常的代码\n}\ncatch(Type2 id2){\n    //处理Type2类型异常的代码\n}\nfinally{\n    //总是会执行的代码\n}\n```\n\n在Java中希望除内存以外的资源恢复到它们的初始状态的时候需要使用的finally语句。例如打开的文件或者网络连接，屏幕上的绘制的图像等。下面我们来看一下案例：\n\n```java\npublic class FinallyException {\n    static int count = 0;\n\n    public static void main(String[] args) {\n        while (true){\n            try {\n                if (count++ == 0){\n                    throw new ThreeException();\n                }\n                System.out.println(\"no Exception\");\n            }catch (ThreeException e){\n                System.out.println(\"ThreeException\");\n            }finally {\n                System.out.println(\"in finally cause\");\n                if(count == 2)\n                    break;\n            }\n        }\n    }\n}\n\nclass ThreeException extends Exception{}\n```\n\n我们来看输出：\n\n```html\nThreeException\nin finally cause\nno Exception\nin finally cause\n```\n\n如果我们在try块或者catch块里面有return语句的话，那么finally语句还会执行吗？我们看下面的例子：\n\n```java\npublic class MultipleReturns {\n    public static void f(int i){\n        System.out.println(\"start.......\");\n        try {\n            System.out.println(\"1\");\n            if(i == 1)\n                return;\n            System.out.println(\"2\");\n            if (i == 2)\n                return;\n            System.out.println(\"3\");\n            if(i == 3)\n                return;\n            System.out.println(\"else\");\n            return;\n        }finally {\n            System.out.println(\"end\");\n        }\n    }\n\n    public static void main(String[] args) {\n        for (int i = 1; i<4; i++){\n            f(i);\n        }\n    }\n}\n```\n\n我们来看运行结果：\n\n```html\nstart.......\n1\nend\nstart.......\n1\n2\nend\nstart.......\n1\n2\n3\nend\n```\n\n我们看到即使我们在try或者catch块中使用了return语句，finally子句还是会执行。那么有什么情况finally子句不会执行呢？\n有下面两种情况会导致Java异常的丢失\n\n- finally中重写抛出异常（finally中重写抛出另一种异常会覆盖原来捕捉到的异常）\n- 在finally子句中返回（即return）\n\n### Java异常栈\n\n前面稍微提到了点Java异常栈的相关内容，这一节我们通过一个简单的例子来更加直观的了解异常栈的相关内容。我们再看Exception异常的时候会发现，发生异常的方法会在最上层，main方法会在最下层，中间还有其他的调用层次。这其实是栈的结构，先进后出的。下面我们通过例子来看下：\n\n```java\npublic class WhoCalled {\n    static void f() {\n        try {\n            throw new Exception();\n        } catch (Exception e) {\n            for (StackTraceElement ste : e.getStackTrace()){\n                System.out.println(ste.getMethodName());\n            }\n        }\n    }\n\n    static void g(){\n        f();\n    }\n\n    static void h(){\n        g();\n    }\n\n    public static void main(String[] args) {\n        f();\n        System.out.println(\"---------------------------\");\n        g();\n        System.out.println(\"---------------------------\");\n        h();\n        System.out.println(\"---------------------------\");\n    }\n}\n```\n\n我们来看输出结果：\n\n```html\nf\nmain\n---------------------------\nf\ng\nmain\n---------------------------\nf\ng\nh\nmain\n---------------------------\n```\n\n可以看到异常信息都是从内到外的，按我的理解查看异常的时候要从第一条异常信息看起，因为那是异常发生的源头。\n\n### 重新抛出异常及异常链\n\n我们知道每遇到一个异常信息，我们都需要进行try…catch,一个还好，如果出现多个异常呢？分类处理肯定会比较麻烦，那就一个Exception解决所有的异常吧。这样确实是可以，但是这样处理势必会导致后面的维护难度增加。最好的办法就是将这些异常信息封装，然后捕获我们的封装类即可。\n我们有两种方式处理异常，一是throws抛出交给上级处理，二是try…catch做具体处理。但是这个与上面有什么关联呢？try…catch的catch块我们可以不需要做任何处理，仅仅只用throw这个关键字将我们封装异常信息主动抛出来。然后在通过关键字throws继续抛出该方法异常。它的上层也可以做这样的处理，以此类推就会产生一条由异常构成的异常链。\n通过使用异常链，我们可以提高代码的可理解性、系统的可维护性和友好性。\n我们捕获异常以后一般会有两种操作\n\n- 捕获后抛出原来的异常，希望保留最新的异常抛出点－－fillStackTrace\n- 捕获后抛出新的异常，希望抛出完整的异常链－－initCause\n\n#### 捕获异常后重新抛出异常\n\n在函数中捕获了异常，在catch模块中不做进一步的处理，而是向上一级进行传递catch(Exception e){ throw e;}，我们通过例子来看一下：\n\n```java\npublic class ReThrow {\n    public static void f()throws Exception{\n        throw new Exception(\"Exception: f()\");\n    }\n\n    public static void g() throws Exception{\n        try{\n            f();\n        }catch(Exception e){\n            System.out.println(\"inside g()\");\n            throw e;\n        }\n    }\n    public static void main(String[] args){\n        try{\n            g();\n        }\n        catch(Exception e){\n            System.out.println(\"inside main()\");\n            e.printStackTrace(System.out);\n        }\n    }\n}\n```\n\n我们来看输出：\n\n```html\ninside g()\ninside main()\njava.lang.Exception: Exception: f()\n        //异常的抛出点还是最初抛出异常的函数f()\n\tat com.learn.example.ReThrow.f(RunMain.java:5)\n\tat com.learn.example.ReThrow.g(RunMain.java:10)\n\tat com.learn.example.RunMain.main(RunMain.java:21)\n```\n\n#### fillStackTrace——覆盖前边的异常抛出点(获取最新的异常抛出点)\n\n在此抛出异常的时候进行设置catch(Exception e){ (Exception)e.fillInStackTrace();}我们通过例子看一下：(还是刚才的例子)\n\n```java\npublic void g() throws Exception{\n    try{\n        f();\n    }catch(Exception e){\n    \tSystem.out.println(\"inside g()\");\n        throw (Exception)e.fillInStackTrace();\n    }\n}\n```\n\n运行结果如下：\n\n```html\ninside g()\ninside main()\njava.lang.Exception: Exception: f()\n        //显示的就是最新的抛出点\n\tat com.learn.example.ReThrow.g(RunMain.java:13)\n\tat com.learn.example.RunMain.main(RunMain.java:21)\n```\n\n#### 捕获异常后抛出新的异常（保留原来的异常信息，区别于捕获异常之后重新抛出）\n\n如果我们在抛出异常的时候需要保留原来的异常信息，那么有两种方式\n\n- 方式1:Exception e＝new Exception(); e.initCause(ex);\n- 方式2:Exception e =new Exception(ex);\n\n```java\nclass ReThrow {\n    public void f(){\n        try{\n             g(); \n         }catch(NullPointerException ex){\n             //方式1\n             Exception e=new Exception();\n             //将原始的异常信息保留下来\n             e.initCause(ex);\n             //方式2\n             //Exception e=new Exception(ex);\n             try {\n    \t\t    throw e;\n    \t\t} catch (Exception e1) {\n    \t\t    e1.printStackTrace();\n    \t\t}\n         }\n    }\n\n    public void g() throws NullPointerException{\n    \tSystem.out.println(\"inside g()\");\n        throw new NullPointerException();\n    }\n}\n\npublic class RunMain {\n    public static void main(String[] agrs) {\n    \ttry{\n            new ReThrow().f();\n        }\n        catch(Exception e){\n            System.out.println(\"inside main()\");\n            e.printStackTrace(System.out);\n        }\n    }\n}\n```\n\n在这个例子里面，我们先捕获NullPointerException异常，然后在抛出Exception异常，这时候如果我们不使用initCause方法将原始异常（NullPointerException）保存下来的话，就会丢失NullPointerException。只会显示Eception异常。下面我们来看结果：\n\n```html\n//没有调用initCause方法的输出\ninside g()\njava.lang.Exception\n\tat com.learn.example.ReThrow.f(RunMain.java:9)\n\tat com.learn.example.RunMain.main(RunMain.java:31)\n//调用initCasue方法保存原始异常信息的输出\ninside g()\njava.lang.Exception\n\tat com.learn.example.ReThrow.f(RunMain.java:9)\n\tat com.learn.example.RunMain.main(RunMain.java:31)\nCaused by: java.lang.NullPointerException\n\tat com.learn.example.ReThrow.g(RunMain.java:24)\n\tat com.learn.example.ReThrow.f(RunMain.java:6)\n\t... 1 more\n```\n\n我们看到我们使用initCause方法保存后，原始的异常信息会以Caused by的形式输出。\n\n### Java异常的限制\n\n当Java异常遇到继承或者接口的时候是存在限制的，下面我们来看看有哪些限制。\n\n- 规则一：子类在重写父类抛出异常的方法时，要么不抛出异常，要么抛出与父类方法相同的异常或该异常的子类。如果被重写的父类方法只抛出受检异常，则子类重写的方法可以抛出非受检异常。例如，父类方法抛出了一个受检异常IOException，重写该方法时不能抛出Exception，对于受检异常而言，只能抛出IOException及其子类异常，也可以抛出非受检异常。我们通过例子来看下：\n\n```java\nclass A {  \n    public void fun() throws Exception {}  \n}  \nclass B extends A {  \n    public void fun() throws IOException, RuntimeException {}  \n}\n```\n\n父类抛出的异常包含所有异常，上面的写法正确。\n\n```java\nclass A {  \n    public void fun() throws RuntimeException {}  \n}  \nclass B extends A {  \n    public void fun() throws IOException, RuntimeException {}  \n}\n```\n\n子类IOException超出了父类的异常范畴，上面的写法错误。\n\n```java\nclass A {  \n    public void fun() throws IOException {}  \n}  \nclass B extends A {  \n    public void fun() throws IOException, RuntimeException, ArithmeticException{}\n}\n```\n\nRuntimeException不属于IO的范畴，并且超出了父类的异常范畴。但是RuntimeException和ArithmeticException属于运行时异常，子类重写的方法可以抛出任何运行时异常。所以上面的写法正确。\n\n- 规则儿：子类在重写父类抛出异常的方法时，如果实现了有相同方法签名的接口且接口中的该方法也有异常声明，则子类重写的方法要么不抛出异常，要么抛出父类中被重写方法声明异常与接口中被实现方法声明异常的交集。\n\n```java\nclass Test {\n    public Test() throws IOException {}\n    void test() throws IOException {}\n}\n\ninterface I1{\n    void test() throw Exception;\n}\n\nclass SubTest extends Test implements I1 {\n    public SubTest() throws Exception,NullPointerException, NoSuchMethodException {}\n    void test() throws IOException {}\n}\n```\n\n在SubTest类中，test方法要么不抛出异常，要么抛出IOException或其子类（例如，InterruptedIOException）。\n\n### Java异常与构造器\n\n如果一个构造器中就发生异常了，那我们如何处理才能正确的清呢？也许你会说使用finally啊，它不是一定会执行的吗？这可不一定，如果构造器在其执行过程中遇到了异常，这时候对象的某些部分还没有正确的初始化，而这时候却会在finally中对其进行清理，显然这样会出问题的。\n原则：\n对于在构造器阶段可能会抛出异常，并且要求清理的类，最安全的方式是使用嵌套的try子句。\n\n```java\ntry {\n    InputFile in=new InpputFile(\"Cleanup.java\");\n    try {\n    \tString string;\n    \tint i=1;\n    \twhile ((string=in.getLine())!=null) {}\n    }catch (Exception e) {\n    \tSystem.out.println(\"Cause Exception in main\");\n    \te.printStackTrace(System.out);\n    }finally {\n    \tin.dispose();\n    }\n}catch (Exception e) {\n    System.out.println(\"InputFile construction failed\");\n}\n```\n\n我们来仔细看一下这里面的逻辑，对InputFile的构造在第一个try块中是有效的，如果构造器失败，抛出异常，那么会被最外层的catch捕获到，这时候InputFile对象的dispose方法是不需要执行的。如果构造成功，那么进入第二层try块，这时候finally块肯定是需要被调用的（对象需要dispose）。\n\n## java项目中的异常处理方式\n\n### 统一抛出异常\n\n- 首先定义一个自定义异常类继承RuntimeException\n\n```java\n@Data\n@AllArgsConstructor\npublic class CustomException extends RuntimeException {\n    ResultCode resultCode;\n}\n```\n\n- 然后定义一个异常抓取类负责抛出异常\n\n```java\npublic class ExceptionCast {\n    public static void cast(ResultCode resultCode){\n        throw new CustomException(resultCode);\n    }\n}\n```\n\n- 在业务代码中抛出异常\n\n```java\nif (!optional.isPresent()) {\n\tExceptionCast.cast(CmsCode.CMS_SITE_NOEXISTS);\n}\n```\n\n### 统一抓获异常再具体处理\n\n- 异常分两类处理,一种是自己定义的异常,一种是系统异常.对创建一份Map保存一些已经事先知道或者遇到过的异常,当捕获到该类异常时获取预先设置的响应状态,遇到没有见过的异常则统一响应\n\n```java\n@RestControllerAdvice\npublic class ExceptionCatch {\n\n    Logger logger = LoggerFactory.getLogger(ExceptionCatch.class);\n\n    //使用EXCEPTIONS存放异常类型和错误代码的映射,ImmutableMap的特点是一旦创建就不可改变,并且线程安全.\n    private static ImmutableMap<Class<? extends Throwable>, ResultCode> EXCEPTIONS;\n\n    //使用builder来构建一个异常类型和错误代码的异常\n    protected static ImmutableMap.Builder<Class<? extends Throwable>, ResultCode> builder = ImmutableMap.builder();\n\n    static {\n        builder.put(HttpMediaTypeNotSupportedException.class, CommonCode.INVAILDPARAM);\n    }\n\n    //捕获CustomException异常\n    @ExceptionHandler(CustomException.class)\n    public ResponseResult customException(CustomException customException) {\n\n        logger.error(\"catch exception : {}\\r\\nexception:\", customException.getMessage(), customException);\n\n        ResultCode resultCode = customException.getResultCode();\n        return new ResponseResult(resultCode);\n    }\n\n    //捕获不可预知异常\n    @ExceptionHandler(Exception.class)\n    public ResponseResult exception(Exception exception) {\n\n        logger.error(\"catch exception : {}\\r\\nexception:\", exception.getMessage(), exception);\n\n        if (EXCEPTIONS == null) {\n            EXCEPTIONS = builder.build();\n        }\n        ResultCode resultCode = EXCEPTIONS.get(exception.getClass());\n        ResponseResult responseResult;\n        if (resultCode != null) {\n            responseResult = new ResponseResult(resultCode);\n        } else {\n            responseResult = new ResponseResult(CommonCode.SERVER_ERROR);\n        }\n        return responseResult;\n    }\n\n}\n```\n\n","source":"_posts/java异常.md","raw":"---\ntitle: java异常\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-05 22:47:02\npassword:\nsummary:\ntags:\ncategories: java\n---\n\n## Java异常介绍\n\n异常时什么？就是指阻止当前方法或作用域继续执行的问题,当程序运行时出现异常时,系统就会自动生成一个Exception对象来通知程序进行相应的处理。Java异常的类型有很多种，下面我们就使用一张图来看一下Java异常的继承层次结构：\n\n![](java异常/1.png)\n\n### Java异常中的Error\n\nError一般表示编译时或者系统错误，例如：虚拟机相关的错误，系统崩溃（例如：我们开发中有时会遇到的OutOfMemoryError）等。这种错误无法恢复或不可捕获,将导致应用程序中断,通常应用程序无法处理这些错误,因此也不应该试图用catch来进行捕获。\n\n### Java异常中的Exception\n\n上面我们有介绍，Java异常的中的Exception分为受检查异常和运行时异常（不受检查异常）。下面我们展开介绍。\n\n#### Java中的受检查异常\n\n相信大家在写IO操作的代码的时候，一定有过这样的记忆，对File或者Stream进行操作的时候一定需要使用try-catch包起来，否则编译会失败，这是因为这些异常类型是受检查的异常类型。编译器在编译时，对于受检异常必须进行try...catch或throws处理,否则无法通过编译。常见的受检查异常包括：IO操作、ClassNotFoundException、线程操作等。\n\n#### Java中的非受检查异常（运行时异常）\n\nRuntimeException及其子类都统称为非受检查异常，例如：NullPointExecrption、NumberFormatException（字符串转换为数字）、ArrayIndexOutOfBoundsException（数组越界）、ClassCastException（类型转换错误）、ArithmeticException（算术错误）等。\n\n### Java的异常处理\n\nJava处理异常的一般格式是这样的：\n\n```java\ntry{\n    ///可能会抛出异常的代码\n}catch(Type1 id1){\n    //处理Type1类型异常的代码\n}catch(Type2 id2){\n    //处理Type2类型异常的代码\n}\n```\n\ntry块中放置可能会发生异常的代码(但是我们不知道具体会发生哪种异常)。如果异常发生了，try块抛出系统自动生成的异常对象，然后异常处理机制将负责搜寻参数与异常类型相匹配的第一个处理程序，然后进行catch语句执行(不会在向下查找)。如果我们的catch语句没有匹配到，那么JVM虚拟机还是会抛出异常的。\n\n#### Java中的throws关键字\n\n如果在当前方法不知道该如何处理该异常时，则可以使用throws对异常进行抛出给调用者处理或者交给JVM。JVM对异常的处理方式是：打印异常的跟踪栈信息并终止程序运行。throws在使用时应处于方法签名之后使用，可以抛出多种异常并用英文字符逗号’,’隔开。下面是一个例子：\n\n```java\npublic void f() throws ClassNotFoundException,IOException{}\n```\n\n这样我们调用f()方法的时候必须要catch-ClassNotFoundException和IOException这两个异常或者catch-Exception基类。\n注意：\nthrows的这种使用方式只是Java编译期要求我们这样做的，我们完全可以只在方法声明中throws相关异常，但是在方法里面却不抛出任何异常，这样也能通过编译，我们通过这种方式间接的绕过了Java编译期的检查。这种方式有一个好处：为异常先占一个位置，以后就可以抛出这种异常而不需要修改已有的代码。在定义抽象类和接口的时候这种设计很重要，这样派生类或者接口实现就可以抛出这些预先声明的异常。\n\n#### 打印异常信息\n\n异常类的基类Exception中提供了一组方法用来获取异常的一些信息.所以如果我们获得了一个异常对象,那么我们就可以打印出一些有用的信息,最常用的就是void printStackTrace()这个方法,这个方法将返回一个由栈轨迹中的元素所构成的数组,其中每个元素都表示栈中的一帧.元素0是栈顶元素,并且是调用序列中的最后一个方法调用(这个异常被创建和抛出之处);他有几个不同的重载版本,可以将信息输出到不同的流中去.下面的代码显示了如何打印基本的异常信息:\n\n```java\npublic void f() throws IOException{\n    System.out.println(\"Throws SimpleException from f()\"); \n    throw new IOException(\"Crash\");\n }\n public static void main(String[] agrs) {\n    try {\n    \tnew B().f();\n    } catch (IOException e) {\n    \tSystem.out.println(\"Caught  Exception\");\n        System.out.println(\"getMessage(): \"+e.getMessage());\n        System.out.println(\"getLocalizedMessage(): \"+e.getLocalizedMessage());\n        System.out.println(\"toString(): \"+e.toString());\n        System.out.println(\"printStackTrace(): \");\n        e.printStackTrace(System.out);\n    }\n}\n```\n\n我们来看输出：\n\n```html\nThrows SimpleException from f()\nCaught  Exception\ngetMessage(): Crash\ngetLocalizedMessage(): Crash\ntoString(): java.io.IOException: Crash\nprintStackTrace(): \njava.io.IOException: Crash\n\tat com.learn.example.B.f(RunMain.java:19)\n\tat com.learn.example.RunMain.main(RunMain.java:26)\n```\n\n#### 使用finally进行清理\n\n引入finally语句的原因是我们希望一些代码总是能得到执行,无论try块中是否抛出异常.这样异常处理的基本格式变成了下面这样:\n\n```java\ntry{\n    //可能会抛出异常的代码\n}\ncatch(Type1 id1){\n    //处理Type1类型异常的代码\n}\ncatch(Type2 id2){\n    //处理Type2类型异常的代码\n}\nfinally{\n    //总是会执行的代码\n}\n```\n\n在Java中希望除内存以外的资源恢复到它们的初始状态的时候需要使用的finally语句。例如打开的文件或者网络连接，屏幕上的绘制的图像等。下面我们来看一下案例：\n\n```java\npublic class FinallyException {\n    static int count = 0;\n\n    public static void main(String[] args) {\n        while (true){\n            try {\n                if (count++ == 0){\n                    throw new ThreeException();\n                }\n                System.out.println(\"no Exception\");\n            }catch (ThreeException e){\n                System.out.println(\"ThreeException\");\n            }finally {\n                System.out.println(\"in finally cause\");\n                if(count == 2)\n                    break;\n            }\n        }\n    }\n}\n\nclass ThreeException extends Exception{}\n```\n\n我们来看输出：\n\n```html\nThreeException\nin finally cause\nno Exception\nin finally cause\n```\n\n如果我们在try块或者catch块里面有return语句的话，那么finally语句还会执行吗？我们看下面的例子：\n\n```java\npublic class MultipleReturns {\n    public static void f(int i){\n        System.out.println(\"start.......\");\n        try {\n            System.out.println(\"1\");\n            if(i == 1)\n                return;\n            System.out.println(\"2\");\n            if (i == 2)\n                return;\n            System.out.println(\"3\");\n            if(i == 3)\n                return;\n            System.out.println(\"else\");\n            return;\n        }finally {\n            System.out.println(\"end\");\n        }\n    }\n\n    public static void main(String[] args) {\n        for (int i = 1; i<4; i++){\n            f(i);\n        }\n    }\n}\n```\n\n我们来看运行结果：\n\n```html\nstart.......\n1\nend\nstart.......\n1\n2\nend\nstart.......\n1\n2\n3\nend\n```\n\n我们看到即使我们在try或者catch块中使用了return语句，finally子句还是会执行。那么有什么情况finally子句不会执行呢？\n有下面两种情况会导致Java异常的丢失\n\n- finally中重写抛出异常（finally中重写抛出另一种异常会覆盖原来捕捉到的异常）\n- 在finally子句中返回（即return）\n\n### Java异常栈\n\n前面稍微提到了点Java异常栈的相关内容，这一节我们通过一个简单的例子来更加直观的了解异常栈的相关内容。我们再看Exception异常的时候会发现，发生异常的方法会在最上层，main方法会在最下层，中间还有其他的调用层次。这其实是栈的结构，先进后出的。下面我们通过例子来看下：\n\n```java\npublic class WhoCalled {\n    static void f() {\n        try {\n            throw new Exception();\n        } catch (Exception e) {\n            for (StackTraceElement ste : e.getStackTrace()){\n                System.out.println(ste.getMethodName());\n            }\n        }\n    }\n\n    static void g(){\n        f();\n    }\n\n    static void h(){\n        g();\n    }\n\n    public static void main(String[] args) {\n        f();\n        System.out.println(\"---------------------------\");\n        g();\n        System.out.println(\"---------------------------\");\n        h();\n        System.out.println(\"---------------------------\");\n    }\n}\n```\n\n我们来看输出结果：\n\n```html\nf\nmain\n---------------------------\nf\ng\nmain\n---------------------------\nf\ng\nh\nmain\n---------------------------\n```\n\n可以看到异常信息都是从内到外的，按我的理解查看异常的时候要从第一条异常信息看起，因为那是异常发生的源头。\n\n### 重新抛出异常及异常链\n\n我们知道每遇到一个异常信息，我们都需要进行try…catch,一个还好，如果出现多个异常呢？分类处理肯定会比较麻烦，那就一个Exception解决所有的异常吧。这样确实是可以，但是这样处理势必会导致后面的维护难度增加。最好的办法就是将这些异常信息封装，然后捕获我们的封装类即可。\n我们有两种方式处理异常，一是throws抛出交给上级处理，二是try…catch做具体处理。但是这个与上面有什么关联呢？try…catch的catch块我们可以不需要做任何处理，仅仅只用throw这个关键字将我们封装异常信息主动抛出来。然后在通过关键字throws继续抛出该方法异常。它的上层也可以做这样的处理，以此类推就会产生一条由异常构成的异常链。\n通过使用异常链，我们可以提高代码的可理解性、系统的可维护性和友好性。\n我们捕获异常以后一般会有两种操作\n\n- 捕获后抛出原来的异常，希望保留最新的异常抛出点－－fillStackTrace\n- 捕获后抛出新的异常，希望抛出完整的异常链－－initCause\n\n#### 捕获异常后重新抛出异常\n\n在函数中捕获了异常，在catch模块中不做进一步的处理，而是向上一级进行传递catch(Exception e){ throw e;}，我们通过例子来看一下：\n\n```java\npublic class ReThrow {\n    public static void f()throws Exception{\n        throw new Exception(\"Exception: f()\");\n    }\n\n    public static void g() throws Exception{\n        try{\n            f();\n        }catch(Exception e){\n            System.out.println(\"inside g()\");\n            throw e;\n        }\n    }\n    public static void main(String[] args){\n        try{\n            g();\n        }\n        catch(Exception e){\n            System.out.println(\"inside main()\");\n            e.printStackTrace(System.out);\n        }\n    }\n}\n```\n\n我们来看输出：\n\n```html\ninside g()\ninside main()\njava.lang.Exception: Exception: f()\n        //异常的抛出点还是最初抛出异常的函数f()\n\tat com.learn.example.ReThrow.f(RunMain.java:5)\n\tat com.learn.example.ReThrow.g(RunMain.java:10)\n\tat com.learn.example.RunMain.main(RunMain.java:21)\n```\n\n#### fillStackTrace——覆盖前边的异常抛出点(获取最新的异常抛出点)\n\n在此抛出异常的时候进行设置catch(Exception e){ (Exception)e.fillInStackTrace();}我们通过例子看一下：(还是刚才的例子)\n\n```java\npublic void g() throws Exception{\n    try{\n        f();\n    }catch(Exception e){\n    \tSystem.out.println(\"inside g()\");\n        throw (Exception)e.fillInStackTrace();\n    }\n}\n```\n\n运行结果如下：\n\n```html\ninside g()\ninside main()\njava.lang.Exception: Exception: f()\n        //显示的就是最新的抛出点\n\tat com.learn.example.ReThrow.g(RunMain.java:13)\n\tat com.learn.example.RunMain.main(RunMain.java:21)\n```\n\n#### 捕获异常后抛出新的异常（保留原来的异常信息，区别于捕获异常之后重新抛出）\n\n如果我们在抛出异常的时候需要保留原来的异常信息，那么有两种方式\n\n- 方式1:Exception e＝new Exception(); e.initCause(ex);\n- 方式2:Exception e =new Exception(ex);\n\n```java\nclass ReThrow {\n    public void f(){\n        try{\n             g(); \n         }catch(NullPointerException ex){\n             //方式1\n             Exception e=new Exception();\n             //将原始的异常信息保留下来\n             e.initCause(ex);\n             //方式2\n             //Exception e=new Exception(ex);\n             try {\n    \t\t    throw e;\n    \t\t} catch (Exception e1) {\n    \t\t    e1.printStackTrace();\n    \t\t}\n         }\n    }\n\n    public void g() throws NullPointerException{\n    \tSystem.out.println(\"inside g()\");\n        throw new NullPointerException();\n    }\n}\n\npublic class RunMain {\n    public static void main(String[] agrs) {\n    \ttry{\n            new ReThrow().f();\n        }\n        catch(Exception e){\n            System.out.println(\"inside main()\");\n            e.printStackTrace(System.out);\n        }\n    }\n}\n```\n\n在这个例子里面，我们先捕获NullPointerException异常，然后在抛出Exception异常，这时候如果我们不使用initCause方法将原始异常（NullPointerException）保存下来的话，就会丢失NullPointerException。只会显示Eception异常。下面我们来看结果：\n\n```html\n//没有调用initCause方法的输出\ninside g()\njava.lang.Exception\n\tat com.learn.example.ReThrow.f(RunMain.java:9)\n\tat com.learn.example.RunMain.main(RunMain.java:31)\n//调用initCasue方法保存原始异常信息的输出\ninside g()\njava.lang.Exception\n\tat com.learn.example.ReThrow.f(RunMain.java:9)\n\tat com.learn.example.RunMain.main(RunMain.java:31)\nCaused by: java.lang.NullPointerException\n\tat com.learn.example.ReThrow.g(RunMain.java:24)\n\tat com.learn.example.ReThrow.f(RunMain.java:6)\n\t... 1 more\n```\n\n我们看到我们使用initCause方法保存后，原始的异常信息会以Caused by的形式输出。\n\n### Java异常的限制\n\n当Java异常遇到继承或者接口的时候是存在限制的，下面我们来看看有哪些限制。\n\n- 规则一：子类在重写父类抛出异常的方法时，要么不抛出异常，要么抛出与父类方法相同的异常或该异常的子类。如果被重写的父类方法只抛出受检异常，则子类重写的方法可以抛出非受检异常。例如，父类方法抛出了一个受检异常IOException，重写该方法时不能抛出Exception，对于受检异常而言，只能抛出IOException及其子类异常，也可以抛出非受检异常。我们通过例子来看下：\n\n```java\nclass A {  \n    public void fun() throws Exception {}  \n}  \nclass B extends A {  \n    public void fun() throws IOException, RuntimeException {}  \n}\n```\n\n父类抛出的异常包含所有异常，上面的写法正确。\n\n```java\nclass A {  \n    public void fun() throws RuntimeException {}  \n}  \nclass B extends A {  \n    public void fun() throws IOException, RuntimeException {}  \n}\n```\n\n子类IOException超出了父类的异常范畴，上面的写法错误。\n\n```java\nclass A {  \n    public void fun() throws IOException {}  \n}  \nclass B extends A {  \n    public void fun() throws IOException, RuntimeException, ArithmeticException{}\n}\n```\n\nRuntimeException不属于IO的范畴，并且超出了父类的异常范畴。但是RuntimeException和ArithmeticException属于运行时异常，子类重写的方法可以抛出任何运行时异常。所以上面的写法正确。\n\n- 规则儿：子类在重写父类抛出异常的方法时，如果实现了有相同方法签名的接口且接口中的该方法也有异常声明，则子类重写的方法要么不抛出异常，要么抛出父类中被重写方法声明异常与接口中被实现方法声明异常的交集。\n\n```java\nclass Test {\n    public Test() throws IOException {}\n    void test() throws IOException {}\n}\n\ninterface I1{\n    void test() throw Exception;\n}\n\nclass SubTest extends Test implements I1 {\n    public SubTest() throws Exception,NullPointerException, NoSuchMethodException {}\n    void test() throws IOException {}\n}\n```\n\n在SubTest类中，test方法要么不抛出异常，要么抛出IOException或其子类（例如，InterruptedIOException）。\n\n### Java异常与构造器\n\n如果一个构造器中就发生异常了，那我们如何处理才能正确的清呢？也许你会说使用finally啊，它不是一定会执行的吗？这可不一定，如果构造器在其执行过程中遇到了异常，这时候对象的某些部分还没有正确的初始化，而这时候却会在finally中对其进行清理，显然这样会出问题的。\n原则：\n对于在构造器阶段可能会抛出异常，并且要求清理的类，最安全的方式是使用嵌套的try子句。\n\n```java\ntry {\n    InputFile in=new InpputFile(\"Cleanup.java\");\n    try {\n    \tString string;\n    \tint i=1;\n    \twhile ((string=in.getLine())!=null) {}\n    }catch (Exception e) {\n    \tSystem.out.println(\"Cause Exception in main\");\n    \te.printStackTrace(System.out);\n    }finally {\n    \tin.dispose();\n    }\n}catch (Exception e) {\n    System.out.println(\"InputFile construction failed\");\n}\n```\n\n我们来仔细看一下这里面的逻辑，对InputFile的构造在第一个try块中是有效的，如果构造器失败，抛出异常，那么会被最外层的catch捕获到，这时候InputFile对象的dispose方法是不需要执行的。如果构造成功，那么进入第二层try块，这时候finally块肯定是需要被调用的（对象需要dispose）。\n\n## java项目中的异常处理方式\n\n### 统一抛出异常\n\n- 首先定义一个自定义异常类继承RuntimeException\n\n```java\n@Data\n@AllArgsConstructor\npublic class CustomException extends RuntimeException {\n    ResultCode resultCode;\n}\n```\n\n- 然后定义一个异常抓取类负责抛出异常\n\n```java\npublic class ExceptionCast {\n    public static void cast(ResultCode resultCode){\n        throw new CustomException(resultCode);\n    }\n}\n```\n\n- 在业务代码中抛出异常\n\n```java\nif (!optional.isPresent()) {\n\tExceptionCast.cast(CmsCode.CMS_SITE_NOEXISTS);\n}\n```\n\n### 统一抓获异常再具体处理\n\n- 异常分两类处理,一种是自己定义的异常,一种是系统异常.对创建一份Map保存一些已经事先知道或者遇到过的异常,当捕获到该类异常时获取预先设置的响应状态,遇到没有见过的异常则统一响应\n\n```java\n@RestControllerAdvice\npublic class ExceptionCatch {\n\n    Logger logger = LoggerFactory.getLogger(ExceptionCatch.class);\n\n    //使用EXCEPTIONS存放异常类型和错误代码的映射,ImmutableMap的特点是一旦创建就不可改变,并且线程安全.\n    private static ImmutableMap<Class<? extends Throwable>, ResultCode> EXCEPTIONS;\n\n    //使用builder来构建一个异常类型和错误代码的异常\n    protected static ImmutableMap.Builder<Class<? extends Throwable>, ResultCode> builder = ImmutableMap.builder();\n\n    static {\n        builder.put(HttpMediaTypeNotSupportedException.class, CommonCode.INVAILDPARAM);\n    }\n\n    //捕获CustomException异常\n    @ExceptionHandler(CustomException.class)\n    public ResponseResult customException(CustomException customException) {\n\n        logger.error(\"catch exception : {}\\r\\nexception:\", customException.getMessage(), customException);\n\n        ResultCode resultCode = customException.getResultCode();\n        return new ResponseResult(resultCode);\n    }\n\n    //捕获不可预知异常\n    @ExceptionHandler(Exception.class)\n    public ResponseResult exception(Exception exception) {\n\n        logger.error(\"catch exception : {}\\r\\nexception:\", exception.getMessage(), exception);\n\n        if (EXCEPTIONS == null) {\n            EXCEPTIONS = builder.build();\n        }\n        ResultCode resultCode = EXCEPTIONS.get(exception.getClass());\n        ResponseResult responseResult;\n        if (resultCode != null) {\n            responseResult = new ResponseResult(resultCode);\n        } else {\n            responseResult = new ResponseResult(CommonCode.SERVER_ERROR);\n        }\n        return responseResult;\n    }\n\n}\n```\n\n","slug":"java异常","published":1,"updated":"2021-04-29T10:34:22.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mlbw001nvkvywmhs9erh","content":"<h2 id=\"Java异常介绍\"><a href=\"#Java异常介绍\" class=\"headerlink\" title=\"Java异常介绍\"></a>Java异常介绍</h2><p>异常时什么？就是指阻止当前方法或作用域继续执行的问题,当程序运行时出现异常时,系统就会自动生成一个Exception对象来通知程序进行相应的处理。Java异常的类型有很多种，下面我们就使用一张图来看一下Java异常的继承层次结构：</p>\n<p><img src=\"/2020/01/05/java-yi-chang/1.png\" alt></p>\n<h3 id=\"Java异常中的Error\"><a href=\"#Java异常中的Error\" class=\"headerlink\" title=\"Java异常中的Error\"></a>Java异常中的Error</h3><p>Error一般表示编译时或者系统错误，例如：虚拟机相关的错误，系统崩溃（例如：我们开发中有时会遇到的OutOfMemoryError）等。这种错误无法恢复或不可捕获,将导致应用程序中断,通常应用程序无法处理这些错误,因此也不应该试图用catch来进行捕获。</p>\n<h3 id=\"Java异常中的Exception\"><a href=\"#Java异常中的Exception\" class=\"headerlink\" title=\"Java异常中的Exception\"></a>Java异常中的Exception</h3><p>上面我们有介绍，Java异常的中的Exception分为受检查异常和运行时异常（不受检查异常）。下面我们展开介绍。</p>\n<h4 id=\"Java中的受检查异常\"><a href=\"#Java中的受检查异常\" class=\"headerlink\" title=\"Java中的受检查异常\"></a>Java中的受检查异常</h4><p>相信大家在写IO操作的代码的时候，一定有过这样的记忆，对File或者Stream进行操作的时候一定需要使用try-catch包起来，否则编译会失败，这是因为这些异常类型是受检查的异常类型。编译器在编译时，对于受检异常必须进行try…catch或throws处理,否则无法通过编译。常见的受检查异常包括：IO操作、ClassNotFoundException、线程操作等。</p>\n<h4 id=\"Java中的非受检查异常（运行时异常）\"><a href=\"#Java中的非受检查异常（运行时异常）\" class=\"headerlink\" title=\"Java中的非受检查异常（运行时异常）\"></a>Java中的非受检查异常（运行时异常）</h4><p>RuntimeException及其子类都统称为非受检查异常，例如：NullPointExecrption、NumberFormatException（字符串转换为数字）、ArrayIndexOutOfBoundsException（数组越界）、ClassCastException（类型转换错误）、ArithmeticException（算术错误）等。</p>\n<h3 id=\"Java的异常处理\"><a href=\"#Java的异常处理\" class=\"headerlink\" title=\"Java的异常处理\"></a>Java的异常处理</h3><p>Java处理异常的一般格式是这样的：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">///可能会抛出异常的代码</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>Type1 id1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//处理Type1类型异常的代码</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>Type2 id2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//处理Type2类型异常的代码</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>try块中放置可能会发生异常的代码(但是我们不知道具体会发生哪种异常)。如果异常发生了，try块抛出系统自动生成的异常对象，然后异常处理机制将负责搜寻参数与异常类型相匹配的第一个处理程序，然后进行catch语句执行(不会在向下查找)。如果我们的catch语句没有匹配到，那么JVM虚拟机还是会抛出异常的。</p>\n<h4 id=\"Java中的throws关键字\"><a href=\"#Java中的throws关键字\" class=\"headerlink\" title=\"Java中的throws关键字\"></a>Java中的throws关键字</h4><p>如果在当前方法不知道该如何处理该异常时，则可以使用throws对异常进行抛出给调用者处理或者交给JVM。JVM对异常的处理方式是：打印异常的跟踪栈信息并终止程序运行。throws在使用时应处于方法签名之后使用，可以抛出多种异常并用英文字符逗号’,’隔开。下面是一个例子：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> ClassNotFoundException<span class=\"token punctuation\">,</span>IOException<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这样我们调用f()方法的时候必须要catch-ClassNotFoundException和IOException这两个异常或者catch-Exception基类。<br>注意：<br>throws的这种使用方式只是Java编译期要求我们这样做的，我们完全可以只在方法声明中throws相关异常，但是在方法里面却不抛出任何异常，这样也能通过编译，我们通过这种方式间接的绕过了Java编译期的检查。这种方式有一个好处：为异常先占一个位置，以后就可以抛出这种异常而不需要修改已有的代码。在定义抽象类和接口的时候这种设计很重要，这样派生类或者接口实现就可以抛出这些预先声明的异常。</p>\n<h4 id=\"打印异常信息\"><a href=\"#打印异常信息\" class=\"headerlink\" title=\"打印异常信息\"></a>打印异常信息</h4><p>异常类的基类Exception中提供了一组方法用来获取异常的一些信息.所以如果我们获得了一个异常对象,那么我们就可以打印出一些有用的信息,最常用的就是void printStackTrace()这个方法,这个方法将返回一个由栈轨迹中的元素所构成的数组,其中每个元素都表示栈中的一帧.元素0是栈顶元素,并且是调用序列中的最后一个方法调用(这个异常被创建和抛出之处);他有几个不同的重载版本,可以将信息输出到不同的流中去.下面的代码显示了如何打印基本的异常信息:</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">{</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Throws SimpleException from f()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Crash\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> agrs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Caught  Exception\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getMessage(): \"</span><span class=\"token operator\">+</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getLocalizedMessage(): \"</span><span class=\"token operator\">+</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getLocalizedMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"toString(): \"</span><span class=\"token operator\">+</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"printStackTrace(): \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们来看输出：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">Throws SimpleException from f()\nCaught  Exception\ngetMessage(): Crash\ngetLocalizedMessage(): Crash\ntoString(): java.io.IOException: Crash\nprintStackTrace(): \njava.io.IOException: Crash\n    at com.learn.example.B.f(RunMain.java:19)\n    at com.learn.example.RunMain.main(RunMain.java:26)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"使用finally进行清理\"><a href=\"#使用finally进行清理\" class=\"headerlink\" title=\"使用finally进行清理\"></a>使用finally进行清理</h4><p>引入finally语句的原因是我们希望一些代码总是能得到执行,无论try块中是否抛出异常.这样异常处理的基本格式变成了下面这样:</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//可能会抛出异常的代码</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>Type1 id1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//处理Type1类型异常的代码</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>Type2 id2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//处理Type2类型异常的代码</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">finally</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//总是会执行的代码</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在Java中希望除内存以外的资源恢复到它们的初始状态的时候需要使用的finally语句。例如打开的文件或者网络连接，屏幕上的绘制的图像等。下面我们来看一下案例：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FinallyException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count<span class=\"token operator\">++</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreeException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no Exception\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreeException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ThreeException\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in finally cause\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreeException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们来看输出：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">ThreeException\nin finally cause\nno Exception\nin finally cause<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>如果我们在try块或者catch块里面有return语句的话，那么finally语句还会执行吗？我们看下面的例子：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MultipleReturns</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start.......\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"else\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们来看运行结果：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">start.......\n1\nend\nstart.......\n1\n2\nend\nstart.......\n1\n2\n3\nend<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们看到即使我们在try或者catch块中使用了return语句，finally子句还是会执行。那么有什么情况finally子句不会执行呢？<br>有下面两种情况会导致Java异常的丢失</p>\n<ul>\n<li>finally中重写抛出异常（finally中重写抛出另一种异常会覆盖原来捕捉到的异常）</li>\n<li>在finally子句中返回（即return）</li>\n</ul>\n<h3 id=\"Java异常栈\"><a href=\"#Java异常栈\" class=\"headerlink\" title=\"Java异常栈\"></a>Java异常栈</h3><p>前面稍微提到了点Java异常栈的相关内容，这一节我们通过一个简单的例子来更加直观的了解异常栈的相关内容。我们再看Exception异常的时候会发现，发生异常的方法会在最上层，main方法会在最下层，中间还有其他的调用层次。这其实是栈的结构，先进后出的。下面我们通过例子来看下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WhoCalled</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>StackTraceElement ste <span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ste<span class=\"token punctuation\">.</span><span class=\"token function\">getMethodName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们来看输出结果：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">f\nmain\n---------------------------\nf\ng\nmain\n---------------------------\nf\ng\nh\nmain\n---------------------------<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>可以看到异常信息都是从内到外的，按我的理解查看异常的时候要从第一条异常信息看起，因为那是异常发生的源头。</p>\n<h3 id=\"重新抛出异常及异常链\"><a href=\"#重新抛出异常及异常链\" class=\"headerlink\" title=\"重新抛出异常及异常链\"></a>重新抛出异常及异常链</h3><p>我们知道每遇到一个异常信息，我们都需要进行try…catch,一个还好，如果出现多个异常呢？分类处理肯定会比较麻烦，那就一个Exception解决所有的异常吧。这样确实是可以，但是这样处理势必会导致后面的维护难度增加。最好的办法就是将这些异常信息封装，然后捕获我们的封装类即可。<br>我们有两种方式处理异常，一是throws抛出交给上级处理，二是try…catch做具体处理。但是这个与上面有什么关联呢？try…catch的catch块我们可以不需要做任何处理，仅仅只用throw这个关键字将我们封装异常信息主动抛出来。然后在通过关键字throws继续抛出该方法异常。它的上层也可以做这样的处理，以此类推就会产生一条由异常构成的异常链。<br>通过使用异常链，我们可以提高代码的可理解性、系统的可维护性和友好性。<br>我们捕获异常以后一般会有两种操作</p>\n<ul>\n<li>捕获后抛出原来的异常，希望保留最新的异常抛出点－－fillStackTrace</li>\n<li>捕获后抛出新的异常，希望抛出完整的异常链－－initCause</li>\n</ul>\n<h4 id=\"捕获异常后重新抛出异常\"><a href=\"#捕获异常后重新抛出异常\" class=\"headerlink\" title=\"捕获异常后重新抛出异常\"></a>捕获异常后重新抛出异常</h4><p>在函数中捕获了异常，在catch模块中不做进一步的处理，而是向上一级进行传递catch(Exception e){ throw e;}，我们通过例子来看一下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReThrow</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">throws</span> Exception<span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exception: f()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception<span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>Exception e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inside g()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>Exception e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inside main()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们来看输出：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">inside g()\ninside main()\njava.lang.Exception: Exception: f()\n        //异常的抛出点还是最初抛出异常的函数f()\n    at com.learn.example.ReThrow.f(RunMain.java:5)\n    at com.learn.example.ReThrow.g(RunMain.java:10)\n    at com.learn.example.RunMain.main(RunMain.java:21)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"fillStackTrace——覆盖前边的异常抛出点-获取最新的异常抛出点\"><a href=\"#fillStackTrace——覆盖前边的异常抛出点-获取最新的异常抛出点\" class=\"headerlink\" title=\"fillStackTrace——覆盖前边的异常抛出点(获取最新的异常抛出点)\"></a>fillStackTrace——覆盖前边的异常抛出点(获取最新的异常抛出点)</h4><p>在此抛出异常的时候进行设置catch(Exception e){ (Exception)e.fillInStackTrace();}我们通过例子看一下：(还是刚才的例子)</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>Exception e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inside g()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token punctuation\">(</span>Exception<span class=\"token punctuation\">)</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">fillInStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>运行结果如下：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">inside g()\ninside main()\njava.lang.Exception: Exception: f()\n        //显示的就是最新的抛出点\n    at com.learn.example.ReThrow.g(RunMain.java:13)\n    at com.learn.example.RunMain.main(RunMain.java:21)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"捕获异常后抛出新的异常（保留原来的异常信息，区别于捕获异常之后重新抛出）\"><a href=\"#捕获异常后抛出新的异常（保留原来的异常信息，区别于捕获异常之后重新抛出）\" class=\"headerlink\" title=\"捕获异常后抛出新的异常（保留原来的异常信息，区别于捕获异常之后重新抛出）\"></a>捕获异常后抛出新的异常（保留原来的异常信息，区别于捕获异常之后重新抛出）</h4><p>如果我们在抛出异常的时候需要保留原来的异常信息，那么有两种方式</p>\n<ul>\n<li>方式1:Exception e＝new Exception(); e.initCause(ex);</li>\n<li>方式2:Exception e =new Exception(ex);</li>\n</ul>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ReThrow</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n             <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n         <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>NullPointerException ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n             <span class=\"token comment\" spellcheck=\"true\">//方式1</span>\n             Exception e<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token comment\" spellcheck=\"true\">//将原始的异常信息保留下来</span>\n             e<span class=\"token punctuation\">.</span><span class=\"token function\">initCause</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token comment\" spellcheck=\"true\">//方式2</span>\n             <span class=\"token comment\" spellcheck=\"true\">//Exception e=new Exception(ex);</span>\n             <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                e1<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n         <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> NullPointerException<span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inside g()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RunMain</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> agrs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReThrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>Exception e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inside main()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在这个例子里面，我们先捕获NullPointerException异常，然后在抛出Exception异常，这时候如果我们不使用initCause方法将原始异常（NullPointerException）保存下来的话，就会丢失NullPointerException。只会显示Eception异常。下面我们来看结果：</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">//没有调用initCause方法的输出\ninside g()\njava.lang.Exception\n    at com.learn.example.ReThrow.f(RunMain.java:9)\n    at com.learn.example.RunMain.main(RunMain.java:31)\n//调用initCasue方法保存原始异常信息的输出\ninside g()\njava.lang.Exception\n    at com.learn.example.ReThrow.f(RunMain.java:9)\n    at com.learn.example.RunMain.main(RunMain.java:31)\nCaused by: java.lang.NullPointerException\n    at com.learn.example.ReThrow.g(RunMain.java:24)\n    at com.learn.example.ReThrow.f(RunMain.java:6)\n    ... 1 more<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们看到我们使用initCause方法保存后，原始的异常信息会以Caused by的形式输出。</p>\n<h3 id=\"Java异常的限制\"><a href=\"#Java异常的限制\" class=\"headerlink\" title=\"Java异常的限制\"></a>Java异常的限制</h3><p>当Java异常遇到继承或者接口的时候是存在限制的，下面我们来看看有哪些限制。</p>\n<ul>\n<li>规则一：子类在重写父类抛出异常的方法时，要么不抛出异常，要么抛出与父类方法相同的异常或该异常的子类。如果被重写的父类方法只抛出受检异常，则子类重写的方法可以抛出非受检异常。例如，父类方法抛出了一个受检异常IOException，重写该方法时不能抛出Exception，对于受检异常而言，只能抛出IOException及其子类异常，也可以抛出非受检异常。我们通过例子来看下：</li>\n</ul>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">,</span> RuntimeException <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>父类抛出的异常包含所有异常，上面的写法正确。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> RuntimeException <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">,</span> RuntimeException <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>子类IOException超出了父类的异常范畴，上面的写法错误。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">,</span> RuntimeException<span class=\"token punctuation\">,</span> ArithmeticException<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>RuntimeException不属于IO的范畴，并且超出了父类的异常范畴。但是RuntimeException和ArithmeticException属于运行时异常，子类重写的方法可以抛出任何运行时异常。所以上面的写法正确。</p>\n<ul>\n<li>规则儿：子类在重写父类抛出异常的方法时，如果实现了有相同方法签名的接口且接口中的该方法也有异常声明，则子类重写的方法要么不抛出异常，要么抛出父类中被重写方法声明异常与接口中被实现方法声明异常的交集。</li>\n</ul>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">I1</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> Exception<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SubTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Test</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">I1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">SubTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Exception<span class=\"token punctuation\">,</span>NullPointerException<span class=\"token punctuation\">,</span> NoSuchMethodException <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在SubTest类中，test方法要么不抛出异常，要么抛出IOException或其子类（例如，InterruptedIOException）。</p>\n<h3 id=\"Java异常与构造器\"><a href=\"#Java异常与构造器\" class=\"headerlink\" title=\"Java异常与构造器\"></a>Java异常与构造器</h3><p>如果一个构造器中就发生异常了，那我们如何处理才能正确的清呢？也许你会说使用finally啊，它不是一定会执行的吗？这可不一定，如果构造器在其执行过程中遇到了异常，这时候对象的某些部分还没有正确的初始化，而这时候却会在finally中对其进行清理，显然这样会出问题的。<br>原则：<br>对于在构造器阶段可能会抛出异常，并且要求清理的类，最安全的方式是使用嵌套的try子句。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    InputFile in<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InpputFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cleanup.java\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        String string<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>string<span class=\"token operator\">=</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">getLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cause Exception in main\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n        in<span class=\"token punctuation\">.</span><span class=\"token function\">dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"InputFile construction failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们来仔细看一下这里面的逻辑，对InputFile的构造在第一个try块中是有效的，如果构造器失败，抛出异常，那么会被最外层的catch捕获到，这时候InputFile对象的dispose方法是不需要执行的。如果构造成功，那么进入第二层try块，这时候finally块肯定是需要被调用的（对象需要dispose）。</p>\n<h2 id=\"java项目中的异常处理方式\"><a href=\"#java项目中的异常处理方式\" class=\"headerlink\" title=\"java项目中的异常处理方式\"></a>java项目中的异常处理方式</h2><h3 id=\"统一抛出异常\"><a href=\"#统一抛出异常\" class=\"headerlink\" title=\"统一抛出异常\"></a>统一抛出异常</h3><ul>\n<li>首先定义一个自定义异常类继承RuntimeException</li>\n</ul>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RuntimeException</span> <span class=\"token punctuation\">{</span>\n    ResultCode resultCode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>然后定义一个异常抓取类负责抛出异常</li>\n</ul>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExceptionCast</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cast</span><span class=\"token punctuation\">(</span>ResultCode resultCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomException</span><span class=\"token punctuation\">(</span>resultCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>在业务代码中抛出异常</li>\n</ul>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>optional<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ExceptionCast<span class=\"token punctuation\">.</span><span class=\"token function\">cast</span><span class=\"token punctuation\">(</span>CmsCode<span class=\"token punctuation\">.</span>CMS_SITE_NOEXISTS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"统一抓获异常再具体处理\"><a href=\"#统一抓获异常再具体处理\" class=\"headerlink\" title=\"统一抓获异常再具体处理\"></a>统一抓获异常再具体处理</h3><ul>\n<li>异常分两类处理,一种是自己定义的异常,一种是系统异常.对创建一份Map保存一些已经事先知道或者遇到过的异常,当捕获到该类异常时获取预先设置的响应状态,遇到没有见过的异常则统一响应</li>\n</ul>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestControllerAdvice</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExceptionCatch</span> <span class=\"token punctuation\">{</span>\n\n    Logger logger <span class=\"token operator\">=</span> LoggerFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span>ExceptionCatch<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//使用EXCEPTIONS存放异常类型和错误代码的映射,ImmutableMap的特点是一旦创建就不可改变,并且线程安全.</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> ImmutableMap<span class=\"token operator\">&lt;</span>Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Throwable</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> ResultCode<span class=\"token operator\">></span> EXCEPTIONS<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//使用builder来构建一个异常类型和错误代码的异常</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">static</span> ImmutableMap<span class=\"token punctuation\">.</span>Builder<span class=\"token operator\">&lt;</span>Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Throwable</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> ResultCode<span class=\"token operator\">></span> builder <span class=\"token operator\">=</span> ImmutableMap<span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">{</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>HttpMediaTypeNotSupportedException<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> CommonCode<span class=\"token punctuation\">.</span>INVAILDPARAM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//捕获CustomException异常</span>\n    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span>CustomException<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> ResponseResult <span class=\"token function\">customException</span><span class=\"token punctuation\">(</span>CustomException customException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"catch exception : {}\\r\\nexception:\"</span><span class=\"token punctuation\">,</span> customException<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> customException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        ResultCode resultCode <span class=\"token operator\">=</span> customException<span class=\"token punctuation\">.</span><span class=\"token function\">getResultCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResponseResult</span><span class=\"token punctuation\">(</span>resultCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//捕获不可预知异常</span>\n    <span class=\"token annotation punctuation\">@ExceptionHandler</span><span class=\"token punctuation\">(</span>Exception<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> ResponseResult <span class=\"token function\">exception</span><span class=\"token punctuation\">(</span>Exception exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"catch exception : {}\\r\\nexception:\"</span><span class=\"token punctuation\">,</span> exception<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> exception<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>EXCEPTIONS <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            EXCEPTIONS <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        ResultCode resultCode <span class=\"token operator\">=</span> EXCEPTIONS<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>exception<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ResponseResult responseResult<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resultCode <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            responseResult <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResponseResult</span><span class=\"token punctuation\">(</span>resultCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            responseResult <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResponseResult</span><span class=\"token punctuation\">(</span>CommonCode<span class=\"token punctuation\">.</span>SERVER_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> responseResult<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h2 id=\"Java异常介绍\"><a href=\"#Java异常介绍\" class=\"headerlink\" title=\"Java异常介绍\"></a>Java异常介绍</h2><p>异常时什么？就是指阻止当前方法或作用域继续执行的问题,当程序运行时出现异常时,系统就会自动生成一个Exception对象来通知程序进行相应的处理。Java异常的类型有很多种，下面我们就使用一张图来看一下Java异常的继承层次结构：</p>\n<p><img src=\"/2020/01/05/java-yi-chang/1.png\" alt></p>\n<h3 id=\"Java异常中的Error\"><a href=\"#Java异常中的Error\" class=\"headerlink\" title=\"Java异常中的Error\"></a>Java异常中的Error</h3><p>Error一般表示编译时或者系统错误，例如：虚拟机相关的错误，系统崩溃（例如：我们开发中有时会遇到的OutOfMemoryError）等。这种错误无法恢复或不可捕获,将导致应用程序中断,通常应用程序无法处理这些错误,因此也不应该试图用catch来进行捕获。</p>\n<h3 id=\"Java异常中的Exception\"><a href=\"#Java异常中的Exception\" class=\"headerlink\" title=\"Java异常中的Exception\"></a>Java异常中的Exception</h3><p>上面我们有介绍，Java异常的中的Exception分为受检查异常和运行时异常（不受检查异常）。下面我们展开介绍。</p>\n<h4 id=\"Java中的受检查异常\"><a href=\"#Java中的受检查异常\" class=\"headerlink\" title=\"Java中的受检查异常\"></a>Java中的受检查异常</h4><p>相信大家在写IO操作的代码的时候，一定有过这样的记忆，对File或者Stream进行操作的时候一定需要使用try-catch包起来，否则编译会失败，这是因为这些异常类型是受检查的异常类型。编译器在编译时，对于受检异常必须进行try…catch或throws处理,否则无法通过编译。常见的受检查异常包括：IO操作、ClassNotFoundException、线程操作等。</p>\n<h4 id=\"Java中的非受检查异常（运行时异常）\"><a href=\"#Java中的非受检查异常（运行时异常）\" class=\"headerlink\" title=\"Java中的非受检查异常（运行时异常）\"></a>Java中的非受检查异常（运行时异常）</h4><p>RuntimeException及其子类都统称为非受检查异常，例如：NullPointExecrption、NumberFormatException（字符串转换为数字）、ArrayIndexOutOfBoundsException（数组越界）、ClassCastException（类型转换错误）、ArithmeticException（算术错误）等。</p>\n<h3 id=\"Java的异常处理\"><a href=\"#Java的异常处理\" class=\"headerlink\" title=\"Java的异常处理\"></a>Java的异常处理</h3><p>Java处理异常的一般格式是这样的：</p>\n<pre><code class=\"java\">try{\n    ///可能会抛出异常的代码\n}catch(Type1 id1){\n    //处理Type1类型异常的代码\n}catch(Type2 id2){\n    //处理Type2类型异常的代码\n}</code></pre>\n<p>try块中放置可能会发生异常的代码(但是我们不知道具体会发生哪种异常)。如果异常发生了，try块抛出系统自动生成的异常对象，然后异常处理机制将负责搜寻参数与异常类型相匹配的第一个处理程序，然后进行catch语句执行(不会在向下查找)。如果我们的catch语句没有匹配到，那么JVM虚拟机还是会抛出异常的。</p>\n<h4 id=\"Java中的throws关键字\"><a href=\"#Java中的throws关键字\" class=\"headerlink\" title=\"Java中的throws关键字\"></a>Java中的throws关键字</h4><p>如果在当前方法不知道该如何处理该异常时，则可以使用throws对异常进行抛出给调用者处理或者交给JVM。JVM对异常的处理方式是：打印异常的跟踪栈信息并终止程序运行。throws在使用时应处于方法签名之后使用，可以抛出多种异常并用英文字符逗号’,’隔开。下面是一个例子：</p>\n<pre><code class=\"java\">public void f() throws ClassNotFoundException,IOException{}</code></pre>\n<p>这样我们调用f()方法的时候必须要catch-ClassNotFoundException和IOException这两个异常或者catch-Exception基类。<br>注意：<br>throws的这种使用方式只是Java编译期要求我们这样做的，我们完全可以只在方法声明中throws相关异常，但是在方法里面却不抛出任何异常，这样也能通过编译，我们通过这种方式间接的绕过了Java编译期的检查。这种方式有一个好处：为异常先占一个位置，以后就可以抛出这种异常而不需要修改已有的代码。在定义抽象类和接口的时候这种设计很重要，这样派生类或者接口实现就可以抛出这些预先声明的异常。</p>\n<h4 id=\"打印异常信息\"><a href=\"#打印异常信息\" class=\"headerlink\" title=\"打印异常信息\"></a>打印异常信息</h4><p>异常类的基类Exception中提供了一组方法用来获取异常的一些信息.所以如果我们获得了一个异常对象,那么我们就可以打印出一些有用的信息,最常用的就是void printStackTrace()这个方法,这个方法将返回一个由栈轨迹中的元素所构成的数组,其中每个元素都表示栈中的一帧.元素0是栈顶元素,并且是调用序列中的最后一个方法调用(这个异常被创建和抛出之处);他有几个不同的重载版本,可以将信息输出到不同的流中去.下面的代码显示了如何打印基本的异常信息:</p>\n<pre><code class=\"java\">public void f() throws IOException{\n    System.out.println(&quot;Throws SimpleException from f()&quot;); \n    throw new IOException(&quot;Crash&quot;);\n }\n public static void main(String[] agrs) {\n    try {\n        new B().f();\n    } catch (IOException e) {\n        System.out.println(&quot;Caught  Exception&quot;);\n        System.out.println(&quot;getMessage(): &quot;+e.getMessage());\n        System.out.println(&quot;getLocalizedMessage(): &quot;+e.getLocalizedMessage());\n        System.out.println(&quot;toString(): &quot;+e.toString());\n        System.out.println(&quot;printStackTrace(): &quot;);\n        e.printStackTrace(System.out);\n    }\n}</code></pre>\n<p>我们来看输出：</p>\n<pre><code class=\"html\">Throws SimpleException from f()\nCaught  Exception\ngetMessage(): Crash\ngetLocalizedMessage(): Crash\ntoString(): java.io.IOException: Crash\nprintStackTrace(): \njava.io.IOException: Crash\n    at com.learn.example.B.f(RunMain.java:19)\n    at com.learn.example.RunMain.main(RunMain.java:26)</code></pre>\n<h4 id=\"使用finally进行清理\"><a href=\"#使用finally进行清理\" class=\"headerlink\" title=\"使用finally进行清理\"></a>使用finally进行清理</h4><p>引入finally语句的原因是我们希望一些代码总是能得到执行,无论try块中是否抛出异常.这样异常处理的基本格式变成了下面这样:</p>\n<pre><code class=\"java\">try{\n    //可能会抛出异常的代码\n}\ncatch(Type1 id1){\n    //处理Type1类型异常的代码\n}\ncatch(Type2 id2){\n    //处理Type2类型异常的代码\n}\nfinally{\n    //总是会执行的代码\n}</code></pre>\n<p>在Java中希望除内存以外的资源恢复到它们的初始状态的时候需要使用的finally语句。例如打开的文件或者网络连接，屏幕上的绘制的图像等。下面我们来看一下案例：</p>\n<pre><code class=\"java\">public class FinallyException {\n    static int count = 0;\n\n    public static void main(String[] args) {\n        while (true){\n            try {\n                if (count++ == 0){\n                    throw new ThreeException();\n                }\n                System.out.println(&quot;no Exception&quot;);\n            }catch (ThreeException e){\n                System.out.println(&quot;ThreeException&quot;);\n            }finally {\n                System.out.println(&quot;in finally cause&quot;);\n                if(count == 2)\n                    break;\n            }\n        }\n    }\n}\n\nclass ThreeException extends Exception{}</code></pre>\n<p>我们来看输出：</p>\n<pre><code class=\"html\">ThreeException\nin finally cause\nno Exception\nin finally cause</code></pre>\n<p>如果我们在try块或者catch块里面有return语句的话，那么finally语句还会执行吗？我们看下面的例子：</p>\n<pre><code class=\"java\">public class MultipleReturns {\n    public static void f(int i){\n        System.out.println(&quot;start.......&quot;);\n        try {\n            System.out.println(&quot;1&quot;);\n            if(i == 1)\n                return;\n            System.out.println(&quot;2&quot;);\n            if (i == 2)\n                return;\n            System.out.println(&quot;3&quot;);\n            if(i == 3)\n                return;\n            System.out.println(&quot;else&quot;);\n            return;\n        }finally {\n            System.out.println(&quot;end&quot;);\n        }\n    }\n\n    public static void main(String[] args) {\n        for (int i = 1; i&lt;4; i++){\n            f(i);\n        }\n    }\n}</code></pre>\n<p>我们来看运行结果：</p>\n<pre><code class=\"html\">start.......\n1\nend\nstart.......\n1\n2\nend\nstart.......\n1\n2\n3\nend</code></pre>\n<p>我们看到即使我们在try或者catch块中使用了return语句，finally子句还是会执行。那么有什么情况finally子句不会执行呢？<br>有下面两种情况会导致Java异常的丢失</p>\n<ul>\n<li>finally中重写抛出异常（finally中重写抛出另一种异常会覆盖原来捕捉到的异常）</li>\n<li>在finally子句中返回（即return）</li>\n</ul>\n<h3 id=\"Java异常栈\"><a href=\"#Java异常栈\" class=\"headerlink\" title=\"Java异常栈\"></a>Java异常栈</h3><p>前面稍微提到了点Java异常栈的相关内容，这一节我们通过一个简单的例子来更加直观的了解异常栈的相关内容。我们再看Exception异常的时候会发现，发生异常的方法会在最上层，main方法会在最下层，中间还有其他的调用层次。这其实是栈的结构，先进后出的。下面我们通过例子来看下：</p>\n<pre><code class=\"java\">public class WhoCalled {\n    static void f() {\n        try {\n            throw new Exception();\n        } catch (Exception e) {\n            for (StackTraceElement ste : e.getStackTrace()){\n                System.out.println(ste.getMethodName());\n            }\n        }\n    }\n\n    static void g(){\n        f();\n    }\n\n    static void h(){\n        g();\n    }\n\n    public static void main(String[] args) {\n        f();\n        System.out.println(&quot;---------------------------&quot;);\n        g();\n        System.out.println(&quot;---------------------------&quot;);\n        h();\n        System.out.println(&quot;---------------------------&quot;);\n    }\n}</code></pre>\n<p>我们来看输出结果：</p>\n<pre><code class=\"html\">f\nmain\n---------------------------\nf\ng\nmain\n---------------------------\nf\ng\nh\nmain\n---------------------------</code></pre>\n<p>可以看到异常信息都是从内到外的，按我的理解查看异常的时候要从第一条异常信息看起，因为那是异常发生的源头。</p>\n<h3 id=\"重新抛出异常及异常链\"><a href=\"#重新抛出异常及异常链\" class=\"headerlink\" title=\"重新抛出异常及异常链\"></a>重新抛出异常及异常链</h3><p>我们知道每遇到一个异常信息，我们都需要进行try…catch,一个还好，如果出现多个异常呢？分类处理肯定会比较麻烦，那就一个Exception解决所有的异常吧。这样确实是可以，但是这样处理势必会导致后面的维护难度增加。最好的办法就是将这些异常信息封装，然后捕获我们的封装类即可。<br>我们有两种方式处理异常，一是throws抛出交给上级处理，二是try…catch做具体处理。但是这个与上面有什么关联呢？try…catch的catch块我们可以不需要做任何处理，仅仅只用throw这个关键字将我们封装异常信息主动抛出来。然后在通过关键字throws继续抛出该方法异常。它的上层也可以做这样的处理，以此类推就会产生一条由异常构成的异常链。<br>通过使用异常链，我们可以提高代码的可理解性、系统的可维护性和友好性。<br>我们捕获异常以后一般会有两种操作</p>\n<ul>\n<li>捕获后抛出原来的异常，希望保留最新的异常抛出点－－fillStackTrace</li>\n<li>捕获后抛出新的异常，希望抛出完整的异常链－－initCause</li>\n</ul>\n<h4 id=\"捕获异常后重新抛出异常\"><a href=\"#捕获异常后重新抛出异常\" class=\"headerlink\" title=\"捕获异常后重新抛出异常\"></a>捕获异常后重新抛出异常</h4><p>在函数中捕获了异常，在catch模块中不做进一步的处理，而是向上一级进行传递catch(Exception e){ throw e;}，我们通过例子来看一下：</p>\n<pre><code class=\"java\">public class ReThrow {\n    public static void f()throws Exception{\n        throw new Exception(&quot;Exception: f()&quot;);\n    }\n\n    public static void g() throws Exception{\n        try{\n            f();\n        }catch(Exception e){\n            System.out.println(&quot;inside g()&quot;);\n            throw e;\n        }\n    }\n    public static void main(String[] args){\n        try{\n            g();\n        }\n        catch(Exception e){\n            System.out.println(&quot;inside main()&quot;);\n            e.printStackTrace(System.out);\n        }\n    }\n}</code></pre>\n<p>我们来看输出：</p>\n<pre><code class=\"html\">inside g()\ninside main()\njava.lang.Exception: Exception: f()\n        //异常的抛出点还是最初抛出异常的函数f()\n    at com.learn.example.ReThrow.f(RunMain.java:5)\n    at com.learn.example.ReThrow.g(RunMain.java:10)\n    at com.learn.example.RunMain.main(RunMain.java:21)</code></pre>\n<h4 id=\"fillStackTrace——覆盖前边的异常抛出点-获取最新的异常抛出点\"><a href=\"#fillStackTrace——覆盖前边的异常抛出点-获取最新的异常抛出点\" class=\"headerlink\" title=\"fillStackTrace——覆盖前边的异常抛出点(获取最新的异常抛出点)\"></a>fillStackTrace——覆盖前边的异常抛出点(获取最新的异常抛出点)</h4><p>在此抛出异常的时候进行设置catch(Exception e){ (Exception)e.fillInStackTrace();}我们通过例子看一下：(还是刚才的例子)</p>\n<pre><code class=\"java\">public void g() throws Exception{\n    try{\n        f();\n    }catch(Exception e){\n        System.out.println(&quot;inside g()&quot;);\n        throw (Exception)e.fillInStackTrace();\n    }\n}</code></pre>\n<p>运行结果如下：</p>\n<pre><code class=\"html\">inside g()\ninside main()\njava.lang.Exception: Exception: f()\n        //显示的就是最新的抛出点\n    at com.learn.example.ReThrow.g(RunMain.java:13)\n    at com.learn.example.RunMain.main(RunMain.java:21)</code></pre>\n<h4 id=\"捕获异常后抛出新的异常（保留原来的异常信息，区别于捕获异常之后重新抛出）\"><a href=\"#捕获异常后抛出新的异常（保留原来的异常信息，区别于捕获异常之后重新抛出）\" class=\"headerlink\" title=\"捕获异常后抛出新的异常（保留原来的异常信息，区别于捕获异常之后重新抛出）\"></a>捕获异常后抛出新的异常（保留原来的异常信息，区别于捕获异常之后重新抛出）</h4><p>如果我们在抛出异常的时候需要保留原来的异常信息，那么有两种方式</p>\n<ul>\n<li>方式1:Exception e＝new Exception(); e.initCause(ex);</li>\n<li>方式2:Exception e =new Exception(ex);</li>\n</ul>\n<pre><code class=\"java\">class ReThrow {\n    public void f(){\n        try{\n             g(); \n         }catch(NullPointerException ex){\n             //方式1\n             Exception e=new Exception();\n             //将原始的异常信息保留下来\n             e.initCause(ex);\n             //方式2\n             //Exception e=new Exception(ex);\n             try {\n                throw e;\n            } catch (Exception e1) {\n                e1.printStackTrace();\n            }\n         }\n    }\n\n    public void g() throws NullPointerException{\n        System.out.println(&quot;inside g()&quot;);\n        throw new NullPointerException();\n    }\n}\n\npublic class RunMain {\n    public static void main(String[] agrs) {\n        try{\n            new ReThrow().f();\n        }\n        catch(Exception e){\n            System.out.println(&quot;inside main()&quot;);\n            e.printStackTrace(System.out);\n        }\n    }\n}</code></pre>\n<p>在这个例子里面，我们先捕获NullPointerException异常，然后在抛出Exception异常，这时候如果我们不使用initCause方法将原始异常（NullPointerException）保存下来的话，就会丢失NullPointerException。只会显示Eception异常。下面我们来看结果：</p>\n<pre><code class=\"html\">//没有调用initCause方法的输出\ninside g()\njava.lang.Exception\n    at com.learn.example.ReThrow.f(RunMain.java:9)\n    at com.learn.example.RunMain.main(RunMain.java:31)\n//调用initCasue方法保存原始异常信息的输出\ninside g()\njava.lang.Exception\n    at com.learn.example.ReThrow.f(RunMain.java:9)\n    at com.learn.example.RunMain.main(RunMain.java:31)\nCaused by: java.lang.NullPointerException\n    at com.learn.example.ReThrow.g(RunMain.java:24)\n    at com.learn.example.ReThrow.f(RunMain.java:6)\n    ... 1 more</code></pre>\n<p>我们看到我们使用initCause方法保存后，原始的异常信息会以Caused by的形式输出。</p>\n<h3 id=\"Java异常的限制\"><a href=\"#Java异常的限制\" class=\"headerlink\" title=\"Java异常的限制\"></a>Java异常的限制</h3><p>当Java异常遇到继承或者接口的时候是存在限制的，下面我们来看看有哪些限制。</p>\n<ul>\n<li>规则一：子类在重写父类抛出异常的方法时，要么不抛出异常，要么抛出与父类方法相同的异常或该异常的子类。如果被重写的父类方法只抛出受检异常，则子类重写的方法可以抛出非受检异常。例如，父类方法抛出了一个受检异常IOException，重写该方法时不能抛出Exception，对于受检异常而言，只能抛出IOException及其子类异常，也可以抛出非受检异常。我们通过例子来看下：</li>\n</ul>\n<pre><code class=\"java\">class A {  \n    public void fun() throws Exception {}  \n}  \nclass B extends A {  \n    public void fun() throws IOException, RuntimeException {}  \n}</code></pre>\n<p>父类抛出的异常包含所有异常，上面的写法正确。</p>\n<pre><code class=\"java\">class A {  \n    public void fun() throws RuntimeException {}  \n}  \nclass B extends A {  \n    public void fun() throws IOException, RuntimeException {}  \n}</code></pre>\n<p>子类IOException超出了父类的异常范畴，上面的写法错误。</p>\n<pre><code class=\"java\">class A {  \n    public void fun() throws IOException {}  \n}  \nclass B extends A {  \n    public void fun() throws IOException, RuntimeException, ArithmeticException{}\n}</code></pre>\n<p>RuntimeException不属于IO的范畴，并且超出了父类的异常范畴。但是RuntimeException和ArithmeticException属于运行时异常，子类重写的方法可以抛出任何运行时异常。所以上面的写法正确。</p>\n<ul>\n<li>规则儿：子类在重写父类抛出异常的方法时，如果实现了有相同方法签名的接口且接口中的该方法也有异常声明，则子类重写的方法要么不抛出异常，要么抛出父类中被重写方法声明异常与接口中被实现方法声明异常的交集。</li>\n</ul>\n<pre><code class=\"java\">class Test {\n    public Test() throws IOException {}\n    void test() throws IOException {}\n}\n\ninterface I1{\n    void test() throw Exception;\n}\n\nclass SubTest extends Test implements I1 {\n    public SubTest() throws Exception,NullPointerException, NoSuchMethodException {}\n    void test() throws IOException {}\n}</code></pre>\n<p>在SubTest类中，test方法要么不抛出异常，要么抛出IOException或其子类（例如，InterruptedIOException）。</p>\n<h3 id=\"Java异常与构造器\"><a href=\"#Java异常与构造器\" class=\"headerlink\" title=\"Java异常与构造器\"></a>Java异常与构造器</h3><p>如果一个构造器中就发生异常了，那我们如何处理才能正确的清呢？也许你会说使用finally啊，它不是一定会执行的吗？这可不一定，如果构造器在其执行过程中遇到了异常，这时候对象的某些部分还没有正确的初始化，而这时候却会在finally中对其进行清理，显然这样会出问题的。<br>原则：<br>对于在构造器阶段可能会抛出异常，并且要求清理的类，最安全的方式是使用嵌套的try子句。</p>\n<pre><code class=\"java\">try {\n    InputFile in=new InpputFile(&quot;Cleanup.java&quot;);\n    try {\n        String string;\n        int i=1;\n        while ((string=in.getLine())!=null) {}\n    }catch (Exception e) {\n        System.out.println(&quot;Cause Exception in main&quot;);\n        e.printStackTrace(System.out);\n    }finally {\n        in.dispose();\n    }\n}catch (Exception e) {\n    System.out.println(&quot;InputFile construction failed&quot;);\n}</code></pre>\n<p>我们来仔细看一下这里面的逻辑，对InputFile的构造在第一个try块中是有效的，如果构造器失败，抛出异常，那么会被最外层的catch捕获到，这时候InputFile对象的dispose方法是不需要执行的。如果构造成功，那么进入第二层try块，这时候finally块肯定是需要被调用的（对象需要dispose）。</p>\n<h2 id=\"java项目中的异常处理方式\"><a href=\"#java项目中的异常处理方式\" class=\"headerlink\" title=\"java项目中的异常处理方式\"></a>java项目中的异常处理方式</h2><h3 id=\"统一抛出异常\"><a href=\"#统一抛出异常\" class=\"headerlink\" title=\"统一抛出异常\"></a>统一抛出异常</h3><ul>\n<li>首先定义一个自定义异常类继承RuntimeException</li>\n</ul>\n<pre><code class=\"java\">@Data\n@AllArgsConstructor\npublic class CustomException extends RuntimeException {\n    ResultCode resultCode;\n}</code></pre>\n<ul>\n<li>然后定义一个异常抓取类负责抛出异常</li>\n</ul>\n<pre><code class=\"java\">public class ExceptionCast {\n    public static void cast(ResultCode resultCode){\n        throw new CustomException(resultCode);\n    }\n}</code></pre>\n<ul>\n<li>在业务代码中抛出异常</li>\n</ul>\n<pre><code class=\"java\">if (!optional.isPresent()) {\n    ExceptionCast.cast(CmsCode.CMS_SITE_NOEXISTS);\n}</code></pre>\n<h3 id=\"统一抓获异常再具体处理\"><a href=\"#统一抓获异常再具体处理\" class=\"headerlink\" title=\"统一抓获异常再具体处理\"></a>统一抓获异常再具体处理</h3><ul>\n<li>异常分两类处理,一种是自己定义的异常,一种是系统异常.对创建一份Map保存一些已经事先知道或者遇到过的异常,当捕获到该类异常时获取预先设置的响应状态,遇到没有见过的异常则统一响应</li>\n</ul>\n<pre><code class=\"java\">@RestControllerAdvice\npublic class ExceptionCatch {\n\n    Logger logger = LoggerFactory.getLogger(ExceptionCatch.class);\n\n    //使用EXCEPTIONS存放异常类型和错误代码的映射,ImmutableMap的特点是一旦创建就不可改变,并且线程安全.\n    private static ImmutableMap&lt;Class&lt;? extends Throwable&gt;, ResultCode&gt; EXCEPTIONS;\n\n    //使用builder来构建一个异常类型和错误代码的异常\n    protected static ImmutableMap.Builder&lt;Class&lt;? extends Throwable&gt;, ResultCode&gt; builder = ImmutableMap.builder();\n\n    static {\n        builder.put(HttpMediaTypeNotSupportedException.class, CommonCode.INVAILDPARAM);\n    }\n\n    //捕获CustomException异常\n    @ExceptionHandler(CustomException.class)\n    public ResponseResult customException(CustomException customException) {\n\n        logger.error(&quot;catch exception : {}\\r\\nexception:&quot;, customException.getMessage(), customException);\n\n        ResultCode resultCode = customException.getResultCode();\n        return new ResponseResult(resultCode);\n    }\n\n    //捕获不可预知异常\n    @ExceptionHandler(Exception.class)\n    public ResponseResult exception(Exception exception) {\n\n        logger.error(&quot;catch exception : {}\\r\\nexception:&quot;, exception.getMessage(), exception);\n\n        if (EXCEPTIONS == null) {\n            EXCEPTIONS = builder.build();\n        }\n        ResultCode resultCode = EXCEPTIONS.get(exception.getClass());\n        ResponseResult responseResult;\n        if (resultCode != null) {\n            responseResult = new ResponseResult(resultCode);\n        } else {\n            responseResult = new ResponseResult(CommonCode.SERVER_ERROR);\n        }\n        return responseResult;\n    }\n\n}</code></pre>\n"},{"title":"java的Object对象","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-13T13:25:25.000Z","password":null,"summary":null,"_content":"\n## 一.Object对象简介\n\n我们学Java的知道，Java是一门面向对象的语言。无论在Java中出现什么，都可以认为它是对象(**除了**八大基本数据类型。当然了，八大基本数据类型也能**装箱**成为对象)：\n\n- 而Object就是这些对象的最高级别的，所有的Java对象都**隐式**地继承了Object对象(不用显示写`extends`继承)\n- 所有的Java对象都**拥有Object默认的方法**。\n\n那么我们看看Object有什么方法：\n\n![](java的Object对象/1578923575140.png)\n\n其实就可以归纳成几个：\n\n- `registerNatives()`【底层实现、不研究】\n- `hashCode()`\n- `equals(Object obj)`\n- `clone()`\n- `toString()`\n- `notify()`\n- `notifyAll()`\n- `wait(long timeout)`【还有重载了两个】\n- `finalize()`\n\nObject一共有**11**个方法，其中一个为底层的实现`registerNatives()`，其中两个`wait()`和`wait(long timeout, int nanos)`重载方法。\n\n- 所以我们真正需要看的就是**8个**方法\n\n还有**一个属性**：\n\n```java\n public final native Class<?> getClass();\n```\n\n![](java的Object对象/1.png)\n\n## 二、equals和hashCode方法\n\nequals和hashCode方法可以说是面试的重点题了，配合着String可以说在面试题中**哪都有它们的存在**。\n\n首先，我们来看看equals和hashCode在Object中**原生**的实现吧：\n\nhashCode：\n\n```java\npublic native int hashCode();\n```\n\nequals：\n\n```java\npublic boolean equals(Object obj) {\n    return (this == obj);\n}\n```\n\n看上去都非常简单：\n\n- `hashCode()`由native方法底层实现了。\n- `equals()`就直接`==`判断是否相等了。\n\n想要更加清晰它们究竟是做什么的，我们来读读它的注释：\n\n![](java的Object对象/2.png)\n\n![](java的Object对象/3.png)\n\n根据注释我们可以**总结以下的要点**：\n\n- 重写`equals()`方法，就必须重写`hashCode()`的方法\n\n- `equals()`方法默认是比较对象的地址，使用的是`==`等值运算符\n\n- `hashCode()`方法对底层是散列表的对象有提升性能的功能\n\n- 同一个对象(如果该对象没有被修改)：那么重复调用`hashCode()`那么返回的int是相同的！\n\n- `hashCode()`方法默认是由对象的地址转换而来的\n\n- equals()方法还有5个默认的原则：\n  - 自反性--->调用`equals()`返回的是true，无论这两个对象谁调用`equals()`都好，返回的都是true\n  - 一致性--->只要对象没有被修改，那么多次调用还是返回对应的结果！\n  - 传递性--->`x.equals(y)`和`y.equals(z)`都返回true，那么可以得出：`x.equals(z)`返回true\n  - 对称性--->`x.equals(y)`和`y.equals(x)`结果应该是相等的。\n  - 传入的参数为null，返回的是false\n\n为啥说`hashCode()`以散列表为底层带来性能的提升是很容易理解的。我们再来**回顾**一下HashMap的插入：\n\n![](java的Object对象/4.png)\n\n如果hash值都不相等，那么可以直接判断该key是不相等的了！\n\n### 2.1equals和hashCode方法重写\n\n`equals()`方法默认是比较对象的地址，使用的是`==`等值运算符。但是按我们正常开发来说，**比较的是对象地址是没有意义的**。\n\n- 一般地，如果我们有两个Address对象，只要这两个对象的**省号、城市号、街道号相等**，我们就认为这两个对象相等了！\n\n![](java的Object对象/5.png)\n\n### 2.2String实现的equals和hashCode方法\n\n我们在初学的时候可能就听过了：String**已经**实现了equals和hashCode方法了。\n\n- 这也就是为什么，我们可以**直接**使用String.equals()来**判断两个字符串**是否相等！\n\n下面我们就来看看它的实现吧：\n\n![](java的Object对象/6.png)\n\n![](java的Object对象/7.png)\n\n# 三、toString方法\n\n接下来我们看看toString方法，也十分简单：\n\n![](java的Object对象/8.png)\n\ntoString方法主要是用来**标识**该对象的：\n\n![](java的Object对象/9.png)\n\n从上面的结果我们都可以看出来：**得出的结果并不能直观的展示这个对象**~\n\n于是我们一般都重写toString()，那么**打印出的结果就很方便我们调试了**！\n\n```java\n@Override\npublic String toString() {\n    return \"Address{\" +\n        \"provinceNo=\" + provinceNo +\n        \", cityNo=\" + cityNo +\n        \", streetNo=\" + streetNo +\n        '}';\n}\n```\n\n下面的结果看起来就好多了：\n\n![](java的Object对象/10.png)\n\n# 四、clone方法\n\n我们也来看看它的顶部注释：\n\n![](java的Object对象/11.png)\n\n看了上面的注释我们可以**总结以下的要点**：\n\n- clone方法用于对象的克隆，一般想要克隆出的对象是**独立**的(与原有的对象是分开的)\n- 深拷贝指的是该对象的成员变量(如果是可变引用)都应该克隆一份，浅拷贝指的是成员变量没有被克隆一份\n\n下面我们来看一下浅拷贝：**拷贝了Employee对象，但是其成员变量hireday没有被克隆出去，所以指向的还是同一个Date对象**！\n\n## 4.1clone用法\n\n那么我们如何克隆对象呢？无论是浅拷贝还是深拷贝都是这两步：\n\n1. 克隆的对象要**实现Cloneable接口**\n2. **重写clone方法**，最好修饰成public\n\n**浅拷贝**：仅仅拷贝了Person对象，而date没有拷贝！\n\n```java\npublic class Person implements Cloneable {\n\n    private Date date;\n\n    @Override\n    public Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n}\n```\n\n**深拷贝**：不仅拷贝了Person对象，也拷贝了date成员变量\n\n```java\npublic class Person implements Cloneable {\n\n    public  Date date;\n\n    @Override\n    public Object clone() throws CloneNotSupportedException {\n        // 拷贝Person对象\n        Person person = (Person) super.clone();\n        \n        // 将可变的成员变量也拷贝\n        person.date = (Date) date.clone();\n\n        // 返回拷贝的对象\n        return person;\n    }\n\n}\n```\n\n## 4.2clone疑问进一步学习protected\n\n不知道有没有人跟我有相同的**疑问**：\n\n- 我只想要**浅拷贝**，能不能**直接调用该对象.clone()来实现**？\n\n比如我现在有个Address对象：\n\n```java\npublic class Address  {\n\n    private int provinceNo;\n    private int cityNo;\n    private int streetNo;\n\n    public Address() {\n    }\n\n    public Address(int provinceNo, int cityNo, int streetNo) {\n        this.provinceNo = provinceNo;\n        this.cityNo = cityNo;\n        this.streetNo = streetNo;\n    }\n}\n```\n\n下面的代码你们**认为如何**？\n\n```java\n    Address address = new Address(1, 2, 3);\n    address.clone();\n```\n\n我们都知道：\n\n- **protected修饰的类和属性,对于自己、本包和其子类可见**\n\n**可能会想**：`clone()`方法是定义在Object类上的(以protected来修饰)，而我们自定义的Address对象**隐式**继承着Object(所有的对象都是Object的子类)，那么子类调用Object以protected来修饰`clone()`是完全没问题的\n\n- 但是，IDE现实告诉我，这**编译就不通过了**！\n\n![](java的Object对象/13.png)\n\n出现错误的原因我立马就想到：**是不是我对protected修饰符出现了偏差？**\n\nprotected修饰的类和属性,对于自己、本包和其子类可见，这句话本身是没有错的。但是**还需要补充**：对于protected的成员或方法，要分子类和超类**是否在同一个包中**。与基类**不在同一个包中的子类**，只能**访问自身从基类继承而来的受保护成员，而不能访问基类实例本身的受保护成员**。\n\n- 上面的代码就错在：Address与Object**不是在同一个包下**的，而Address直接访问了Object的clone方法。这是不行的。\n\n# 五、wait和notify方法\n\nwait和notify方法其实就是Java给我们提供让**线程之间通信**的API。\n\n按照惯例我们还是来看注释怎么说吧：\n\nwait方法：\n\n![](java的Object对象/16.png)\n\nnotify方法：\n\n![](java的Object对象/17.png)\n\nnotifyAll()方法：\n\n![](java的Object对象/18.png)\n\n看完上面的注释我们可以**总结以下的要点**：\n\n- 无论是wait、notify还是notifyAll()都需要**由监听器对象(锁对象)来进行调用**\n\n  - 简单来说：**他们都是在同步代码块中调用的**，否则会抛出异常！\n\n- `notify()`唤醒的是在等待队列的**某个**线程(不确定会唤醒哪个)，`notifyAll()`唤醒的是等待队列**所有**线程\n\n- 导致wait()的线程被唤醒可以有4种情况\n\n  - 该线程被中断\n  - `wait()`时间到了\n  - 被`notify()`唤醒\n  - 被`notifyAll()`唤醒\n\n- 调用`wait()`的线程会**释放掉锁**\n\n其实总结完上面的并不会有比较深刻的印象，可以尝试着回答几个问题来加深对`wait()`和`notify()`的理解。\n\n## 5.1为什么wait和notify在Object方法上？\n\n从一开始我们就说了：`wait()`和`notify()`是Java给我们提供线程之间通信的API，既然是线程的东西，那为什么是在Object类上定义，而不是在Thread类上定义呢？\n\n因为我们的锁是对象锁，每个对象都可以成为锁。让当前线程等待某个对象的锁，当然应该通过这个对象来操作了。\n\n- 锁对象是**任意**的，所以这些方法必须定义在Object类中\n\n## 5.2notify方法调用后，会发生什么？\n\n上面已经说了，notify会唤醒某个处于等待队列的线程。\n\n但是要**注意**的是：\n\n- notify方法调用后，被唤醒的线程**不会立马获得到锁对象**。而是等待notify的synchronized代码块**执行完之后**才会获得锁对象\n\n## 5.3sleep和wait有什么区别？\n\n`Thread.sleep()`与`Object.wait()`二者都可以暂停当前线程，释放CPU控制权。\n\n- 主要的区别在于`Object.wait()`在释放CPU同时，**释放了对象锁的控制**。\n- 而`Thread.sleep()`没有对锁释放\n\n# 六、finalize()方法\n\n`finalize()`方法将在**垃圾回收器清除对象之前调用**，但该方法不知道何时调用，具有**不定性**\n\n- 一般我们都不会重写它~\n\n> 一个对象的finalize()方法**只会被调用一次**，而且finalize()被调用不意味着gc会立即回收该对象，所以有可能调用finalize()后，该对象又不需要被回收了，然后到了真正要被回收的时候，因为前面调用过一次，所以不会调用finalize()，产生问题。\n\n","source":"_posts/java的Object对象.md","raw":"---\ntitle: java的Object对象\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-13 21:25:25\npassword:\nsummary:\ntags:\ncategories: java\n---\n\n## 一.Object对象简介\n\n我们学Java的知道，Java是一门面向对象的语言。无论在Java中出现什么，都可以认为它是对象(**除了**八大基本数据类型。当然了，八大基本数据类型也能**装箱**成为对象)：\n\n- 而Object就是这些对象的最高级别的，所有的Java对象都**隐式**地继承了Object对象(不用显示写`extends`继承)\n- 所有的Java对象都**拥有Object默认的方法**。\n\n那么我们看看Object有什么方法：\n\n![](java的Object对象/1578923575140.png)\n\n其实就可以归纳成几个：\n\n- `registerNatives()`【底层实现、不研究】\n- `hashCode()`\n- `equals(Object obj)`\n- `clone()`\n- `toString()`\n- `notify()`\n- `notifyAll()`\n- `wait(long timeout)`【还有重载了两个】\n- `finalize()`\n\nObject一共有**11**个方法，其中一个为底层的实现`registerNatives()`，其中两个`wait()`和`wait(long timeout, int nanos)`重载方法。\n\n- 所以我们真正需要看的就是**8个**方法\n\n还有**一个属性**：\n\n```java\n public final native Class<?> getClass();\n```\n\n![](java的Object对象/1.png)\n\n## 二、equals和hashCode方法\n\nequals和hashCode方法可以说是面试的重点题了，配合着String可以说在面试题中**哪都有它们的存在**。\n\n首先，我们来看看equals和hashCode在Object中**原生**的实现吧：\n\nhashCode：\n\n```java\npublic native int hashCode();\n```\n\nequals：\n\n```java\npublic boolean equals(Object obj) {\n    return (this == obj);\n}\n```\n\n看上去都非常简单：\n\n- `hashCode()`由native方法底层实现了。\n- `equals()`就直接`==`判断是否相等了。\n\n想要更加清晰它们究竟是做什么的，我们来读读它的注释：\n\n![](java的Object对象/2.png)\n\n![](java的Object对象/3.png)\n\n根据注释我们可以**总结以下的要点**：\n\n- 重写`equals()`方法，就必须重写`hashCode()`的方法\n\n- `equals()`方法默认是比较对象的地址，使用的是`==`等值运算符\n\n- `hashCode()`方法对底层是散列表的对象有提升性能的功能\n\n- 同一个对象(如果该对象没有被修改)：那么重复调用`hashCode()`那么返回的int是相同的！\n\n- `hashCode()`方法默认是由对象的地址转换而来的\n\n- equals()方法还有5个默认的原则：\n  - 自反性--->调用`equals()`返回的是true，无论这两个对象谁调用`equals()`都好，返回的都是true\n  - 一致性--->只要对象没有被修改，那么多次调用还是返回对应的结果！\n  - 传递性--->`x.equals(y)`和`y.equals(z)`都返回true，那么可以得出：`x.equals(z)`返回true\n  - 对称性--->`x.equals(y)`和`y.equals(x)`结果应该是相等的。\n  - 传入的参数为null，返回的是false\n\n为啥说`hashCode()`以散列表为底层带来性能的提升是很容易理解的。我们再来**回顾**一下HashMap的插入：\n\n![](java的Object对象/4.png)\n\n如果hash值都不相等，那么可以直接判断该key是不相等的了！\n\n### 2.1equals和hashCode方法重写\n\n`equals()`方法默认是比较对象的地址，使用的是`==`等值运算符。但是按我们正常开发来说，**比较的是对象地址是没有意义的**。\n\n- 一般地，如果我们有两个Address对象，只要这两个对象的**省号、城市号、街道号相等**，我们就认为这两个对象相等了！\n\n![](java的Object对象/5.png)\n\n### 2.2String实现的equals和hashCode方法\n\n我们在初学的时候可能就听过了：String**已经**实现了equals和hashCode方法了。\n\n- 这也就是为什么，我们可以**直接**使用String.equals()来**判断两个字符串**是否相等！\n\n下面我们就来看看它的实现吧：\n\n![](java的Object对象/6.png)\n\n![](java的Object对象/7.png)\n\n# 三、toString方法\n\n接下来我们看看toString方法，也十分简单：\n\n![](java的Object对象/8.png)\n\ntoString方法主要是用来**标识**该对象的：\n\n![](java的Object对象/9.png)\n\n从上面的结果我们都可以看出来：**得出的结果并不能直观的展示这个对象**~\n\n于是我们一般都重写toString()，那么**打印出的结果就很方便我们调试了**！\n\n```java\n@Override\npublic String toString() {\n    return \"Address{\" +\n        \"provinceNo=\" + provinceNo +\n        \", cityNo=\" + cityNo +\n        \", streetNo=\" + streetNo +\n        '}';\n}\n```\n\n下面的结果看起来就好多了：\n\n![](java的Object对象/10.png)\n\n# 四、clone方法\n\n我们也来看看它的顶部注释：\n\n![](java的Object对象/11.png)\n\n看了上面的注释我们可以**总结以下的要点**：\n\n- clone方法用于对象的克隆，一般想要克隆出的对象是**独立**的(与原有的对象是分开的)\n- 深拷贝指的是该对象的成员变量(如果是可变引用)都应该克隆一份，浅拷贝指的是成员变量没有被克隆一份\n\n下面我们来看一下浅拷贝：**拷贝了Employee对象，但是其成员变量hireday没有被克隆出去，所以指向的还是同一个Date对象**！\n\n## 4.1clone用法\n\n那么我们如何克隆对象呢？无论是浅拷贝还是深拷贝都是这两步：\n\n1. 克隆的对象要**实现Cloneable接口**\n2. **重写clone方法**，最好修饰成public\n\n**浅拷贝**：仅仅拷贝了Person对象，而date没有拷贝！\n\n```java\npublic class Person implements Cloneable {\n\n    private Date date;\n\n    @Override\n    public Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n}\n```\n\n**深拷贝**：不仅拷贝了Person对象，也拷贝了date成员变量\n\n```java\npublic class Person implements Cloneable {\n\n    public  Date date;\n\n    @Override\n    public Object clone() throws CloneNotSupportedException {\n        // 拷贝Person对象\n        Person person = (Person) super.clone();\n        \n        // 将可变的成员变量也拷贝\n        person.date = (Date) date.clone();\n\n        // 返回拷贝的对象\n        return person;\n    }\n\n}\n```\n\n## 4.2clone疑问进一步学习protected\n\n不知道有没有人跟我有相同的**疑问**：\n\n- 我只想要**浅拷贝**，能不能**直接调用该对象.clone()来实现**？\n\n比如我现在有个Address对象：\n\n```java\npublic class Address  {\n\n    private int provinceNo;\n    private int cityNo;\n    private int streetNo;\n\n    public Address() {\n    }\n\n    public Address(int provinceNo, int cityNo, int streetNo) {\n        this.provinceNo = provinceNo;\n        this.cityNo = cityNo;\n        this.streetNo = streetNo;\n    }\n}\n```\n\n下面的代码你们**认为如何**？\n\n```java\n    Address address = new Address(1, 2, 3);\n    address.clone();\n```\n\n我们都知道：\n\n- **protected修饰的类和属性,对于自己、本包和其子类可见**\n\n**可能会想**：`clone()`方法是定义在Object类上的(以protected来修饰)，而我们自定义的Address对象**隐式**继承着Object(所有的对象都是Object的子类)，那么子类调用Object以protected来修饰`clone()`是完全没问题的\n\n- 但是，IDE现实告诉我，这**编译就不通过了**！\n\n![](java的Object对象/13.png)\n\n出现错误的原因我立马就想到：**是不是我对protected修饰符出现了偏差？**\n\nprotected修饰的类和属性,对于自己、本包和其子类可见，这句话本身是没有错的。但是**还需要补充**：对于protected的成员或方法，要分子类和超类**是否在同一个包中**。与基类**不在同一个包中的子类**，只能**访问自身从基类继承而来的受保护成员，而不能访问基类实例本身的受保护成员**。\n\n- 上面的代码就错在：Address与Object**不是在同一个包下**的，而Address直接访问了Object的clone方法。这是不行的。\n\n# 五、wait和notify方法\n\nwait和notify方法其实就是Java给我们提供让**线程之间通信**的API。\n\n按照惯例我们还是来看注释怎么说吧：\n\nwait方法：\n\n![](java的Object对象/16.png)\n\nnotify方法：\n\n![](java的Object对象/17.png)\n\nnotifyAll()方法：\n\n![](java的Object对象/18.png)\n\n看完上面的注释我们可以**总结以下的要点**：\n\n- 无论是wait、notify还是notifyAll()都需要**由监听器对象(锁对象)来进行调用**\n\n  - 简单来说：**他们都是在同步代码块中调用的**，否则会抛出异常！\n\n- `notify()`唤醒的是在等待队列的**某个**线程(不确定会唤醒哪个)，`notifyAll()`唤醒的是等待队列**所有**线程\n\n- 导致wait()的线程被唤醒可以有4种情况\n\n  - 该线程被中断\n  - `wait()`时间到了\n  - 被`notify()`唤醒\n  - 被`notifyAll()`唤醒\n\n- 调用`wait()`的线程会**释放掉锁**\n\n其实总结完上面的并不会有比较深刻的印象，可以尝试着回答几个问题来加深对`wait()`和`notify()`的理解。\n\n## 5.1为什么wait和notify在Object方法上？\n\n从一开始我们就说了：`wait()`和`notify()`是Java给我们提供线程之间通信的API，既然是线程的东西，那为什么是在Object类上定义，而不是在Thread类上定义呢？\n\n因为我们的锁是对象锁，每个对象都可以成为锁。让当前线程等待某个对象的锁，当然应该通过这个对象来操作了。\n\n- 锁对象是**任意**的，所以这些方法必须定义在Object类中\n\n## 5.2notify方法调用后，会发生什么？\n\n上面已经说了，notify会唤醒某个处于等待队列的线程。\n\n但是要**注意**的是：\n\n- notify方法调用后，被唤醒的线程**不会立马获得到锁对象**。而是等待notify的synchronized代码块**执行完之后**才会获得锁对象\n\n## 5.3sleep和wait有什么区别？\n\n`Thread.sleep()`与`Object.wait()`二者都可以暂停当前线程，释放CPU控制权。\n\n- 主要的区别在于`Object.wait()`在释放CPU同时，**释放了对象锁的控制**。\n- 而`Thread.sleep()`没有对锁释放\n\n# 六、finalize()方法\n\n`finalize()`方法将在**垃圾回收器清除对象之前调用**，但该方法不知道何时调用，具有**不定性**\n\n- 一般我们都不会重写它~\n\n> 一个对象的finalize()方法**只会被调用一次**，而且finalize()被调用不意味着gc会立即回收该对象，所以有可能调用finalize()后，该对象又不需要被回收了，然后到了真正要被回收的时候，因为前面调用过一次，所以不会调用finalize()，产生问题。\n\n","slug":"java的Object对象","published":1,"updated":"2021-04-29T10:23:44.962Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mlc7001pvkvyw7efymih","content":"<h2 id=\"一-Object对象简介\"><a href=\"#一-Object对象简介\" class=\"headerlink\" title=\"一.Object对象简介\"></a>一.Object对象简介</h2><p>我们学Java的知道，Java是一门面向对象的语言。无论在Java中出现什么，都可以认为它是对象(<strong>除了</strong>八大基本数据类型。当然了，八大基本数据类型也能<strong>装箱</strong>成为对象)：</p>\n<ul>\n<li>而Object就是这些对象的最高级别的，所有的Java对象都<strong>隐式</strong>地继承了Object对象(不用显示写<code>extends</code>继承)</li>\n<li>所有的Java对象都<strong>拥有Object默认的方法</strong>。</li>\n</ul>\n<p>那么我们看看Object有什么方法：</p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/1578923575140.png\" alt></p>\n<p>其实就可以归纳成几个：</p>\n<ul>\n<li><code>registerNatives()</code>【底层实现、不研究】</li>\n<li><code>hashCode()</code></li>\n<li><code>equals(Object obj)</code></li>\n<li><code>clone()</code></li>\n<li><code>toString()</code></li>\n<li><code>notify()</code></li>\n<li><code>notifyAll()</code></li>\n<li><code>wait(long timeout)</code>【还有重载了两个】</li>\n<li><code>finalize()</code></li>\n</ul>\n<p>Object一共有<strong>11</strong>个方法，其中一个为底层的实现<code>registerNatives()</code>，其中两个<code>wait()</code>和<code>wait(long timeout, int nanos)</code>重载方法。</p>\n<ul>\n<li>所以我们真正需要看的就是<strong>8个</strong>方法</li>\n</ul>\n<p>还有<strong>一个属性</strong>：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"> <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">native</span> Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/1.png\" alt></p>\n<h2 id=\"二、equals和hashCode方法\"><a href=\"#二、equals和hashCode方法\" class=\"headerlink\" title=\"二、equals和hashCode方法\"></a>二、equals和hashCode方法</h2><p>equals和hashCode方法可以说是面试的重点题了，配合着String可以说在面试题中<strong>哪都有它们的存在</strong>。</p>\n<p>首先，我们来看看equals和hashCode在Object中<strong>原生</strong>的实现吧：</p>\n<p>hashCode：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>equals：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>Object obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>看上去都非常简单：</p>\n<ul>\n<li><code>hashCode()</code>由native方法底层实现了。</li>\n<li><code>equals()</code>就直接<code>==</code>判断是否相等了。</li>\n</ul>\n<p>想要更加清晰它们究竟是做什么的，我们来读读它的注释：</p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/2.png\" alt></p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/3.png\" alt></p>\n<p>根据注释我们可以<strong>总结以下的要点</strong>：</p>\n<ul>\n<li><p>重写<code>equals()</code>方法，就必须重写<code>hashCode()</code>的方法</p>\n</li>\n<li><p><code>equals()</code>方法默认是比较对象的地址，使用的是<code>==</code>等值运算符</p>\n</li>\n<li><p><code>hashCode()</code>方法对底层是散列表的对象有提升性能的功能</p>\n</li>\n<li><p>同一个对象(如果该对象没有被修改)：那么重复调用<code>hashCode()</code>那么返回的int是相同的！</p>\n</li>\n<li><p><code>hashCode()</code>方法默认是由对象的地址转换而来的</p>\n</li>\n<li><p>equals()方法还有5个默认的原则：</p>\n<ul>\n<li>自反性—&gt;调用<code>equals()</code>返回的是true，无论这两个对象谁调用<code>equals()</code>都好，返回的都是true</li>\n<li>一致性—&gt;只要对象没有被修改，那么多次调用还是返回对应的结果！</li>\n<li>传递性—&gt;<code>x.equals(y)</code>和<code>y.equals(z)</code>都返回true，那么可以得出：<code>x.equals(z)</code>返回true</li>\n<li>对称性—&gt;<code>x.equals(y)</code>和<code>y.equals(x)</code>结果应该是相等的。</li>\n<li>传入的参数为null，返回的是false</li>\n</ul>\n</li>\n</ul>\n<p>为啥说<code>hashCode()</code>以散列表为底层带来性能的提升是很容易理解的。我们再来<strong>回顾</strong>一下HashMap的插入：</p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/4.png\" alt></p>\n<p>如果hash值都不相等，那么可以直接判断该key是不相等的了！</p>\n<h3 id=\"2-1equals和hashCode方法重写\"><a href=\"#2-1equals和hashCode方法重写\" class=\"headerlink\" title=\"2.1equals和hashCode方法重写\"></a>2.1equals和hashCode方法重写</h3><p><code>equals()</code>方法默认是比较对象的地址，使用的是<code>==</code>等值运算符。但是按我们正常开发来说，<strong>比较的是对象地址是没有意义的</strong>。</p>\n<ul>\n<li>一般地，如果我们有两个Address对象，只要这两个对象的<strong>省号、城市号、街道号相等</strong>，我们就认为这两个对象相等了！</li>\n</ul>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/5.png\" alt></p>\n<h3 id=\"2-2String实现的equals和hashCode方法\"><a href=\"#2-2String实现的equals和hashCode方法\" class=\"headerlink\" title=\"2.2String实现的equals和hashCode方法\"></a>2.2String实现的equals和hashCode方法</h3><p>我们在初学的时候可能就听过了：String<strong>已经</strong>实现了equals和hashCode方法了。</p>\n<ul>\n<li>这也就是为什么，我们可以<strong>直接</strong>使用String.equals()来<strong>判断两个字符串</strong>是否相等！</li>\n</ul>\n<p>下面我们就来看看它的实现吧：</p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/6.png\" alt></p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/7.png\" alt></p>\n<h1 id=\"三、toString方法\"><a href=\"#三、toString方法\" class=\"headerlink\" title=\"三、toString方法\"></a>三、toString方法</h1><p>接下来我们看看toString方法，也十分简单：</p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/8.png\" alt></p>\n<p>toString方法主要是用来<strong>标识</strong>该对象的：</p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/9.png\" alt></p>\n<p>从上面的结果我们都可以看出来：<strong>得出的结果并不能直观的展示这个对象</strong>~</p>\n<p>于是我们一般都重写toString()，那么<strong>打印出的结果就很方便我们调试了</strong>！</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> String <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Address{\"</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">\"provinceNo=\"</span> <span class=\"token operator\">+</span> provinceNo <span class=\"token operator\">+</span>\n        <span class=\"token string\">\", cityNo=\"</span> <span class=\"token operator\">+</span> cityNo <span class=\"token operator\">+</span>\n        <span class=\"token string\">\", streetNo=\"</span> <span class=\"token operator\">+</span> streetNo <span class=\"token operator\">+</span>\n        <span class=\"token string\">'}'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>下面的结果看起来就好多了：</p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/10.png\" alt></p>\n<h1 id=\"四、clone方法\"><a href=\"#四、clone方法\" class=\"headerlink\" title=\"四、clone方法\"></a>四、clone方法</h1><p>我们也来看看它的顶部注释：</p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/11.png\" alt></p>\n<p>看了上面的注释我们可以<strong>总结以下的要点</strong>：</p>\n<ul>\n<li>clone方法用于对象的克隆，一般想要克隆出的对象是<strong>独立</strong>的(与原有的对象是分开的)</li>\n<li>深拷贝指的是该对象的成员变量(如果是可变引用)都应该克隆一份，浅拷贝指的是成员变量没有被克隆一份</li>\n</ul>\n<p>下面我们来看一下浅拷贝：<strong>拷贝了Employee对象，但是其成员变量hireday没有被克隆出去，所以指向的还是同一个Date对象</strong>！</p>\n<h2 id=\"4-1clone用法\"><a href=\"#4-1clone用法\" class=\"headerlink\" title=\"4.1clone用法\"></a>4.1clone用法</h2><p>那么我们如何克隆对象呢？无论是浅拷贝还是深拷贝都是这两步：</p>\n<ol>\n<li>克隆的对象要<strong>实现Cloneable接口</strong></li>\n<li><strong>重写clone方法</strong>，最好修饰成public</li>\n</ol>\n<p><strong>浅拷贝</strong>：仅仅拷贝了Person对象，而date没有拷贝！</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Cloneable</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> Date date<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> Object <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> CloneNotSupportedException <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>深拷贝</strong>：不仅拷贝了Person对象，也拷贝了date成员变量</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Cloneable</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span>  Date date<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> Object <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> CloneNotSupportedException <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 拷贝Person对象</span>\n        Person person <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">)</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 将可变的成员变量也拷贝</span>\n        person<span class=\"token punctuation\">.</span>date <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">)</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 返回拷贝的对象</span>\n        <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"4-2clone疑问进一步学习protected\"><a href=\"#4-2clone疑问进一步学习protected\" class=\"headerlink\" title=\"4.2clone疑问进一步学习protected\"></a>4.2clone疑问进一步学习protected</h2><p>不知道有没有人跟我有相同的<strong>疑问</strong>：</p>\n<ul>\n<li>我只想要<strong>浅拷贝</strong>，能不能<strong>直接调用该对象.clone()来实现</strong>？</li>\n</ul>\n<p>比如我现在有个Address对象：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Address</span>  <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> provinceNo<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> cityNo<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> streetNo<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> provinceNo<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cityNo<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> streetNo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>provinceNo <span class=\"token operator\">=</span> provinceNo<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cityNo <span class=\"token operator\">=</span> cityNo<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>streetNo <span class=\"token operator\">=</span> streetNo<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>下面的代码你们<strong>认为如何</strong>？</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">    Address address <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Address</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    address<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>我们都知道：</p>\n<ul>\n<li><strong>protected修饰的类和属性,对于自己、本包和其子类可见</strong></li>\n</ul>\n<p><strong>可能会想</strong>：<code>clone()</code>方法是定义在Object类上的(以protected来修饰)，而我们自定义的Address对象<strong>隐式</strong>继承着Object(所有的对象都是Object的子类)，那么子类调用Object以protected来修饰<code>clone()</code>是完全没问题的</p>\n<ul>\n<li>但是，IDE现实告诉我，这<strong>编译就不通过了</strong>！</li>\n</ul>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/13.png\" alt></p>\n<p>出现错误的原因我立马就想到：<strong>是不是我对protected修饰符出现了偏差？</strong></p>\n<p>protected修饰的类和属性,对于自己、本包和其子类可见，这句话本身是没有错的。但是<strong>还需要补充</strong>：对于protected的成员或方法，要分子类和超类<strong>是否在同一个包中</strong>。与基类<strong>不在同一个包中的子类</strong>，只能<strong>访问自身从基类继承而来的受保护成员，而不能访问基类实例本身的受保护成员</strong>。</p>\n<ul>\n<li>上面的代码就错在：Address与Object<strong>不是在同一个包下</strong>的，而Address直接访问了Object的clone方法。这是不行的。</li>\n</ul>\n<h1 id=\"五、wait和notify方法\"><a href=\"#五、wait和notify方法\" class=\"headerlink\" title=\"五、wait和notify方法\"></a>五、wait和notify方法</h1><p>wait和notify方法其实就是Java给我们提供让<strong>线程之间通信</strong>的API。</p>\n<p>按照惯例我们还是来看注释怎么说吧：</p>\n<p>wait方法：</p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/16.png\" alt></p>\n<p>notify方法：</p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/17.png\" alt></p>\n<p>notifyAll()方法：</p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/18.png\" alt></p>\n<p>看完上面的注释我们可以<strong>总结以下的要点</strong>：</p>\n<ul>\n<li><p>无论是wait、notify还是notifyAll()都需要<strong>由监听器对象(锁对象)来进行调用</strong></p>\n<ul>\n<li>简单来说：<strong>他们都是在同步代码块中调用的</strong>，否则会抛出异常！</li>\n</ul>\n</li>\n<li><p><code>notify()</code>唤醒的是在等待队列的<strong>某个</strong>线程(不确定会唤醒哪个)，<code>notifyAll()</code>唤醒的是等待队列<strong>所有</strong>线程</p>\n</li>\n<li><p>导致wait()的线程被唤醒可以有4种情况</p>\n<ul>\n<li>该线程被中断</li>\n<li><code>wait()</code>时间到了</li>\n<li>被<code>notify()</code>唤醒</li>\n<li>被<code>notifyAll()</code>唤醒</li>\n</ul>\n</li>\n<li><p>调用<code>wait()</code>的线程会<strong>释放掉锁</strong></p>\n</li>\n</ul>\n<p>其实总结完上面的并不会有比较深刻的印象，可以尝试着回答几个问题来加深对<code>wait()</code>和<code>notify()</code>的理解。</p>\n<h2 id=\"5-1为什么wait和notify在Object方法上？\"><a href=\"#5-1为什么wait和notify在Object方法上？\" class=\"headerlink\" title=\"5.1为什么wait和notify在Object方法上？\"></a>5.1为什么wait和notify在Object方法上？</h2><p>从一开始我们就说了：<code>wait()</code>和<code>notify()</code>是Java给我们提供线程之间通信的API，既然是线程的东西，那为什么是在Object类上定义，而不是在Thread类上定义呢？</p>\n<p>因为我们的锁是对象锁，每个对象都可以成为锁。让当前线程等待某个对象的锁，当然应该通过这个对象来操作了。</p>\n<ul>\n<li>锁对象是<strong>任意</strong>的，所以这些方法必须定义在Object类中</li>\n</ul>\n<h2 id=\"5-2notify方法调用后，会发生什么？\"><a href=\"#5-2notify方法调用后，会发生什么？\" class=\"headerlink\" title=\"5.2notify方法调用后，会发生什么？\"></a>5.2notify方法调用后，会发生什么？</h2><p>上面已经说了，notify会唤醒某个处于等待队列的线程。</p>\n<p>但是要<strong>注意</strong>的是：</p>\n<ul>\n<li>notify方法调用后，被唤醒的线程<strong>不会立马获得到锁对象</strong>。而是等待notify的synchronized代码块<strong>执行完之后</strong>才会获得锁对象</li>\n</ul>\n<h2 id=\"5-3sleep和wait有什么区别？\"><a href=\"#5-3sleep和wait有什么区别？\" class=\"headerlink\" title=\"5.3sleep和wait有什么区别？\"></a>5.3sleep和wait有什么区别？</h2><p><code>Thread.sleep()</code>与<code>Object.wait()</code>二者都可以暂停当前线程，释放CPU控制权。</p>\n<ul>\n<li>主要的区别在于<code>Object.wait()</code>在释放CPU同时，<strong>释放了对象锁的控制</strong>。</li>\n<li>而<code>Thread.sleep()</code>没有对锁释放</li>\n</ul>\n<h1 id=\"六、finalize-方法\"><a href=\"#六、finalize-方法\" class=\"headerlink\" title=\"六、finalize()方法\"></a>六、finalize()方法</h1><p><code>finalize()</code>方法将在<strong>垃圾回收器清除对象之前调用</strong>，但该方法不知道何时调用，具有<strong>不定性</strong></p>\n<ul>\n<li>一般我们都不会重写它~</li>\n</ul>\n<blockquote>\n<p>一个对象的finalize()方法<strong>只会被调用一次</strong>，而且finalize()被调用不意味着gc会立即回收该对象，所以有可能调用finalize()后，该对象又不需要被回收了，然后到了真正要被回收的时候，因为前面调用过一次，所以不会调用finalize()，产生问题。</p>\n</blockquote>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h2 id=\"一-Object对象简介\"><a href=\"#一-Object对象简介\" class=\"headerlink\" title=\"一.Object对象简介\"></a>一.Object对象简介</h2><p>我们学Java的知道，Java是一门面向对象的语言。无论在Java中出现什么，都可以认为它是对象(<strong>除了</strong>八大基本数据类型。当然了，八大基本数据类型也能<strong>装箱</strong>成为对象)：</p>\n<ul>\n<li>而Object就是这些对象的最高级别的，所有的Java对象都<strong>隐式</strong>地继承了Object对象(不用显示写<code>extends</code>继承)</li>\n<li>所有的Java对象都<strong>拥有Object默认的方法</strong>。</li>\n</ul>\n<p>那么我们看看Object有什么方法：</p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/1578923575140.png\" alt></p>\n<p>其实就可以归纳成几个：</p>\n<ul>\n<li><code>registerNatives()</code>【底层实现、不研究】</li>\n<li><code>hashCode()</code></li>\n<li><code>equals(Object obj)</code></li>\n<li><code>clone()</code></li>\n<li><code>toString()</code></li>\n<li><code>notify()</code></li>\n<li><code>notifyAll()</code></li>\n<li><code>wait(long timeout)</code>【还有重载了两个】</li>\n<li><code>finalize()</code></li>\n</ul>\n<p>Object一共有<strong>11</strong>个方法，其中一个为底层的实现<code>registerNatives()</code>，其中两个<code>wait()</code>和<code>wait(long timeout, int nanos)</code>重载方法。</p>\n<ul>\n<li>所以我们真正需要看的就是<strong>8个</strong>方法</li>\n</ul>\n<p>还有<strong>一个属性</strong>：</p>\n<pre><code class=\"java\"> public final native Class&lt;?&gt; getClass();</code></pre>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/1.png\" alt></p>\n<h2 id=\"二、equals和hashCode方法\"><a href=\"#二、equals和hashCode方法\" class=\"headerlink\" title=\"二、equals和hashCode方法\"></a>二、equals和hashCode方法</h2><p>equals和hashCode方法可以说是面试的重点题了，配合着String可以说在面试题中<strong>哪都有它们的存在</strong>。</p>\n<p>首先，我们来看看equals和hashCode在Object中<strong>原生</strong>的实现吧：</p>\n<p>hashCode：</p>\n<pre><code class=\"java\">public native int hashCode();</code></pre>\n<p>equals：</p>\n<pre><code class=\"java\">public boolean equals(Object obj) {\n    return (this == obj);\n}</code></pre>\n<p>看上去都非常简单：</p>\n<ul>\n<li><code>hashCode()</code>由native方法底层实现了。</li>\n<li><code>equals()</code>就直接<code>==</code>判断是否相等了。</li>\n</ul>\n<p>想要更加清晰它们究竟是做什么的，我们来读读它的注释：</p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/2.png\" alt></p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/3.png\" alt></p>\n<p>根据注释我们可以<strong>总结以下的要点</strong>：</p>\n<ul>\n<li><p>重写<code>equals()</code>方法，就必须重写<code>hashCode()</code>的方法</p>\n</li>\n<li><p><code>equals()</code>方法默认是比较对象的地址，使用的是<code>==</code>等值运算符</p>\n</li>\n<li><p><code>hashCode()</code>方法对底层是散列表的对象有提升性能的功能</p>\n</li>\n<li><p>同一个对象(如果该对象没有被修改)：那么重复调用<code>hashCode()</code>那么返回的int是相同的！</p>\n</li>\n<li><p><code>hashCode()</code>方法默认是由对象的地址转换而来的</p>\n</li>\n<li><p>equals()方法还有5个默认的原则：</p>\n<ul>\n<li>自反性—&gt;调用<code>equals()</code>返回的是true，无论这两个对象谁调用<code>equals()</code>都好，返回的都是true</li>\n<li>一致性—&gt;只要对象没有被修改，那么多次调用还是返回对应的结果！</li>\n<li>传递性—&gt;<code>x.equals(y)</code>和<code>y.equals(z)</code>都返回true，那么可以得出：<code>x.equals(z)</code>返回true</li>\n<li>对称性—&gt;<code>x.equals(y)</code>和<code>y.equals(x)</code>结果应该是相等的。</li>\n<li>传入的参数为null，返回的是false</li>\n</ul>\n</li>\n</ul>\n<p>为啥说<code>hashCode()</code>以散列表为底层带来性能的提升是很容易理解的。我们再来<strong>回顾</strong>一下HashMap的插入：</p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/4.png\" alt></p>\n<p>如果hash值都不相等，那么可以直接判断该key是不相等的了！</p>\n<h3 id=\"2-1equals和hashCode方法重写\"><a href=\"#2-1equals和hashCode方法重写\" class=\"headerlink\" title=\"2.1equals和hashCode方法重写\"></a>2.1equals和hashCode方法重写</h3><p><code>equals()</code>方法默认是比较对象的地址，使用的是<code>==</code>等值运算符。但是按我们正常开发来说，<strong>比较的是对象地址是没有意义的</strong>。</p>\n<ul>\n<li>一般地，如果我们有两个Address对象，只要这两个对象的<strong>省号、城市号、街道号相等</strong>，我们就认为这两个对象相等了！</li>\n</ul>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/5.png\" alt></p>\n<h3 id=\"2-2String实现的equals和hashCode方法\"><a href=\"#2-2String实现的equals和hashCode方法\" class=\"headerlink\" title=\"2.2String实现的equals和hashCode方法\"></a>2.2String实现的equals和hashCode方法</h3><p>我们在初学的时候可能就听过了：String<strong>已经</strong>实现了equals和hashCode方法了。</p>\n<ul>\n<li>这也就是为什么，我们可以<strong>直接</strong>使用String.equals()来<strong>判断两个字符串</strong>是否相等！</li>\n</ul>\n<p>下面我们就来看看它的实现吧：</p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/6.png\" alt></p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/7.png\" alt></p>\n<h1 id=\"三、toString方法\"><a href=\"#三、toString方法\" class=\"headerlink\" title=\"三、toString方法\"></a>三、toString方法</h1><p>接下来我们看看toString方法，也十分简单：</p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/8.png\" alt></p>\n<p>toString方法主要是用来<strong>标识</strong>该对象的：</p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/9.png\" alt></p>\n<p>从上面的结果我们都可以看出来：<strong>得出的结果并不能直观的展示这个对象</strong>~</p>\n<p>于是我们一般都重写toString()，那么<strong>打印出的结果就很方便我们调试了</strong>！</p>\n<pre><code class=\"java\">@Override\npublic String toString() {\n    return &quot;Address{&quot; +\n        &quot;provinceNo=&quot; + provinceNo +\n        &quot;, cityNo=&quot; + cityNo +\n        &quot;, streetNo=&quot; + streetNo +\n        &#39;}&#39;;\n}</code></pre>\n<p>下面的结果看起来就好多了：</p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/10.png\" alt></p>\n<h1 id=\"四、clone方法\"><a href=\"#四、clone方法\" class=\"headerlink\" title=\"四、clone方法\"></a>四、clone方法</h1><p>我们也来看看它的顶部注释：</p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/11.png\" alt></p>\n<p>看了上面的注释我们可以<strong>总结以下的要点</strong>：</p>\n<ul>\n<li>clone方法用于对象的克隆，一般想要克隆出的对象是<strong>独立</strong>的(与原有的对象是分开的)</li>\n<li>深拷贝指的是该对象的成员变量(如果是可变引用)都应该克隆一份，浅拷贝指的是成员变量没有被克隆一份</li>\n</ul>\n<p>下面我们来看一下浅拷贝：<strong>拷贝了Employee对象，但是其成员变量hireday没有被克隆出去，所以指向的还是同一个Date对象</strong>！</p>\n<h2 id=\"4-1clone用法\"><a href=\"#4-1clone用法\" class=\"headerlink\" title=\"4.1clone用法\"></a>4.1clone用法</h2><p>那么我们如何克隆对象呢？无论是浅拷贝还是深拷贝都是这两步：</p>\n<ol>\n<li>克隆的对象要<strong>实现Cloneable接口</strong></li>\n<li><strong>重写clone方法</strong>，最好修饰成public</li>\n</ol>\n<p><strong>浅拷贝</strong>：仅仅拷贝了Person对象，而date没有拷贝！</p>\n<pre><code class=\"java\">public class Person implements Cloneable {\n\n    private Date date;\n\n    @Override\n    public Object clone() throws CloneNotSupportedException {\n        return super.clone();\n    }\n}</code></pre>\n<p><strong>深拷贝</strong>：不仅拷贝了Person对象，也拷贝了date成员变量</p>\n<pre><code class=\"java\">public class Person implements Cloneable {\n\n    public  Date date;\n\n    @Override\n    public Object clone() throws CloneNotSupportedException {\n        // 拷贝Person对象\n        Person person = (Person) super.clone();\n\n        // 将可变的成员变量也拷贝\n        person.date = (Date) date.clone();\n\n        // 返回拷贝的对象\n        return person;\n    }\n\n}</code></pre>\n<h2 id=\"4-2clone疑问进一步学习protected\"><a href=\"#4-2clone疑问进一步学习protected\" class=\"headerlink\" title=\"4.2clone疑问进一步学习protected\"></a>4.2clone疑问进一步学习protected</h2><p>不知道有没有人跟我有相同的<strong>疑问</strong>：</p>\n<ul>\n<li>我只想要<strong>浅拷贝</strong>，能不能<strong>直接调用该对象.clone()来实现</strong>？</li>\n</ul>\n<p>比如我现在有个Address对象：</p>\n<pre><code class=\"java\">public class Address  {\n\n    private int provinceNo;\n    private int cityNo;\n    private int streetNo;\n\n    public Address() {\n    }\n\n    public Address(int provinceNo, int cityNo, int streetNo) {\n        this.provinceNo = provinceNo;\n        this.cityNo = cityNo;\n        this.streetNo = streetNo;\n    }\n}</code></pre>\n<p>下面的代码你们<strong>认为如何</strong>？</p>\n<pre><code class=\"java\">    Address address = new Address(1, 2, 3);\n    address.clone();</code></pre>\n<p>我们都知道：</p>\n<ul>\n<li><strong>protected修饰的类和属性,对于自己、本包和其子类可见</strong></li>\n</ul>\n<p><strong>可能会想</strong>：<code>clone()</code>方法是定义在Object类上的(以protected来修饰)，而我们自定义的Address对象<strong>隐式</strong>继承着Object(所有的对象都是Object的子类)，那么子类调用Object以protected来修饰<code>clone()</code>是完全没问题的</p>\n<ul>\n<li>但是，IDE现实告诉我，这<strong>编译就不通过了</strong>！</li>\n</ul>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/13.png\" alt></p>\n<p>出现错误的原因我立马就想到：<strong>是不是我对protected修饰符出现了偏差？</strong></p>\n<p>protected修饰的类和属性,对于自己、本包和其子类可见，这句话本身是没有错的。但是<strong>还需要补充</strong>：对于protected的成员或方法，要分子类和超类<strong>是否在同一个包中</strong>。与基类<strong>不在同一个包中的子类</strong>，只能<strong>访问自身从基类继承而来的受保护成员，而不能访问基类实例本身的受保护成员</strong>。</p>\n<ul>\n<li>上面的代码就错在：Address与Object<strong>不是在同一个包下</strong>的，而Address直接访问了Object的clone方法。这是不行的。</li>\n</ul>\n<h1 id=\"五、wait和notify方法\"><a href=\"#五、wait和notify方法\" class=\"headerlink\" title=\"五、wait和notify方法\"></a>五、wait和notify方法</h1><p>wait和notify方法其实就是Java给我们提供让<strong>线程之间通信</strong>的API。</p>\n<p>按照惯例我们还是来看注释怎么说吧：</p>\n<p>wait方法：</p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/16.png\" alt></p>\n<p>notify方法：</p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/17.png\" alt></p>\n<p>notifyAll()方法：</p>\n<p><img src=\"/2020/01/13/java-de-object-dui-xiang/18.png\" alt></p>\n<p>看完上面的注释我们可以<strong>总结以下的要点</strong>：</p>\n<ul>\n<li><p>无论是wait、notify还是notifyAll()都需要<strong>由监听器对象(锁对象)来进行调用</strong></p>\n<ul>\n<li>简单来说：<strong>他们都是在同步代码块中调用的</strong>，否则会抛出异常！</li>\n</ul>\n</li>\n<li><p><code>notify()</code>唤醒的是在等待队列的<strong>某个</strong>线程(不确定会唤醒哪个)，<code>notifyAll()</code>唤醒的是等待队列<strong>所有</strong>线程</p>\n</li>\n<li><p>导致wait()的线程被唤醒可以有4种情况</p>\n<ul>\n<li>该线程被中断</li>\n<li><code>wait()</code>时间到了</li>\n<li>被<code>notify()</code>唤醒</li>\n<li>被<code>notifyAll()</code>唤醒</li>\n</ul>\n</li>\n<li><p>调用<code>wait()</code>的线程会<strong>释放掉锁</strong></p>\n</li>\n</ul>\n<p>其实总结完上面的并不会有比较深刻的印象，可以尝试着回答几个问题来加深对<code>wait()</code>和<code>notify()</code>的理解。</p>\n<h2 id=\"5-1为什么wait和notify在Object方法上？\"><a href=\"#5-1为什么wait和notify在Object方法上？\" class=\"headerlink\" title=\"5.1为什么wait和notify在Object方法上？\"></a>5.1为什么wait和notify在Object方法上？</h2><p>从一开始我们就说了：<code>wait()</code>和<code>notify()</code>是Java给我们提供线程之间通信的API，既然是线程的东西，那为什么是在Object类上定义，而不是在Thread类上定义呢？</p>\n<p>因为我们的锁是对象锁，每个对象都可以成为锁。让当前线程等待某个对象的锁，当然应该通过这个对象来操作了。</p>\n<ul>\n<li>锁对象是<strong>任意</strong>的，所以这些方法必须定义在Object类中</li>\n</ul>\n<h2 id=\"5-2notify方法调用后，会发生什么？\"><a href=\"#5-2notify方法调用后，会发生什么？\" class=\"headerlink\" title=\"5.2notify方法调用后，会发生什么？\"></a>5.2notify方法调用后，会发生什么？</h2><p>上面已经说了，notify会唤醒某个处于等待队列的线程。</p>\n<p>但是要<strong>注意</strong>的是：</p>\n<ul>\n<li>notify方法调用后，被唤醒的线程<strong>不会立马获得到锁对象</strong>。而是等待notify的synchronized代码块<strong>执行完之后</strong>才会获得锁对象</li>\n</ul>\n<h2 id=\"5-3sleep和wait有什么区别？\"><a href=\"#5-3sleep和wait有什么区别？\" class=\"headerlink\" title=\"5.3sleep和wait有什么区别？\"></a>5.3sleep和wait有什么区别？</h2><p><code>Thread.sleep()</code>与<code>Object.wait()</code>二者都可以暂停当前线程，释放CPU控制权。</p>\n<ul>\n<li>主要的区别在于<code>Object.wait()</code>在释放CPU同时，<strong>释放了对象锁的控制</strong>。</li>\n<li>而<code>Thread.sleep()</code>没有对锁释放</li>\n</ul>\n<h1 id=\"六、finalize-方法\"><a href=\"#六、finalize-方法\" class=\"headerlink\" title=\"六、finalize()方法\"></a>六、finalize()方法</h1><p><code>finalize()</code>方法将在<strong>垃圾回收器清除对象之前调用</strong>，但该方法不知道何时调用，具有<strong>不定性</strong></p>\n<ul>\n<li>一般我们都不会重写它~</li>\n</ul>\n<blockquote>\n<p>一个对象的finalize()方法<strong>只会被调用一次</strong>，而且finalize()被调用不意味着gc会立即回收该对象，所以有可能调用finalize()后，该对象又不需要被回收了，然后到了真正要被回收的时候，因为前面调用过一次，所以不会调用finalize()，产生问题。</p>\n</blockquote>\n"},{"title":"redis简单使用总结","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-08T13:57:20.000Z","password":null,"summary":null,"_content":"\n# 一、概述\n\nRedis 是速度非常快的非关系型（NoSQL）内存键值数据库，可以存储键和五种不同类型的值之间的映射。\n\n键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。\n\nRedis 支持很多特性，例如将内存中的数据持久化到硬盘中，使用复制来扩展读性能，使用分片来扩展写性能。\n\n# 二、数据类型\n\n| 数据类型 | 可以存储的值           | 操作                                                         |\n| -------- | ---------------------- | ------------------------------------------------------------ |\n| STRING   | 字符串、整数或者浮点数 | 对整个字符串或者字符串的其中一部分执行操作对整数和浮点数执行自增或者自减操作 |\n| LIST     | 列表                   | 从两端压入或者弹出元素 对单个或者多个元素进行修剪，只保留一个范围内的元素 |\n| SET      | 无序集合               | 添加、获取、移除单个元素检查一个元素是否存在于集合中计算交集、并集、差集从集合里面随机获取元素 |\n| HASH     | 包含键值对的无序散列表 | 添加、获取、移除单个键值对获取所有键值对检查某个键是否存在   |\n| ZSET     | 有序集合               | 添加、获取、删除元素根据分值范围或者成员来获取元素计算一个键的排名 |\n\n## STRING\n\n[![](redis简单使用总结/1.png)\n\n```shell\n> set hello world\nOK\n> get hello\n\"world\"\n> del hello\n(integer) 1\n> get hello\n(nil)\n```\n\n## LIST\n\n[![](redis简单使用总结/2.png)\n\n```shell\n> rpush list-key item\n(integer) 1\n> rpush list-key item2\n(integer) 2\n> rpush list-key item\n(integer) 3\n\n> lrange list-key 0 -1\n1) \"item\"\n2) \"item2\"\n3) \"item\"\n\n> lindex list-key 1\n\"item2\"\n\n> lpop list-key\n\"item\"\n\n> lrange list-key 0 -1\n1) \"item2\"\n2) \"item\"\n```\n\n## SET\n\n[![](redis简单使用总结/3.png)\n\n```shell\n> sadd set-key item\n(integer) 1\n> sadd set-key item2\n(integer) 1\n> sadd set-key item3\n(integer) 1\n> sadd set-key item\n(integer) 0\n\n> smembers set-key\n1) \"item\"\n2) \"item2\"\n3) \"item3\"\n\n> sismember set-key item4\n(integer) 0\n> sismember set-key item\n(integer) 1\n\n> srem set-key item2\n(integer) 1\n> srem set-key item2\n(integer) 0\n\n> smembers set-key\n1) \"item\"\n2) \"item3\"\n```\n\n## HASH\n\n[![](redis简单使用总结/4.png)\n\n```shell\n> hset hash-key sub-key1 value1\n(integer) 1\n> hset hash-key sub-key2 value2\n(integer) 1\n> hset hash-key sub-key1 value1\n(integer) 0\n\n> hgetall hash-key\n1) \"sub-key1\"\n2) \"value1\"\n3) \"sub-key2\"\n4) \"value2\"\n\n> hdel hash-key sub-key2\n(integer) 1\n> hdel hash-key sub-key2\n(integer) 0\n\n> hget hash-key sub-key1\n\"value1\"\n\n> hgetall hash-key\n1) \"sub-key1\"\n2) \"value1\"\n```\n\n## ZSET\n\n[![](redis简单使用总结/5.png)\n\n```shell\n> zadd zset-key 728 member1\n(integer) 1\n> zadd zset-key 982 member0\n(integer) 1\n> zadd zset-key 982 member0\n(integer) 0\n\n> zrange zset-key 0 -1 withscores\n1) \"member1\"\n2) \"728\"\n3) \"member0\"\n4) \"982\"\n\n> zrangebyscore zset-key 0 800 withscores\n1) \"member1\"\n2) \"728\"\n\n> zrem zset-key member1\n(integer) 1\n> zrem zset-key member1\n(integer) 0\n\n> zrange zset-key 0 -1 withscores\n1) \"member0\"\n2) \"982\"\n```\n\n# 三、使用场景\n\n## 计数器\n\n可以对 String 进行自增自减运算，从而实现计数器功能。\n\nRedis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。\n\n## 缓存\n\n将热点数据放到内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率。\n\n## 查找表\n\n例如 DNS 记录就很适合使用 Redis 进行存储。\n\n查找表和缓存类似，也是利用了 Redis 快速的查找特性。但是查找表的内容不能失效，而缓存的内容可以失效，因为缓存不作为可靠的数据来源。\n\n## 消息队列\n\nList 是一个双向链表，可以通过 lpush 和 rpop 写入和读取消息\n\n不过最好使用 Kafka、RabbitMQ 等消息中间件。\n\n## 会话缓存\n\n可以使用 Redis 来统一存储多台应用服务器的会话信息。\n\n当应用服务器不再存储用户的会话信息，也就不再具有状态，一个用户可以请求任意一个应用服务器，从而更容易实现高可用性以及可伸缩性。\n\n## 分布式锁实现\n\n在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。\n\n可以使用 Redis 自带的 SETNX 命令实现分布式锁，除此之外，还可以使用官方提供的 RedLock 分布式锁实现。\n\n## 其它\n\nSet 可以实现交集、并集等操作，从而实现共同好友等功能。\n\nZSet 可以实现有序性操作，从而实现排行榜等功能。","source":"_posts/redis简单使用总结.md","raw":"---\ntitle: redis简单使用总结\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-08 21:57:20\npassword:\nsummary:\ntags:\ncategories: tool\n---\n\n# 一、概述\n\nRedis 是速度非常快的非关系型（NoSQL）内存键值数据库，可以存储键和五种不同类型的值之间的映射。\n\n键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。\n\nRedis 支持很多特性，例如将内存中的数据持久化到硬盘中，使用复制来扩展读性能，使用分片来扩展写性能。\n\n# 二、数据类型\n\n| 数据类型 | 可以存储的值           | 操作                                                         |\n| -------- | ---------------------- | ------------------------------------------------------------ |\n| STRING   | 字符串、整数或者浮点数 | 对整个字符串或者字符串的其中一部分执行操作对整数和浮点数执行自增或者自减操作 |\n| LIST     | 列表                   | 从两端压入或者弹出元素 对单个或者多个元素进行修剪，只保留一个范围内的元素 |\n| SET      | 无序集合               | 添加、获取、移除单个元素检查一个元素是否存在于集合中计算交集、并集、差集从集合里面随机获取元素 |\n| HASH     | 包含键值对的无序散列表 | 添加、获取、移除单个键值对获取所有键值对检查某个键是否存在   |\n| ZSET     | 有序集合               | 添加、获取、删除元素根据分值范围或者成员来获取元素计算一个键的排名 |\n\n## STRING\n\n[![](redis简单使用总结/1.png)\n\n```shell\n> set hello world\nOK\n> get hello\n\"world\"\n> del hello\n(integer) 1\n> get hello\n(nil)\n```\n\n## LIST\n\n[![](redis简单使用总结/2.png)\n\n```shell\n> rpush list-key item\n(integer) 1\n> rpush list-key item2\n(integer) 2\n> rpush list-key item\n(integer) 3\n\n> lrange list-key 0 -1\n1) \"item\"\n2) \"item2\"\n3) \"item\"\n\n> lindex list-key 1\n\"item2\"\n\n> lpop list-key\n\"item\"\n\n> lrange list-key 0 -1\n1) \"item2\"\n2) \"item\"\n```\n\n## SET\n\n[![](redis简单使用总结/3.png)\n\n```shell\n> sadd set-key item\n(integer) 1\n> sadd set-key item2\n(integer) 1\n> sadd set-key item3\n(integer) 1\n> sadd set-key item\n(integer) 0\n\n> smembers set-key\n1) \"item\"\n2) \"item2\"\n3) \"item3\"\n\n> sismember set-key item4\n(integer) 0\n> sismember set-key item\n(integer) 1\n\n> srem set-key item2\n(integer) 1\n> srem set-key item2\n(integer) 0\n\n> smembers set-key\n1) \"item\"\n2) \"item3\"\n```\n\n## HASH\n\n[![](redis简单使用总结/4.png)\n\n```shell\n> hset hash-key sub-key1 value1\n(integer) 1\n> hset hash-key sub-key2 value2\n(integer) 1\n> hset hash-key sub-key1 value1\n(integer) 0\n\n> hgetall hash-key\n1) \"sub-key1\"\n2) \"value1\"\n3) \"sub-key2\"\n4) \"value2\"\n\n> hdel hash-key sub-key2\n(integer) 1\n> hdel hash-key sub-key2\n(integer) 0\n\n> hget hash-key sub-key1\n\"value1\"\n\n> hgetall hash-key\n1) \"sub-key1\"\n2) \"value1\"\n```\n\n## ZSET\n\n[![](redis简单使用总结/5.png)\n\n```shell\n> zadd zset-key 728 member1\n(integer) 1\n> zadd zset-key 982 member0\n(integer) 1\n> zadd zset-key 982 member0\n(integer) 0\n\n> zrange zset-key 0 -1 withscores\n1) \"member1\"\n2) \"728\"\n3) \"member0\"\n4) \"982\"\n\n> zrangebyscore zset-key 0 800 withscores\n1) \"member1\"\n2) \"728\"\n\n> zrem zset-key member1\n(integer) 1\n> zrem zset-key member1\n(integer) 0\n\n> zrange zset-key 0 -1 withscores\n1) \"member0\"\n2) \"982\"\n```\n\n# 三、使用场景\n\n## 计数器\n\n可以对 String 进行自增自减运算，从而实现计数器功能。\n\nRedis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。\n\n## 缓存\n\n将热点数据放到内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率。\n\n## 查找表\n\n例如 DNS 记录就很适合使用 Redis 进行存储。\n\n查找表和缓存类似，也是利用了 Redis 快速的查找特性。但是查找表的内容不能失效，而缓存的内容可以失效，因为缓存不作为可靠的数据来源。\n\n## 消息队列\n\nList 是一个双向链表，可以通过 lpush 和 rpop 写入和读取消息\n\n不过最好使用 Kafka、RabbitMQ 等消息中间件。\n\n## 会话缓存\n\n可以使用 Redis 来统一存储多台应用服务器的会话信息。\n\n当应用服务器不再存储用户的会话信息，也就不再具有状态，一个用户可以请求任意一个应用服务器，从而更容易实现高可用性以及可伸缩性。\n\n## 分布式锁实现\n\n在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。\n\n可以使用 Redis 自带的 SETNX 命令实现分布式锁，除此之外，还可以使用官方提供的 RedLock 分布式锁实现。\n\n## 其它\n\nSet 可以实现交集、并集等操作，从而实现共同好友等功能。\n\nZSet 可以实现有序性操作，从而实现排行榜等功能。","slug":"redis简单使用总结","published":1,"updated":"2021-04-29T10:26:33.970Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mlcj001rvkvynegi2zp4","content":"<h1 id=\"一、概述\"><a href=\"#一、概述\" class=\"headerlink\" title=\"一、概述\"></a>一、概述</h1><p>Redis 是速度非常快的非关系型（NoSQL）内存键值数据库，可以存储键和五种不同类型的值之间的映射。</p>\n<p>键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。</p>\n<p>Redis 支持很多特性，例如将内存中的数据持久化到硬盘中，使用复制来扩展读性能，使用分片来扩展写性能。</p>\n<h1 id=\"二、数据类型\"><a href=\"#二、数据类型\" class=\"headerlink\" title=\"二、数据类型\"></a>二、数据类型</h1><table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>可以存储的值</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>STRING</td>\n<td>字符串、整数或者浮点数</td>\n<td>对整个字符串或者字符串的其中一部分执行操作对整数和浮点数执行自增或者自减操作</td>\n</tr>\n<tr>\n<td>LIST</td>\n<td>列表</td>\n<td>从两端压入或者弹出元素 对单个或者多个元素进行修剪，只保留一个范围内的元素</td>\n</tr>\n<tr>\n<td>SET</td>\n<td>无序集合</td>\n<td>添加、获取、移除单个元素检查一个元素是否存在于集合中计算交集、并集、差集从集合里面随机获取元素</td>\n</tr>\n<tr>\n<td>HASH</td>\n<td>包含键值对的无序散列表</td>\n<td>添加、获取、移除单个键值对获取所有键值对检查某个键是否存在</td>\n</tr>\n<tr>\n<td>ZSET</td>\n<td>有序集合</td>\n<td>添加、获取、删除元素根据分值范围或者成员来获取元素计算一个键的排名</td>\n</tr>\n</tbody></table>\n<h2 id=\"STRING\"><a href=\"#STRING\" class=\"headerlink\" title=\"STRING\"></a>STRING</h2><p>[<img src=\"/2020/01/08/redis-jian-dan-shi-yong-zong-jie/1.png\" alt></p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">> set hello world\nOK\n> get hello\n\"world\"\n> del hello\n(integer) 1\n> get hello\n(nil)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"LIST\"><a href=\"#LIST\" class=\"headerlink\" title=\"LIST\"></a>LIST</h2><p>[<img src=\"/2020/01/08/redis-jian-dan-shi-yong-zong-jie/2.png\" alt></p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">> rpush list-key item\n(integer) 1\n> rpush list-key item2\n(integer) 2\n> rpush list-key item\n(integer) 3\n\n> lrange list-key 0 -1\n1) \"item\"\n2) \"item2\"\n3) \"item\"\n\n> lindex list-key 1\n\"item2\"\n\n> lpop list-key\n\"item\"\n\n> lrange list-key 0 -1\n1) \"item2\"\n2) \"item\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"SET\"><a href=\"#SET\" class=\"headerlink\" title=\"SET\"></a>SET</h2><p>[<img src=\"/2020/01/08/redis-jian-dan-shi-yong-zong-jie/3.png\" alt></p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">> sadd set-key item\n(integer) 1\n> sadd set-key item2\n(integer) 1\n> sadd set-key item3\n(integer) 1\n> sadd set-key item\n(integer) 0\n\n> smembers set-key\n1) \"item\"\n2) \"item2\"\n3) \"item3\"\n\n> sismember set-key item4\n(integer) 0\n> sismember set-key item\n(integer) 1\n\n> srem set-key item2\n(integer) 1\n> srem set-key item2\n(integer) 0\n\n> smembers set-key\n1) \"item\"\n2) \"item3\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"HASH\"><a href=\"#HASH\" class=\"headerlink\" title=\"HASH\"></a>HASH</h2><p>[<img src=\"/2020/01/08/redis-jian-dan-shi-yong-zong-jie/4.png\" alt></p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">> hset hash-key sub-key1 value1\n(integer) 1\n> hset hash-key sub-key2 value2\n(integer) 1\n> hset hash-key sub-key1 value1\n(integer) 0\n\n> hgetall hash-key\n1) \"sub-key1\"\n2) \"value1\"\n3) \"sub-key2\"\n4) \"value2\"\n\n> hdel hash-key sub-key2\n(integer) 1\n> hdel hash-key sub-key2\n(integer) 0\n\n> hget hash-key sub-key1\n\"value1\"\n\n> hgetall hash-key\n1) \"sub-key1\"\n2) \"value1\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"ZSET\"><a href=\"#ZSET\" class=\"headerlink\" title=\"ZSET\"></a>ZSET</h2><p>[<img src=\"/2020/01/08/redis-jian-dan-shi-yong-zong-jie/5.png\" alt></p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">> zadd zset-key 728 member1\n(integer) 1\n> zadd zset-key 982 member0\n(integer) 1\n> zadd zset-key 982 member0\n(integer) 0\n\n> zrange zset-key 0 -1 withscores\n1) \"member1\"\n2) \"728\"\n3) \"member0\"\n4) \"982\"\n\n> zrangebyscore zset-key 0 800 withscores\n1) \"member1\"\n2) \"728\"\n\n> zrem zset-key member1\n(integer) 1\n> zrem zset-key member1\n(integer) 0\n\n> zrange zset-key 0 -1 withscores\n1) \"member0\"\n2) \"982\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"三、使用场景\"><a href=\"#三、使用场景\" class=\"headerlink\" title=\"三、使用场景\"></a>三、使用场景</h1><h2 id=\"计数器\"><a href=\"#计数器\" class=\"headerlink\" title=\"计数器\"></a>计数器</h2><p>可以对 String 进行自增自减运算，从而实现计数器功能。</p>\n<p>Redis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。</p>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><p>将热点数据放到内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率。</p>\n<h2 id=\"查找表\"><a href=\"#查找表\" class=\"headerlink\" title=\"查找表\"></a>查找表</h2><p>例如 DNS 记录就很适合使用 Redis 进行存储。</p>\n<p>查找表和缓存类似，也是利用了 Redis 快速的查找特性。但是查找表的内容不能失效，而缓存的内容可以失效，因为缓存不作为可靠的数据来源。</p>\n<h2 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h2><p>List 是一个双向链表，可以通过 lpush 和 rpop 写入和读取消息</p>\n<p>不过最好使用 Kafka、RabbitMQ 等消息中间件。</p>\n<h2 id=\"会话缓存\"><a href=\"#会话缓存\" class=\"headerlink\" title=\"会话缓存\"></a>会话缓存</h2><p>可以使用 Redis 来统一存储多台应用服务器的会话信息。</p>\n<p>当应用服务器不再存储用户的会话信息，也就不再具有状态，一个用户可以请求任意一个应用服务器，从而更容易实现高可用性以及可伸缩性。</p>\n<h2 id=\"分布式锁实现\"><a href=\"#分布式锁实现\" class=\"headerlink\" title=\"分布式锁实现\"></a>分布式锁实现</h2><p>在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。</p>\n<p>可以使用 Redis 自带的 SETNX 命令实现分布式锁，除此之外，还可以使用官方提供的 RedLock 分布式锁实现。</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>Set 可以实现交集、并集等操作，从而实现共同好友等功能。</p>\n<p>ZSet 可以实现有序性操作，从而实现排行榜等功能。</p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h1 id=\"一、概述\"><a href=\"#一、概述\" class=\"headerlink\" title=\"一、概述\"></a>一、概述</h1><p>Redis 是速度非常快的非关系型（NoSQL）内存键值数据库，可以存储键和五种不同类型的值之间的映射。</p>\n<p>键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。</p>\n<p>Redis 支持很多特性，例如将内存中的数据持久化到硬盘中，使用复制来扩展读性能，使用分片来扩展写性能。</p>\n<h1 id=\"二、数据类型\"><a href=\"#二、数据类型\" class=\"headerlink\" title=\"二、数据类型\"></a>二、数据类型</h1><table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>可以存储的值</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>STRING</td>\n<td>字符串、整数或者浮点数</td>\n<td>对整个字符串或者字符串的其中一部分执行操作对整数和浮点数执行自增或者自减操作</td>\n</tr>\n<tr>\n<td>LIST</td>\n<td>列表</td>\n<td>从两端压入或者弹出元素 对单个或者多个元素进行修剪，只保留一个范围内的元素</td>\n</tr>\n<tr>\n<td>SET</td>\n<td>无序集合</td>\n<td>添加、获取、移除单个元素检查一个元素是否存在于集合中计算交集、并集、差集从集合里面随机获取元素</td>\n</tr>\n<tr>\n<td>HASH</td>\n<td>包含键值对的无序散列表</td>\n<td>添加、获取、移除单个键值对获取所有键值对检查某个键是否存在</td>\n</tr>\n<tr>\n<td>ZSET</td>\n<td>有序集合</td>\n<td>添加、获取、删除元素根据分值范围或者成员来获取元素计算一个键的排名</td>\n</tr>\n</tbody></table>\n<h2 id=\"STRING\"><a href=\"#STRING\" class=\"headerlink\" title=\"STRING\"></a>STRING</h2><p>[<img src=\"/2020/01/08/redis-jian-dan-shi-yong-zong-jie/1.png\" alt></p>\n<pre><code class=\"shell\">&gt; set hello world\nOK\n&gt; get hello\n&quot;world&quot;\n&gt; del hello\n(integer) 1\n&gt; get hello\n(nil)</code></pre>\n<h2 id=\"LIST\"><a href=\"#LIST\" class=\"headerlink\" title=\"LIST\"></a>LIST</h2><p>[<img src=\"/2020/01/08/redis-jian-dan-shi-yong-zong-jie/2.png\" alt></p>\n<pre><code class=\"shell\">&gt; rpush list-key item\n(integer) 1\n&gt; rpush list-key item2\n(integer) 2\n&gt; rpush list-key item\n(integer) 3\n\n&gt; lrange list-key 0 -1\n1) &quot;item&quot;\n2) &quot;item2&quot;\n3) &quot;item&quot;\n\n&gt; lindex list-key 1\n&quot;item2&quot;\n\n&gt; lpop list-key\n&quot;item&quot;\n\n&gt; lrange list-key 0 -1\n1) &quot;item2&quot;\n2) &quot;item&quot;</code></pre>\n<h2 id=\"SET\"><a href=\"#SET\" class=\"headerlink\" title=\"SET\"></a>SET</h2><p>[<img src=\"/2020/01/08/redis-jian-dan-shi-yong-zong-jie/3.png\" alt></p>\n<pre><code class=\"shell\">&gt; sadd set-key item\n(integer) 1\n&gt; sadd set-key item2\n(integer) 1\n&gt; sadd set-key item3\n(integer) 1\n&gt; sadd set-key item\n(integer) 0\n\n&gt; smembers set-key\n1) &quot;item&quot;\n2) &quot;item2&quot;\n3) &quot;item3&quot;\n\n&gt; sismember set-key item4\n(integer) 0\n&gt; sismember set-key item\n(integer) 1\n\n&gt; srem set-key item2\n(integer) 1\n&gt; srem set-key item2\n(integer) 0\n\n&gt; smembers set-key\n1) &quot;item&quot;\n2) &quot;item3&quot;</code></pre>\n<h2 id=\"HASH\"><a href=\"#HASH\" class=\"headerlink\" title=\"HASH\"></a>HASH</h2><p>[<img src=\"/2020/01/08/redis-jian-dan-shi-yong-zong-jie/4.png\" alt></p>\n<pre><code class=\"shell\">&gt; hset hash-key sub-key1 value1\n(integer) 1\n&gt; hset hash-key sub-key2 value2\n(integer) 1\n&gt; hset hash-key sub-key1 value1\n(integer) 0\n\n&gt; hgetall hash-key\n1) &quot;sub-key1&quot;\n2) &quot;value1&quot;\n3) &quot;sub-key2&quot;\n4) &quot;value2&quot;\n\n&gt; hdel hash-key sub-key2\n(integer) 1\n&gt; hdel hash-key sub-key2\n(integer) 0\n\n&gt; hget hash-key sub-key1\n&quot;value1&quot;\n\n&gt; hgetall hash-key\n1) &quot;sub-key1&quot;\n2) &quot;value1&quot;</code></pre>\n<h2 id=\"ZSET\"><a href=\"#ZSET\" class=\"headerlink\" title=\"ZSET\"></a>ZSET</h2><p>[<img src=\"/2020/01/08/redis-jian-dan-shi-yong-zong-jie/5.png\" alt></p>\n<pre><code class=\"shell\">&gt; zadd zset-key 728 member1\n(integer) 1\n&gt; zadd zset-key 982 member0\n(integer) 1\n&gt; zadd zset-key 982 member0\n(integer) 0\n\n&gt; zrange zset-key 0 -1 withscores\n1) &quot;member1&quot;\n2) &quot;728&quot;\n3) &quot;member0&quot;\n4) &quot;982&quot;\n\n&gt; zrangebyscore zset-key 0 800 withscores\n1) &quot;member1&quot;\n2) &quot;728&quot;\n\n&gt; zrem zset-key member1\n(integer) 1\n&gt; zrem zset-key member1\n(integer) 0\n\n&gt; zrange zset-key 0 -1 withscores\n1) &quot;member0&quot;\n2) &quot;982&quot;</code></pre>\n<h1 id=\"三、使用场景\"><a href=\"#三、使用场景\" class=\"headerlink\" title=\"三、使用场景\"></a>三、使用场景</h1><h2 id=\"计数器\"><a href=\"#计数器\" class=\"headerlink\" title=\"计数器\"></a>计数器</h2><p>可以对 String 进行自增自减运算，从而实现计数器功能。</p>\n<p>Redis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。</p>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><p>将热点数据放到内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率。</p>\n<h2 id=\"查找表\"><a href=\"#查找表\" class=\"headerlink\" title=\"查找表\"></a>查找表</h2><p>例如 DNS 记录就很适合使用 Redis 进行存储。</p>\n<p>查找表和缓存类似，也是利用了 Redis 快速的查找特性。但是查找表的内容不能失效，而缓存的内容可以失效，因为缓存不作为可靠的数据来源。</p>\n<h2 id=\"消息队列\"><a href=\"#消息队列\" class=\"headerlink\" title=\"消息队列\"></a>消息队列</h2><p>List 是一个双向链表，可以通过 lpush 和 rpop 写入和读取消息</p>\n<p>不过最好使用 Kafka、RabbitMQ 等消息中间件。</p>\n<h2 id=\"会话缓存\"><a href=\"#会话缓存\" class=\"headerlink\" title=\"会话缓存\"></a>会话缓存</h2><p>可以使用 Redis 来统一存储多台应用服务器的会话信息。</p>\n<p>当应用服务器不再存储用户的会话信息，也就不再具有状态，一个用户可以请求任意一个应用服务器，从而更容易实现高可用性以及可伸缩性。</p>\n<h2 id=\"分布式锁实现\"><a href=\"#分布式锁实现\" class=\"headerlink\" title=\"分布式锁实现\"></a>分布式锁实现</h2><p>在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。</p>\n<p>可以使用 Redis 自带的 SETNX 命令实现分布式锁，除此之外，还可以使用官方提供的 RedLock 分布式锁实现。</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>Set 可以实现交集、并集等操作，从而实现共同好友等功能。</p>\n<p>ZSet 可以实现有序性操作，从而实现排行榜等功能。</p>\n"},{"title":"springboot项目遇到的问题","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-07-03T13:34:28.000Z","password":null,"summary":null,"_content":"\n**①Failed to configure a DataSource: 'url' attribute is not specified and no embedded datasource could be configured.Reason: Failed to determine a suitable driver class**\n\n### 问题记录解决\n\n今天小组长让我加入一个新的工程项目,开开心心的把项目从公司内部gitlab上面clone下来,经过一段长时间处理maven依赖以后消除了idea里面所有的红线(感觉每次clone项目下来之后maven总是要出点幺蛾子然后解决掉才行),然后就开开心心的启动,刚启动就报如下错误:\n\n```shell\n***************************\nAPPLICATION FAILED TO START\n***************************\n \nDescription:\n \nFailed to configure a DataSource: 'url' attribute is not specified and no embedded datasource could be configured.\n \nReason: Failed to determine a suitable driver class\n \n \nAction:\n \nConsider the following:\n\tIf you want an embedded database (H2, HSQL or Derby), please put it on the classpath.\n\tIf you have database settings to be loaded from a particular profile you may need to activate it (no profiles are currently active).\n \n \nProcess finished with exit code 1\n```\n\n然后就去网上搜索,很多说没有在springboot的配置文件中配置spring.datasource.url,而且好多都是这样的,正对这个找了很多解决办法,但是对我来说都是没啥用的.其中比较典型的一个博客是这么说的:\n\n问题原因: Mybatis没有找到合适的加载类,其实是大部分**spring - datasource - url**没有加载成功,分析原因如下所示.\n\n1. **DataSourceAutoConfiguration**会自动加载.\n\n2. 没有配置**spring - datasource - url** 属性.\n\n3. **spring - datasource - url** 配置的地址格式有问题.\n\n4. 配置 **spring - datasource - url**的文件没有加载.\n\n5. profiles文件夹名称冲突\n\n   ​\n\n感觉这应该是是分析得比较全面的了,但是按照他的来并没有解决我的困境.当然还有大佬便是重新clone项目下来操作一遍问题就没了,但是我还是想找到问题的根源.我的配置文件内容是这样的:\n\n![](springboot项目遇到的问题/1593848519591.png)首先我确定这个没有问题,我在里面怎么改动都没有影响,我开始觉得我根本就没有读取这个配置文件,后来去网上找了springboot项目怎么加载properties配置文件,才知道我这里有两个配置文件,一个开发的,一个测试的,但是一个都没有用,在启动参数上面加入-Dspring.profiles.active=dev就好了.\n\n### 总结\n\n经过一年多时间的反复学习,在解决错误上已经具备了一定的能力,一般的问题通过谷歌就能直接解决,这次问题给我的最大感触就是,我们解决问题的时候还是要具体问题具体分析,不要这个csdn不行我就换那个掘金或者StackOverflow,网上的东西很多时候只能让你知道大致问题出在了什么地方,具体的处理还是要靠自己.\n\n②对jdk源码做动态代理没有起作用\n\n今天上面给我一个任务,让我统计项目中方法的运行时间和调用成功与失败次数,我一想挺简单的,这个直接动态代理就可以做,spring注解用起来不是轻轻松松吗?计算方法调用时间的时候确实是这样,但是当我统计方法运行失败与成功次数的时候就遇到了问题,项目本身方法基本都是在方法整体一个try catch,成功就返回,失败就被catch打印错误日志,这就有点难办了,spring的注解@AfterThrowing只能处理方法把异常抛出去了的情况,后来我就发现他只有在失败的时候会去打印日志,打印日志的时候如下:\n\n```java\nlogger.error(\"方法对应任务\",e)\n```\n\n不难发现在调用这个方法的时候一定会执行Throwable类的getMessage()方法获取信息,我就想着设置一个该方法的代理,作为失败统计代码如下\n\n```java\n@Before(\"exceution(java.lang.Throwable.getMessage(..))\")\npuhlic void calculationFailCall(JoinPoint joinpoint){\n    ....\n}\n```\n\n但是出乎意料的是代理并没有起到作用,看过很多遍动态代理的我有点不明所以,这个类没有final,就算JDK动态代理代理不了,应该也还有Cglib可以兜底呀,没道理呀,难道是jdk源码有权限,Spring操作不了?我就另辟蹊径,决定在Logger类的error上做代理,但是结果还是不行,后来苦思冥想发现,这些类应该都没有被spring扫描包的时候扫描到,所以不可以代理,于是我就在启动类加上如下注解\n\n```java\n@ComponentScan(basePackages={\"com.iqiyi.hadoop\",\"ch.qos.logback.classic\"})\n```\n\n我以为这次妥妥的,但是想不到还是不行,我就在AppLication的字包外面建了一个测试类,加上包扫描,对它做代理,看行不行\n\n```java\n@ComponentScan(basePackages={\"com.iqiyi.hadoop\",\"ch.qos.logback.classic\",\"cn\"})\n\n@Before(\"exceution(cn.Test.test(..))\")\npuhlic void calculationFailCall(JoinPoint joinpoint){\n    ....\n}\n\n//在Controller做如下调用\nnew Test().test();\n```\n\n![](springboot项目遇到的问题/1594362451200.png)\n\n结果还是不行,我想着是不是这个类没有注入进去,于是我加上@Component注解,发现依然不可以,最后我想着这个类还是原生类,不是经过代理产生的类,会不会是因为这个原因,我就把调用方式改了一下:\n\n```java\n@Autowired\nTest test\n\ntest.test();\n```\n\n这次终于成功了,进了代理的逻辑里面.总结一下SpringAOP的代理逻辑应该是在Bean类经过容器创建的时候加上去的,所以没有经过Spring容器的类,你对他设置了代理最后也用不上.","source":"_posts/springboot项目遇到的问题.md","raw":"---\ntitle: springboot项目遇到的问题\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-07-03 21:34:28\npassword:\nsummary:\ntags:\ncategories: java\n---\n\n**①Failed to configure a DataSource: 'url' attribute is not specified and no embedded datasource could be configured.Reason: Failed to determine a suitable driver class**\n\n### 问题记录解决\n\n今天小组长让我加入一个新的工程项目,开开心心的把项目从公司内部gitlab上面clone下来,经过一段长时间处理maven依赖以后消除了idea里面所有的红线(感觉每次clone项目下来之后maven总是要出点幺蛾子然后解决掉才行),然后就开开心心的启动,刚启动就报如下错误:\n\n```shell\n***************************\nAPPLICATION FAILED TO START\n***************************\n \nDescription:\n \nFailed to configure a DataSource: 'url' attribute is not specified and no embedded datasource could be configured.\n \nReason: Failed to determine a suitable driver class\n \n \nAction:\n \nConsider the following:\n\tIf you want an embedded database (H2, HSQL or Derby), please put it on the classpath.\n\tIf you have database settings to be loaded from a particular profile you may need to activate it (no profiles are currently active).\n \n \nProcess finished with exit code 1\n```\n\n然后就去网上搜索,很多说没有在springboot的配置文件中配置spring.datasource.url,而且好多都是这样的,正对这个找了很多解决办法,但是对我来说都是没啥用的.其中比较典型的一个博客是这么说的:\n\n问题原因: Mybatis没有找到合适的加载类,其实是大部分**spring - datasource - url**没有加载成功,分析原因如下所示.\n\n1. **DataSourceAutoConfiguration**会自动加载.\n\n2. 没有配置**spring - datasource - url** 属性.\n\n3. **spring - datasource - url** 配置的地址格式有问题.\n\n4. 配置 **spring - datasource - url**的文件没有加载.\n\n5. profiles文件夹名称冲突\n\n   ​\n\n感觉这应该是是分析得比较全面的了,但是按照他的来并没有解决我的困境.当然还有大佬便是重新clone项目下来操作一遍问题就没了,但是我还是想找到问题的根源.我的配置文件内容是这样的:\n\n![](springboot项目遇到的问题/1593848519591.png)首先我确定这个没有问题,我在里面怎么改动都没有影响,我开始觉得我根本就没有读取这个配置文件,后来去网上找了springboot项目怎么加载properties配置文件,才知道我这里有两个配置文件,一个开发的,一个测试的,但是一个都没有用,在启动参数上面加入-Dspring.profiles.active=dev就好了.\n\n### 总结\n\n经过一年多时间的反复学习,在解决错误上已经具备了一定的能力,一般的问题通过谷歌就能直接解决,这次问题给我的最大感触就是,我们解决问题的时候还是要具体问题具体分析,不要这个csdn不行我就换那个掘金或者StackOverflow,网上的东西很多时候只能让你知道大致问题出在了什么地方,具体的处理还是要靠自己.\n\n②对jdk源码做动态代理没有起作用\n\n今天上面给我一个任务,让我统计项目中方法的运行时间和调用成功与失败次数,我一想挺简单的,这个直接动态代理就可以做,spring注解用起来不是轻轻松松吗?计算方法调用时间的时候确实是这样,但是当我统计方法运行失败与成功次数的时候就遇到了问题,项目本身方法基本都是在方法整体一个try catch,成功就返回,失败就被catch打印错误日志,这就有点难办了,spring的注解@AfterThrowing只能处理方法把异常抛出去了的情况,后来我就发现他只有在失败的时候会去打印日志,打印日志的时候如下:\n\n```java\nlogger.error(\"方法对应任务\",e)\n```\n\n不难发现在调用这个方法的时候一定会执行Throwable类的getMessage()方法获取信息,我就想着设置一个该方法的代理,作为失败统计代码如下\n\n```java\n@Before(\"exceution(java.lang.Throwable.getMessage(..))\")\npuhlic void calculationFailCall(JoinPoint joinpoint){\n    ....\n}\n```\n\n但是出乎意料的是代理并没有起到作用,看过很多遍动态代理的我有点不明所以,这个类没有final,就算JDK动态代理代理不了,应该也还有Cglib可以兜底呀,没道理呀,难道是jdk源码有权限,Spring操作不了?我就另辟蹊径,决定在Logger类的error上做代理,但是结果还是不行,后来苦思冥想发现,这些类应该都没有被spring扫描包的时候扫描到,所以不可以代理,于是我就在启动类加上如下注解\n\n```java\n@ComponentScan(basePackages={\"com.iqiyi.hadoop\",\"ch.qos.logback.classic\"})\n```\n\n我以为这次妥妥的,但是想不到还是不行,我就在AppLication的字包外面建了一个测试类,加上包扫描,对它做代理,看行不行\n\n```java\n@ComponentScan(basePackages={\"com.iqiyi.hadoop\",\"ch.qos.logback.classic\",\"cn\"})\n\n@Before(\"exceution(cn.Test.test(..))\")\npuhlic void calculationFailCall(JoinPoint joinpoint){\n    ....\n}\n\n//在Controller做如下调用\nnew Test().test();\n```\n\n![](springboot项目遇到的问题/1594362451200.png)\n\n结果还是不行,我想着是不是这个类没有注入进去,于是我加上@Component注解,发现依然不可以,最后我想着这个类还是原生类,不是经过代理产生的类,会不会是因为这个原因,我就把调用方式改了一下:\n\n```java\n@Autowired\nTest test\n\ntest.test();\n```\n\n这次终于成功了,进了代理的逻辑里面.总结一下SpringAOP的代理逻辑应该是在Bean类经过容器创建的时候加上去的,所以没有经过Spring容器的类,你对他设置了代理最后也用不上.","slug":"springboot项目遇到的问题","published":1,"updated":"2021-04-29T08:58:00.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mlco001tvkvyobex9pa3","content":"<p><strong>①Failed to configure a DataSource: ‘url’ attribute is not specified and no embedded datasource could be configured.Reason: Failed to determine a suitable driver class</strong></p>\n<h3 id=\"问题记录解决\"><a href=\"#问题记录解决\" class=\"headerlink\" title=\"问题记录解决\"></a>问题记录解决</h3><p>今天小组长让我加入一个新的工程项目,开开心心的把项目从公司内部gitlab上面clone下来,经过一段长时间处理maven依赖以后消除了idea里面所有的红线(感觉每次clone项目下来之后maven总是要出点幺蛾子然后解决掉才行),然后就开开心心的启动,刚启动就报如下错误:</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">***************************\nAPPLICATION FAILED TO START\n***************************\n\nDescription:\n\nFailed to configure a DataSource: 'url' attribute is not specified and no embedded datasource could be configured.\n\nReason: Failed to determine a suitable driver class\n\n\nAction:\n\nConsider the following:\n    If you want an embedded database (H2, HSQL or Derby), please put it on the classpath.\n    If you have database settings to be loaded from a particular profile you may need to activate it (no profiles are currently active).\n\n\nProcess finished with exit code 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后就去网上搜索,很多说没有在springboot的配置文件中配置spring.datasource.url,而且好多都是这样的,正对这个找了很多解决办法,但是对我来说都是没啥用的.其中比较典型的一个博客是这么说的:</p>\n<p>问题原因: Mybatis没有找到合适的加载类,其实是大部分<strong>spring - datasource - url</strong>没有加载成功,分析原因如下所示.</p>\n<ol>\n<li><p><strong>DataSourceAutoConfiguration</strong>会自动加载.</p>\n</li>\n<li><p>没有配置<strong>spring - datasource - url</strong> 属性.</p>\n</li>\n<li><p><strong>spring - datasource - url</strong> 配置的地址格式有问题.</p>\n</li>\n<li><p>配置 <strong>spring - datasource - url</strong>的文件没有加载.</p>\n</li>\n<li><p>profiles文件夹名称冲突</p>\n<p>​</p>\n</li>\n</ol>\n<p>感觉这应该是是分析得比较全面的了,但是按照他的来并没有解决我的困境.当然还有大佬便是重新clone项目下来操作一遍问题就没了,但是我还是想找到问题的根源.我的配置文件内容是这样的:</p>\n<p><img src=\"/2020/07/03/springboot-xiang-mu-yu-dao-de-wen-ti/1593848519591.png\" alt>首先我确定这个没有问题,我在里面怎么改动都没有影响,我开始觉得我根本就没有读取这个配置文件,后来去网上找了springboot项目怎么加载properties配置文件,才知道我这里有两个配置文件,一个开发的,一个测试的,但是一个都没有用,在启动参数上面加入-Dspring.profiles.active=dev就好了.</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>经过一年多时间的反复学习,在解决错误上已经具备了一定的能力,一般的问题通过谷歌就能直接解决,这次问题给我的最大感触就是,我们解决问题的时候还是要具体问题具体分析,不要这个csdn不行我就换那个掘金或者StackOverflow,网上的东西很多时候只能让你知道大致问题出在了什么地方,具体的处理还是要靠自己.</p>\n<p>②对jdk源码做动态代理没有起作用</p>\n<p>今天上面给我一个任务,让我统计项目中方法的运行时间和调用成功与失败次数,我一想挺简单的,这个直接动态代理就可以做,spring注解用起来不是轻轻松松吗?计算方法调用时间的时候确实是这样,但是当我统计方法运行失败与成功次数的时候就遇到了问题,项目本身方法基本都是在方法整体一个try catch,成功就返回,失败就被catch打印错误日志,这就有点难办了,spring的注解@AfterThrowing只能处理方法把异常抛出去了的情况,后来我就发现他只有在失败的时候会去打印日志,打印日志的时候如下:</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"方法对应任务\"</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>不难发现在调用这个方法的时候一定会执行Throwable类的getMessage()方法获取信息,我就想着设置一个该方法的代理,作为失败统计代码如下</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exceution(java.lang.Throwable.getMessage(..))\"</span><span class=\"token punctuation\">)</span>\npuhlic <span class=\"token keyword\">void</span> <span class=\"token function\">calculationFailCall</span><span class=\"token punctuation\">(</span>JoinPoint joinpoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>但是出乎意料的是代理并没有起到作用,看过很多遍动态代理的我有点不明所以,这个类没有final,就算JDK动态代理代理不了,应该也还有Cglib可以兜底呀,没道理呀,难道是jdk源码有权限,Spring操作不了?我就另辟蹊径,决定在Logger类的error上做代理,但是结果还是不行,后来苦思冥想发现,这些类应该都没有被spring扫描包的时候扫描到,所以不可以代理,于是我就在启动类加上如下注解</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span>basePackages<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"com.iqiyi.hadoop\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ch.qos.logback.classic\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>我以为这次妥妥的,但是想不到还是不行,我就在AppLication的字包外面建了一个测试类,加上包扫描,对它做代理,看行不行</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span>basePackages<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"com.iqiyi.hadoop\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ch.qos.logback.classic\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"cn\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token annotation punctuation\">@Before</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exceution(cn.Test.test(..))\"</span><span class=\"token punctuation\">)</span>\npuhlic <span class=\"token keyword\">void</span> <span class=\"token function\">calculationFailCall</span><span class=\"token punctuation\">(</span>JoinPoint joinpoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//在Controller做如下调用</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"/2020/07/03/springboot-xiang-mu-yu-dao-de-wen-ti/1594362451200.png\" alt></p>\n<p>结果还是不行,我想着是不是这个类没有注入进去,于是我加上@Component注解,发现依然不可以,最后我想着这个类还是原生类,不是经过代理产生的类,会不会是因为这个原因,我就把调用方式改了一下:</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Autowired</span>\nTest test\n\ntest<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这次终于成功了,进了代理的逻辑里面.总结一下SpringAOP的代理逻辑应该是在Bean类经过容器创建的时候加上去的,所以没有经过Spring容器的类,你对他设置了代理最后也用不上.</p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<p><strong>①Failed to configure a DataSource: ‘url’ attribute is not specified and no embedded datasource could be configured.Reason: Failed to determine a suitable driver class</strong></p>\n<h3 id=\"问题记录解决\"><a href=\"#问题记录解决\" class=\"headerlink\" title=\"问题记录解决\"></a>问题记录解决</h3><p>今天小组长让我加入一个新的工程项目,开开心心的把项目从公司内部gitlab上面clone下来,经过一段长时间处理maven依赖以后消除了idea里面所有的红线(感觉每次clone项目下来之后maven总是要出点幺蛾子然后解决掉才行),然后就开开心心的启动,刚启动就报如下错误:</p>\n<pre><code class=\"shell\">***************************\nAPPLICATION FAILED TO START\n***************************\n\nDescription:\n\nFailed to configure a DataSource: &#39;url&#39; attribute is not specified and no embedded datasource could be configured.\n\nReason: Failed to determine a suitable driver class\n\n\nAction:\n\nConsider the following:\n    If you want an embedded database (H2, HSQL or Derby), please put it on the classpath.\n    If you have database settings to be loaded from a particular profile you may need to activate it (no profiles are currently active).\n\n\nProcess finished with exit code 1</code></pre>\n<p>然后就去网上搜索,很多说没有在springboot的配置文件中配置spring.datasource.url,而且好多都是这样的,正对这个找了很多解决办法,但是对我来说都是没啥用的.其中比较典型的一个博客是这么说的:</p>\n<p>问题原因: Mybatis没有找到合适的加载类,其实是大部分<strong>spring - datasource - url</strong>没有加载成功,分析原因如下所示.</p>\n<ol>\n<li><p><strong>DataSourceAutoConfiguration</strong>会自动加载.</p>\n</li>\n<li><p>没有配置<strong>spring - datasource - url</strong> 属性.</p>\n</li>\n<li><p><strong>spring - datasource - url</strong> 配置的地址格式有问题.</p>\n</li>\n<li><p>配置 <strong>spring - datasource - url</strong>的文件没有加载.</p>\n</li>\n<li><p>profiles文件夹名称冲突</p>\n<p>​</p>\n</li>\n</ol>\n<p>感觉这应该是是分析得比较全面的了,但是按照他的来并没有解决我的困境.当然还有大佬便是重新clone项目下来操作一遍问题就没了,但是我还是想找到问题的根源.我的配置文件内容是这样的:</p>\n<p><img src=\"/2020/07/03/springboot-xiang-mu-yu-dao-de-wen-ti/1593848519591.png\" alt>首先我确定这个没有问题,我在里面怎么改动都没有影响,我开始觉得我根本就没有读取这个配置文件,后来去网上找了springboot项目怎么加载properties配置文件,才知道我这里有两个配置文件,一个开发的,一个测试的,但是一个都没有用,在启动参数上面加入-Dspring.profiles.active=dev就好了.</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>经过一年多时间的反复学习,在解决错误上已经具备了一定的能力,一般的问题通过谷歌就能直接解决,这次问题给我的最大感触就是,我们解决问题的时候还是要具体问题具体分析,不要这个csdn不行我就换那个掘金或者StackOverflow,网上的东西很多时候只能让你知道大致问题出在了什么地方,具体的处理还是要靠自己.</p>\n<p>②对jdk源码做动态代理没有起作用</p>\n<p>今天上面给我一个任务,让我统计项目中方法的运行时间和调用成功与失败次数,我一想挺简单的,这个直接动态代理就可以做,spring注解用起来不是轻轻松松吗?计算方法调用时间的时候确实是这样,但是当我统计方法运行失败与成功次数的时候就遇到了问题,项目本身方法基本都是在方法整体一个try catch,成功就返回,失败就被catch打印错误日志,这就有点难办了,spring的注解@AfterThrowing只能处理方法把异常抛出去了的情况,后来我就发现他只有在失败的时候会去打印日志,打印日志的时候如下:</p>\n<pre><code class=\"java\">logger.error(&quot;方法对应任务&quot;,e)</code></pre>\n<p>不难发现在调用这个方法的时候一定会执行Throwable类的getMessage()方法获取信息,我就想着设置一个该方法的代理,作为失败统计代码如下</p>\n<pre><code class=\"java\">@Before(&quot;exceution(java.lang.Throwable.getMessage(..))&quot;)\npuhlic void calculationFailCall(JoinPoint joinpoint){\n    ....\n}</code></pre>\n<p>但是出乎意料的是代理并没有起到作用,看过很多遍动态代理的我有点不明所以,这个类没有final,就算JDK动态代理代理不了,应该也还有Cglib可以兜底呀,没道理呀,难道是jdk源码有权限,Spring操作不了?我就另辟蹊径,决定在Logger类的error上做代理,但是结果还是不行,后来苦思冥想发现,这些类应该都没有被spring扫描包的时候扫描到,所以不可以代理,于是我就在启动类加上如下注解</p>\n<pre><code class=\"java\">@ComponentScan(basePackages={&quot;com.iqiyi.hadoop&quot;,&quot;ch.qos.logback.classic&quot;})</code></pre>\n<p>我以为这次妥妥的,但是想不到还是不行,我就在AppLication的字包外面建了一个测试类,加上包扫描,对它做代理,看行不行</p>\n<pre><code class=\"java\">@ComponentScan(basePackages={&quot;com.iqiyi.hadoop&quot;,&quot;ch.qos.logback.classic&quot;,&quot;cn&quot;})\n\n@Before(&quot;exceution(cn.Test.test(..))&quot;)\npuhlic void calculationFailCall(JoinPoint joinpoint){\n    ....\n}\n\n//在Controller做如下调用\nnew Test().test();</code></pre>\n<p><img src=\"/2020/07/03/springboot-xiang-mu-yu-dao-de-wen-ti/1594362451200.png\" alt></p>\n<p>结果还是不行,我想着是不是这个类没有注入进去,于是我加上@Component注解,发现依然不可以,最后我想着这个类还是原生类,不是经过代理产生的类,会不会是因为这个原因,我就把调用方式改了一下:</p>\n<pre><code class=\"java\">@Autowired\nTest test\n\ntest.test();</code></pre>\n<p>这次终于成功了,进了代理的逻辑里面.总结一下SpringAOP的代理逻辑应该是在Bean类经过容器创建的时候加上去的,所以没有经过Spring容器的类,你对他设置了代理最后也用不上.</p>\n"},{"title":"使用VMware安装linux虚拟机","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-29T14:16:39.000Z","password":null,"summary":null,"_content":"\n<div align = \"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=552192975&auto=0&height=66\"></iframe></div>\n\n# 使用VMware安装linux虚拟机\n\n### 使用背景\n\n*Linux是一种自由和开放源码的操作系统，存在着许多不同的Linux发行版本，但它们都使用了Linux内核。现在的服务器基本都是使用linux,其中CentOS使用广泛,还有ubuntu也是linux中的佼佼者.业内也说,凡是**java开发,不懂linux均是扯淡.**本文主要为后面搭建基于Hadoop集群的大数据大数据平台打下基础。*\n\n#### linux具有如下优点\n\n- 开源\n- 多用户，多任务，丰富的网络功能，可靠的系统安全，良好的可移植性，具有标准兼容性\n- 良好的用户界面，出色的速度性能\n- 服务器不使用图形化界面(图形界面占用资源)\n- 机房部署方便，无需配置操作界面\n\n**下载地址**[:http://www.centos.org/](http://www.centos.org/)\n\n### 安装环境\n\n- Windows10\n- VMware Workstation12\n- CentOS7\n\n#### VMware Workstation12安装\n\n①双击VMware-workstation-full-版本号.exe\n\n②点击next\n\n③选择Typical(你要是想自己配置也可以选custom 不推荐)\n\n④选择安装目录\n\n⑤想检查升级就勾上(check for product updates on startup),否则直接下一步\n\n⑥选择创建快捷方式的位置,然后下一步\n\n⑦点击continue完成\n\n⑧Finish完成\n\n**注意:如果你不熟悉就按部就班来,不要有什么骚操作,我记得我开始安装的时候禁用了哪两个网卡,后来哪两个网卡找不到了,我就把这个卸载了重新装,还是不行,这个问题的解决还是因为我一个月后重装了电脑**\n\n#### CentOS7安装\n\n①安装VMware Workstation\n\n②打开VM,点击创建新的虚拟机\n\n③选择 典型（推荐）→ 下一步 \n\n④选择稍后安装操作系统再点击下一步\n\n⑤选择操作系统和版本(linux 64)\n\n⑥输入虚拟机名称和安装路径\n\n⑦设置磁盘大小并选中将虚拟磁盘拆成多个文件\n\n⑧自定义硬件\n\n⑨选择CentOS安装镜像文件\n\n![](使用VMware安装linux虚拟机/1577631145598.png)\n\n⑩开机启动后选择Install CentOS 7并enter\n\n- 弹出如下图形化的安装界面：\n\n![](使用VMware安装linux虚拟机/format.png)\n\n- 日期和时间：\n\n![](使用VMware安装linux虚拟机/format1.png)![](使用VMware安装linux虚拟机/format2.png)\n\n- 如果你安装的是英文版，需要将时区改为上海。\n\n![](使用VMware安装linux虚拟机/format3.png)![](使用VMware安装linux虚拟机/format4.png)![](使用VMware安装linux虚拟机/20171126014938900.png)\n\n\n\n- **网络和主机名**\n\n![](使用VMware安装linux虚拟机/20171126015037602.png)![](使用VMware安装linux虚拟机/20171126015051216.png)\n\n- 然后选择开始安装**\n\n![](使用VMware安装linux虚拟机/format7.png)基本的系统就安装好了\n\n### 配置网络\n\n- linu有三种网络模式,分别是Host-Only、NAT、桥接。一般安装好以后会默认选择NAT。\n\n\n- 进入之后修改ip地址信息\n\n```shell\nvi /etc/ sysconfig/network-scripts/ifcfg-eth0\n\nDEVICE=eth0 #网卡名称\nHWADDR=08:00:27:8E:9D:25 #MAC地址\nTYPE=Ethernet #网络类型,这里是以太网\nUUID=5f2d815e-bd3b-4995-9009-823542e77304\nONBOOT=yes \nNM_CONTROLLED=yes\nBOOTPROTO=static\nSTATIC=true\nIPADDR=192.168.1.21 #ip地址\nNETMASK=255.255.255.0 #子网掩码\nGATEWAY=192.168.1.1 #网管\nDNS1=202.202.0.33 #域名解析地址\nDNS2=114.114.114.114\nDNS3=8.8.8.8\n```\n\n- 配置好以后重启网络服务\n\n```shell\nservices network restart\n```\n\n- ifconfig查看IP地址\n\n```shell\nifconfig\n\neth0      Link encap:Ethernet  HWaddr 08:00:27:8E:9D:25  \n          inet addr:192.168.1.21  Bcast:192.168.1.255  Mask:255.255.255.0\n          inet6 addr: fe80::a00:27ff:fe8e:9d25/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:1756623 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:1952463 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000 \n          RX bytes:1445482120 (1.3 GiB)  TX bytes:1626059931 (1.5 GiB)\n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:2258 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:2258 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0 \n          RX bytes:590708 (576.8 KiB)  TX bytes:590708 (576.8 KiB)\n```\n\n\n\n- ping ip地址测试网络是否配置好\n\n```shell\nping www.baidu.com\n```\n\n**按照以上操作完成安装以后可以直接克隆改虚拟机，然后修改配置就可以生成多台**\n\n**在每个主机的/etc/hosts文件设置上每个主机的ip和名字的映射关系**\n\n```shell\nvi /etc/hosts\n\n192.168.1.21 master\n192.168.1.23 slave1\n192.168.1.24 slave2\n192.168.1.25 slave3\n```\n\n\n\n![](使用VMware安装linux虚拟机/1577691474359.png)\n\n#### 配置免密登录\n\n- 主要用于两个机器之间相互登录不需要验证\n\n①在第一台机器使用命令ssh-keygen -t rsa生成私钥和秘钥\n\n```shell\nssh-keygen -t rsa\n```\n\n②复制到另一台机器\n\n```shell\nssh-copy-id root@slave1\n```\n\n**如此就可以实现slave登录master免密,按照这个做法,每两台机器都配置上。**\n\n##### 科普：免密登录原理\n\n![](使用VMware安装linux虚拟机/1577692561419.png)","source":"_posts/使用VMware安装linux虚拟机.md","raw":"---\ntitle: 使用VMware安装linux虚拟机\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-29 22:16:39\npassword:\nsummary:\ntags:\ncategories: 大数据\n---\n\n<div align = \"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=552192975&auto=0&height=66\"></iframe></div>\n\n# 使用VMware安装linux虚拟机\n\n### 使用背景\n\n*Linux是一种自由和开放源码的操作系统，存在着许多不同的Linux发行版本，但它们都使用了Linux内核。现在的服务器基本都是使用linux,其中CentOS使用广泛,还有ubuntu也是linux中的佼佼者.业内也说,凡是**java开发,不懂linux均是扯淡.**本文主要为后面搭建基于Hadoop集群的大数据大数据平台打下基础。*\n\n#### linux具有如下优点\n\n- 开源\n- 多用户，多任务，丰富的网络功能，可靠的系统安全，良好的可移植性，具有标准兼容性\n- 良好的用户界面，出色的速度性能\n- 服务器不使用图形化界面(图形界面占用资源)\n- 机房部署方便，无需配置操作界面\n\n**下载地址**[:http://www.centos.org/](http://www.centos.org/)\n\n### 安装环境\n\n- Windows10\n- VMware Workstation12\n- CentOS7\n\n#### VMware Workstation12安装\n\n①双击VMware-workstation-full-版本号.exe\n\n②点击next\n\n③选择Typical(你要是想自己配置也可以选custom 不推荐)\n\n④选择安装目录\n\n⑤想检查升级就勾上(check for product updates on startup),否则直接下一步\n\n⑥选择创建快捷方式的位置,然后下一步\n\n⑦点击continue完成\n\n⑧Finish完成\n\n**注意:如果你不熟悉就按部就班来,不要有什么骚操作,我记得我开始安装的时候禁用了哪两个网卡,后来哪两个网卡找不到了,我就把这个卸载了重新装,还是不行,这个问题的解决还是因为我一个月后重装了电脑**\n\n#### CentOS7安装\n\n①安装VMware Workstation\n\n②打开VM,点击创建新的虚拟机\n\n③选择 典型（推荐）→ 下一步 \n\n④选择稍后安装操作系统再点击下一步\n\n⑤选择操作系统和版本(linux 64)\n\n⑥输入虚拟机名称和安装路径\n\n⑦设置磁盘大小并选中将虚拟磁盘拆成多个文件\n\n⑧自定义硬件\n\n⑨选择CentOS安装镜像文件\n\n![](使用VMware安装linux虚拟机/1577631145598.png)\n\n⑩开机启动后选择Install CentOS 7并enter\n\n- 弹出如下图形化的安装界面：\n\n![](使用VMware安装linux虚拟机/format.png)\n\n- 日期和时间：\n\n![](使用VMware安装linux虚拟机/format1.png)![](使用VMware安装linux虚拟机/format2.png)\n\n- 如果你安装的是英文版，需要将时区改为上海。\n\n![](使用VMware安装linux虚拟机/format3.png)![](使用VMware安装linux虚拟机/format4.png)![](使用VMware安装linux虚拟机/20171126014938900.png)\n\n\n\n- **网络和主机名**\n\n![](使用VMware安装linux虚拟机/20171126015037602.png)![](使用VMware安装linux虚拟机/20171126015051216.png)\n\n- 然后选择开始安装**\n\n![](使用VMware安装linux虚拟机/format7.png)基本的系统就安装好了\n\n### 配置网络\n\n- linu有三种网络模式,分别是Host-Only、NAT、桥接。一般安装好以后会默认选择NAT。\n\n\n- 进入之后修改ip地址信息\n\n```shell\nvi /etc/ sysconfig/network-scripts/ifcfg-eth0\n\nDEVICE=eth0 #网卡名称\nHWADDR=08:00:27:8E:9D:25 #MAC地址\nTYPE=Ethernet #网络类型,这里是以太网\nUUID=5f2d815e-bd3b-4995-9009-823542e77304\nONBOOT=yes \nNM_CONTROLLED=yes\nBOOTPROTO=static\nSTATIC=true\nIPADDR=192.168.1.21 #ip地址\nNETMASK=255.255.255.0 #子网掩码\nGATEWAY=192.168.1.1 #网管\nDNS1=202.202.0.33 #域名解析地址\nDNS2=114.114.114.114\nDNS3=8.8.8.8\n```\n\n- 配置好以后重启网络服务\n\n```shell\nservices network restart\n```\n\n- ifconfig查看IP地址\n\n```shell\nifconfig\n\neth0      Link encap:Ethernet  HWaddr 08:00:27:8E:9D:25  \n          inet addr:192.168.1.21  Bcast:192.168.1.255  Mask:255.255.255.0\n          inet6 addr: fe80::a00:27ff:fe8e:9d25/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:1756623 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:1952463 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000 \n          RX bytes:1445482120 (1.3 GiB)  TX bytes:1626059931 (1.5 GiB)\n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:2258 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:2258 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0 \n          RX bytes:590708 (576.8 KiB)  TX bytes:590708 (576.8 KiB)\n```\n\n\n\n- ping ip地址测试网络是否配置好\n\n```shell\nping www.baidu.com\n```\n\n**按照以上操作完成安装以后可以直接克隆改虚拟机，然后修改配置就可以生成多台**\n\n**在每个主机的/etc/hosts文件设置上每个主机的ip和名字的映射关系**\n\n```shell\nvi /etc/hosts\n\n192.168.1.21 master\n192.168.1.23 slave1\n192.168.1.24 slave2\n192.168.1.25 slave3\n```\n\n\n\n![](使用VMware安装linux虚拟机/1577691474359.png)\n\n#### 配置免密登录\n\n- 主要用于两个机器之间相互登录不需要验证\n\n①在第一台机器使用命令ssh-keygen -t rsa生成私钥和秘钥\n\n```shell\nssh-keygen -t rsa\n```\n\n②复制到另一台机器\n\n```shell\nssh-copy-id root@slave1\n```\n\n**如此就可以实现slave登录master免密,按照这个做法,每两台机器都配置上。**\n\n##### 科普：免密登录原理\n\n![](使用VMware安装linux虚拟机/1577692561419.png)","slug":"使用VMware安装linux虚拟机","published":1,"updated":"2021-04-29T10:39:11.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mlct001vvkvyy4h0smwg","content":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=552192975&auto=0&height=66\"></iframe></div>\n\n<h1 id=\"使用VMware安装linux虚拟机\"><a href=\"#使用VMware安装linux虚拟机\" class=\"headerlink\" title=\"使用VMware安装linux虚拟机\"></a>使用VMware安装linux虚拟机</h1><h3 id=\"使用背景\"><a href=\"#使用背景\" class=\"headerlink\" title=\"使用背景\"></a>使用背景</h3><p><em>Linux是一种自由和开放源码的操作系统，存在着许多不同的Linux发行版本，但它们都使用了Linux内核。现在的服务器基本都是使用linux,其中CentOS使用广泛,还有ubuntu也是linux中的佼佼者.业内也说,凡是<strong>java开发,不懂linux均是扯淡.</strong>本文主要为后面搭建基于Hadoop集群的大数据大数据平台打下基础。</em></p>\n<h4 id=\"linux具有如下优点\"><a href=\"#linux具有如下优点\" class=\"headerlink\" title=\"linux具有如下优点\"></a>linux具有如下优点</h4><ul>\n<li>开源</li>\n<li>多用户，多任务，丰富的网络功能，可靠的系统安全，良好的可移植性，具有标准兼容性</li>\n<li>良好的用户界面，出色的速度性能</li>\n<li>服务器不使用图形化界面(图形界面占用资源)</li>\n<li>机房部署方便，无需配置操作界面</li>\n</ul>\n<p><strong>下载地址</strong><a href=\"http://www.centos.org/\" target=\"_blank\" rel=\"noopener\">:http://www.centos.org/</a></p>\n<h3 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h3><ul>\n<li>Windows10</li>\n<li>VMware Workstation12</li>\n<li>CentOS7</li>\n</ul>\n<h4 id=\"VMware-Workstation12安装\"><a href=\"#VMware-Workstation12安装\" class=\"headerlink\" title=\"VMware Workstation12安装\"></a>VMware Workstation12安装</h4><p>①双击VMware-workstation-full-版本号.exe</p>\n<p>②点击next</p>\n<p>③选择Typical(你要是想自己配置也可以选custom 不推荐)</p>\n<p>④选择安装目录</p>\n<p>⑤想检查升级就勾上(check for product updates on startup),否则直接下一步</p>\n<p>⑥选择创建快捷方式的位置,然后下一步</p>\n<p>⑦点击continue完成</p>\n<p>⑧Finish完成</p>\n<p><strong>注意:如果你不熟悉就按部就班来,不要有什么骚操作,我记得我开始安装的时候禁用了哪两个网卡,后来哪两个网卡找不到了,我就把这个卸载了重新装,还是不行,这个问题的解决还是因为我一个月后重装了电脑</strong></p>\n<h4 id=\"CentOS7安装\"><a href=\"#CentOS7安装\" class=\"headerlink\" title=\"CentOS7安装\"></a>CentOS7安装</h4><p>①安装VMware Workstation</p>\n<p>②打开VM,点击创建新的虚拟机</p>\n<p>③选择 典型（推荐）→ 下一步 </p>\n<p>④选择稍后安装操作系统再点击下一步</p>\n<p>⑤选择操作系统和版本(linux 64)</p>\n<p>⑥输入虚拟机名称和安装路径</p>\n<p>⑦设置磁盘大小并选中将虚拟磁盘拆成多个文件</p>\n<p>⑧自定义硬件</p>\n<p>⑨选择CentOS安装镜像文件</p>\n<p><img src=\"/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/1577631145598.png\" alt></p>\n<p>⑩开机启动后选择Install CentOS 7并enter</p>\n<ul>\n<li>弹出如下图形化的安装界面：</li>\n</ul>\n<p><img src=\"/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/format.png\" alt></p>\n<ul>\n<li>日期和时间：</li>\n</ul>\n<p><img src=\"/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/format1.png\" alt><img src=\"/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/format2.png\" alt></p>\n<ul>\n<li>如果你安装的是英文版，需要将时区改为上海。</li>\n</ul>\n<p><img src=\"/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/format3.png\" alt><img src=\"/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/format4.png\" alt><img src=\"/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/20171126014938900.png\" alt></p>\n<ul>\n<li><strong>网络和主机名</strong></li>\n</ul>\n<p><img src=\"/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/20171126015037602.png\" alt><img src=\"/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/20171126015051216.png\" alt></p>\n<ul>\n<li>然后选择开始安装**</li>\n</ul>\n<p><img src=\"/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/format7.png\" alt>基本的系统就安装好了</p>\n<h3 id=\"配置网络\"><a href=\"#配置网络\" class=\"headerlink\" title=\"配置网络\"></a>配置网络</h3><ul>\n<li>linu有三种网络模式,分别是Host-Only、NAT、桥接。一般安装好以后会默认选择NAT。</li>\n</ul>\n<ul>\n<li>进入之后修改ip地址信息</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">vi /etc/ sysconfig/network-scripts/ifcfg-eth0\n\nDEVICE=eth0 #网卡名称\nHWADDR=08:00:27:8E:9D:25 #MAC地址\nTYPE=Ethernet #网络类型,这里是以太网\nUUID=5f2d815e-bd3b-4995-9009-823542e77304\nONBOOT=yes \nNM_CONTROLLED=yes\nBOOTPROTO=static\nSTATIC=true\nIPADDR=192.168.1.21 #ip地址\nNETMASK=255.255.255.0 #子网掩码\nGATEWAY=192.168.1.1 #网管\nDNS1=202.202.0.33 #域名解析地址\nDNS2=114.114.114.114\nDNS3=8.8.8.8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>配置好以后重启网络服务</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">services network restart<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>ifconfig查看IP地址</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">ifconfig\n\neth0      Link encap:Ethernet  HWaddr 08:00:27:8E:9D:25  \n          inet addr:192.168.1.21  Bcast:192.168.1.255  Mask:255.255.255.0\n          inet6 addr: fe80::a00:27ff:fe8e:9d25/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:1756623 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:1952463 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000 \n          RX bytes:1445482120 (1.3 GiB)  TX bytes:1626059931 (1.5 GiB)\n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:2258 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:2258 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0 \n          RX bytes:590708 (576.8 KiB)  TX bytes:590708 (576.8 KiB)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>ping ip地址测试网络是否配置好</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">ping www.baidu.com<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>按照以上操作完成安装以后可以直接克隆改虚拟机，然后修改配置就可以生成多台</strong></p>\n<p><strong>在每个主机的/etc/hosts文件设置上每个主机的ip和名字的映射关系</strong></p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">vi /etc/hosts\n\n192.168.1.21 master\n192.168.1.23 slave1\n192.168.1.24 slave2\n192.168.1.25 slave3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/1577691474359.png\" alt></p>\n<h4 id=\"配置免密登录\"><a href=\"#配置免密登录\" class=\"headerlink\" title=\"配置免密登录\"></a>配置免密登录</h4><ul>\n<li>主要用于两个机器之间相互登录不需要验证</li>\n</ul>\n<p>①在第一台机器使用命令ssh-keygen -t rsa生成私钥和秘钥</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">ssh-keygen -t rsa<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>②复制到另一台机器</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">ssh-copy-id root@slave1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>如此就可以实现slave登录master免密,按照这个做法,每两台机器都配置上。</strong></p>\n<h5 id=\"科普：免密登录原理\"><a href=\"#科普：免密登录原理\" class=\"headerlink\" title=\"科普：免密登录原理\"></a>科普：免密登录原理</h5><p><img src=\"/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/1577692561419.png\" alt></p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<div align=\"middle\"><iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=\"330\" height=\"86\" src=\"//music.163.com/outchain/player?type=2&id=552192975&auto=0&height=66\"></iframe></div>\n\n<h1 id=\"使用VMware安装linux虚拟机\"><a href=\"#使用VMware安装linux虚拟机\" class=\"headerlink\" title=\"使用VMware安装linux虚拟机\"></a>使用VMware安装linux虚拟机</h1><h3 id=\"使用背景\"><a href=\"#使用背景\" class=\"headerlink\" title=\"使用背景\"></a>使用背景</h3><p><em>Linux是一种自由和开放源码的操作系统，存在着许多不同的Linux发行版本，但它们都使用了Linux内核。现在的服务器基本都是使用linux,其中CentOS使用广泛,还有ubuntu也是linux中的佼佼者.业内也说,凡是<strong>java开发,不懂linux均是扯淡.</strong>本文主要为后面搭建基于Hadoop集群的大数据大数据平台打下基础。</em></p>\n<h4 id=\"linux具有如下优点\"><a href=\"#linux具有如下优点\" class=\"headerlink\" title=\"linux具有如下优点\"></a>linux具有如下优点</h4><ul>\n<li>开源</li>\n<li>多用户，多任务，丰富的网络功能，可靠的系统安全，良好的可移植性，具有标准兼容性</li>\n<li>良好的用户界面，出色的速度性能</li>\n<li>服务器不使用图形化界面(图形界面占用资源)</li>\n<li>机房部署方便，无需配置操作界面</li>\n</ul>\n<p><strong>下载地址</strong><a href=\"http://www.centos.org/\" target=\"_blank\" rel=\"noopener\">:http://www.centos.org/</a></p>\n<h3 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h3><ul>\n<li>Windows10</li>\n<li>VMware Workstation12</li>\n<li>CentOS7</li>\n</ul>\n<h4 id=\"VMware-Workstation12安装\"><a href=\"#VMware-Workstation12安装\" class=\"headerlink\" title=\"VMware Workstation12安装\"></a>VMware Workstation12安装</h4><p>①双击VMware-workstation-full-版本号.exe</p>\n<p>②点击next</p>\n<p>③选择Typical(你要是想自己配置也可以选custom 不推荐)</p>\n<p>④选择安装目录</p>\n<p>⑤想检查升级就勾上(check for product updates on startup),否则直接下一步</p>\n<p>⑥选择创建快捷方式的位置,然后下一步</p>\n<p>⑦点击continue完成</p>\n<p>⑧Finish完成</p>\n<p><strong>注意:如果你不熟悉就按部就班来,不要有什么骚操作,我记得我开始安装的时候禁用了哪两个网卡,后来哪两个网卡找不到了,我就把这个卸载了重新装,还是不行,这个问题的解决还是因为我一个月后重装了电脑</strong></p>\n<h4 id=\"CentOS7安装\"><a href=\"#CentOS7安装\" class=\"headerlink\" title=\"CentOS7安装\"></a>CentOS7安装</h4><p>①安装VMware Workstation</p>\n<p>②打开VM,点击创建新的虚拟机</p>\n<p>③选择 典型（推荐）→ 下一步 </p>\n<p>④选择稍后安装操作系统再点击下一步</p>\n<p>⑤选择操作系统和版本(linux 64)</p>\n<p>⑥输入虚拟机名称和安装路径</p>\n<p>⑦设置磁盘大小并选中将虚拟磁盘拆成多个文件</p>\n<p>⑧自定义硬件</p>\n<p>⑨选择CentOS安装镜像文件</p>\n<p><img src=\"/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/1577631145598.png\" alt></p>\n<p>⑩开机启动后选择Install CentOS 7并enter</p>\n<ul>\n<li>弹出如下图形化的安装界面：</li>\n</ul>\n<p><img src=\"/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/format.png\" alt></p>\n<ul>\n<li>日期和时间：</li>\n</ul>\n<p><img src=\"/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/format1.png\" alt><img src=\"/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/format2.png\" alt></p>\n<ul>\n<li>如果你安装的是英文版，需要将时区改为上海。</li>\n</ul>\n<p><img src=\"/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/format3.png\" alt><img src=\"/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/format4.png\" alt><img src=\"/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/20171126014938900.png\" alt></p>\n<ul>\n<li><strong>网络和主机名</strong></li>\n</ul>\n<p><img src=\"/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/20171126015037602.png\" alt><img src=\"/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/20171126015051216.png\" alt></p>\n<ul>\n<li>然后选择开始安装**</li>\n</ul>\n<p><img src=\"/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/format7.png\" alt>基本的系统就安装好了</p>\n<h3 id=\"配置网络\"><a href=\"#配置网络\" class=\"headerlink\" title=\"配置网络\"></a>配置网络</h3><ul>\n<li>linu有三种网络模式,分别是Host-Only、NAT、桥接。一般安装好以后会默认选择NAT。</li>\n</ul>\n<ul>\n<li>进入之后修改ip地址信息</li>\n</ul>\n<pre><code class=\"shell\">vi /etc/ sysconfig/network-scripts/ifcfg-eth0\n\nDEVICE=eth0 #网卡名称\nHWADDR=08:00:27:8E:9D:25 #MAC地址\nTYPE=Ethernet #网络类型,这里是以太网\nUUID=5f2d815e-bd3b-4995-9009-823542e77304\nONBOOT=yes \nNM_CONTROLLED=yes\nBOOTPROTO=static\nSTATIC=true\nIPADDR=192.168.1.21 #ip地址\nNETMASK=255.255.255.0 #子网掩码\nGATEWAY=192.168.1.1 #网管\nDNS1=202.202.0.33 #域名解析地址\nDNS2=114.114.114.114\nDNS3=8.8.8.8</code></pre>\n<ul>\n<li>配置好以后重启网络服务</li>\n</ul>\n<pre><code class=\"shell\">services network restart</code></pre>\n<ul>\n<li>ifconfig查看IP地址</li>\n</ul>\n<pre><code class=\"shell\">ifconfig\n\neth0      Link encap:Ethernet  HWaddr 08:00:27:8E:9D:25  \n          inet addr:192.168.1.21  Bcast:192.168.1.255  Mask:255.255.255.0\n          inet6 addr: fe80::a00:27ff:fe8e:9d25/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:1756623 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:1952463 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000 \n          RX bytes:1445482120 (1.3 GiB)  TX bytes:1626059931 (1.5 GiB)\n\nlo        Link encap:Local Loopback  \n          inet addr:127.0.0.1  Mask:255.0.0.0\n          inet6 addr: ::1/128 Scope:Host\n          UP LOOPBACK RUNNING  MTU:65536  Metric:1\n          RX packets:2258 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:2258 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0 \n          RX bytes:590708 (576.8 KiB)  TX bytes:590708 (576.8 KiB)</code></pre>\n<ul>\n<li>ping ip地址测试网络是否配置好</li>\n</ul>\n<pre><code class=\"shell\">ping www.baidu.com</code></pre>\n<p><strong>按照以上操作完成安装以后可以直接克隆改虚拟机，然后修改配置就可以生成多台</strong></p>\n<p><strong>在每个主机的/etc/hosts文件设置上每个主机的ip和名字的映射关系</strong></p>\n<pre><code class=\"shell\">vi /etc/hosts\n\n192.168.1.21 master\n192.168.1.23 slave1\n192.168.1.24 slave2\n192.168.1.25 slave3</code></pre>\n<p><img src=\"/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/1577691474359.png\" alt></p>\n<h4 id=\"配置免密登录\"><a href=\"#配置免密登录\" class=\"headerlink\" title=\"配置免密登录\"></a>配置免密登录</h4><ul>\n<li>主要用于两个机器之间相互登录不需要验证</li>\n</ul>\n<p>①在第一台机器使用命令ssh-keygen -t rsa生成私钥和秘钥</p>\n<pre><code class=\"shell\">ssh-keygen -t rsa</code></pre>\n<p>②复制到另一台机器</p>\n<pre><code class=\"shell\">ssh-copy-id root@slave1</code></pre>\n<p><strong>如此就可以实现slave登录master免密,按照这个做法,每两台机器都配置上。</strong></p>\n<h5 id=\"科普：免密登录原理\"><a href=\"#科普：免密登录原理\" class=\"headerlink\" title=\"科普：免密登录原理\"></a>科普：免密登录原理</h5><p><img src=\"/2019/12/29/shi-yong-vmware-an-zhuang-linux-xu-ni-ji/1577692561419.png\" alt></p>\n"},{"title":"动态代理的实现方式与区别","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-06T13:13:56.000Z","password":null,"summary":null,"_content":"\n### 什么是代理\n\n我个人理解代理就是让A类可以去调用B类的方法,从而可以在调用前后加上一些逻辑\n\n理解了代理的意思，你脑海中恐怕还有两个巨大的疑问：\n\n- 怎么实现代理模式\n- 代理模式有什么实际用途\n\n要理解这两个问题，看一个简单的例子：\n\n```java\npublic interface Flyable {\n    void fly();\n}\n\npublic class Bird implements Flyable {\n\n    @Override\n    public void fly() {\n        System.out.println(\"Bird is flying...\");\n        try {\n            Thread.sleep(new Random().nextInt(1000));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n很简单的一个例子，用一个随机睡眠时间模拟小鸟在空中的飞行时间。接下来问题来了，如果我要知道小鸟在天空中飞行了多久，怎么办？\n\n有人说，很简单，在Bird->fly()方法的开头记录起始时间，在方法结束记录完成时间，两个时间相减就得到了飞行时间。\n\n```java\n   @Override\n    public void fly() {\n        long start = System.currentTimeMillis();\n        System.out.println(\"Bird is flying...\");\n        try {\n            Thread.sleep(new Random().nextInt(1000));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(\"Fly time = \" + (end - start));\n    }\n```\n\n的确，这个方法没有任何问题，接下来加大问题的难度。如果Bird这个类来自于某个SDK（或者说Jar包）提供，你无法改动源码，怎么办？\n\n一定会有人说，我可以在调用的地方这样写：\n\n```java\npublic static void main(String[] args) {\n        Bird bird = new Bird();\n        long start = System.currentTimeMillis();\n        bird.fly();\n        long end = System.currentTimeMillis();\n        System.out.println(\"Fly time = \" + (end - start));\n}\n```\n\n这个方案看起来似乎没有问题，但其实你忽略了准备这些方法所需要的时间，执行一个方法，需要开辟栈内存、压栈、出栈等操作，这部分时间也是不可以忽略的。因此，这个解决方案不可行。那么，还有什么方法可以做到呢？\n\n**使用继承**\n\n继承是最直观的解决方案，相信你已经想到了，至少我最开始想到的解决方案就是继承。为此，我们重新创建一个类Bird2，在Bird2中我们只做一件事情，就是调用父类的fly方法，在前后记录时间，并打印时间差：\n\n```java\npublic class Bird2 extends Bird {\n\n    @Override\n    public void fly() {\n        long start = System.currentTimeMillis();\n        \n        super.fly();\n        \n        long end = System.currentTimeMillis();\n        System.out.println(\"Fly time = \" + (end - start));\n    }\n}\n```\n\n这是一种解决方案，还有一种解决方案叫做：**聚合**，其实也是比较容易想到的。我们再次创建新类Bird3，在Bird3的构造方法中传入Bird实例。同时，让Bird3也实现Flyable接口，并在fly方法中调用传入的Bird实例的fly方法：\n\n```java\npublic class Bird3 implements Flyable {\n    private Bird bird;\n\n    public Bird3(Bird bird) {\n        this.bird = bird;\n    }\n\n    @Override\n    public void fly() {\n        long start = System.currentTimeMillis();\n\n        bird.fly();\n\n        long end = System.currentTimeMillis();\n        System.out.println(\"Fly time = \" + (end - start));\n    }\n}\n```\n\n为了记录Bird->fly()方法的执行时间，我们在前后添加了记录时间的代码。同样地，通过这种方法我们也可以获得小鸟的飞行时间。那么，这两种方法孰优孰劣呢？咋一看，不好评判！\n\n继续深入思考，用问题推导来解答这个问题：\n\n**问题一**：如果我还需要在fly方法前后打印日志，记录飞行开始和飞行结束，怎么办？有人说，很简单！继承Bird2并在在前后添加打印语句即可。那么，问题来了，请看问题二。\n\n**问题二**：如果我需要调换执行顺序，先打印日志，再获取飞行时间，怎么办？有人说，再新建一个类Bird4继承Bird，打印日志。再新建一个类Bird5继承Bird4，获取方法执行时间。\n\n问题显而易见：使用继承将导致类无限制扩展，同时灵活性也无法获得保障。那么，使用 [聚合](https://stackoverflow.com/questions/885937/what-is-the-difference-between-association-aggregation-and-composition) 是否可以避免这个问题呢？答案是：可以！但我们的类需要稍微改造一下。修改Bird3类，将聚合对象Bird类型修改为Flyable\n\n```java\npublic class Bird3 implements Flyable {\n    private Flyable flyable;\n\n    public Bird3(Flyable flyable) {\n        this.flyable = flyable;\n    }\n\n    @Override\n    public void fly() {\n        long start = System.currentTimeMillis();\n\n        flyable.fly();\n\n        long end = System.currentTimeMillis();\n        System.out.println(\"Fly time = \" + (end - start));\n    }\n}\n```\n\n为了让你看的更清楚，我将Bird3更名为BirdTimeProxy，即用于获取方法执行时间的代理的意思。同时我们新建BirdLogProxy代理类用于打印日志：\n\n```java\npublic class BirdLogProxy implements Flyable {\n    private Flyable flyable;\n\n    public BirdLogProxy(Flyable flyable) {\n        this.flyable = flyable;\n    }\n\n    @Override\n    public void fly() {\n        System.out.println(\"Bird fly start...\");\n\n        flyable.fly();\n\n        System.out.println(\"Bird fly end...\");\n    }\n}\n```\n\n接下来神奇的事情发生了，如果我们需要先记录日志，再获取飞行时间，可以在调用的地方这么做：\n\n```\n    public static void main(String[] args) {\n        Bird bird = new Bird();\n        BirdLogProxy p1 = new BirdLogProxy(bird);\n        BirdTimeProxy p2 = new BirdTimeProxy(p1);\n\n        p2.fly();\n    }\n```\n\n反过来，可以这么做：\n\n```java\n public static void main(String[] args) {\n        Bird bird = new Bird();\n        BirdTimeProxy p2 = new BirdTimeProxy(bird);\n        BirdLogProxy p1 = new BirdLogProxy(p2);\n\n        p1.fly();\n }\n```\n\n看到这里，有同学可能会有疑问了。虽然现象看起来，聚合可以灵活调换执行顺序。可是，为什么 [聚合](https://stackoverflow.com/questions/885937/what-is-the-difference-between-association-aggregation-and-composition) 可以做到，而继承不行呢。我们用一张图来解释一下：\n\n![](动态代理的实现方式与区别/1.png)\n\n### 静态代理\n\n接下来，观察上面的类BirdTimeProxy，在它的fly方法中我们直接调用了flyable->fly()方法。换而言之，BirdTimeProxy其实代理了传入的Flyable对象，这就是典型的静态代理实现。\n\n从表面上看，静态代理已经完美解决了我们的问题。可是，试想一下，如果我们需要计算SDK中100个方法的运行时间，同样的代码至少需要重复100次，并且创建至少100个代理类。往小了说，如果Bird类有多个方法，我们需要知道其他方法的运行时间，同样的代码也至少需要重复多次。因此，静态代理至少有以下两个局限性问题：\n\n- 如果同时代理多个类，依然会导致类无限制扩展\n- 如果类中有多个方法，同样的逻辑需要反复实现\n\n那么，我们是否可以使用同一个代理类来代理任意对象呢？我们以获取方法运行时间为例，是否可以使用同一个类（例如：TimeProxy）来计算任意对象的任一方法的执行时间呢？甚至再大胆一点，代理的逻辑也可以自己指定。比如，获取方法的执行时间，打印日志，这类逻辑都可以自己指定。这就是本文重点探讨的问题，也是最难理解的部分：**动态代理**。\n\n### 使用动态代理\n\n### 2.1 InvocationHandler接口\n\n在使用动态代理时，我们需要定义一个位于代理类与委托类之间的中介类，这个中介类被要求实现InvocationHandler接口，这个接口的定义如下：\n\n```java\n/**\n * 调用处理程序\n */\npublic interface InvocationHandler { \n    Object invoke(Object proxy, Method method, Object[] args); \n} \n```\n\n从InvocationHandler这个名称我们就可以知道，实现了这个接口的中介类用做“调用处理器”。当我们调用代理类对象的方法时，这个“调用”会转送到invoke方法中，代理类对象作为proxy参数传入，参数method标识了我们具体调用的是代理类的哪个方法，args为这个方法的参数。这样一来，我们对代理类中的所有方法的调用都会变为对invoke的调用，这样我们可以在invoke方法中添加统一的处理逻辑(也可以根据method参数对不同的代理类方法做不同的处理)。因此我们只需在中介类的invoke方法实现中输出“before”，然后调用委托类的invoke方法，再输出“after”。下面我们来一步一步具体实现它。\n\n### 2.2 委托类的定义\n\n动态代理方式下，要求委托类必须实现某个接口，这里我们实现的是Flyable接口。委托类Bird类的定义如下：\n\n```java\npublic interface Flyable {\n    void fly();\n}\n\npublic class Bird implements Flyable {\n\n    @Override\n    public void fly() {\n        System.out.println(\"Bird is flying...\");\n        try {\n            Thread.sleep(new Random().nextInt(1000));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n### 2.3中介类\n\n上面我们提到过，中介类必须实现InvocationHandler接口，作为调用处理器”拦截“对代理类方法的调用。中介类的定义如下：\n\n```java\npublic class DynamicProxy implements InvocationHandler { \n    //obj为委托类对象; \n    private Object obj; \n \n    public DynamicProxy(Object obj) {\n        this.obj = obj;\n    } \n \n    @Override \n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { \n        System.out.println(\"Bird fly start...\");\n        Object result = method.invoke(obj, args); \n        System.out.println(\"Bird fly end...\");\n        return result; \n    }\n} \n```\n\n从以上代码中我们可以看到，中介类持有一个委托类对象引用，在invoke方法中调用了委托类对象的相应方法，看到这里是不是觉得似曾相识?\n\n通过聚合方式持有委托类对象引用，把外部对invoke的调用最终都转为对委托类对象的调用。这不就是我们上面介绍的静态代理的一种实现方式吗?\n\n实际上，中介类与委托类构成了静态代理关系，在这个关系中，中介类是代理类，委托类就是委托类;\n\n代理类与中介类也构成一个静态代理关系，在这个关系中，中介类是委托类，代理类是代理类。\n\n也就是说，**动态代理关系由两组静态代理关系组成，这就是动态代理的原理**。下面我们来介绍一下如何”指示“以动态生成代理类。\n\n### 2.4动态生成代理类\n\n动态生成代理类的相关代码如下：\n\n```java\npublic class Main { \n    public static void main(String[] args) {\n   \t\tBird bird =  Proxy.newProxyInstance(Flyable.class,Bird.getClass().getClassLoader(), new MyInvocationHandler(new Bird()));\n        bird.fly();\n    }\n} \n```\n\n在以上代码中，我们调用Proxy类的newProxyInstance方法来获取一个代理类实例。这个代理类实现了我们指定的接口并且会把方法调用分发到指定的调用处理器。这个方法的声明如下：\n\n```java\npublic static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h) throws IllegalArgumentException \n```\n\n方法的三个参数含义分别如下：\n\nloader：定义了代理类的ClassLoder;interfaces：代理类实现的接口列表：调用处理器，也就是我们上面定义的实现了InvocationHandler接口的类实例\n\n\n\n**上面我们已经简单提到过动态代理的原理，这里再简单的总结下：首先通过newProxyInstance方法获取代理类实例，而后我们便可以通过这个代理类实例调用代理类的方法，对代理类的方法的调用实际上都会调用中介类(调用处理器)的invoke方法，在invoke方法中我们调用委托类的相应方法，并且可以添加自己的处理逻辑。**\n\n想象一下，到此为止，如果我们还需要对其它任意对象进行代理，是否还需要改动newProxyInstance方法的源码，答案是：完全不需要！\n\n只要你在newProxyInstance方法中指定代理需要实现的接口，指定用于自定义处理的InvocationHandler对象，整个代理的逻辑处理都在你自定义的InvocationHandler实现类中进行处理。至此，而我们终于可以从不断地写代理类用于实现自定义逻辑的重复工作中解放出来了，从此需要做什么，交给InvocationHandler。\n\n事实上，我们之前给自己定下的目标“使用同一个类来计算任意对象的任一方法的执行时间”已经实现了。严格来说，是我们超额完成了任务，TimeProxy不仅可以计算方法执行的时间，也可以打印方法执行日志，这完全取决于你的InvocationHandler接口实现。因此，这里取名为TimeProxy其实已经不合适了。\n\n#### 动态代理的实现方式与区别\n\n##### jDK代理\n\n JDK的动态代理主要涉及到java.lang.reflect包中的两个类：Proxy和InvocationHandler。其中 InvocationHandler是一个接口就是拦截器的接口。，可以通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，动态将横切逻辑和业务逻辑编织在一起，上面的实现就是通过JDK代理。\n\n**InvocationHandler的作用**\n\n在动态代理中InvocationHandler是核心，每个代理实例都具有一个关联的调用处理程序(InvocationHandler)。对代理实例调用方法时，将对方法调用进行编码并将其指派到它的调用处理程序(InvocationHandler)的 invoke 方法。所以对代理方法的调用都是通InvocationHadler的invoke来实现中，而invoke方法根据传入的代理对象，方法和参数来决定调用代理的哪个方法\n\n##### **代理模式**\n\n使用代理模式必须要让代理类和目标类实现相同的接口，客户端通过代理类来调用目标方法，代理类会将所有的方法调用分派到目标对象上反射执行，还可以在分派过程中添加\"前置通知\"和后置处理（如在调用目标方法前校验权限，在调用完目标方法后打印日志等）等功能。\n\n具体有如下四步骤：\n\n1.通过实现 InvocationHandler 接口创建自己的调用处理器；\n\n2.通过为 Proxy 类指定 ClassLoader 对象和一组 interface 来创建动态代理类；\n\n3.通过反射机制获得动态代理类的构造函数，其唯一参数类型是调用处理器接口类型；\n\n4.通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数被传入。\n\n#### cglib代理\n\nCGlib是一个强大的,高性能,高质量的Code生成类库。cglib封装了asm，可以在运行期动态生成新的class，它可以在运行期扩展Java类与实现Java接口。 CGLIB是**针对类实现代理**的，主要对指定的类生成一个子类，并覆盖其中的方法， 因为是继承，所以不能使用final来修饰类或方法。和jdk代理实现不同的是，cglib不要求类实现接口。\n\nJDK动态代理和CGLIB字节码生成的区别？\n\nCGLib所创建的动态代理对象的性能比JDK的高大概10倍，但CGLib在创建代理对象的时间比JDK大概多8倍，所以对于singleton的代理对象或者具有实例池的代理，因为无需重复的创建代理对象，所以比较适合CGLib动态代理技术，反之选择JDK代理\n\n- JDK动态代理只能对实现了接口的类生成代理，而不能针对类\n\n- CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法\n\n  因为是继承，所以该类或方法最好不要声明成final \n\n### 答疑解惑\n\n#### invoke方法的第一个参数proxy到底有什么作用？\n\n这个问题其实也好理解，如果你的接口中有方法需要返回自身，如果在invoke中没有传入这个参数，将导致实例无法正常返回。在这种场景中，proxy的用途就表现出来了。简单来说，这其实就是最近非常火的链式编程的一种应用实现。\n\n#### 动态代理到底有什么用？\n\n学习任何一门技术，一定要问一问自己，这到底有什么用。其实，在这篇文章的讲解过程中，我们已经说出了它的主要用途。你发现没，使用动态代理我们居然可以在不改变源码的情况下，直接在方法中插入自定义逻辑。这有点不太符合我们的一条线走到底的编程逻辑，这种编程模型有一个专业名称叫 [AOP](https://baike.baidu.com/item/AOP/1332219)。所谓的AOP，就像刀一样，抓住时机，趁机插入。\n\n基于这样一种动态特性，我们可以用它做很多事情，例如：\n\n- 事务提交或回退（Web开发中很常见）\n- 权限管理\n- 自定义缓存逻辑处理\n\n","source":"_posts/动态代理的实现方式与区别.md","raw":"---\ntitle: 动态代理的实现方式与区别\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-06 21:13:56\npassword:\nsummary:\ntags:\ncategories: java\n---\n\n### 什么是代理\n\n我个人理解代理就是让A类可以去调用B类的方法,从而可以在调用前后加上一些逻辑\n\n理解了代理的意思，你脑海中恐怕还有两个巨大的疑问：\n\n- 怎么实现代理模式\n- 代理模式有什么实际用途\n\n要理解这两个问题，看一个简单的例子：\n\n```java\npublic interface Flyable {\n    void fly();\n}\n\npublic class Bird implements Flyable {\n\n    @Override\n    public void fly() {\n        System.out.println(\"Bird is flying...\");\n        try {\n            Thread.sleep(new Random().nextInt(1000));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n很简单的一个例子，用一个随机睡眠时间模拟小鸟在空中的飞行时间。接下来问题来了，如果我要知道小鸟在天空中飞行了多久，怎么办？\n\n有人说，很简单，在Bird->fly()方法的开头记录起始时间，在方法结束记录完成时间，两个时间相减就得到了飞行时间。\n\n```java\n   @Override\n    public void fly() {\n        long start = System.currentTimeMillis();\n        System.out.println(\"Bird is flying...\");\n        try {\n            Thread.sleep(new Random().nextInt(1000));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(\"Fly time = \" + (end - start));\n    }\n```\n\n的确，这个方法没有任何问题，接下来加大问题的难度。如果Bird这个类来自于某个SDK（或者说Jar包）提供，你无法改动源码，怎么办？\n\n一定会有人说，我可以在调用的地方这样写：\n\n```java\npublic static void main(String[] args) {\n        Bird bird = new Bird();\n        long start = System.currentTimeMillis();\n        bird.fly();\n        long end = System.currentTimeMillis();\n        System.out.println(\"Fly time = \" + (end - start));\n}\n```\n\n这个方案看起来似乎没有问题，但其实你忽略了准备这些方法所需要的时间，执行一个方法，需要开辟栈内存、压栈、出栈等操作，这部分时间也是不可以忽略的。因此，这个解决方案不可行。那么，还有什么方法可以做到呢？\n\n**使用继承**\n\n继承是最直观的解决方案，相信你已经想到了，至少我最开始想到的解决方案就是继承。为此，我们重新创建一个类Bird2，在Bird2中我们只做一件事情，就是调用父类的fly方法，在前后记录时间，并打印时间差：\n\n```java\npublic class Bird2 extends Bird {\n\n    @Override\n    public void fly() {\n        long start = System.currentTimeMillis();\n        \n        super.fly();\n        \n        long end = System.currentTimeMillis();\n        System.out.println(\"Fly time = \" + (end - start));\n    }\n}\n```\n\n这是一种解决方案，还有一种解决方案叫做：**聚合**，其实也是比较容易想到的。我们再次创建新类Bird3，在Bird3的构造方法中传入Bird实例。同时，让Bird3也实现Flyable接口，并在fly方法中调用传入的Bird实例的fly方法：\n\n```java\npublic class Bird3 implements Flyable {\n    private Bird bird;\n\n    public Bird3(Bird bird) {\n        this.bird = bird;\n    }\n\n    @Override\n    public void fly() {\n        long start = System.currentTimeMillis();\n\n        bird.fly();\n\n        long end = System.currentTimeMillis();\n        System.out.println(\"Fly time = \" + (end - start));\n    }\n}\n```\n\n为了记录Bird->fly()方法的执行时间，我们在前后添加了记录时间的代码。同样地，通过这种方法我们也可以获得小鸟的飞行时间。那么，这两种方法孰优孰劣呢？咋一看，不好评判！\n\n继续深入思考，用问题推导来解答这个问题：\n\n**问题一**：如果我还需要在fly方法前后打印日志，记录飞行开始和飞行结束，怎么办？有人说，很简单！继承Bird2并在在前后添加打印语句即可。那么，问题来了，请看问题二。\n\n**问题二**：如果我需要调换执行顺序，先打印日志，再获取飞行时间，怎么办？有人说，再新建一个类Bird4继承Bird，打印日志。再新建一个类Bird5继承Bird4，获取方法执行时间。\n\n问题显而易见：使用继承将导致类无限制扩展，同时灵活性也无法获得保障。那么，使用 [聚合](https://stackoverflow.com/questions/885937/what-is-the-difference-between-association-aggregation-and-composition) 是否可以避免这个问题呢？答案是：可以！但我们的类需要稍微改造一下。修改Bird3类，将聚合对象Bird类型修改为Flyable\n\n```java\npublic class Bird3 implements Flyable {\n    private Flyable flyable;\n\n    public Bird3(Flyable flyable) {\n        this.flyable = flyable;\n    }\n\n    @Override\n    public void fly() {\n        long start = System.currentTimeMillis();\n\n        flyable.fly();\n\n        long end = System.currentTimeMillis();\n        System.out.println(\"Fly time = \" + (end - start));\n    }\n}\n```\n\n为了让你看的更清楚，我将Bird3更名为BirdTimeProxy，即用于获取方法执行时间的代理的意思。同时我们新建BirdLogProxy代理类用于打印日志：\n\n```java\npublic class BirdLogProxy implements Flyable {\n    private Flyable flyable;\n\n    public BirdLogProxy(Flyable flyable) {\n        this.flyable = flyable;\n    }\n\n    @Override\n    public void fly() {\n        System.out.println(\"Bird fly start...\");\n\n        flyable.fly();\n\n        System.out.println(\"Bird fly end...\");\n    }\n}\n```\n\n接下来神奇的事情发生了，如果我们需要先记录日志，再获取飞行时间，可以在调用的地方这么做：\n\n```\n    public static void main(String[] args) {\n        Bird bird = new Bird();\n        BirdLogProxy p1 = new BirdLogProxy(bird);\n        BirdTimeProxy p2 = new BirdTimeProxy(p1);\n\n        p2.fly();\n    }\n```\n\n反过来，可以这么做：\n\n```java\n public static void main(String[] args) {\n        Bird bird = new Bird();\n        BirdTimeProxy p2 = new BirdTimeProxy(bird);\n        BirdLogProxy p1 = new BirdLogProxy(p2);\n\n        p1.fly();\n }\n```\n\n看到这里，有同学可能会有疑问了。虽然现象看起来，聚合可以灵活调换执行顺序。可是，为什么 [聚合](https://stackoverflow.com/questions/885937/what-is-the-difference-between-association-aggregation-and-composition) 可以做到，而继承不行呢。我们用一张图来解释一下：\n\n![](动态代理的实现方式与区别/1.png)\n\n### 静态代理\n\n接下来，观察上面的类BirdTimeProxy，在它的fly方法中我们直接调用了flyable->fly()方法。换而言之，BirdTimeProxy其实代理了传入的Flyable对象，这就是典型的静态代理实现。\n\n从表面上看，静态代理已经完美解决了我们的问题。可是，试想一下，如果我们需要计算SDK中100个方法的运行时间，同样的代码至少需要重复100次，并且创建至少100个代理类。往小了说，如果Bird类有多个方法，我们需要知道其他方法的运行时间，同样的代码也至少需要重复多次。因此，静态代理至少有以下两个局限性问题：\n\n- 如果同时代理多个类，依然会导致类无限制扩展\n- 如果类中有多个方法，同样的逻辑需要反复实现\n\n那么，我们是否可以使用同一个代理类来代理任意对象呢？我们以获取方法运行时间为例，是否可以使用同一个类（例如：TimeProxy）来计算任意对象的任一方法的执行时间呢？甚至再大胆一点，代理的逻辑也可以自己指定。比如，获取方法的执行时间，打印日志，这类逻辑都可以自己指定。这就是本文重点探讨的问题，也是最难理解的部分：**动态代理**。\n\n### 使用动态代理\n\n### 2.1 InvocationHandler接口\n\n在使用动态代理时，我们需要定义一个位于代理类与委托类之间的中介类，这个中介类被要求实现InvocationHandler接口，这个接口的定义如下：\n\n```java\n/**\n * 调用处理程序\n */\npublic interface InvocationHandler { \n    Object invoke(Object proxy, Method method, Object[] args); \n} \n```\n\n从InvocationHandler这个名称我们就可以知道，实现了这个接口的中介类用做“调用处理器”。当我们调用代理类对象的方法时，这个“调用”会转送到invoke方法中，代理类对象作为proxy参数传入，参数method标识了我们具体调用的是代理类的哪个方法，args为这个方法的参数。这样一来，我们对代理类中的所有方法的调用都会变为对invoke的调用，这样我们可以在invoke方法中添加统一的处理逻辑(也可以根据method参数对不同的代理类方法做不同的处理)。因此我们只需在中介类的invoke方法实现中输出“before”，然后调用委托类的invoke方法，再输出“after”。下面我们来一步一步具体实现它。\n\n### 2.2 委托类的定义\n\n动态代理方式下，要求委托类必须实现某个接口，这里我们实现的是Flyable接口。委托类Bird类的定义如下：\n\n```java\npublic interface Flyable {\n    void fly();\n}\n\npublic class Bird implements Flyable {\n\n    @Override\n    public void fly() {\n        System.out.println(\"Bird is flying...\");\n        try {\n            Thread.sleep(new Random().nextInt(1000));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n### 2.3中介类\n\n上面我们提到过，中介类必须实现InvocationHandler接口，作为调用处理器”拦截“对代理类方法的调用。中介类的定义如下：\n\n```java\npublic class DynamicProxy implements InvocationHandler { \n    //obj为委托类对象; \n    private Object obj; \n \n    public DynamicProxy(Object obj) {\n        this.obj = obj;\n    } \n \n    @Override \n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { \n        System.out.println(\"Bird fly start...\");\n        Object result = method.invoke(obj, args); \n        System.out.println(\"Bird fly end...\");\n        return result; \n    }\n} \n```\n\n从以上代码中我们可以看到，中介类持有一个委托类对象引用，在invoke方法中调用了委托类对象的相应方法，看到这里是不是觉得似曾相识?\n\n通过聚合方式持有委托类对象引用，把外部对invoke的调用最终都转为对委托类对象的调用。这不就是我们上面介绍的静态代理的一种实现方式吗?\n\n实际上，中介类与委托类构成了静态代理关系，在这个关系中，中介类是代理类，委托类就是委托类;\n\n代理类与中介类也构成一个静态代理关系，在这个关系中，中介类是委托类，代理类是代理类。\n\n也就是说，**动态代理关系由两组静态代理关系组成，这就是动态代理的原理**。下面我们来介绍一下如何”指示“以动态生成代理类。\n\n### 2.4动态生成代理类\n\n动态生成代理类的相关代码如下：\n\n```java\npublic class Main { \n    public static void main(String[] args) {\n   \t\tBird bird =  Proxy.newProxyInstance(Flyable.class,Bird.getClass().getClassLoader(), new MyInvocationHandler(new Bird()));\n        bird.fly();\n    }\n} \n```\n\n在以上代码中，我们调用Proxy类的newProxyInstance方法来获取一个代理类实例。这个代理类实现了我们指定的接口并且会把方法调用分发到指定的调用处理器。这个方法的声明如下：\n\n```java\npublic static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h) throws IllegalArgumentException \n```\n\n方法的三个参数含义分别如下：\n\nloader：定义了代理类的ClassLoder;interfaces：代理类实现的接口列表：调用处理器，也就是我们上面定义的实现了InvocationHandler接口的类实例\n\n\n\n**上面我们已经简单提到过动态代理的原理，这里再简单的总结下：首先通过newProxyInstance方法获取代理类实例，而后我们便可以通过这个代理类实例调用代理类的方法，对代理类的方法的调用实际上都会调用中介类(调用处理器)的invoke方法，在invoke方法中我们调用委托类的相应方法，并且可以添加自己的处理逻辑。**\n\n想象一下，到此为止，如果我们还需要对其它任意对象进行代理，是否还需要改动newProxyInstance方法的源码，答案是：完全不需要！\n\n只要你在newProxyInstance方法中指定代理需要实现的接口，指定用于自定义处理的InvocationHandler对象，整个代理的逻辑处理都在你自定义的InvocationHandler实现类中进行处理。至此，而我们终于可以从不断地写代理类用于实现自定义逻辑的重复工作中解放出来了，从此需要做什么，交给InvocationHandler。\n\n事实上，我们之前给自己定下的目标“使用同一个类来计算任意对象的任一方法的执行时间”已经实现了。严格来说，是我们超额完成了任务，TimeProxy不仅可以计算方法执行的时间，也可以打印方法执行日志，这完全取决于你的InvocationHandler接口实现。因此，这里取名为TimeProxy其实已经不合适了。\n\n#### 动态代理的实现方式与区别\n\n##### jDK代理\n\n JDK的动态代理主要涉及到java.lang.reflect包中的两个类：Proxy和InvocationHandler。其中 InvocationHandler是一个接口就是拦截器的接口。，可以通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，动态将横切逻辑和业务逻辑编织在一起，上面的实现就是通过JDK代理。\n\n**InvocationHandler的作用**\n\n在动态代理中InvocationHandler是核心，每个代理实例都具有一个关联的调用处理程序(InvocationHandler)。对代理实例调用方法时，将对方法调用进行编码并将其指派到它的调用处理程序(InvocationHandler)的 invoke 方法。所以对代理方法的调用都是通InvocationHadler的invoke来实现中，而invoke方法根据传入的代理对象，方法和参数来决定调用代理的哪个方法\n\n##### **代理模式**\n\n使用代理模式必须要让代理类和目标类实现相同的接口，客户端通过代理类来调用目标方法，代理类会将所有的方法调用分派到目标对象上反射执行，还可以在分派过程中添加\"前置通知\"和后置处理（如在调用目标方法前校验权限，在调用完目标方法后打印日志等）等功能。\n\n具体有如下四步骤：\n\n1.通过实现 InvocationHandler 接口创建自己的调用处理器；\n\n2.通过为 Proxy 类指定 ClassLoader 对象和一组 interface 来创建动态代理类；\n\n3.通过反射机制获得动态代理类的构造函数，其唯一参数类型是调用处理器接口类型；\n\n4.通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数被传入。\n\n#### cglib代理\n\nCGlib是一个强大的,高性能,高质量的Code生成类库。cglib封装了asm，可以在运行期动态生成新的class，它可以在运行期扩展Java类与实现Java接口。 CGLIB是**针对类实现代理**的，主要对指定的类生成一个子类，并覆盖其中的方法， 因为是继承，所以不能使用final来修饰类或方法。和jdk代理实现不同的是，cglib不要求类实现接口。\n\nJDK动态代理和CGLIB字节码生成的区别？\n\nCGLib所创建的动态代理对象的性能比JDK的高大概10倍，但CGLib在创建代理对象的时间比JDK大概多8倍，所以对于singleton的代理对象或者具有实例池的代理，因为无需重复的创建代理对象，所以比较适合CGLib动态代理技术，反之选择JDK代理\n\n- JDK动态代理只能对实现了接口的类生成代理，而不能针对类\n\n- CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法\n\n  因为是继承，所以该类或方法最好不要声明成final \n\n### 答疑解惑\n\n#### invoke方法的第一个参数proxy到底有什么作用？\n\n这个问题其实也好理解，如果你的接口中有方法需要返回自身，如果在invoke中没有传入这个参数，将导致实例无法正常返回。在这种场景中，proxy的用途就表现出来了。简单来说，这其实就是最近非常火的链式编程的一种应用实现。\n\n#### 动态代理到底有什么用？\n\n学习任何一门技术，一定要问一问自己，这到底有什么用。其实，在这篇文章的讲解过程中，我们已经说出了它的主要用途。你发现没，使用动态代理我们居然可以在不改变源码的情况下，直接在方法中插入自定义逻辑。这有点不太符合我们的一条线走到底的编程逻辑，这种编程模型有一个专业名称叫 [AOP](https://baike.baidu.com/item/AOP/1332219)。所谓的AOP，就像刀一样，抓住时机，趁机插入。\n\n基于这样一种动态特性，我们可以用它做很多事情，例如：\n\n- 事务提交或回退（Web开发中很常见）\n- 权限管理\n- 自定义缓存逻辑处理\n\n","slug":"动态代理的实现方式与区别","published":1,"updated":"2020-07-09T13:26:53.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mlcw001xvkvy37blrp5q","content":"<h3 id=\"什么是代理\"><a href=\"#什么是代理\" class=\"headerlink\" title=\"什么是代理\"></a>什么是代理</h3><p>我个人理解代理就是让A类可以去调用B类的方法,从而可以在调用前后加上一些逻辑</p>\n<p>理解了代理的意思，你脑海中恐怕还有两个巨大的疑问：</p>\n<ul>\n<li>怎么实现代理模式</li>\n<li>代理模式有什么实际用途</li>\n</ul>\n<p>要理解这两个问题，看一个简单的例子：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Flyable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bird</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Flyable</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bird is flying...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            Thread<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>很简单的一个例子，用一个随机睡眠时间模拟小鸟在空中的飞行时间。接下来问题来了，如果我要知道小鸟在天空中飞行了多久，怎么办？</p>\n<p>有人说，很简单，在Bird-&gt;fly()方法的开头记录起始时间，在方法结束记录完成时间，两个时间相减就得到了飞行时间。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">   <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bird is flying...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            Thread<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">long</span> end <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fly time = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>的确，这个方法没有任何问题，接下来加大问题的难度。如果Bird这个类来自于某个SDK（或者说Jar包）提供，你无法改动源码，怎么办？</p>\n<p>一定会有人说，我可以在调用的地方这样写：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Bird bird <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bird</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bird<span class=\"token punctuation\">.</span><span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> end <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fly time = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个方案看起来似乎没有问题，但其实你忽略了准备这些方法所需要的时间，执行一个方法，需要开辟栈内存、压栈、出栈等操作，这部分时间也是不可以忽略的。因此，这个解决方案不可行。那么，还有什么方法可以做到呢？</p>\n<p><strong>使用继承</strong></p>\n<p>继承是最直观的解决方案，相信你已经想到了，至少我最开始想到的解决方案就是继承。为此，我们重新创建一个类Bird2，在Bird2中我们只做一件事情，就是调用父类的fly方法，在前后记录时间，并打印时间差：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bird2</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Bird</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">long</span> end <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fly time = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这是一种解决方案，还有一种解决方案叫做：<strong>聚合</strong>，其实也是比较容易想到的。我们再次创建新类Bird3，在Bird3的构造方法中传入Bird实例。同时，让Bird3也实现Flyable接口，并在fly方法中调用传入的Bird实例的fly方法：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bird3</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Flyable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> Bird bird<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Bird3</span><span class=\"token punctuation\">(</span>Bird bird<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bird <span class=\"token operator\">=</span> bird<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        bird<span class=\"token punctuation\">.</span><span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">long</span> end <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fly time = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>为了记录Bird-&gt;fly()方法的执行时间，我们在前后添加了记录时间的代码。同样地，通过这种方法我们也可以获得小鸟的飞行时间。那么，这两种方法孰优孰劣呢？咋一看，不好评判！</p>\n<p>继续深入思考，用问题推导来解答这个问题：</p>\n<p><strong>问题一</strong>：如果我还需要在fly方法前后打印日志，记录飞行开始和飞行结束，怎么办？有人说，很简单！继承Bird2并在在前后添加打印语句即可。那么，问题来了，请看问题二。</p>\n<p><strong>问题二</strong>：如果我需要调换执行顺序，先打印日志，再获取飞行时间，怎么办？有人说，再新建一个类Bird4继承Bird，打印日志。再新建一个类Bird5继承Bird4，获取方法执行时间。</p>\n<p>问题显而易见：使用继承将导致类无限制扩展，同时灵活性也无法获得保障。那么，使用 <a href=\"https://stackoverflow.com/questions/885937/what-is-the-difference-between-association-aggregation-and-composition\" target=\"_blank\" rel=\"noopener\">聚合</a> 是否可以避免这个问题呢？答案是：可以！但我们的类需要稍微改造一下。修改Bird3类，将聚合对象Bird类型修改为Flyable</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bird3</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Flyable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> Flyable flyable<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Bird3</span><span class=\"token punctuation\">(</span>Flyable flyable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flyable <span class=\"token operator\">=</span> flyable<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        flyable<span class=\"token punctuation\">.</span><span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">long</span> end <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fly time = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>为了让你看的更清楚，我将Bird3更名为BirdTimeProxy，即用于获取方法执行时间的代理的意思。同时我们新建BirdLogProxy代理类用于打印日志：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BirdLogProxy</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Flyable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> Flyable flyable<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">BirdLogProxy</span><span class=\"token punctuation\">(</span>Flyable flyable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flyable <span class=\"token operator\">=</span> flyable<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bird fly start...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        flyable<span class=\"token punctuation\">.</span><span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bird fly end...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接下来神奇的事情发生了，如果我们需要先记录日志，再获取飞行时间，可以在调用的地方这么做：</p>\n<pre><code>    public static void main(String[] args) {\n        Bird bird = new Bird();\n        BirdLogProxy p1 = new BirdLogProxy(bird);\n        BirdTimeProxy p2 = new BirdTimeProxy(p1);\n\n        p2.fly();\n    }</code></pre><p>反过来，可以这么做：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"> <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Bird bird <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bird</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        BirdTimeProxy p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BirdTimeProxy</span><span class=\"token punctuation\">(</span>bird<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        BirdLogProxy p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BirdLogProxy</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        p1<span class=\"token punctuation\">.</span><span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>看到这里，有同学可能会有疑问了。虽然现象看起来，聚合可以灵活调换执行顺序。可是，为什么 <a href=\"https://stackoverflow.com/questions/885937/what-is-the-difference-between-association-aggregation-and-composition\" target=\"_blank\" rel=\"noopener\">聚合</a> 可以做到，而继承不行呢。我们用一张图来解释一下：</p>\n<p><img src=\"/2020/01/06/dong-tai-dai-li-de-shi-xian-fang-shi-yu-qu-bie/1.png\" alt></p>\n<h3 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h3><p>接下来，观察上面的类BirdTimeProxy，在它的fly方法中我们直接调用了flyable-&gt;fly()方法。换而言之，BirdTimeProxy其实代理了传入的Flyable对象，这就是典型的静态代理实现。</p>\n<p>从表面上看，静态代理已经完美解决了我们的问题。可是，试想一下，如果我们需要计算SDK中100个方法的运行时间，同样的代码至少需要重复100次，并且创建至少100个代理类。往小了说，如果Bird类有多个方法，我们需要知道其他方法的运行时间，同样的代码也至少需要重复多次。因此，静态代理至少有以下两个局限性问题：</p>\n<ul>\n<li>如果同时代理多个类，依然会导致类无限制扩展</li>\n<li>如果类中有多个方法，同样的逻辑需要反复实现</li>\n</ul>\n<p>那么，我们是否可以使用同一个代理类来代理任意对象呢？我们以获取方法运行时间为例，是否可以使用同一个类（例如：TimeProxy）来计算任意对象的任一方法的执行时间呢？甚至再大胆一点，代理的逻辑也可以自己指定。比如，获取方法的执行时间，打印日志，这类逻辑都可以自己指定。这就是本文重点探讨的问题，也是最难理解的部分：<strong>动态代理</strong>。</p>\n<h3 id=\"使用动态代理\"><a href=\"#使用动态代理\" class=\"headerlink\" title=\"使用动态代理\"></a>使用动态代理</h3><h3 id=\"2-1-InvocationHandler接口\"><a href=\"#2-1-InvocationHandler接口\" class=\"headerlink\" title=\"2.1 InvocationHandler接口\"></a>2.1 InvocationHandler接口</h3><p>在使用动态代理时，我们需要定义一个位于代理类与委托类之间的中介类，这个中介类被要求实现InvocationHandler接口，这个接口的定义如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">/**\n * 调用处理程序\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">InvocationHandler</span> <span class=\"token punctuation\">{</span> \n    Object <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>Object proxy<span class=\"token punctuation\">,</span> Method method<span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>从InvocationHandler这个名称我们就可以知道，实现了这个接口的中介类用做“调用处理器”。当我们调用代理类对象的方法时，这个“调用”会转送到invoke方法中，代理类对象作为proxy参数传入，参数method标识了我们具体调用的是代理类的哪个方法，args为这个方法的参数。这样一来，我们对代理类中的所有方法的调用都会变为对invoke的调用，这样我们可以在invoke方法中添加统一的处理逻辑(也可以根据method参数对不同的代理类方法做不同的处理)。因此我们只需在中介类的invoke方法实现中输出“before”，然后调用委托类的invoke方法，再输出“after”。下面我们来一步一步具体实现它。</p>\n<h3 id=\"2-2-委托类的定义\"><a href=\"#2-2-委托类的定义\" class=\"headerlink\" title=\"2.2 委托类的定义\"></a>2.2 委托类的定义</h3><p>动态代理方式下，要求委托类必须实现某个接口，这里我们实现的是Flyable接口。委托类Bird类的定义如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Flyable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bird</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Flyable</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bird is flying...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            Thread<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-3中介类\"><a href=\"#2-3中介类\" class=\"headerlink\" title=\"2.3中介类\"></a>2.3中介类</h3><p>上面我们提到过，中介类必须实现InvocationHandler接口，作为调用处理器”拦截“对代理类方法的调用。中介类的定义如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DynamicProxy</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InvocationHandler</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token comment\" spellcheck=\"true\">//obj为委托类对象; </span>\n    <span class=\"token keyword\">private</span> Object obj<span class=\"token punctuation\">;</span> \n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">DynamicProxy</span><span class=\"token punctuation\">(</span>Object obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>obj <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n\n    <span class=\"token annotation punctuation\">@Override</span> \n    <span class=\"token keyword\">public</span> Object <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>Object proxy<span class=\"token punctuation\">,</span> Method method<span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> Throwable <span class=\"token punctuation\">{</span> \n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bird fly start...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Object result <span class=\"token operator\">=</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bird fly end...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>从以上代码中我们可以看到，中介类持有一个委托类对象引用，在invoke方法中调用了委托类对象的相应方法，看到这里是不是觉得似曾相识?</p>\n<p>通过聚合方式持有委托类对象引用，把外部对invoke的调用最终都转为对委托类对象的调用。这不就是我们上面介绍的静态代理的一种实现方式吗?</p>\n<p>实际上，中介类与委托类构成了静态代理关系，在这个关系中，中介类是代理类，委托类就是委托类;</p>\n<p>代理类与中介类也构成一个静态代理关系，在这个关系中，中介类是委托类，代理类是代理类。</p>\n<p>也就是说，<strong>动态代理关系由两组静态代理关系组成，这就是动态代理的原理</strong>。下面我们来介绍一下如何”指示“以动态生成代理类。</p>\n<h3 id=\"2-4动态生成代理类\"><a href=\"#2-4动态生成代理类\" class=\"headerlink\" title=\"2.4动态生成代理类\"></a>2.4动态生成代理类</h3><p>动态生成代理类的相关代码如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           Bird bird <span class=\"token operator\">=</span>  Proxy<span class=\"token punctuation\">.</span><span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span>Flyable<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>Bird<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyInvocationHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Bird</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        bird<span class=\"token punctuation\">.</span><span class=\"token function\">fly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在以上代码中，我们调用Proxy类的newProxyInstance方法来获取一个代理类实例。这个代理类实现了我们指定的接口并且会把方法调用分发到指定的调用处理器。这个方法的声明如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> Object <span class=\"token function\">newProxyInstance</span><span class=\"token punctuation\">(</span>ClassLoader loader<span class=\"token punctuation\">,</span> Class<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> interfaces<span class=\"token punctuation\">,</span> InvocationHandler h<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IllegalArgumentException <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>方法的三个参数含义分别如下：</p>\n<p>loader：定义了代理类的ClassLoder;interfaces：代理类实现的接口列表：调用处理器，也就是我们上面定义的实现了InvocationHandler接口的类实例</p>\n<p><strong>上面我们已经简单提到过动态代理的原理，这里再简单的总结下：首先通过newProxyInstance方法获取代理类实例，而后我们便可以通过这个代理类实例调用代理类的方法，对代理类的方法的调用实际上都会调用中介类(调用处理器)的invoke方法，在invoke方法中我们调用委托类的相应方法，并且可以添加自己的处理逻辑。</strong></p>\n<p>想象一下，到此为止，如果我们还需要对其它任意对象进行代理，是否还需要改动newProxyInstance方法的源码，答案是：完全不需要！</p>\n<p>只要你在newProxyInstance方法中指定代理需要实现的接口，指定用于自定义处理的InvocationHandler对象，整个代理的逻辑处理都在你自定义的InvocationHandler实现类中进行处理。至此，而我们终于可以从不断地写代理类用于实现自定义逻辑的重复工作中解放出来了，从此需要做什么，交给InvocationHandler。</p>\n<p>事实上，我们之前给自己定下的目标“使用同一个类来计算任意对象的任一方法的执行时间”已经实现了。严格来说，是我们超额完成了任务，TimeProxy不仅可以计算方法执行的时间，也可以打印方法执行日志，这完全取决于你的InvocationHandler接口实现。因此，这里取名为TimeProxy其实已经不合适了。</p>\n<h4 id=\"动态代理的实现方式与区别\"><a href=\"#动态代理的实现方式与区别\" class=\"headerlink\" title=\"动态代理的实现方式与区别\"></a>动态代理的实现方式与区别</h4><h5 id=\"jDK代理\"><a href=\"#jDK代理\" class=\"headerlink\" title=\"jDK代理\"></a>jDK代理</h5><p> JDK的动态代理主要涉及到java.lang.reflect包中的两个类：Proxy和InvocationHandler。其中 InvocationHandler是一个接口就是拦截器的接口。，可以通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，动态将横切逻辑和业务逻辑编织在一起，上面的实现就是通过JDK代理。</p>\n<p><strong>InvocationHandler的作用</strong></p>\n<p>在动态代理中InvocationHandler是核心，每个代理实例都具有一个关联的调用处理程序(InvocationHandler)。对代理实例调用方法时，将对方法调用进行编码并将其指派到它的调用处理程序(InvocationHandler)的 invoke 方法。所以对代理方法的调用都是通InvocationHadler的invoke来实现中，而invoke方法根据传入的代理对象，方法和参数来决定调用代理的哪个方法</p>\n<h5 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a><strong>代理模式</strong></h5><p>使用代理模式必须要让代理类和目标类实现相同的接口，客户端通过代理类来调用目标方法，代理类会将所有的方法调用分派到目标对象上反射执行，还可以在分派过程中添加”前置通知”和后置处理（如在调用目标方法前校验权限，在调用完目标方法后打印日志等）等功能。</p>\n<p>具体有如下四步骤：</p>\n<p>1.通过实现 InvocationHandler 接口创建自己的调用处理器；</p>\n<p>2.通过为 Proxy 类指定 ClassLoader 对象和一组 interface 来创建动态代理类；</p>\n<p>3.通过反射机制获得动态代理类的构造函数，其唯一参数类型是调用处理器接口类型；</p>\n<p>4.通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数被传入。</p>\n<h4 id=\"cglib代理\"><a href=\"#cglib代理\" class=\"headerlink\" title=\"cglib代理\"></a>cglib代理</h4><p>CGlib是一个强大的,高性能,高质量的Code生成类库。cglib封装了asm，可以在运行期动态生成新的class，它可以在运行期扩展Java类与实现Java接口。 CGLIB是<strong>针对类实现代理</strong>的，主要对指定的类生成一个子类，并覆盖其中的方法， 因为是继承，所以不能使用final来修饰类或方法。和jdk代理实现不同的是，cglib不要求类实现接口。</p>\n<p>JDK动态代理和CGLIB字节码生成的区别？</p>\n<p>CGLib所创建的动态代理对象的性能比JDK的高大概10倍，但CGLib在创建代理对象的时间比JDK大概多8倍，所以对于singleton的代理对象或者具有实例池的代理，因为无需重复的创建代理对象，所以比较适合CGLib动态代理技术，反之选择JDK代理</p>\n<ul>\n<li><p>JDK动态代理只能对实现了接口的类生成代理，而不能针对类</p>\n</li>\n<li><p>CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法</p>\n<p>因为是继承，所以该类或方法最好不要声明成final </p>\n</li>\n</ul>\n<h3 id=\"答疑解惑\"><a href=\"#答疑解惑\" class=\"headerlink\" title=\"答疑解惑\"></a>答疑解惑</h3><h4 id=\"invoke方法的第一个参数proxy到底有什么作用？\"><a href=\"#invoke方法的第一个参数proxy到底有什么作用？\" class=\"headerlink\" title=\"invoke方法的第一个参数proxy到底有什么作用？\"></a>invoke方法的第一个参数proxy到底有什么作用？</h4><p>这个问题其实也好理解，如果你的接口中有方法需要返回自身，如果在invoke中没有传入这个参数，将导致实例无法正常返回。在这种场景中，proxy的用途就表现出来了。简单来说，这其实就是最近非常火的链式编程的一种应用实现。</p>\n<h4 id=\"动态代理到底有什么用？\"><a href=\"#动态代理到底有什么用？\" class=\"headerlink\" title=\"动态代理到底有什么用？\"></a>动态代理到底有什么用？</h4><p>学习任何一门技术，一定要问一问自己，这到底有什么用。其实，在这篇文章的讲解过程中，我们已经说出了它的主要用途。你发现没，使用动态代理我们居然可以在不改变源码的情况下，直接在方法中插入自定义逻辑。这有点不太符合我们的一条线走到底的编程逻辑，这种编程模型有一个专业名称叫 <a href=\"https://baike.baidu.com/item/AOP/1332219\" target=\"_blank\" rel=\"noopener\">AOP</a>。所谓的AOP，就像刀一样，抓住时机，趁机插入。</p>\n<p>基于这样一种动态特性，我们可以用它做很多事情，例如：</p>\n<ul>\n<li>事务提交或回退（Web开发中很常见）</li>\n<li>权限管理</li>\n<li>自定义缓存逻辑处理</li>\n</ul>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h3 id=\"什么是代理\"><a href=\"#什么是代理\" class=\"headerlink\" title=\"什么是代理\"></a>什么是代理</h3><p>我个人理解代理就是让A类可以去调用B类的方法,从而可以在调用前后加上一些逻辑</p>\n<p>理解了代理的意思，你脑海中恐怕还有两个巨大的疑问：</p>\n<ul>\n<li>怎么实现代理模式</li>\n<li>代理模式有什么实际用途</li>\n</ul>\n<p>要理解这两个问题，看一个简单的例子：</p>\n<pre><code class=\"java\">public interface Flyable {\n    void fly();\n}\n\npublic class Bird implements Flyable {\n\n    @Override\n    public void fly() {\n        System.out.println(&quot;Bird is flying...&quot;);\n        try {\n            Thread.sleep(new Random().nextInt(1000));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}</code></pre>\n<p>很简单的一个例子，用一个随机睡眠时间模拟小鸟在空中的飞行时间。接下来问题来了，如果我要知道小鸟在天空中飞行了多久，怎么办？</p>\n<p>有人说，很简单，在Bird-&gt;fly()方法的开头记录起始时间，在方法结束记录完成时间，两个时间相减就得到了飞行时间。</p>\n<pre><code class=\"java\">   @Override\n    public void fly() {\n        long start = System.currentTimeMillis();\n        System.out.println(&quot;Bird is flying...&quot;);\n        try {\n            Thread.sleep(new Random().nextInt(1000));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        long end = System.currentTimeMillis();\n        System.out.println(&quot;Fly time = &quot; + (end - start));\n    }</code></pre>\n<p>的确，这个方法没有任何问题，接下来加大问题的难度。如果Bird这个类来自于某个SDK（或者说Jar包）提供，你无法改动源码，怎么办？</p>\n<p>一定会有人说，我可以在调用的地方这样写：</p>\n<pre><code class=\"java\">public static void main(String[] args) {\n        Bird bird = new Bird();\n        long start = System.currentTimeMillis();\n        bird.fly();\n        long end = System.currentTimeMillis();\n        System.out.println(&quot;Fly time = &quot; + (end - start));\n}</code></pre>\n<p>这个方案看起来似乎没有问题，但其实你忽略了准备这些方法所需要的时间，执行一个方法，需要开辟栈内存、压栈、出栈等操作，这部分时间也是不可以忽略的。因此，这个解决方案不可行。那么，还有什么方法可以做到呢？</p>\n<p><strong>使用继承</strong></p>\n<p>继承是最直观的解决方案，相信你已经想到了，至少我最开始想到的解决方案就是继承。为此，我们重新创建一个类Bird2，在Bird2中我们只做一件事情，就是调用父类的fly方法，在前后记录时间，并打印时间差：</p>\n<pre><code class=\"java\">public class Bird2 extends Bird {\n\n    @Override\n    public void fly() {\n        long start = System.currentTimeMillis();\n\n        super.fly();\n\n        long end = System.currentTimeMillis();\n        System.out.println(&quot;Fly time = &quot; + (end - start));\n    }\n}</code></pre>\n<p>这是一种解决方案，还有一种解决方案叫做：<strong>聚合</strong>，其实也是比较容易想到的。我们再次创建新类Bird3，在Bird3的构造方法中传入Bird实例。同时，让Bird3也实现Flyable接口，并在fly方法中调用传入的Bird实例的fly方法：</p>\n<pre><code class=\"java\">public class Bird3 implements Flyable {\n    private Bird bird;\n\n    public Bird3(Bird bird) {\n        this.bird = bird;\n    }\n\n    @Override\n    public void fly() {\n        long start = System.currentTimeMillis();\n\n        bird.fly();\n\n        long end = System.currentTimeMillis();\n        System.out.println(&quot;Fly time = &quot; + (end - start));\n    }\n}</code></pre>\n<p>为了记录Bird-&gt;fly()方法的执行时间，我们在前后添加了记录时间的代码。同样地，通过这种方法我们也可以获得小鸟的飞行时间。那么，这两种方法孰优孰劣呢？咋一看，不好评判！</p>\n<p>继续深入思考，用问题推导来解答这个问题：</p>\n<p><strong>问题一</strong>：如果我还需要在fly方法前后打印日志，记录飞行开始和飞行结束，怎么办？有人说，很简单！继承Bird2并在在前后添加打印语句即可。那么，问题来了，请看问题二。</p>\n<p><strong>问题二</strong>：如果我需要调换执行顺序，先打印日志，再获取飞行时间，怎么办？有人说，再新建一个类Bird4继承Bird，打印日志。再新建一个类Bird5继承Bird4，获取方法执行时间。</p>\n<p>问题显而易见：使用继承将导致类无限制扩展，同时灵活性也无法获得保障。那么，使用 <a href=\"https://stackoverflow.com/questions/885937/what-is-the-difference-between-association-aggregation-and-composition\" target=\"_blank\" rel=\"noopener\">聚合</a> 是否可以避免这个问题呢？答案是：可以！但我们的类需要稍微改造一下。修改Bird3类，将聚合对象Bird类型修改为Flyable</p>\n<pre><code class=\"java\">public class Bird3 implements Flyable {\n    private Flyable flyable;\n\n    public Bird3(Flyable flyable) {\n        this.flyable = flyable;\n    }\n\n    @Override\n    public void fly() {\n        long start = System.currentTimeMillis();\n\n        flyable.fly();\n\n        long end = System.currentTimeMillis();\n        System.out.println(&quot;Fly time = &quot; + (end - start));\n    }\n}</code></pre>\n<p>为了让你看的更清楚，我将Bird3更名为BirdTimeProxy，即用于获取方法执行时间的代理的意思。同时我们新建BirdLogProxy代理类用于打印日志：</p>\n<pre><code class=\"java\">public class BirdLogProxy implements Flyable {\n    private Flyable flyable;\n\n    public BirdLogProxy(Flyable flyable) {\n        this.flyable = flyable;\n    }\n\n    @Override\n    public void fly() {\n        System.out.println(&quot;Bird fly start...&quot;);\n\n        flyable.fly();\n\n        System.out.println(&quot;Bird fly end...&quot;);\n    }\n}</code></pre>\n<p>接下来神奇的事情发生了，如果我们需要先记录日志，再获取飞行时间，可以在调用的地方这么做：</p>\n<pre><code>    public static void main(String[] args) {\n        Bird bird = new Bird();\n        BirdLogProxy p1 = new BirdLogProxy(bird);\n        BirdTimeProxy p2 = new BirdTimeProxy(p1);\n\n        p2.fly();\n    }</code></pre><p>反过来，可以这么做：</p>\n<pre><code class=\"java\"> public static void main(String[] args) {\n        Bird bird = new Bird();\n        BirdTimeProxy p2 = new BirdTimeProxy(bird);\n        BirdLogProxy p1 = new BirdLogProxy(p2);\n\n        p1.fly();\n }</code></pre>\n<p>看到这里，有同学可能会有疑问了。虽然现象看起来，聚合可以灵活调换执行顺序。可是，为什么 <a href=\"https://stackoverflow.com/questions/885937/what-is-the-difference-between-association-aggregation-and-composition\" target=\"_blank\" rel=\"noopener\">聚合</a> 可以做到，而继承不行呢。我们用一张图来解释一下：</p>\n<p><img src=\"/2020/01/06/dong-tai-dai-li-de-shi-xian-fang-shi-yu-qu-bie/1.png\" alt></p>\n<h3 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h3><p>接下来，观察上面的类BirdTimeProxy，在它的fly方法中我们直接调用了flyable-&gt;fly()方法。换而言之，BirdTimeProxy其实代理了传入的Flyable对象，这就是典型的静态代理实现。</p>\n<p>从表面上看，静态代理已经完美解决了我们的问题。可是，试想一下，如果我们需要计算SDK中100个方法的运行时间，同样的代码至少需要重复100次，并且创建至少100个代理类。往小了说，如果Bird类有多个方法，我们需要知道其他方法的运行时间，同样的代码也至少需要重复多次。因此，静态代理至少有以下两个局限性问题：</p>\n<ul>\n<li>如果同时代理多个类，依然会导致类无限制扩展</li>\n<li>如果类中有多个方法，同样的逻辑需要反复实现</li>\n</ul>\n<p>那么，我们是否可以使用同一个代理类来代理任意对象呢？我们以获取方法运行时间为例，是否可以使用同一个类（例如：TimeProxy）来计算任意对象的任一方法的执行时间呢？甚至再大胆一点，代理的逻辑也可以自己指定。比如，获取方法的执行时间，打印日志，这类逻辑都可以自己指定。这就是本文重点探讨的问题，也是最难理解的部分：<strong>动态代理</strong>。</p>\n<h3 id=\"使用动态代理\"><a href=\"#使用动态代理\" class=\"headerlink\" title=\"使用动态代理\"></a>使用动态代理</h3><h3 id=\"2-1-InvocationHandler接口\"><a href=\"#2-1-InvocationHandler接口\" class=\"headerlink\" title=\"2.1 InvocationHandler接口\"></a>2.1 InvocationHandler接口</h3><p>在使用动态代理时，我们需要定义一个位于代理类与委托类之间的中介类，这个中介类被要求实现InvocationHandler接口，这个接口的定义如下：</p>\n<pre><code class=\"java\">/**\n * 调用处理程序\n */\npublic interface InvocationHandler { \n    Object invoke(Object proxy, Method method, Object[] args); \n} </code></pre>\n<p>从InvocationHandler这个名称我们就可以知道，实现了这个接口的中介类用做“调用处理器”。当我们调用代理类对象的方法时，这个“调用”会转送到invoke方法中，代理类对象作为proxy参数传入，参数method标识了我们具体调用的是代理类的哪个方法，args为这个方法的参数。这样一来，我们对代理类中的所有方法的调用都会变为对invoke的调用，这样我们可以在invoke方法中添加统一的处理逻辑(也可以根据method参数对不同的代理类方法做不同的处理)。因此我们只需在中介类的invoke方法实现中输出“before”，然后调用委托类的invoke方法，再输出“after”。下面我们来一步一步具体实现它。</p>\n<h3 id=\"2-2-委托类的定义\"><a href=\"#2-2-委托类的定义\" class=\"headerlink\" title=\"2.2 委托类的定义\"></a>2.2 委托类的定义</h3><p>动态代理方式下，要求委托类必须实现某个接口，这里我们实现的是Flyable接口。委托类Bird类的定义如下：</p>\n<pre><code class=\"java\">public interface Flyable {\n    void fly();\n}\n\npublic class Bird implements Flyable {\n\n    @Override\n    public void fly() {\n        System.out.println(&quot;Bird is flying...&quot;);\n        try {\n            Thread.sleep(new Random().nextInt(1000));\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}</code></pre>\n<h3 id=\"2-3中介类\"><a href=\"#2-3中介类\" class=\"headerlink\" title=\"2.3中介类\"></a>2.3中介类</h3><p>上面我们提到过，中介类必须实现InvocationHandler接口，作为调用处理器”拦截“对代理类方法的调用。中介类的定义如下：</p>\n<pre><code class=\"java\">public class DynamicProxy implements InvocationHandler { \n    //obj为委托类对象; \n    private Object obj; \n\n    public DynamicProxy(Object obj) {\n        this.obj = obj;\n    } \n\n    @Override \n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { \n        System.out.println(&quot;Bird fly start...&quot;);\n        Object result = method.invoke(obj, args); \n        System.out.println(&quot;Bird fly end...&quot;);\n        return result; \n    }\n} </code></pre>\n<p>从以上代码中我们可以看到，中介类持有一个委托类对象引用，在invoke方法中调用了委托类对象的相应方法，看到这里是不是觉得似曾相识?</p>\n<p>通过聚合方式持有委托类对象引用，把外部对invoke的调用最终都转为对委托类对象的调用。这不就是我们上面介绍的静态代理的一种实现方式吗?</p>\n<p>实际上，中介类与委托类构成了静态代理关系，在这个关系中，中介类是代理类，委托类就是委托类;</p>\n<p>代理类与中介类也构成一个静态代理关系，在这个关系中，中介类是委托类，代理类是代理类。</p>\n<p>也就是说，<strong>动态代理关系由两组静态代理关系组成，这就是动态代理的原理</strong>。下面我们来介绍一下如何”指示“以动态生成代理类。</p>\n<h3 id=\"2-4动态生成代理类\"><a href=\"#2-4动态生成代理类\" class=\"headerlink\" title=\"2.4动态生成代理类\"></a>2.4动态生成代理类</h3><p>动态生成代理类的相关代码如下：</p>\n<pre><code class=\"java\">public class Main { \n    public static void main(String[] args) {\n           Bird bird =  Proxy.newProxyInstance(Flyable.class,Bird.getClass().getClassLoader(), new MyInvocationHandler(new Bird()));\n        bird.fly();\n    }\n} </code></pre>\n<p>在以上代码中，我们调用Proxy类的newProxyInstance方法来获取一个代理类实例。这个代理类实现了我们指定的接口并且会把方法调用分发到指定的调用处理器。这个方法的声明如下：</p>\n<pre><code class=\"java\">public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h) throws IllegalArgumentException </code></pre>\n<p>方法的三个参数含义分别如下：</p>\n<p>loader：定义了代理类的ClassLoder;interfaces：代理类实现的接口列表：调用处理器，也就是我们上面定义的实现了InvocationHandler接口的类实例</p>\n<p><strong>上面我们已经简单提到过动态代理的原理，这里再简单的总结下：首先通过newProxyInstance方法获取代理类实例，而后我们便可以通过这个代理类实例调用代理类的方法，对代理类的方法的调用实际上都会调用中介类(调用处理器)的invoke方法，在invoke方法中我们调用委托类的相应方法，并且可以添加自己的处理逻辑。</strong></p>\n<p>想象一下，到此为止，如果我们还需要对其它任意对象进行代理，是否还需要改动newProxyInstance方法的源码，答案是：完全不需要！</p>\n<p>只要你在newProxyInstance方法中指定代理需要实现的接口，指定用于自定义处理的InvocationHandler对象，整个代理的逻辑处理都在你自定义的InvocationHandler实现类中进行处理。至此，而我们终于可以从不断地写代理类用于实现自定义逻辑的重复工作中解放出来了，从此需要做什么，交给InvocationHandler。</p>\n<p>事实上，我们之前给自己定下的目标“使用同一个类来计算任意对象的任一方法的执行时间”已经实现了。严格来说，是我们超额完成了任务，TimeProxy不仅可以计算方法执行的时间，也可以打印方法执行日志，这完全取决于你的InvocationHandler接口实现。因此，这里取名为TimeProxy其实已经不合适了。</p>\n<h4 id=\"动态代理的实现方式与区别\"><a href=\"#动态代理的实现方式与区别\" class=\"headerlink\" title=\"动态代理的实现方式与区别\"></a>动态代理的实现方式与区别</h4><h5 id=\"jDK代理\"><a href=\"#jDK代理\" class=\"headerlink\" title=\"jDK代理\"></a>jDK代理</h5><p> JDK的动态代理主要涉及到java.lang.reflect包中的两个类：Proxy和InvocationHandler。其中 InvocationHandler是一个接口就是拦截器的接口。，可以通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，动态将横切逻辑和业务逻辑编织在一起，上面的实现就是通过JDK代理。</p>\n<p><strong>InvocationHandler的作用</strong></p>\n<p>在动态代理中InvocationHandler是核心，每个代理实例都具有一个关联的调用处理程序(InvocationHandler)。对代理实例调用方法时，将对方法调用进行编码并将其指派到它的调用处理程序(InvocationHandler)的 invoke 方法。所以对代理方法的调用都是通InvocationHadler的invoke来实现中，而invoke方法根据传入的代理对象，方法和参数来决定调用代理的哪个方法</p>\n<h5 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a><strong>代理模式</strong></h5><p>使用代理模式必须要让代理类和目标类实现相同的接口，客户端通过代理类来调用目标方法，代理类会将所有的方法调用分派到目标对象上反射执行，还可以在分派过程中添加”前置通知”和后置处理（如在调用目标方法前校验权限，在调用完目标方法后打印日志等）等功能。</p>\n<p>具体有如下四步骤：</p>\n<p>1.通过实现 InvocationHandler 接口创建自己的调用处理器；</p>\n<p>2.通过为 Proxy 类指定 ClassLoader 对象和一组 interface 来创建动态代理类；</p>\n<p>3.通过反射机制获得动态代理类的构造函数，其唯一参数类型是调用处理器接口类型；</p>\n<p>4.通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数被传入。</p>\n<h4 id=\"cglib代理\"><a href=\"#cglib代理\" class=\"headerlink\" title=\"cglib代理\"></a>cglib代理</h4><p>CGlib是一个强大的,高性能,高质量的Code生成类库。cglib封装了asm，可以在运行期动态生成新的class，它可以在运行期扩展Java类与实现Java接口。 CGLIB是<strong>针对类实现代理</strong>的，主要对指定的类生成一个子类，并覆盖其中的方法， 因为是继承，所以不能使用final来修饰类或方法。和jdk代理实现不同的是，cglib不要求类实现接口。</p>\n<p>JDK动态代理和CGLIB字节码生成的区别？</p>\n<p>CGLib所创建的动态代理对象的性能比JDK的高大概10倍，但CGLib在创建代理对象的时间比JDK大概多8倍，所以对于singleton的代理对象或者具有实例池的代理，因为无需重复的创建代理对象，所以比较适合CGLib动态代理技术，反之选择JDK代理</p>\n<ul>\n<li><p>JDK动态代理只能对实现了接口的类生成代理，而不能针对类</p>\n</li>\n<li><p>CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法</p>\n<p>因为是继承，所以该类或方法最好不要声明成final </p>\n</li>\n</ul>\n<h3 id=\"答疑解惑\"><a href=\"#答疑解惑\" class=\"headerlink\" title=\"答疑解惑\"></a>答疑解惑</h3><h4 id=\"invoke方法的第一个参数proxy到底有什么作用？\"><a href=\"#invoke方法的第一个参数proxy到底有什么作用？\" class=\"headerlink\" title=\"invoke方法的第一个参数proxy到底有什么作用？\"></a>invoke方法的第一个参数proxy到底有什么作用？</h4><p>这个问题其实也好理解，如果你的接口中有方法需要返回自身，如果在invoke中没有传入这个参数，将导致实例无法正常返回。在这种场景中，proxy的用途就表现出来了。简单来说，这其实就是最近非常火的链式编程的一种应用实现。</p>\n<h4 id=\"动态代理到底有什么用？\"><a href=\"#动态代理到底有什么用？\" class=\"headerlink\" title=\"动态代理到底有什么用？\"></a>动态代理到底有什么用？</h4><p>学习任何一门技术，一定要问一问自己，这到底有什么用。其实，在这篇文章的讲解过程中，我们已经说出了它的主要用途。你发现没，使用动态代理我们居然可以在不改变源码的情况下，直接在方法中插入自定义逻辑。这有点不太符合我们的一条线走到底的编程逻辑，这种编程模型有一个专业名称叫 <a href=\"https://baike.baidu.com/item/AOP/1332219\" target=\"_blank\" rel=\"noopener\">AOP</a>。所谓的AOP，就像刀一样，抓住时机，趁机插入。</p>\n<p>基于这样一种动态特性，我们可以用它做很多事情，例如：</p>\n<ul>\n<li>事务提交或回退（Web开发中很常见）</li>\n<li>权限管理</li>\n<li>自定义缓存逻辑处理</li>\n</ul>\n"},{"title":"回头再看spring","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-04T06:59:57.000Z","password":null,"summary":null,"img":"/medias/featureimages/spring.png","_content":"\n## 回头再看Spring\n\n### 什么是Spring\n\nSpring是个包含一系列功能的合集，如快速构建微服务的Spring Boot，管理一系列微服务的Spring Cloud，支持认证与鉴权的Spring Security，基于MVC的Web框架Spring MVC。但IOC与AOP依然是核心。\n\n### Spring Bean\n\n**IOC的底层原理：文档解析xml文件，反射动态创建对象，然后保存name和Object，然后对每个对象属性进行属性注入**\n\n##### 加载Bean的主要逻辑\n\n​\t1.获取配置文件资源\n\n​\t2.对获取的xml资源进行一定的处理检验\n\n​\t3.处理包装资源\n\n​\t4.解析处理包装过后的资源\n\n​\t5.加载提取bean并注册(添加到beanDefinitionMap中\n\n##### Bean的生命周期\n\n- Bean的建立，由BeanFactory读取Bean定义文件，并创建Bean实例；\n- 执行Bean的属性注入,Setter注入；\n- 如果Bean类实现了org.springframework.beans.factory.BeanNameAware接口,则执行其setBeanName方法；\n- 如果Bean类实现了org.springframework.beans.factory.BeanFactoryAware接口,则执行其setBeanFactory方法；\n- 如果容器中有实现org.springframework.beans.factory.BeanPostProcessors接口的实例，则任何Bean在初始化之前都会执行这个实例的processBeforeInitialization()方法；\n- 如果Bean类实现了org.springframework.beans.factory.InitializingBean接口，则执行其afterPropertiesSet()方法；\n- 调用Bean的初始化方法”init-method” (！！注意，init-method方法没有参数)；\n- 如果容器中有实现org.springframework.beans.factory.BeanPostProcessors接口的实例，则任何Bean在初始化之后都会执行这个实例的processAfterInitialization()方法；\n- 使用Bean做一些业务逻辑….\n- 使用完，容器关闭，如果Bean类实现了org.springframework.beans.factory.DisposableBean接口，则执行它的destroy()方法；\n- 在容器关闭时，可以在Bean定义文件中使用“destory-method”定义的方法，销毁Bean (！！注意，destory-method方法没有参数)；\n\n#####  Bean的作用域\n\n- Singleton: 这是默认的作用域，这种范围确保不管接受多少个请求，每个容器中只有一个bean的实例，单例模式有BeanFactory自身维护；\n- Prototype: 原形范围与单例范围相反，为每一个bean请求提供一个实例；\n\n\n- Request: 在请求bean范围内会为每一个来自客户端的网络请求创建一个实例，在请求完成以后，bean会失效并被垃圾回收器回收；\n- Session: 与请求范围类似，确保每个session中有一个bean的实例，在session过期后，bean会随之失效；\n- global-session: global-session和Portlet应用相关。当你的应用部署在Portlet容器中工作时，它包含很多portlet。如果你想要声明让所有的portlet共用全局的存储变量的话，那么这全局变量需要存储在global-session中。\n\n### Spring IOC\n\nIOC(控制反转):本质就是自己的信息(全类名等)配置在文件中或者加上注解,让容器可以通过反射的方式来创建对象,从而接管对象,代替了自己通过new创建对象.其实就是讲对象的管理创建交给了容器来做.\n\n依赖注入:在运行过程中,会在需要这个对象的位置坐上一个标记,容器会负责创建对象实例并注入其中;\n\n#### Spring IOC容器的初始化过程\n\nIoC容器的初始化就是含有BeanDefinition信息的Resource的定位、载入、解析、注册四个过程，最终我们配置的bean，以beanDefinition的数据结构存在于IoC容器即内存中。\n\n##### Resource定位过程\n\n这个Resource定位指的是BeanDefinition的资源定位，它由ResourceLoader通过统一的Resource接口来完成，这个Resource对各种形式的BeanDefinition的使用提供了统一接口。\n\n##### BeanDefinition的载入\n\n该载入过程把用户定义好的Bean表示成IoC容器内部的数据结构，而这个容器内部的数据结构就BeanDefinition.\n\n##### 向IoC容器注册这些BeanDefinition\n\n这个过程是通过调用BeanDefinitionRegistry接口的实现来完成的，这个注册过程把载入过程中解析得到的BeanDefinition向IoC容器进行注册,在IoC容器内部将BeanDefinition注入到一个HashMap中去，Ioc容器是通过这个HashMap来持有这些BeanDefinition数据的。\n\n容器的初始化是通过AbstractApplicationContext的refresh()实现的。\n\n整个过程如下图:\n\n![](回头再看spring/1.png)\n\n### Spring AOP\n\n面向切面的编程，是一种编程技术，**是OOP（面向对象编程）的补充和完善**。OOP的执行是一种从上往下的流程，并没有从左到右的关系。因此在OOP编程中，会有大量的重复代码。而**AOP则是将这些与业务无关的重复代码抽取出来，然后再嵌入到业务代码当中**。常见的应用有：权限管理、日志、事务管理等。\n\n\n\nAOP有三种植入切面的方法：其一是编译期织入，这要求使用特殊的Java编译器，AspectJ是其中的代表者；其二是类装载期织入，而这要求使用特殊的类装载器，AspectJ和AspectWerkz是其中的代表者；其三为动态代理织入，在运行期为目标类添加增强生成子类的方式，**Spring AOP采用动态代理织入切面**。\n\nAspectJ是静态代理的增强，所谓的静态代理就是AOP框架会在编译阶段生成AOP代理类，因此也称为编译时增强。\n\n它会在**编译阶段**将Aspect织入Java字节码中， 运行的时候就是经过增强之后的AOP对象。\n\nAspectJ在编译时就增强了目标对象，Spring AOP的动态代理则是在每次运行时动态的增强，生成AOP代理对象，区别在于生成AOP代理对象的时机不同，相对来说**AspectJ的静态代理方式具有更好的性能**，但是AspectJ**需要特定的编译器**进行处理，而Spring AOP则无需特定的编译器处理。\n\nSpring AOP中的动态代理主要有两种方式，**JDK动态代理**和**CGLIB动态代理**。JDK动态代理通过反射来接收被代理的类，并且要求被代理的类必须实现一个接口。**JDK动态代理的核心是InvocationHandler接口和Proxy类**。\n\n如果目标类没有实现接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态地生成某个类的子类，注意，**CGLIB是通过继承的方式做的动态代理**，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的\n\n####  jDK代理\n\n JDK的动态代理主要涉及到java.lang.reflect包中的两个类：Proxy和InvocationHandler。其中 InvocationHandler是一个接口就是拦截器的接口。，可以通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，动态将横切逻辑和业务逻辑编织在一起。\n\n##### InvocationHandler的作用\n\n在动态代理中InvocationHandler是核心，每个代理实例都具有一个关联的调用处理程序(InvocationHandler)。对代理实例调用方法时，将对方法调用进行编码并将其指派到它的调用处理程序(InvocationHandler)的 invoke 方法。所以对代理方法的调用都是通InvocationHadler的invoke来实现中，而invoke方法根据传入的代理对象，方法和参数来决定调用代理的哪个方法\n\n##### 代理模式\n\n使用代理模式必须要让代理类和目标类实现相同的接口，客户端通过代理类来调用目标方法，代理类会将所有的方法调用分派到目标对象上反射执行，还可以在分派过程中添加\"前置通知\"和后置处理（如在调用目标方法前校验权限，在调用完目标方法后打印日志等）等功能。\n\n具体有如下四步骤：\n\n1.通过实现 InvocationHandler 接口创建自己的调用处理器；\n\n2.通过为 Proxy 类指定 ClassLoader 对象和一组 interface 来创建动态代理类；\n\n3.通过反射机制获得动态代理类的构造函数，其唯一参数类型是调用处理器接口类型；\n\n4.通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数被传入。\n\n![](回头再看spring/clipboard.png)\n\n####  利用cglib代理实现AOP\n\nCGlib是一个强大的,高性能,高质量的Code生成类库。cglib封装了asm，可以在运行期动态生成新的class，它可以在运行期扩展Java类与实现Java接口。 CGLIB是**针对类实现代理**的，主要对指定的类生成一个子类，并覆盖其中的方法， 因为是继承，所以不能使用final来修饰类或方法。和jdk代理实现不同的是，cglib不要求类实现接口。\n\nJDK动态代理和CGLIB字节码生成的区别？\n\nCGLib所创建的动态代理对象的性能比JDK的高大概10倍，但CGLib在创建代理对象的时间比JDK大概多8倍，所以对于singleton的代理对象或者具有实例池的代理，因为无需重复的创建代理对象，所以比较适合CGLib动态代理技术，反之选择JDK代理\n\n * JDK动态代理只能对实现了接口的类生成代理，而不能针对类\n\n * CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法\n\n   因为是继承，所以该类或方法最好不要声明成final \n\n1、如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP\n\n2、如果目标对象实现了接口，可以强制使用CGLIB实现AOP\n\n3、如果目标对象没有实现了接口，必须采用CGLIB库，spring会自动在JDK动态代理和CGLIB之间转换","source":"_posts/回头再看spring.md","raw":"---\ntitle: 回头再看spring\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-04 14:59:57\npassword:\nsummary:\ntags:\nimg: /medias/featureimages/spring.png\ncategories: java\n---\n\n## 回头再看Spring\n\n### 什么是Spring\n\nSpring是个包含一系列功能的合集，如快速构建微服务的Spring Boot，管理一系列微服务的Spring Cloud，支持认证与鉴权的Spring Security，基于MVC的Web框架Spring MVC。但IOC与AOP依然是核心。\n\n### Spring Bean\n\n**IOC的底层原理：文档解析xml文件，反射动态创建对象，然后保存name和Object，然后对每个对象属性进行属性注入**\n\n##### 加载Bean的主要逻辑\n\n​\t1.获取配置文件资源\n\n​\t2.对获取的xml资源进行一定的处理检验\n\n​\t3.处理包装资源\n\n​\t4.解析处理包装过后的资源\n\n​\t5.加载提取bean并注册(添加到beanDefinitionMap中\n\n##### Bean的生命周期\n\n- Bean的建立，由BeanFactory读取Bean定义文件，并创建Bean实例；\n- 执行Bean的属性注入,Setter注入；\n- 如果Bean类实现了org.springframework.beans.factory.BeanNameAware接口,则执行其setBeanName方法；\n- 如果Bean类实现了org.springframework.beans.factory.BeanFactoryAware接口,则执行其setBeanFactory方法；\n- 如果容器中有实现org.springframework.beans.factory.BeanPostProcessors接口的实例，则任何Bean在初始化之前都会执行这个实例的processBeforeInitialization()方法；\n- 如果Bean类实现了org.springframework.beans.factory.InitializingBean接口，则执行其afterPropertiesSet()方法；\n- 调用Bean的初始化方法”init-method” (！！注意，init-method方法没有参数)；\n- 如果容器中有实现org.springframework.beans.factory.BeanPostProcessors接口的实例，则任何Bean在初始化之后都会执行这个实例的processAfterInitialization()方法；\n- 使用Bean做一些业务逻辑….\n- 使用完，容器关闭，如果Bean类实现了org.springframework.beans.factory.DisposableBean接口，则执行它的destroy()方法；\n- 在容器关闭时，可以在Bean定义文件中使用“destory-method”定义的方法，销毁Bean (！！注意，destory-method方法没有参数)；\n\n#####  Bean的作用域\n\n- Singleton: 这是默认的作用域，这种范围确保不管接受多少个请求，每个容器中只有一个bean的实例，单例模式有BeanFactory自身维护；\n- Prototype: 原形范围与单例范围相反，为每一个bean请求提供一个实例；\n\n\n- Request: 在请求bean范围内会为每一个来自客户端的网络请求创建一个实例，在请求完成以后，bean会失效并被垃圾回收器回收；\n- Session: 与请求范围类似，确保每个session中有一个bean的实例，在session过期后，bean会随之失效；\n- global-session: global-session和Portlet应用相关。当你的应用部署在Portlet容器中工作时，它包含很多portlet。如果你想要声明让所有的portlet共用全局的存储变量的话，那么这全局变量需要存储在global-session中。\n\n### Spring IOC\n\nIOC(控制反转):本质就是自己的信息(全类名等)配置在文件中或者加上注解,让容器可以通过反射的方式来创建对象,从而接管对象,代替了自己通过new创建对象.其实就是讲对象的管理创建交给了容器来做.\n\n依赖注入:在运行过程中,会在需要这个对象的位置坐上一个标记,容器会负责创建对象实例并注入其中;\n\n#### Spring IOC容器的初始化过程\n\nIoC容器的初始化就是含有BeanDefinition信息的Resource的定位、载入、解析、注册四个过程，最终我们配置的bean，以beanDefinition的数据结构存在于IoC容器即内存中。\n\n##### Resource定位过程\n\n这个Resource定位指的是BeanDefinition的资源定位，它由ResourceLoader通过统一的Resource接口来完成，这个Resource对各种形式的BeanDefinition的使用提供了统一接口。\n\n##### BeanDefinition的载入\n\n该载入过程把用户定义好的Bean表示成IoC容器内部的数据结构，而这个容器内部的数据结构就BeanDefinition.\n\n##### 向IoC容器注册这些BeanDefinition\n\n这个过程是通过调用BeanDefinitionRegistry接口的实现来完成的，这个注册过程把载入过程中解析得到的BeanDefinition向IoC容器进行注册,在IoC容器内部将BeanDefinition注入到一个HashMap中去，Ioc容器是通过这个HashMap来持有这些BeanDefinition数据的。\n\n容器的初始化是通过AbstractApplicationContext的refresh()实现的。\n\n整个过程如下图:\n\n![](回头再看spring/1.png)\n\n### Spring AOP\n\n面向切面的编程，是一种编程技术，**是OOP（面向对象编程）的补充和完善**。OOP的执行是一种从上往下的流程，并没有从左到右的关系。因此在OOP编程中，会有大量的重复代码。而**AOP则是将这些与业务无关的重复代码抽取出来，然后再嵌入到业务代码当中**。常见的应用有：权限管理、日志、事务管理等。\n\n\n\nAOP有三种植入切面的方法：其一是编译期织入，这要求使用特殊的Java编译器，AspectJ是其中的代表者；其二是类装载期织入，而这要求使用特殊的类装载器，AspectJ和AspectWerkz是其中的代表者；其三为动态代理织入，在运行期为目标类添加增强生成子类的方式，**Spring AOP采用动态代理织入切面**。\n\nAspectJ是静态代理的增强，所谓的静态代理就是AOP框架会在编译阶段生成AOP代理类，因此也称为编译时增强。\n\n它会在**编译阶段**将Aspect织入Java字节码中， 运行的时候就是经过增强之后的AOP对象。\n\nAspectJ在编译时就增强了目标对象，Spring AOP的动态代理则是在每次运行时动态的增强，生成AOP代理对象，区别在于生成AOP代理对象的时机不同，相对来说**AspectJ的静态代理方式具有更好的性能**，但是AspectJ**需要特定的编译器**进行处理，而Spring AOP则无需特定的编译器处理。\n\nSpring AOP中的动态代理主要有两种方式，**JDK动态代理**和**CGLIB动态代理**。JDK动态代理通过反射来接收被代理的类，并且要求被代理的类必须实现一个接口。**JDK动态代理的核心是InvocationHandler接口和Proxy类**。\n\n如果目标类没有实现接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态地生成某个类的子类，注意，**CGLIB是通过继承的方式做的动态代理**，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的\n\n####  jDK代理\n\n JDK的动态代理主要涉及到java.lang.reflect包中的两个类：Proxy和InvocationHandler。其中 InvocationHandler是一个接口就是拦截器的接口。，可以通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，动态将横切逻辑和业务逻辑编织在一起。\n\n##### InvocationHandler的作用\n\n在动态代理中InvocationHandler是核心，每个代理实例都具有一个关联的调用处理程序(InvocationHandler)。对代理实例调用方法时，将对方法调用进行编码并将其指派到它的调用处理程序(InvocationHandler)的 invoke 方法。所以对代理方法的调用都是通InvocationHadler的invoke来实现中，而invoke方法根据传入的代理对象，方法和参数来决定调用代理的哪个方法\n\n##### 代理模式\n\n使用代理模式必须要让代理类和目标类实现相同的接口，客户端通过代理类来调用目标方法，代理类会将所有的方法调用分派到目标对象上反射执行，还可以在分派过程中添加\"前置通知\"和后置处理（如在调用目标方法前校验权限，在调用完目标方法后打印日志等）等功能。\n\n具体有如下四步骤：\n\n1.通过实现 InvocationHandler 接口创建自己的调用处理器；\n\n2.通过为 Proxy 类指定 ClassLoader 对象和一组 interface 来创建动态代理类；\n\n3.通过反射机制获得动态代理类的构造函数，其唯一参数类型是调用处理器接口类型；\n\n4.通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数被传入。\n\n![](回头再看spring/clipboard.png)\n\n####  利用cglib代理实现AOP\n\nCGlib是一个强大的,高性能,高质量的Code生成类库。cglib封装了asm，可以在运行期动态生成新的class，它可以在运行期扩展Java类与实现Java接口。 CGLIB是**针对类实现代理**的，主要对指定的类生成一个子类，并覆盖其中的方法， 因为是继承，所以不能使用final来修饰类或方法。和jdk代理实现不同的是，cglib不要求类实现接口。\n\nJDK动态代理和CGLIB字节码生成的区别？\n\nCGLib所创建的动态代理对象的性能比JDK的高大概10倍，但CGLib在创建代理对象的时间比JDK大概多8倍，所以对于singleton的代理对象或者具有实例池的代理，因为无需重复的创建代理对象，所以比较适合CGLib动态代理技术，反之选择JDK代理\n\n * JDK动态代理只能对实现了接口的类生成代理，而不能针对类\n\n * CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法\n\n   因为是继承，所以该类或方法最好不要声明成final \n\n1、如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP\n\n2、如果目标对象实现了接口，可以强制使用CGLIB实现AOP\n\n3、如果目标对象没有实现了接口，必须采用CGLIB库，spring会自动在JDK动态代理和CGLIB之间转换","slug":"回头再看spring","published":1,"updated":"2020-02-26T06:51:49.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mld0001zvkvyfudemxfk","content":"<h2 id=\"回头再看Spring\"><a href=\"#回头再看Spring\" class=\"headerlink\" title=\"回头再看Spring\"></a>回头再看Spring</h2><h3 id=\"什么是Spring\"><a href=\"#什么是Spring\" class=\"headerlink\" title=\"什么是Spring\"></a>什么是Spring</h3><p>Spring是个包含一系列功能的合集，如快速构建微服务的Spring Boot，管理一系列微服务的Spring Cloud，支持认证与鉴权的Spring Security，基于MVC的Web框架Spring MVC。但IOC与AOP依然是核心。</p>\n<h3 id=\"Spring-Bean\"><a href=\"#Spring-Bean\" class=\"headerlink\" title=\"Spring Bean\"></a>Spring Bean</h3><p><strong>IOC的底层原理：文档解析xml文件，反射动态创建对象，然后保存name和Object，然后对每个对象属性进行属性注入</strong></p>\n<h5 id=\"加载Bean的主要逻辑\"><a href=\"#加载Bean的主要逻辑\" class=\"headerlink\" title=\"加载Bean的主要逻辑\"></a>加载Bean的主要逻辑</h5><p>​    1.获取配置文件资源</p>\n<p>​    2.对获取的xml资源进行一定的处理检验</p>\n<p>​    3.处理包装资源</p>\n<p>​    4.解析处理包装过后的资源</p>\n<p>​    5.加载提取bean并注册(添加到beanDefinitionMap中</p>\n<h5 id=\"Bean的生命周期\"><a href=\"#Bean的生命周期\" class=\"headerlink\" title=\"Bean的生命周期\"></a>Bean的生命周期</h5><ul>\n<li>Bean的建立，由BeanFactory读取Bean定义文件，并创建Bean实例；</li>\n<li>执行Bean的属性注入,Setter注入；</li>\n<li>如果Bean类实现了org.springframework.beans.factory.BeanNameAware接口,则执行其setBeanName方法；</li>\n<li>如果Bean类实现了org.springframework.beans.factory.BeanFactoryAware接口,则执行其setBeanFactory方法；</li>\n<li>如果容器中有实现org.springframework.beans.factory.BeanPostProcessors接口的实例，则任何Bean在初始化之前都会执行这个实例的processBeforeInitialization()方法；</li>\n<li>如果Bean类实现了org.springframework.beans.factory.InitializingBean接口，则执行其afterPropertiesSet()方法；</li>\n<li>调用Bean的初始化方法”init-method” (！！注意，init-method方法没有参数)；</li>\n<li>如果容器中有实现org.springframework.beans.factory.BeanPostProcessors接口的实例，则任何Bean在初始化之后都会执行这个实例的processAfterInitialization()方法；</li>\n<li>使用Bean做一些业务逻辑….</li>\n<li>使用完，容器关闭，如果Bean类实现了org.springframework.beans.factory.DisposableBean接口，则执行它的destroy()方法；</li>\n<li>在容器关闭时，可以在Bean定义文件中使用“destory-method”定义的方法，销毁Bean (！！注意，destory-method方法没有参数)；</li>\n</ul>\n<h5 id=\"Bean的作用域\"><a href=\"#Bean的作用域\" class=\"headerlink\" title=\"Bean的作用域\"></a>Bean的作用域</h5><ul>\n<li>Singleton: 这是默认的作用域，这种范围确保不管接受多少个请求，每个容器中只有一个bean的实例，单例模式有BeanFactory自身维护；</li>\n<li>Prototype: 原形范围与单例范围相反，为每一个bean请求提供一个实例；</li>\n</ul>\n<ul>\n<li>Request: 在请求bean范围内会为每一个来自客户端的网络请求创建一个实例，在请求完成以后，bean会失效并被垃圾回收器回收；</li>\n<li>Session: 与请求范围类似，确保每个session中有一个bean的实例，在session过期后，bean会随之失效；</li>\n<li>global-session: global-session和Portlet应用相关。当你的应用部署在Portlet容器中工作时，它包含很多portlet。如果你想要声明让所有的portlet共用全局的存储变量的话，那么这全局变量需要存储在global-session中。</li>\n</ul>\n<h3 id=\"Spring-IOC\"><a href=\"#Spring-IOC\" class=\"headerlink\" title=\"Spring IOC\"></a>Spring IOC</h3><p>IOC(控制反转):本质就是自己的信息(全类名等)配置在文件中或者加上注解,让容器可以通过反射的方式来创建对象,从而接管对象,代替了自己通过new创建对象.其实就是讲对象的管理创建交给了容器来做.</p>\n<p>依赖注入:在运行过程中,会在需要这个对象的位置坐上一个标记,容器会负责创建对象实例并注入其中;</p>\n<h4 id=\"Spring-IOC容器的初始化过程\"><a href=\"#Spring-IOC容器的初始化过程\" class=\"headerlink\" title=\"Spring IOC容器的初始化过程\"></a>Spring IOC容器的初始化过程</h4><p>IoC容器的初始化就是含有BeanDefinition信息的Resource的定位、载入、解析、注册四个过程，最终我们配置的bean，以beanDefinition的数据结构存在于IoC容器即内存中。</p>\n<h5 id=\"Resource定位过程\"><a href=\"#Resource定位过程\" class=\"headerlink\" title=\"Resource定位过程\"></a>Resource定位过程</h5><p>这个Resource定位指的是BeanDefinition的资源定位，它由ResourceLoader通过统一的Resource接口来完成，这个Resource对各种形式的BeanDefinition的使用提供了统一接口。</p>\n<h5 id=\"BeanDefinition的载入\"><a href=\"#BeanDefinition的载入\" class=\"headerlink\" title=\"BeanDefinition的载入\"></a>BeanDefinition的载入</h5><p>该载入过程把用户定义好的Bean表示成IoC容器内部的数据结构，而这个容器内部的数据结构就BeanDefinition.</p>\n<h5 id=\"向IoC容器注册这些BeanDefinition\"><a href=\"#向IoC容器注册这些BeanDefinition\" class=\"headerlink\" title=\"向IoC容器注册这些BeanDefinition\"></a>向IoC容器注册这些BeanDefinition</h5><p>这个过程是通过调用BeanDefinitionRegistry接口的实现来完成的，这个注册过程把载入过程中解析得到的BeanDefinition向IoC容器进行注册,在IoC容器内部将BeanDefinition注入到一个HashMap中去，Ioc容器是通过这个HashMap来持有这些BeanDefinition数据的。</p>\n<p>容器的初始化是通过AbstractApplicationContext的refresh()实现的。</p>\n<p>整个过程如下图:</p>\n<p><img src=\"/2020/01/04/hui-tou-zai-kan-spring/1.png\" alt></p>\n<h3 id=\"Spring-AOP\"><a href=\"#Spring-AOP\" class=\"headerlink\" title=\"Spring AOP\"></a>Spring AOP</h3><p>面向切面的编程，是一种编程技术，<strong>是OOP（面向对象编程）的补充和完善</strong>。OOP的执行是一种从上往下的流程，并没有从左到右的关系。因此在OOP编程中，会有大量的重复代码。而<strong>AOP则是将这些与业务无关的重复代码抽取出来，然后再嵌入到业务代码当中</strong>。常见的应用有：权限管理、日志、事务管理等。</p>\n<p>AOP有三种植入切面的方法：其一是编译期织入，这要求使用特殊的Java编译器，AspectJ是其中的代表者；其二是类装载期织入，而这要求使用特殊的类装载器，AspectJ和AspectWerkz是其中的代表者；其三为动态代理织入，在运行期为目标类添加增强生成子类的方式，<strong>Spring AOP采用动态代理织入切面</strong>。</p>\n<p>AspectJ是静态代理的增强，所谓的静态代理就是AOP框架会在编译阶段生成AOP代理类，因此也称为编译时增强。</p>\n<p>它会在<strong>编译阶段</strong>将Aspect织入Java字节码中， 运行的时候就是经过增强之后的AOP对象。</p>\n<p>AspectJ在编译时就增强了目标对象，Spring AOP的动态代理则是在每次运行时动态的增强，生成AOP代理对象，区别在于生成AOP代理对象的时机不同，相对来说<strong>AspectJ的静态代理方式具有更好的性能</strong>，但是AspectJ<strong>需要特定的编译器</strong>进行处理，而Spring AOP则无需特定的编译器处理。</p>\n<p>Spring AOP中的动态代理主要有两种方式，<strong>JDK动态代理</strong>和<strong>CGLIB动态代理</strong>。JDK动态代理通过反射来接收被代理的类，并且要求被代理的类必须实现一个接口。<strong>JDK动态代理的核心是InvocationHandler接口和Proxy类</strong>。</p>\n<p>如果目标类没有实现接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态地生成某个类的子类，注意，<strong>CGLIB是通过继承的方式做的动态代理</strong>，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的</p>\n<h4 id=\"jDK代理\"><a href=\"#jDK代理\" class=\"headerlink\" title=\"jDK代理\"></a>jDK代理</h4><p> JDK的动态代理主要涉及到java.lang.reflect包中的两个类：Proxy和InvocationHandler。其中 InvocationHandler是一个接口就是拦截器的接口。，可以通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，动态将横切逻辑和业务逻辑编织在一起。</p>\n<h5 id=\"InvocationHandler的作用\"><a href=\"#InvocationHandler的作用\" class=\"headerlink\" title=\"InvocationHandler的作用\"></a>InvocationHandler的作用</h5><p>在动态代理中InvocationHandler是核心，每个代理实例都具有一个关联的调用处理程序(InvocationHandler)。对代理实例调用方法时，将对方法调用进行编码并将其指派到它的调用处理程序(InvocationHandler)的 invoke 方法。所以对代理方法的调用都是通InvocationHadler的invoke来实现中，而invoke方法根据传入的代理对象，方法和参数来决定调用代理的哪个方法</p>\n<h5 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h5><p>使用代理模式必须要让代理类和目标类实现相同的接口，客户端通过代理类来调用目标方法，代理类会将所有的方法调用分派到目标对象上反射执行，还可以在分派过程中添加”前置通知”和后置处理（如在调用目标方法前校验权限，在调用完目标方法后打印日志等）等功能。</p>\n<p>具体有如下四步骤：</p>\n<p>1.通过实现 InvocationHandler 接口创建自己的调用处理器；</p>\n<p>2.通过为 Proxy 类指定 ClassLoader 对象和一组 interface 来创建动态代理类；</p>\n<p>3.通过反射机制获得动态代理类的构造函数，其唯一参数类型是调用处理器接口类型；</p>\n<p>4.通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数被传入。</p>\n<p><img src=\"/2020/01/04/hui-tou-zai-kan-spring/clipboard.png\" alt></p>\n<h4 id=\"利用cglib代理实现AOP\"><a href=\"#利用cglib代理实现AOP\" class=\"headerlink\" title=\"利用cglib代理实现AOP\"></a>利用cglib代理实现AOP</h4><p>CGlib是一个强大的,高性能,高质量的Code生成类库。cglib封装了asm，可以在运行期动态生成新的class，它可以在运行期扩展Java类与实现Java接口。 CGLIB是<strong>针对类实现代理</strong>的，主要对指定的类生成一个子类，并覆盖其中的方法， 因为是继承，所以不能使用final来修饰类或方法。和jdk代理实现不同的是，cglib不要求类实现接口。</p>\n<p>JDK动态代理和CGLIB字节码生成的区别？</p>\n<p>CGLib所创建的动态代理对象的性能比JDK的高大概10倍，但CGLib在创建代理对象的时间比JDK大概多8倍，所以对于singleton的代理对象或者具有实例池的代理，因为无需重复的创建代理对象，所以比较适合CGLib动态代理技术，反之选择JDK代理</p>\n<ul>\n<li><p>JDK动态代理只能对实现了接口的类生成代理，而不能针对类</p>\n</li>\n<li><p>CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法</p>\n<p>因为是继承，所以该类或方法最好不要声明成final </p>\n</li>\n</ul>\n<p>1、如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP</p>\n<p>2、如果目标对象实现了接口，可以强制使用CGLIB实现AOP</p>\n<p>3、如果目标对象没有实现了接口，必须采用CGLIB库，spring会自动在JDK动态代理和CGLIB之间转换</p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h2 id=\"回头再看Spring\"><a href=\"#回头再看Spring\" class=\"headerlink\" title=\"回头再看Spring\"></a>回头再看Spring</h2><h3 id=\"什么是Spring\"><a href=\"#什么是Spring\" class=\"headerlink\" title=\"什么是Spring\"></a>什么是Spring</h3><p>Spring是个包含一系列功能的合集，如快速构建微服务的Spring Boot，管理一系列微服务的Spring Cloud，支持认证与鉴权的Spring Security，基于MVC的Web框架Spring MVC。但IOC与AOP依然是核心。</p>\n<h3 id=\"Spring-Bean\"><a href=\"#Spring-Bean\" class=\"headerlink\" title=\"Spring Bean\"></a>Spring Bean</h3><p><strong>IOC的底层原理：文档解析xml文件，反射动态创建对象，然后保存name和Object，然后对每个对象属性进行属性注入</strong></p>\n<h5 id=\"加载Bean的主要逻辑\"><a href=\"#加载Bean的主要逻辑\" class=\"headerlink\" title=\"加载Bean的主要逻辑\"></a>加载Bean的主要逻辑</h5><p>​    1.获取配置文件资源</p>\n<p>​    2.对获取的xml资源进行一定的处理检验</p>\n<p>​    3.处理包装资源</p>\n<p>​    4.解析处理包装过后的资源</p>\n<p>​    5.加载提取bean并注册(添加到beanDefinitionMap中</p>\n<h5 id=\"Bean的生命周期\"><a href=\"#Bean的生命周期\" class=\"headerlink\" title=\"Bean的生命周期\"></a>Bean的生命周期</h5><ul>\n<li>Bean的建立，由BeanFactory读取Bean定义文件，并创建Bean实例；</li>\n<li>执行Bean的属性注入,Setter注入；</li>\n<li>如果Bean类实现了org.springframework.beans.factory.BeanNameAware接口,则执行其setBeanName方法；</li>\n<li>如果Bean类实现了org.springframework.beans.factory.BeanFactoryAware接口,则执行其setBeanFactory方法；</li>\n<li>如果容器中有实现org.springframework.beans.factory.BeanPostProcessors接口的实例，则任何Bean在初始化之前都会执行这个实例的processBeforeInitialization()方法；</li>\n<li>如果Bean类实现了org.springframework.beans.factory.InitializingBean接口，则执行其afterPropertiesSet()方法；</li>\n<li>调用Bean的初始化方法”init-method” (！！注意，init-method方法没有参数)；</li>\n<li>如果容器中有实现org.springframework.beans.factory.BeanPostProcessors接口的实例，则任何Bean在初始化之后都会执行这个实例的processAfterInitialization()方法；</li>\n<li>使用Bean做一些业务逻辑….</li>\n<li>使用完，容器关闭，如果Bean类实现了org.springframework.beans.factory.DisposableBean接口，则执行它的destroy()方法；</li>\n<li>在容器关闭时，可以在Bean定义文件中使用“destory-method”定义的方法，销毁Bean (！！注意，destory-method方法没有参数)；</li>\n</ul>\n<h5 id=\"Bean的作用域\"><a href=\"#Bean的作用域\" class=\"headerlink\" title=\"Bean的作用域\"></a>Bean的作用域</h5><ul>\n<li>Singleton: 这是默认的作用域，这种范围确保不管接受多少个请求，每个容器中只有一个bean的实例，单例模式有BeanFactory自身维护；</li>\n<li>Prototype: 原形范围与单例范围相反，为每一个bean请求提供一个实例；</li>\n</ul>\n<ul>\n<li>Request: 在请求bean范围内会为每一个来自客户端的网络请求创建一个实例，在请求完成以后，bean会失效并被垃圾回收器回收；</li>\n<li>Session: 与请求范围类似，确保每个session中有一个bean的实例，在session过期后，bean会随之失效；</li>\n<li>global-session: global-session和Portlet应用相关。当你的应用部署在Portlet容器中工作时，它包含很多portlet。如果你想要声明让所有的portlet共用全局的存储变量的话，那么这全局变量需要存储在global-session中。</li>\n</ul>\n<h3 id=\"Spring-IOC\"><a href=\"#Spring-IOC\" class=\"headerlink\" title=\"Spring IOC\"></a>Spring IOC</h3><p>IOC(控制反转):本质就是自己的信息(全类名等)配置在文件中或者加上注解,让容器可以通过反射的方式来创建对象,从而接管对象,代替了自己通过new创建对象.其实就是讲对象的管理创建交给了容器来做.</p>\n<p>依赖注入:在运行过程中,会在需要这个对象的位置坐上一个标记,容器会负责创建对象实例并注入其中;</p>\n<h4 id=\"Spring-IOC容器的初始化过程\"><a href=\"#Spring-IOC容器的初始化过程\" class=\"headerlink\" title=\"Spring IOC容器的初始化过程\"></a>Spring IOC容器的初始化过程</h4><p>IoC容器的初始化就是含有BeanDefinition信息的Resource的定位、载入、解析、注册四个过程，最终我们配置的bean，以beanDefinition的数据结构存在于IoC容器即内存中。</p>\n<h5 id=\"Resource定位过程\"><a href=\"#Resource定位过程\" class=\"headerlink\" title=\"Resource定位过程\"></a>Resource定位过程</h5><p>这个Resource定位指的是BeanDefinition的资源定位，它由ResourceLoader通过统一的Resource接口来完成，这个Resource对各种形式的BeanDefinition的使用提供了统一接口。</p>\n<h5 id=\"BeanDefinition的载入\"><a href=\"#BeanDefinition的载入\" class=\"headerlink\" title=\"BeanDefinition的载入\"></a>BeanDefinition的载入</h5><p>该载入过程把用户定义好的Bean表示成IoC容器内部的数据结构，而这个容器内部的数据结构就BeanDefinition.</p>\n<h5 id=\"向IoC容器注册这些BeanDefinition\"><a href=\"#向IoC容器注册这些BeanDefinition\" class=\"headerlink\" title=\"向IoC容器注册这些BeanDefinition\"></a>向IoC容器注册这些BeanDefinition</h5><p>这个过程是通过调用BeanDefinitionRegistry接口的实现来完成的，这个注册过程把载入过程中解析得到的BeanDefinition向IoC容器进行注册,在IoC容器内部将BeanDefinition注入到一个HashMap中去，Ioc容器是通过这个HashMap来持有这些BeanDefinition数据的。</p>\n<p>容器的初始化是通过AbstractApplicationContext的refresh()实现的。</p>\n<p>整个过程如下图:</p>\n<p><img src=\"/2020/01/04/hui-tou-zai-kan-spring/1.png\" alt></p>\n<h3 id=\"Spring-AOP\"><a href=\"#Spring-AOP\" class=\"headerlink\" title=\"Spring AOP\"></a>Spring AOP</h3><p>面向切面的编程，是一种编程技术，<strong>是OOP（面向对象编程）的补充和完善</strong>。OOP的执行是一种从上往下的流程，并没有从左到右的关系。因此在OOP编程中，会有大量的重复代码。而<strong>AOP则是将这些与业务无关的重复代码抽取出来，然后再嵌入到业务代码当中</strong>。常见的应用有：权限管理、日志、事务管理等。</p>\n<p>AOP有三种植入切面的方法：其一是编译期织入，这要求使用特殊的Java编译器，AspectJ是其中的代表者；其二是类装载期织入，而这要求使用特殊的类装载器，AspectJ和AspectWerkz是其中的代表者；其三为动态代理织入，在运行期为目标类添加增强生成子类的方式，<strong>Spring AOP采用动态代理织入切面</strong>。</p>\n<p>AspectJ是静态代理的增强，所谓的静态代理就是AOP框架会在编译阶段生成AOP代理类，因此也称为编译时增强。</p>\n<p>它会在<strong>编译阶段</strong>将Aspect织入Java字节码中， 运行的时候就是经过增强之后的AOP对象。</p>\n<p>AspectJ在编译时就增强了目标对象，Spring AOP的动态代理则是在每次运行时动态的增强，生成AOP代理对象，区别在于生成AOP代理对象的时机不同，相对来说<strong>AspectJ的静态代理方式具有更好的性能</strong>，但是AspectJ<strong>需要特定的编译器</strong>进行处理，而Spring AOP则无需特定的编译器处理。</p>\n<p>Spring AOP中的动态代理主要有两种方式，<strong>JDK动态代理</strong>和<strong>CGLIB动态代理</strong>。JDK动态代理通过反射来接收被代理的类，并且要求被代理的类必须实现一个接口。<strong>JDK动态代理的核心是InvocationHandler接口和Proxy类</strong>。</p>\n<p>如果目标类没有实现接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态地生成某个类的子类，注意，<strong>CGLIB是通过继承的方式做的动态代理</strong>，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的</p>\n<h4 id=\"jDK代理\"><a href=\"#jDK代理\" class=\"headerlink\" title=\"jDK代理\"></a>jDK代理</h4><p> JDK的动态代理主要涉及到java.lang.reflect包中的两个类：Proxy和InvocationHandler。其中 InvocationHandler是一个接口就是拦截器的接口。，可以通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，动态将横切逻辑和业务逻辑编织在一起。</p>\n<h5 id=\"InvocationHandler的作用\"><a href=\"#InvocationHandler的作用\" class=\"headerlink\" title=\"InvocationHandler的作用\"></a>InvocationHandler的作用</h5><p>在动态代理中InvocationHandler是核心，每个代理实例都具有一个关联的调用处理程序(InvocationHandler)。对代理实例调用方法时，将对方法调用进行编码并将其指派到它的调用处理程序(InvocationHandler)的 invoke 方法。所以对代理方法的调用都是通InvocationHadler的invoke来实现中，而invoke方法根据传入的代理对象，方法和参数来决定调用代理的哪个方法</p>\n<h5 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h5><p>使用代理模式必须要让代理类和目标类实现相同的接口，客户端通过代理类来调用目标方法，代理类会将所有的方法调用分派到目标对象上反射执行，还可以在分派过程中添加”前置通知”和后置处理（如在调用目标方法前校验权限，在调用完目标方法后打印日志等）等功能。</p>\n<p>具体有如下四步骤：</p>\n<p>1.通过实现 InvocationHandler 接口创建自己的调用处理器；</p>\n<p>2.通过为 Proxy 类指定 ClassLoader 对象和一组 interface 来创建动态代理类；</p>\n<p>3.通过反射机制获得动态代理类的构造函数，其唯一参数类型是调用处理器接口类型；</p>\n<p>4.通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数被传入。</p>\n<p><img src=\"/2020/01/04/hui-tou-zai-kan-spring/clipboard.png\" alt></p>\n<h4 id=\"利用cglib代理实现AOP\"><a href=\"#利用cglib代理实现AOP\" class=\"headerlink\" title=\"利用cglib代理实现AOP\"></a>利用cglib代理实现AOP</h4><p>CGlib是一个强大的,高性能,高质量的Code生成类库。cglib封装了asm，可以在运行期动态生成新的class，它可以在运行期扩展Java类与实现Java接口。 CGLIB是<strong>针对类实现代理</strong>的，主要对指定的类生成一个子类，并覆盖其中的方法， 因为是继承，所以不能使用final来修饰类或方法。和jdk代理实现不同的是，cglib不要求类实现接口。</p>\n<p>JDK动态代理和CGLIB字节码生成的区别？</p>\n<p>CGLib所创建的动态代理对象的性能比JDK的高大概10倍，但CGLib在创建代理对象的时间比JDK大概多8倍，所以对于singleton的代理对象或者具有实例池的代理，因为无需重复的创建代理对象，所以比较适合CGLib动态代理技术，反之选择JDK代理</p>\n<ul>\n<li><p>JDK动态代理只能对实现了接口的类生成代理，而不能针对类</p>\n</li>\n<li><p>CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法</p>\n<p>因为是继承，所以该类或方法最好不要声明成final </p>\n</li>\n</ul>\n<p>1、如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP</p>\n<p>2、如果目标对象实现了接口，可以强制使用CGLIB实现AOP</p>\n<p>3、如果目标对象没有实现了接口，必须采用CGLIB库，spring会自动在JDK动态代理和CGLIB之间转换</p>\n"},{"title":"因特网五层架构","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-20T12:27:22.000Z","password":null,"summary":null,"_content":"\n#### 概述\n\nTCP/IP 协议不是 TCP 和 IP 这两个协议的合称，而是指因特网整个 TCP/IP 协议族。从协议分层模型方面来讲， **TCP/IP 由四个层次组成：网络接口层、网络层、传输层、应用层(因特网没有对链路层和物理层有任何规定,统一为为网络层提供服务的更底层)**。\n\n![](因特网五层架构/tcpip1.png)\n\n#### 网络接口层\n\n网络访问层(Network Access Layer)在 TCP/IP 参考模型中并没有详细描述,(**这也是为什么会有因特网是四层架构还是五层架构机构的问题,严格来说他的实现是五层,规定只有四层**) **只是指出主机必须使用某种协议与网络相连**。\n\n#### 网络层\n\n网络层(Internet Layer)是整个体系结构的关键部分，其功能是使主机可以把分组发往任何网络，并使分组独立地传向目标。这些分组可能经由不同的网络，到达的顺序和发送的顺序也可能不同。高层如果需要顺序收发，那么就必须自行处理对分组的排序。 一些书上也把网络层分开为控制平面和数据平面两个层面去讲解。**互联网层使用因特网协议(IP， Internet Protocol)**。\n\n#### 传输层\n\n传输层(Tramsport Layer)使源端和目的端机器上的对等实体可以进行会话。 **在这一层定义了两个端到端的协议**：传输控制协议(**TCP**， Transmission Control Protocol)和用户数据报协议(**UDP**， User Datagram Protocol)。 TCP 是面向连接的协议，它提供可靠的报文传输和对上层应用的连接服务。为此，除了基本的数据传输外，它还有可靠性保证、流量控制、多路复用、优先权和安全性控制等功能。 UDP 是面向无连接的不可靠传输的协议，主要用于实时性要求高但是对数据丢失可容忍的应用程序（微信视频等）。\n\n#### 应用层\n\n应用层为操作系统或网络应用程序提供访问网络服务的接口只要通过调用底层功能配合自身协议实现特定功能（如文件传输，域名解析,邮件传输）。\n\n#### 各层常见协议\n\n**应用层 文件传输，电子邮件，文件服务，虚拟终端 TFTP，HTTP，SNMP，FTP，SMTP，DNS，Telnet** \n**传输层 提供端对端的接口 TCP，UDP** \n**网络层 为数据包选择路由 IP，ICMP，RIP，OSPF，BGP，IGMP** \n**数据链路层 传输有地址的帧以及错误检测功能 SLIP，CSLIP，PPP，ARP，RARP，MTU** \n**物理层 以二进制数据形式在物理媒体上传输数据 ISO2110，IEEE802，IEEE802.2**","source":"_posts/因特网五层架构.md","raw":"---\ntitle: 因特网五层架构\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-20 20:27:22\npassword:\nsummary:\ntags:\ncategories: 计算机网络\n---\n\n#### 概述\n\nTCP/IP 协议不是 TCP 和 IP 这两个协议的合称，而是指因特网整个 TCP/IP 协议族。从协议分层模型方面来讲， **TCP/IP 由四个层次组成：网络接口层、网络层、传输层、应用层(因特网没有对链路层和物理层有任何规定,统一为为网络层提供服务的更底层)**。\n\n![](因特网五层架构/tcpip1.png)\n\n#### 网络接口层\n\n网络访问层(Network Access Layer)在 TCP/IP 参考模型中并没有详细描述,(**这也是为什么会有因特网是四层架构还是五层架构机构的问题,严格来说他的实现是五层,规定只有四层**) **只是指出主机必须使用某种协议与网络相连**。\n\n#### 网络层\n\n网络层(Internet Layer)是整个体系结构的关键部分，其功能是使主机可以把分组发往任何网络，并使分组独立地传向目标。这些分组可能经由不同的网络，到达的顺序和发送的顺序也可能不同。高层如果需要顺序收发，那么就必须自行处理对分组的排序。 一些书上也把网络层分开为控制平面和数据平面两个层面去讲解。**互联网层使用因特网协议(IP， Internet Protocol)**。\n\n#### 传输层\n\n传输层(Tramsport Layer)使源端和目的端机器上的对等实体可以进行会话。 **在这一层定义了两个端到端的协议**：传输控制协议(**TCP**， Transmission Control Protocol)和用户数据报协议(**UDP**， User Datagram Protocol)。 TCP 是面向连接的协议，它提供可靠的报文传输和对上层应用的连接服务。为此，除了基本的数据传输外，它还有可靠性保证、流量控制、多路复用、优先权和安全性控制等功能。 UDP 是面向无连接的不可靠传输的协议，主要用于实时性要求高但是对数据丢失可容忍的应用程序（微信视频等）。\n\n#### 应用层\n\n应用层为操作系统或网络应用程序提供访问网络服务的接口只要通过调用底层功能配合自身协议实现特定功能（如文件传输，域名解析,邮件传输）。\n\n#### 各层常见协议\n\n**应用层 文件传输，电子邮件，文件服务，虚拟终端 TFTP，HTTP，SNMP，FTP，SMTP，DNS，Telnet** \n**传输层 提供端对端的接口 TCP，UDP** \n**网络层 为数据包选择路由 IP，ICMP，RIP，OSPF，BGP，IGMP** \n**数据链路层 传输有地址的帧以及错误检测功能 SLIP，CSLIP，PPP，ARP，RARP，MTU** \n**物理层 以二进制数据形式在物理媒体上传输数据 ISO2110，IEEE802，IEEE802.2**","slug":"因特网五层架构","published":1,"updated":"2020-02-28T05:54:17.575Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mld30021vkvy0zw7fkur","content":"<h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p>TCP/IP 协议不是 TCP 和 IP 这两个协议的合称，而是指因特网整个 TCP/IP 协议族。从协议分层模型方面来讲， <strong>TCP/IP 由四个层次组成：网络接口层、网络层、传输层、应用层(因特网没有对链路层和物理层有任何规定,统一为为网络层提供服务的更底层)</strong>。</p>\n<p><img src=\"/2020/01/20/yin-te-wang-wu-ceng-jia-gou/tcpip1.png\" alt></p>\n<h4 id=\"网络接口层\"><a href=\"#网络接口层\" class=\"headerlink\" title=\"网络接口层\"></a>网络接口层</h4><p>网络访问层(Network Access Layer)在 TCP/IP 参考模型中并没有详细描述,(<strong>这也是为什么会有因特网是四层架构还是五层架构机构的问题,严格来说他的实现是五层,规定只有四层</strong>) <strong>只是指出主机必须使用某种协议与网络相连</strong>。</p>\n<h4 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h4><p>网络层(Internet Layer)是整个体系结构的关键部分，其功能是使主机可以把分组发往任何网络，并使分组独立地传向目标。这些分组可能经由不同的网络，到达的顺序和发送的顺序也可能不同。高层如果需要顺序收发，那么就必须自行处理对分组的排序。 一些书上也把网络层分开为控制平面和数据平面两个层面去讲解。<strong>互联网层使用因特网协议(IP， Internet Protocol)</strong>。</p>\n<h4 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层\"></a>传输层</h4><p>传输层(Tramsport Layer)使源端和目的端机器上的对等实体可以进行会话。 <strong>在这一层定义了两个端到端的协议</strong>：传输控制协议(<strong>TCP</strong>， Transmission Control Protocol)和用户数据报协议(<strong>UDP</strong>， User Datagram Protocol)。 TCP 是面向连接的协议，它提供可靠的报文传输和对上层应用的连接服务。为此，除了基本的数据传输外，它还有可靠性保证、流量控制、多路复用、优先权和安全性控制等功能。 UDP 是面向无连接的不可靠传输的协议，主要用于实时性要求高但是对数据丢失可容忍的应用程序（微信视频等）。</p>\n<h4 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h4><p>应用层为操作系统或网络应用程序提供访问网络服务的接口只要通过调用底层功能配合自身协议实现特定功能（如文件传输，域名解析,邮件传输）。</p>\n<h4 id=\"各层常见协议\"><a href=\"#各层常见协议\" class=\"headerlink\" title=\"各层常见协议\"></a>各层常见协议</h4><p><strong>应用层 文件传输，电子邮件，文件服务，虚拟终端 TFTP，HTTP，SNMP，FTP，SMTP，DNS，Telnet</strong><br><strong>传输层 提供端对端的接口 TCP，UDP</strong><br><strong>网络层 为数据包选择路由 IP，ICMP，RIP，OSPF，BGP，IGMP</strong><br><strong>数据链路层 传输有地址的帧以及错误检测功能 SLIP，CSLIP，PPP，ARP，RARP，MTU</strong><br><strong>物理层 以二进制数据形式在物理媒体上传输数据 ISO2110，IEEE802，IEEE802.2</strong></p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><p>TCP/IP 协议不是 TCP 和 IP 这两个协议的合称，而是指因特网整个 TCP/IP 协议族。从协议分层模型方面来讲， <strong>TCP/IP 由四个层次组成：网络接口层、网络层、传输层、应用层(因特网没有对链路层和物理层有任何规定,统一为为网络层提供服务的更底层)</strong>。</p>\n<p><img src=\"/2020/01/20/yin-te-wang-wu-ceng-jia-gou/tcpip1.png\" alt></p>\n<h4 id=\"网络接口层\"><a href=\"#网络接口层\" class=\"headerlink\" title=\"网络接口层\"></a>网络接口层</h4><p>网络访问层(Network Access Layer)在 TCP/IP 参考模型中并没有详细描述,(<strong>这也是为什么会有因特网是四层架构还是五层架构机构的问题,严格来说他的实现是五层,规定只有四层</strong>) <strong>只是指出主机必须使用某种协议与网络相连</strong>。</p>\n<h4 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h4><p>网络层(Internet Layer)是整个体系结构的关键部分，其功能是使主机可以把分组发往任何网络，并使分组独立地传向目标。这些分组可能经由不同的网络，到达的顺序和发送的顺序也可能不同。高层如果需要顺序收发，那么就必须自行处理对分组的排序。 一些书上也把网络层分开为控制平面和数据平面两个层面去讲解。<strong>互联网层使用因特网协议(IP， Internet Protocol)</strong>。</p>\n<h4 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层\"></a>传输层</h4><p>传输层(Tramsport Layer)使源端和目的端机器上的对等实体可以进行会话。 <strong>在这一层定义了两个端到端的协议</strong>：传输控制协议(<strong>TCP</strong>， Transmission Control Protocol)和用户数据报协议(<strong>UDP</strong>， User Datagram Protocol)。 TCP 是面向连接的协议，它提供可靠的报文传输和对上层应用的连接服务。为此，除了基本的数据传输外，它还有可靠性保证、流量控制、多路复用、优先权和安全性控制等功能。 UDP 是面向无连接的不可靠传输的协议，主要用于实时性要求高但是对数据丢失可容忍的应用程序（微信视频等）。</p>\n<h4 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h4><p>应用层为操作系统或网络应用程序提供访问网络服务的接口只要通过调用底层功能配合自身协议实现特定功能（如文件传输，域名解析,邮件传输）。</p>\n<h4 id=\"各层常见协议\"><a href=\"#各层常见协议\" class=\"headerlink\" title=\"各层常见协议\"></a>各层常见协议</h4><p><strong>应用层 文件传输，电子邮件，文件服务，虚拟终端 TFTP，HTTP，SNMP，FTP，SMTP，DNS，Telnet</strong><br><strong>传输层 提供端对端的接口 TCP，UDP</strong><br><strong>网络层 为数据包选择路由 IP，ICMP，RIP，OSPF，BGP，IGMP</strong><br><strong>数据链路层 传输有地址的帧以及错误检测功能 SLIP，CSLIP，PPP，ARP，RARP，MTU</strong><br><strong>物理层 以二进制数据形式在物理媒体上传输数据 ISO2110，IEEE802，IEEE802.2</strong></p>\n"},{"title":"多线程之缓存与主存一致性","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-15T13:49:38.000Z","password":null,"summary":null,"_content":"\n## 一、总线锁定和缓存一致性\n\n### 基本概念\n\n这是两个操作系统层面的概念。随着多核时代的到来，并发操作已经成了很正常的现象，操作系统必须要有一些机制和原语，以保证某些基本操作的原子性，比如处理器需要保证读一个字节或写一个字节是原子的，那么它是如何实现的呢?有两种机制：总线锁定和缓存一致性。\n\n我们知道，CPU和物理内存之间的通信速度远慢于CPU的处理速度，所以CPU有自己的内部缓存，根据一些规则将内存中的数据读取到内部缓存中来，以加快频繁读取的速度。我们假设在一台PC上只有一个CPU和一份内部缓存，那么所有进程和线程看到的数都是缓存里的数，不会存在问题;但现在服务器通常是多 CPU，更普遍的是，每块CPU里有多个内核，而每个内核都维护了自己的缓存，那么这时候多线程并发就会存在缓存不一致性，这会导致严重问题。\n\n以 i++为例，i的初始值是0.那么在开始每块缓存都存储了i的值0，当第一块内核做i++的时候，其缓存中的值变成了1，即使马上回写到主内存，那么在回写之后第二块内核缓存中的i值依然是0，其执行i++，回写到内存就会覆盖第一块内核的操作，使得最终的结果是1，而不是预期中的2.\n\n那么怎么解决整个问题呢?操作系统提供了总线锁定的机制。前端总线(也叫CPU总线)是所有CPU与芯片组连接的主干道，负责CPU与外界所有部件的通信，包括高速缓存、内存、北桥，其控制总线向各个部件发送控制信号、通过地址总线发送地址信号指定其要访问的部件、通过数据总线双向传输。在CPU1要做 i++操作的时候，其在总线上发出一个LOCK#信号，其他处理器就不能操作缓存了该共享变量内存地址的缓存，也就是阻塞了其他CPU，使该处理器可以独享此共享内存。\n\n但我们只需要对此共享变量的操作是原子就可以了，而总线锁定把CPU和内存的通信给锁住了，使得在锁定期间，其他处理器不能操作其他内存地址的数据，从而开销较大，所以后来的CPU都提供了缓存一致性机制，Intel的奔腾486之后就提供了这种优化。\n\n缓存一致性机制整体来说，是当某块CPU对缓存中的数据进行操作了之后，就通知其他CPU放弃储存在它们内部的缓存，或者从主内存中重新读取，如下图：\n\n![](多线程之缓存与主存一致性/20160613151013467.png)\n\n这里以在Intel系列中广泛使用的MESI协议详细阐述下其原理。\n\n### MESI协议\n\nMESI 协议是以缓存行(缓存的基本数据单位，在Intel的CPU上一般是64字节)的几个状态来命名的(全名是Modified、Exclusive、 Share or Invalid)。该协议要求在每个缓存行上维护两个状态位，使得每个数据单位可能处于M、E、S和I这四种状态之一，各种状态含义如下：\n\nM：被修改的。处于这一状态的数据，只在本CPU中有缓存数据，而其他CPU中没有。同时其状态相对于内存中的值来说，是已经被修改的，且没有更新到内存中。\n\nE：独占的。处于这一状态的数据，只有在本CPU中有缓存，且其数据没有修改，即与内存中一致。\n\nS：共享的。处于这一状态的数据在多个CPU中都有缓存，且与内存一致。\n\nI：无效的。本CPU中的这份缓存已经无效。\n\n这里首先介绍该协议约定的缓存上对应的监听：\n\n一个处于M状态的缓存行，必须时刻监听所有试图读取该缓存行对应的主存地址的操作，如果监听到，则必须在此操作执行前把其缓存行中的数据写回CPU。\n\n一个处于S状态的缓存行，必须时刻监听使该缓存行无效或者独享该缓存行的请求，如果监听到，则必须把其缓存行状态设置为I。\n\n一个处于E状态的缓存行，必须时刻监听其他试图读取该缓存行对应的主存地址的操作，如果监听到，则必须把其缓存行状态设置为S。\n\n当CPU需要读取数据时，如果其缓存行的状态是I的，则需要从内存中读取，并把自己状态变成S，如果不是I，则可以直接读取缓存中的值，但在此之前，必须要等待其他CPU的监听结果，如其他CPU也有该数据的缓存且状态是M，则需要等待其把缓存更新到内存之后，再读取。\n\n当CPU需要写数据时，只有在其缓存行是M或者E的时候才能执行，否则需要发出特殊的RFO指令(Read Or Ownership，这是一种总线事务)，通知其他CPU置缓存无效(I)，这种情况下会性能开销是相对较大的。在写入完成后，修改其缓存状态为M。\n\n所以如果一个变量在某段时间只被一个线程频繁地修改，则使用其内部缓存就完全可以办到，不涉及到总线事务，如果缓存一会被这个CPU独占、一会被那个CPU 独占，这时才会不断产生RFO指令影响到并发性能。这里说的缓存频繁被独占并不是指线程越多越容易触发，而是这里的CPU协调机制，这有点类似于有时多线程并不一定提高效率，原因是线程挂起、调度的开销比执行任务的开销还要大，这里的多CPU也是一样，如果在CPU间调度不合理，也会形成RFO指令的开销比任务开销还要大。当然，这不是编程者需要考虑的事，操作系统会有相应的内存地址的相关判断，这不在本文的讨论范围之内。\n\n并非所有情况都会使用缓存一致性的，如被操作的数据不能被缓存在CPU内部或操作数据跨越多个缓存行(状态无法标识)，则处理器会调用总线锁定;另外当CPU不支持缓存锁定时，自然也只能用总线锁定了，比如说奔腾486以及更老的CPU。\n\n## 二、CAS(Compare and Swap)\n\n有了上一章的总线锁定和缓存一致性的介绍，对CAS就比较好理解了，这不是java特有的，而是操作系统需要保证的。CAS指令在Intel CPU上称为CMPXCHG指令，它的作用是将指定内存地址的内容与所给的某个值相比，如果相等，则将其内容替换为指令中提供的新值，如果不相等，则更新失败。这一比较并交换的操作是原子的，不可以被中断，而其保证原子性的原理就是上一节提到的“总线锁定和缓存一致性”。初一看，CAS也包含了读取、比较 (这也是种操作)和写入这三个操作，和之前的i++并没有太大区别，是的，的确在操作上没有区别，但CAS是通过硬件命令保证了原子性，而i++没有，且硬件级别的原子性比i++这样高级语言的软件级别的运行速度要快地多。虽然CAS也包含了多个操作，但其的运算是固定的(就是个比较)，这样的锁定性能开销很小。\n\n随着互联网行业的兴起和硬件多CPU/多内核的进步，高并发已经成为越来越普遍的现象，CAS已经被越来越广泛地使用，在Java领域也是如此。JDK1.4是2002年2月发布的，当时的硬件设备远没有如今这么先进，多CPU和多核还没有普及，所以在JDK1.5之前的synchronized是使用挂起线程、等待调度的方式来实现线程同步，开销较大;而随着硬件的不断升级，在2004年9月发布的JDK5中引入了CAS机制——比较并交换——来彻底解决此问题，在一般情况下不再需要挂起(参考后文对锁级别的描述，只有进入重量级锁的时候才会使用挂起)，而是多次尝试，其利用底层CPU命令实现的乐观锁机制。从内存领域来说这是乐观锁，因为它在对共享变量更新之前会先比较当前值是否与更新前的值一致，如果是，则更新，如果不是，则无限循环执行(称为自旋)，直到当前值与更新前的值一致为止，才执行更新。\n\n以concurrent中的AtomicInteger的代码为例，其的getAndIncrement()方法(获得并且自增，即i++)源代码如下：\n\n\n\n```java\n   /**\n      * Atomically increments by one the current value.\n      *\n      * @return the previous value\n      */\n     public final int getAndIncrement() {\n         for (;;) {\n             int current = get();\n             int next = current + 1 ;\n             if (compareAndSet(current, next))\n                 return current;\n         }\n     }\n\n /**\n  * Atomically sets the value to the given updated value\n  * if the current value {@code ==} the expected value.\n  *\n  * @param expect the expected value\n  * @param update the new value\n  * @return true if successful. False return indicates that\n  * the actual value was not equal to the expected value.\n  */\n public final boolean compareAndSet( int expect, int update) {\n     return unsafe.compareAndSwapInt( this , valueOffset, expect, update);\n }\n```\n其调用了compareAndSet(int expect,int update)方法，其中expect是期望值，即操作前的原始值，而update是操作后的值，以i=2为例，则这里的 expect=2，update=3，它调用了sun.misc.Unsafe的compareAndSwapInt方法来执行，此方法代码如下：\n\n```java\n/***\n    * Compares the value of the integer field at the specified offset\n    * in the supplied object with the given expected value, and updates\n    * it if they match.  The operation of this method should be atomic,\n    * thus providing an uninterruptible way of updating an integer field.\n    *\n    * @param obj the object containing the field to modify.\n    * @param offset the offset of the integer field within <code>obj</code>.\n    * @param expect the expected value of the field.\n    * @param update the new value of the field if it equals <code>expect</code>.\n    * @return true if the field was changed.\n    */\n   public native boolean compareAndSwapInt(Object obj, long offset,\n                                           int expect, int update);\n```\n\n这是一个本地方法，即利用CAS保证其原子性，同时如果失败了则通过循环不断地进行运算直到成功为止，这是和JDK5以前最大的区别，失败的线程不再需要被挂起、重新调度，而是可以无障碍地再度执行，这又极大减少了挂起调度的开销(当然如果CAS长时间不成功，也会造成耗费CPU，这取决于具体应用场景)。\n\nCAS策略有如下需要注意的事项：\n\n在线程抢占资源特别频繁的时候(相对于CPU执行效率而言)，会造成长时间的自旋，耗费CPU性能。\n\n有ABA问题(即在更新前的值是A，但在操作过程中被其他线程更新为B，又更新为 A)，这时当前线程认为是可以执行的，其实是发生了不一致现象，如果这种不一致对程序有影响(真正有这种影响的场景很少，除非是在变量操作过程中以此变量为标识位做一些其他的事，比如初始化配置)，则需要使用AtomicStampedReference(除了对更新前的原值进行比较，也需要用更新前的 stamp标志位来进行比较)。\n\n只能对一个变量进行原子性操作。如果需要把多个变量作为一个整体来做原子性操作，则应该使用AtomicReference来把这些变量放在一个对象里，针对这个对象做原子性操作。\n\nCAS在JDK5中被J.U.C包广泛使用，在JDK6中被应用到synchronized的 JVM实现中，因此在JDK5中J.U.C的效率是比synchronized高不少的，而到了JDK6，两者效率相差无几，而synchronized 使用更简单、更不容易出错，所以其是专家组推荐的首选，除非需要用到J.U.C的特殊功能(如阻塞一段时间后放弃，而不是继续等待)。\n","source":"_posts/多线程之缓存与主存一致性.md","raw":"---\ntitle: 多线程之缓存与主存一致性\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-15 21:49:38\npassword:\nsummary:\ntags:\ncategories: java\n---\n\n## 一、总线锁定和缓存一致性\n\n### 基本概念\n\n这是两个操作系统层面的概念。随着多核时代的到来，并发操作已经成了很正常的现象，操作系统必须要有一些机制和原语，以保证某些基本操作的原子性，比如处理器需要保证读一个字节或写一个字节是原子的，那么它是如何实现的呢?有两种机制：总线锁定和缓存一致性。\n\n我们知道，CPU和物理内存之间的通信速度远慢于CPU的处理速度，所以CPU有自己的内部缓存，根据一些规则将内存中的数据读取到内部缓存中来，以加快频繁读取的速度。我们假设在一台PC上只有一个CPU和一份内部缓存，那么所有进程和线程看到的数都是缓存里的数，不会存在问题;但现在服务器通常是多 CPU，更普遍的是，每块CPU里有多个内核，而每个内核都维护了自己的缓存，那么这时候多线程并发就会存在缓存不一致性，这会导致严重问题。\n\n以 i++为例，i的初始值是0.那么在开始每块缓存都存储了i的值0，当第一块内核做i++的时候，其缓存中的值变成了1，即使马上回写到主内存，那么在回写之后第二块内核缓存中的i值依然是0，其执行i++，回写到内存就会覆盖第一块内核的操作，使得最终的结果是1，而不是预期中的2.\n\n那么怎么解决整个问题呢?操作系统提供了总线锁定的机制。前端总线(也叫CPU总线)是所有CPU与芯片组连接的主干道，负责CPU与外界所有部件的通信，包括高速缓存、内存、北桥，其控制总线向各个部件发送控制信号、通过地址总线发送地址信号指定其要访问的部件、通过数据总线双向传输。在CPU1要做 i++操作的时候，其在总线上发出一个LOCK#信号，其他处理器就不能操作缓存了该共享变量内存地址的缓存，也就是阻塞了其他CPU，使该处理器可以独享此共享内存。\n\n但我们只需要对此共享变量的操作是原子就可以了，而总线锁定把CPU和内存的通信给锁住了，使得在锁定期间，其他处理器不能操作其他内存地址的数据，从而开销较大，所以后来的CPU都提供了缓存一致性机制，Intel的奔腾486之后就提供了这种优化。\n\n缓存一致性机制整体来说，是当某块CPU对缓存中的数据进行操作了之后，就通知其他CPU放弃储存在它们内部的缓存，或者从主内存中重新读取，如下图：\n\n![](多线程之缓存与主存一致性/20160613151013467.png)\n\n这里以在Intel系列中广泛使用的MESI协议详细阐述下其原理。\n\n### MESI协议\n\nMESI 协议是以缓存行(缓存的基本数据单位，在Intel的CPU上一般是64字节)的几个状态来命名的(全名是Modified、Exclusive、 Share or Invalid)。该协议要求在每个缓存行上维护两个状态位，使得每个数据单位可能处于M、E、S和I这四种状态之一，各种状态含义如下：\n\nM：被修改的。处于这一状态的数据，只在本CPU中有缓存数据，而其他CPU中没有。同时其状态相对于内存中的值来说，是已经被修改的，且没有更新到内存中。\n\nE：独占的。处于这一状态的数据，只有在本CPU中有缓存，且其数据没有修改，即与内存中一致。\n\nS：共享的。处于这一状态的数据在多个CPU中都有缓存，且与内存一致。\n\nI：无效的。本CPU中的这份缓存已经无效。\n\n这里首先介绍该协议约定的缓存上对应的监听：\n\n一个处于M状态的缓存行，必须时刻监听所有试图读取该缓存行对应的主存地址的操作，如果监听到，则必须在此操作执行前把其缓存行中的数据写回CPU。\n\n一个处于S状态的缓存行，必须时刻监听使该缓存行无效或者独享该缓存行的请求，如果监听到，则必须把其缓存行状态设置为I。\n\n一个处于E状态的缓存行，必须时刻监听其他试图读取该缓存行对应的主存地址的操作，如果监听到，则必须把其缓存行状态设置为S。\n\n当CPU需要读取数据时，如果其缓存行的状态是I的，则需要从内存中读取，并把自己状态变成S，如果不是I，则可以直接读取缓存中的值，但在此之前，必须要等待其他CPU的监听结果，如其他CPU也有该数据的缓存且状态是M，则需要等待其把缓存更新到内存之后，再读取。\n\n当CPU需要写数据时，只有在其缓存行是M或者E的时候才能执行，否则需要发出特殊的RFO指令(Read Or Ownership，这是一种总线事务)，通知其他CPU置缓存无效(I)，这种情况下会性能开销是相对较大的。在写入完成后，修改其缓存状态为M。\n\n所以如果一个变量在某段时间只被一个线程频繁地修改，则使用其内部缓存就完全可以办到，不涉及到总线事务，如果缓存一会被这个CPU独占、一会被那个CPU 独占，这时才会不断产生RFO指令影响到并发性能。这里说的缓存频繁被独占并不是指线程越多越容易触发，而是这里的CPU协调机制，这有点类似于有时多线程并不一定提高效率，原因是线程挂起、调度的开销比执行任务的开销还要大，这里的多CPU也是一样，如果在CPU间调度不合理，也会形成RFO指令的开销比任务开销还要大。当然，这不是编程者需要考虑的事，操作系统会有相应的内存地址的相关判断，这不在本文的讨论范围之内。\n\n并非所有情况都会使用缓存一致性的，如被操作的数据不能被缓存在CPU内部或操作数据跨越多个缓存行(状态无法标识)，则处理器会调用总线锁定;另外当CPU不支持缓存锁定时，自然也只能用总线锁定了，比如说奔腾486以及更老的CPU。\n\n## 二、CAS(Compare and Swap)\n\n有了上一章的总线锁定和缓存一致性的介绍，对CAS就比较好理解了，这不是java特有的，而是操作系统需要保证的。CAS指令在Intel CPU上称为CMPXCHG指令，它的作用是将指定内存地址的内容与所给的某个值相比，如果相等，则将其内容替换为指令中提供的新值，如果不相等，则更新失败。这一比较并交换的操作是原子的，不可以被中断，而其保证原子性的原理就是上一节提到的“总线锁定和缓存一致性”。初一看，CAS也包含了读取、比较 (这也是种操作)和写入这三个操作，和之前的i++并没有太大区别，是的，的确在操作上没有区别，但CAS是通过硬件命令保证了原子性，而i++没有，且硬件级别的原子性比i++这样高级语言的软件级别的运行速度要快地多。虽然CAS也包含了多个操作，但其的运算是固定的(就是个比较)，这样的锁定性能开销很小。\n\n随着互联网行业的兴起和硬件多CPU/多内核的进步，高并发已经成为越来越普遍的现象，CAS已经被越来越广泛地使用，在Java领域也是如此。JDK1.4是2002年2月发布的，当时的硬件设备远没有如今这么先进，多CPU和多核还没有普及，所以在JDK1.5之前的synchronized是使用挂起线程、等待调度的方式来实现线程同步，开销较大;而随着硬件的不断升级，在2004年9月发布的JDK5中引入了CAS机制——比较并交换——来彻底解决此问题，在一般情况下不再需要挂起(参考后文对锁级别的描述，只有进入重量级锁的时候才会使用挂起)，而是多次尝试，其利用底层CPU命令实现的乐观锁机制。从内存领域来说这是乐观锁，因为它在对共享变量更新之前会先比较当前值是否与更新前的值一致，如果是，则更新，如果不是，则无限循环执行(称为自旋)，直到当前值与更新前的值一致为止，才执行更新。\n\n以concurrent中的AtomicInteger的代码为例，其的getAndIncrement()方法(获得并且自增，即i++)源代码如下：\n\n\n\n```java\n   /**\n      * Atomically increments by one the current value.\n      *\n      * @return the previous value\n      */\n     public final int getAndIncrement() {\n         for (;;) {\n             int current = get();\n             int next = current + 1 ;\n             if (compareAndSet(current, next))\n                 return current;\n         }\n     }\n\n /**\n  * Atomically sets the value to the given updated value\n  * if the current value {@code ==} the expected value.\n  *\n  * @param expect the expected value\n  * @param update the new value\n  * @return true if successful. False return indicates that\n  * the actual value was not equal to the expected value.\n  */\n public final boolean compareAndSet( int expect, int update) {\n     return unsafe.compareAndSwapInt( this , valueOffset, expect, update);\n }\n```\n其调用了compareAndSet(int expect,int update)方法，其中expect是期望值，即操作前的原始值，而update是操作后的值，以i=2为例，则这里的 expect=2，update=3，它调用了sun.misc.Unsafe的compareAndSwapInt方法来执行，此方法代码如下：\n\n```java\n/***\n    * Compares the value of the integer field at the specified offset\n    * in the supplied object with the given expected value, and updates\n    * it if they match.  The operation of this method should be atomic,\n    * thus providing an uninterruptible way of updating an integer field.\n    *\n    * @param obj the object containing the field to modify.\n    * @param offset the offset of the integer field within <code>obj</code>.\n    * @param expect the expected value of the field.\n    * @param update the new value of the field if it equals <code>expect</code>.\n    * @return true if the field was changed.\n    */\n   public native boolean compareAndSwapInt(Object obj, long offset,\n                                           int expect, int update);\n```\n\n这是一个本地方法，即利用CAS保证其原子性，同时如果失败了则通过循环不断地进行运算直到成功为止，这是和JDK5以前最大的区别，失败的线程不再需要被挂起、重新调度，而是可以无障碍地再度执行，这又极大减少了挂起调度的开销(当然如果CAS长时间不成功，也会造成耗费CPU，这取决于具体应用场景)。\n\nCAS策略有如下需要注意的事项：\n\n在线程抢占资源特别频繁的时候(相对于CPU执行效率而言)，会造成长时间的自旋，耗费CPU性能。\n\n有ABA问题(即在更新前的值是A，但在操作过程中被其他线程更新为B，又更新为 A)，这时当前线程认为是可以执行的，其实是发生了不一致现象，如果这种不一致对程序有影响(真正有这种影响的场景很少，除非是在变量操作过程中以此变量为标识位做一些其他的事，比如初始化配置)，则需要使用AtomicStampedReference(除了对更新前的原值进行比较，也需要用更新前的 stamp标志位来进行比较)。\n\n只能对一个变量进行原子性操作。如果需要把多个变量作为一个整体来做原子性操作，则应该使用AtomicReference来把这些变量放在一个对象里，针对这个对象做原子性操作。\n\nCAS在JDK5中被J.U.C包广泛使用，在JDK6中被应用到synchronized的 JVM实现中，因此在JDK5中J.U.C的效率是比synchronized高不少的，而到了JDK6，两者效率相差无几，而synchronized 使用更简单、更不容易出错，所以其是专家组推荐的首选，除非需要用到J.U.C的特殊功能(如阻塞一段时间后放弃，而不是继续等待)。\n","slug":"多线程之缓存与主存一致性","published":1,"updated":"2021-04-29T10:20:37.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mld50023vkvym5ov3iit","content":"<h2 id=\"一、总线锁定和缓存一致性\"><a href=\"#一、总线锁定和缓存一致性\" class=\"headerlink\" title=\"一、总线锁定和缓存一致性\"></a>一、总线锁定和缓存一致性</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>这是两个操作系统层面的概念。随着多核时代的到来，并发操作已经成了很正常的现象，操作系统必须要有一些机制和原语，以保证某些基本操作的原子性，比如处理器需要保证读一个字节或写一个字节是原子的，那么它是如何实现的呢?有两种机制：总线锁定和缓存一致性。</p>\n<p>我们知道，CPU和物理内存之间的通信速度远慢于CPU的处理速度，所以CPU有自己的内部缓存，根据一些规则将内存中的数据读取到内部缓存中来，以加快频繁读取的速度。我们假设在一台PC上只有一个CPU和一份内部缓存，那么所有进程和线程看到的数都是缓存里的数，不会存在问题;但现在服务器通常是多 CPU，更普遍的是，每块CPU里有多个内核，而每个内核都维护了自己的缓存，那么这时候多线程并发就会存在缓存不一致性，这会导致严重问题。</p>\n<p>以 i++为例，i的初始值是0.那么在开始每块缓存都存储了i的值0，当第一块内核做i++的时候，其缓存中的值变成了1，即使马上回写到主内存，那么在回写之后第二块内核缓存中的i值依然是0，其执行i++，回写到内存就会覆盖第一块内核的操作，使得最终的结果是1，而不是预期中的2.</p>\n<p>那么怎么解决整个问题呢?操作系统提供了总线锁定的机制。前端总线(也叫CPU总线)是所有CPU与芯片组连接的主干道，负责CPU与外界所有部件的通信，包括高速缓存、内存、北桥，其控制总线向各个部件发送控制信号、通过地址总线发送地址信号指定其要访问的部件、通过数据总线双向传输。在CPU1要做 i++操作的时候，其在总线上发出一个LOCK#信号，其他处理器就不能操作缓存了该共享变量内存地址的缓存，也就是阻塞了其他CPU，使该处理器可以独享此共享内存。</p>\n<p>但我们只需要对此共享变量的操作是原子就可以了，而总线锁定把CPU和内存的通信给锁住了，使得在锁定期间，其他处理器不能操作其他内存地址的数据，从而开销较大，所以后来的CPU都提供了缓存一致性机制，Intel的奔腾486之后就提供了这种优化。</p>\n<p>缓存一致性机制整体来说，是当某块CPU对缓存中的数据进行操作了之后，就通知其他CPU放弃储存在它们内部的缓存，或者从主内存中重新读取，如下图：</p>\n<p><img src=\"/2020/01/15/duo-xian-cheng-zhi-huan-cun-yu-zhu-cun-yi-zhi-xing/20160613151013467.png\" alt></p>\n<p>这里以在Intel系列中广泛使用的MESI协议详细阐述下其原理。</p>\n<h3 id=\"MESI协议\"><a href=\"#MESI协议\" class=\"headerlink\" title=\"MESI协议\"></a>MESI协议</h3><p>MESI 协议是以缓存行(缓存的基本数据单位，在Intel的CPU上一般是64字节)的几个状态来命名的(全名是Modified、Exclusive、 Share or Invalid)。该协议要求在每个缓存行上维护两个状态位，使得每个数据单位可能处于M、E、S和I这四种状态之一，各种状态含义如下：</p>\n<p>M：被修改的。处于这一状态的数据，只在本CPU中有缓存数据，而其他CPU中没有。同时其状态相对于内存中的值来说，是已经被修改的，且没有更新到内存中。</p>\n<p>E：独占的。处于这一状态的数据，只有在本CPU中有缓存，且其数据没有修改，即与内存中一致。</p>\n<p>S：共享的。处于这一状态的数据在多个CPU中都有缓存，且与内存一致。</p>\n<p>I：无效的。本CPU中的这份缓存已经无效。</p>\n<p>这里首先介绍该协议约定的缓存上对应的监听：</p>\n<p>一个处于M状态的缓存行，必须时刻监听所有试图读取该缓存行对应的主存地址的操作，如果监听到，则必须在此操作执行前把其缓存行中的数据写回CPU。</p>\n<p>一个处于S状态的缓存行，必须时刻监听使该缓存行无效或者独享该缓存行的请求，如果监听到，则必须把其缓存行状态设置为I。</p>\n<p>一个处于E状态的缓存行，必须时刻监听其他试图读取该缓存行对应的主存地址的操作，如果监听到，则必须把其缓存行状态设置为S。</p>\n<p>当CPU需要读取数据时，如果其缓存行的状态是I的，则需要从内存中读取，并把自己状态变成S，如果不是I，则可以直接读取缓存中的值，但在此之前，必须要等待其他CPU的监听结果，如其他CPU也有该数据的缓存且状态是M，则需要等待其把缓存更新到内存之后，再读取。</p>\n<p>当CPU需要写数据时，只有在其缓存行是M或者E的时候才能执行，否则需要发出特殊的RFO指令(Read Or Ownership，这是一种总线事务)，通知其他CPU置缓存无效(I)，这种情况下会性能开销是相对较大的。在写入完成后，修改其缓存状态为M。</p>\n<p>所以如果一个变量在某段时间只被一个线程频繁地修改，则使用其内部缓存就完全可以办到，不涉及到总线事务，如果缓存一会被这个CPU独占、一会被那个CPU 独占，这时才会不断产生RFO指令影响到并发性能。这里说的缓存频繁被独占并不是指线程越多越容易触发，而是这里的CPU协调机制，这有点类似于有时多线程并不一定提高效率，原因是线程挂起、调度的开销比执行任务的开销还要大，这里的多CPU也是一样，如果在CPU间调度不合理，也会形成RFO指令的开销比任务开销还要大。当然，这不是编程者需要考虑的事，操作系统会有相应的内存地址的相关判断，这不在本文的讨论范围之内。</p>\n<p>并非所有情况都会使用缓存一致性的，如被操作的数据不能被缓存在CPU内部或操作数据跨越多个缓存行(状态无法标识)，则处理器会调用总线锁定;另外当CPU不支持缓存锁定时，自然也只能用总线锁定了，比如说奔腾486以及更老的CPU。</p>\n<h2 id=\"二、CAS-Compare-and-Swap\"><a href=\"#二、CAS-Compare-and-Swap\" class=\"headerlink\" title=\"二、CAS(Compare and Swap)\"></a>二、CAS(Compare and Swap)</h2><p>有了上一章的总线锁定和缓存一致性的介绍，对CAS就比较好理解了，这不是java特有的，而是操作系统需要保证的。CAS指令在Intel CPU上称为CMPXCHG指令，它的作用是将指定内存地址的内容与所给的某个值相比，如果相等，则将其内容替换为指令中提供的新值，如果不相等，则更新失败。这一比较并交换的操作是原子的，不可以被中断，而其保证原子性的原理就是上一节提到的“总线锁定和缓存一致性”。初一看，CAS也包含了读取、比较 (这也是种操作)和写入这三个操作，和之前的i++并没有太大区别，是的，的确在操作上没有区别，但CAS是通过硬件命令保证了原子性，而i++没有，且硬件级别的原子性比i++这样高级语言的软件级别的运行速度要快地多。虽然CAS也包含了多个操作，但其的运算是固定的(就是个比较)，这样的锁定性能开销很小。</p>\n<p>随着互联网行业的兴起和硬件多CPU/多内核的进步，高并发已经成为越来越普遍的现象，CAS已经被越来越广泛地使用，在Java领域也是如此。JDK1.4是2002年2月发布的，当时的硬件设备远没有如今这么先进，多CPU和多核还没有普及，所以在JDK1.5之前的synchronized是使用挂起线程、等待调度的方式来实现线程同步，开销较大;而随着硬件的不断升级，在2004年9月发布的JDK5中引入了CAS机制——比较并交换——来彻底解决此问题，在一般情况下不再需要挂起(参考后文对锁级别的描述，只有进入重量级锁的时候才会使用挂起)，而是多次尝试，其利用底层CPU命令实现的乐观锁机制。从内存领域来说这是乐观锁，因为它在对共享变量更新之前会先比较当前值是否与更新前的值一致，如果是，则更新，如果不是，则无限循环执行(称为自旋)，直到当前值与更新前的值一致为止，才执行更新。</p>\n<p>以concurrent中的AtomicInteger的代码为例，其的getAndIncrement()方法(获得并且自增，即i++)源代码如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">   <span class=\"token comment\" spellcheck=\"true\">/**\n      * Atomically increments by one the current value.\n      *\n      * @return the previous value\n      */</span>\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token keyword\">int</span> current <span class=\"token operator\">=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">int</span> next <span class=\"token operator\">=</span> current <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span>\n             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token keyword\">return</span> current<span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n     <span class=\"token punctuation\">}</span>\n\n <span class=\"token comment\" spellcheck=\"true\">/**\n  * Atomically sets the value to the given updated value\n  * if the current value {@code ==} the expected value.\n  *\n  * @param expect the expected value\n  * @param update the new value\n  * @return true if successful. False return indicates that\n  * the actual value was not equal to the expected value.\n  */</span>\n <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> expect<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> update<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapInt</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span> <span class=\"token punctuation\">,</span> valueOffset<span class=\"token punctuation\">,</span> expect<span class=\"token punctuation\">,</span> update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其调用了compareAndSet(int expect,int update)方法，其中expect是期望值，即操作前的原始值，而update是操作后的值，以i=2为例，则这里的 expect=2，update=3，它调用了sun.misc.Unsafe的compareAndSwapInt方法来执行，此方法代码如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">/***\n    * Compares the value of the integer field at the specified offset\n    * in the supplied object with the given expected value, and updates\n    * it if they match.  The operation of this method should be atomic,\n    * thus providing an uninterruptible way of updating an integer field.\n    *\n    * @param obj the object containing the field to modify.\n    * @param offset the offset of the integer field within &lt;code>obj&lt;/code>.\n    * @param expect the expected value of the field.\n    * @param update the new value of the field if it equals &lt;code>expect&lt;/code>.\n    * @return true if the field was changed.\n    */</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">compareAndSwapInt</span><span class=\"token punctuation\">(</span>Object obj<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> offset<span class=\"token punctuation\">,</span>\n                                           <span class=\"token keyword\">int</span> expect<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这是一个本地方法，即利用CAS保证其原子性，同时如果失败了则通过循环不断地进行运算直到成功为止，这是和JDK5以前最大的区别，失败的线程不再需要被挂起、重新调度，而是可以无障碍地再度执行，这又极大减少了挂起调度的开销(当然如果CAS长时间不成功，也会造成耗费CPU，这取决于具体应用场景)。</p>\n<p>CAS策略有如下需要注意的事项：</p>\n<p>在线程抢占资源特别频繁的时候(相对于CPU执行效率而言)，会造成长时间的自旋，耗费CPU性能。</p>\n<p>有ABA问题(即在更新前的值是A，但在操作过程中被其他线程更新为B，又更新为 A)，这时当前线程认为是可以执行的，其实是发生了不一致现象，如果这种不一致对程序有影响(真正有这种影响的场景很少，除非是在变量操作过程中以此变量为标识位做一些其他的事，比如初始化配置)，则需要使用AtomicStampedReference(除了对更新前的原值进行比较，也需要用更新前的 stamp标志位来进行比较)。</p>\n<p>只能对一个变量进行原子性操作。如果需要把多个变量作为一个整体来做原子性操作，则应该使用AtomicReference来把这些变量放在一个对象里，针对这个对象做原子性操作。</p>\n<p>CAS在JDK5中被J.U.C包广泛使用，在JDK6中被应用到synchronized的 JVM实现中，因此在JDK5中J.U.C的效率是比synchronized高不少的，而到了JDK6，两者效率相差无几，而synchronized 使用更简单、更不容易出错，所以其是专家组推荐的首选，除非需要用到J.U.C的特殊功能(如阻塞一段时间后放弃，而不是继续等待)。</p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h2 id=\"一、总线锁定和缓存一致性\"><a href=\"#一、总线锁定和缓存一致性\" class=\"headerlink\" title=\"一、总线锁定和缓存一致性\"></a>一、总线锁定和缓存一致性</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>这是两个操作系统层面的概念。随着多核时代的到来，并发操作已经成了很正常的现象，操作系统必须要有一些机制和原语，以保证某些基本操作的原子性，比如处理器需要保证读一个字节或写一个字节是原子的，那么它是如何实现的呢?有两种机制：总线锁定和缓存一致性。</p>\n<p>我们知道，CPU和物理内存之间的通信速度远慢于CPU的处理速度，所以CPU有自己的内部缓存，根据一些规则将内存中的数据读取到内部缓存中来，以加快频繁读取的速度。我们假设在一台PC上只有一个CPU和一份内部缓存，那么所有进程和线程看到的数都是缓存里的数，不会存在问题;但现在服务器通常是多 CPU，更普遍的是，每块CPU里有多个内核，而每个内核都维护了自己的缓存，那么这时候多线程并发就会存在缓存不一致性，这会导致严重问题。</p>\n<p>以 i++为例，i的初始值是0.那么在开始每块缓存都存储了i的值0，当第一块内核做i++的时候，其缓存中的值变成了1，即使马上回写到主内存，那么在回写之后第二块内核缓存中的i值依然是0，其执行i++，回写到内存就会覆盖第一块内核的操作，使得最终的结果是1，而不是预期中的2.</p>\n<p>那么怎么解决整个问题呢?操作系统提供了总线锁定的机制。前端总线(也叫CPU总线)是所有CPU与芯片组连接的主干道，负责CPU与外界所有部件的通信，包括高速缓存、内存、北桥，其控制总线向各个部件发送控制信号、通过地址总线发送地址信号指定其要访问的部件、通过数据总线双向传输。在CPU1要做 i++操作的时候，其在总线上发出一个LOCK#信号，其他处理器就不能操作缓存了该共享变量内存地址的缓存，也就是阻塞了其他CPU，使该处理器可以独享此共享内存。</p>\n<p>但我们只需要对此共享变量的操作是原子就可以了，而总线锁定把CPU和内存的通信给锁住了，使得在锁定期间，其他处理器不能操作其他内存地址的数据，从而开销较大，所以后来的CPU都提供了缓存一致性机制，Intel的奔腾486之后就提供了这种优化。</p>\n<p>缓存一致性机制整体来说，是当某块CPU对缓存中的数据进行操作了之后，就通知其他CPU放弃储存在它们内部的缓存，或者从主内存中重新读取，如下图：</p>\n<p><img src=\"/2020/01/15/duo-xian-cheng-zhi-huan-cun-yu-zhu-cun-yi-zhi-xing/20160613151013467.png\" alt></p>\n<p>这里以在Intel系列中广泛使用的MESI协议详细阐述下其原理。</p>\n<h3 id=\"MESI协议\"><a href=\"#MESI协议\" class=\"headerlink\" title=\"MESI协议\"></a>MESI协议</h3><p>MESI 协议是以缓存行(缓存的基本数据单位，在Intel的CPU上一般是64字节)的几个状态来命名的(全名是Modified、Exclusive、 Share or Invalid)。该协议要求在每个缓存行上维护两个状态位，使得每个数据单位可能处于M、E、S和I这四种状态之一，各种状态含义如下：</p>\n<p>M：被修改的。处于这一状态的数据，只在本CPU中有缓存数据，而其他CPU中没有。同时其状态相对于内存中的值来说，是已经被修改的，且没有更新到内存中。</p>\n<p>E：独占的。处于这一状态的数据，只有在本CPU中有缓存，且其数据没有修改，即与内存中一致。</p>\n<p>S：共享的。处于这一状态的数据在多个CPU中都有缓存，且与内存一致。</p>\n<p>I：无效的。本CPU中的这份缓存已经无效。</p>\n<p>这里首先介绍该协议约定的缓存上对应的监听：</p>\n<p>一个处于M状态的缓存行，必须时刻监听所有试图读取该缓存行对应的主存地址的操作，如果监听到，则必须在此操作执行前把其缓存行中的数据写回CPU。</p>\n<p>一个处于S状态的缓存行，必须时刻监听使该缓存行无效或者独享该缓存行的请求，如果监听到，则必须把其缓存行状态设置为I。</p>\n<p>一个处于E状态的缓存行，必须时刻监听其他试图读取该缓存行对应的主存地址的操作，如果监听到，则必须把其缓存行状态设置为S。</p>\n<p>当CPU需要读取数据时，如果其缓存行的状态是I的，则需要从内存中读取，并把自己状态变成S，如果不是I，则可以直接读取缓存中的值，但在此之前，必须要等待其他CPU的监听结果，如其他CPU也有该数据的缓存且状态是M，则需要等待其把缓存更新到内存之后，再读取。</p>\n<p>当CPU需要写数据时，只有在其缓存行是M或者E的时候才能执行，否则需要发出特殊的RFO指令(Read Or Ownership，这是一种总线事务)，通知其他CPU置缓存无效(I)，这种情况下会性能开销是相对较大的。在写入完成后，修改其缓存状态为M。</p>\n<p>所以如果一个变量在某段时间只被一个线程频繁地修改，则使用其内部缓存就完全可以办到，不涉及到总线事务，如果缓存一会被这个CPU独占、一会被那个CPU 独占，这时才会不断产生RFO指令影响到并发性能。这里说的缓存频繁被独占并不是指线程越多越容易触发，而是这里的CPU协调机制，这有点类似于有时多线程并不一定提高效率，原因是线程挂起、调度的开销比执行任务的开销还要大，这里的多CPU也是一样，如果在CPU间调度不合理，也会形成RFO指令的开销比任务开销还要大。当然，这不是编程者需要考虑的事，操作系统会有相应的内存地址的相关判断，这不在本文的讨论范围之内。</p>\n<p>并非所有情况都会使用缓存一致性的，如被操作的数据不能被缓存在CPU内部或操作数据跨越多个缓存行(状态无法标识)，则处理器会调用总线锁定;另外当CPU不支持缓存锁定时，自然也只能用总线锁定了，比如说奔腾486以及更老的CPU。</p>\n<h2 id=\"二、CAS-Compare-and-Swap\"><a href=\"#二、CAS-Compare-and-Swap\" class=\"headerlink\" title=\"二、CAS(Compare and Swap)\"></a>二、CAS(Compare and Swap)</h2><p>有了上一章的总线锁定和缓存一致性的介绍，对CAS就比较好理解了，这不是java特有的，而是操作系统需要保证的。CAS指令在Intel CPU上称为CMPXCHG指令，它的作用是将指定内存地址的内容与所给的某个值相比，如果相等，则将其内容替换为指令中提供的新值，如果不相等，则更新失败。这一比较并交换的操作是原子的，不可以被中断，而其保证原子性的原理就是上一节提到的“总线锁定和缓存一致性”。初一看，CAS也包含了读取、比较 (这也是种操作)和写入这三个操作，和之前的i++并没有太大区别，是的，的确在操作上没有区别，但CAS是通过硬件命令保证了原子性，而i++没有，且硬件级别的原子性比i++这样高级语言的软件级别的运行速度要快地多。虽然CAS也包含了多个操作，但其的运算是固定的(就是个比较)，这样的锁定性能开销很小。</p>\n<p>随着互联网行业的兴起和硬件多CPU/多内核的进步，高并发已经成为越来越普遍的现象，CAS已经被越来越广泛地使用，在Java领域也是如此。JDK1.4是2002年2月发布的，当时的硬件设备远没有如今这么先进，多CPU和多核还没有普及，所以在JDK1.5之前的synchronized是使用挂起线程、等待调度的方式来实现线程同步，开销较大;而随着硬件的不断升级，在2004年9月发布的JDK5中引入了CAS机制——比较并交换——来彻底解决此问题，在一般情况下不再需要挂起(参考后文对锁级别的描述，只有进入重量级锁的时候才会使用挂起)，而是多次尝试，其利用底层CPU命令实现的乐观锁机制。从内存领域来说这是乐观锁，因为它在对共享变量更新之前会先比较当前值是否与更新前的值一致，如果是，则更新，如果不是，则无限循环执行(称为自旋)，直到当前值与更新前的值一致为止，才执行更新。</p>\n<p>以concurrent中的AtomicInteger的代码为例，其的getAndIncrement()方法(获得并且自增，即i++)源代码如下：</p>\n<pre><code class=\"java\">   /**\n      * Atomically increments by one the current value.\n      *\n      * @return the previous value\n      */\n     public final int getAndIncrement() {\n         for (;;) {\n             int current = get();\n             int next = current + 1 ;\n             if (compareAndSet(current, next))\n                 return current;\n         }\n     }\n\n /**\n  * Atomically sets the value to the given updated value\n  * if the current value {@code ==} the expected value.\n  *\n  * @param expect the expected value\n  * @param update the new value\n  * @return true if successful. False return indicates that\n  * the actual value was not equal to the expected value.\n  */\n public final boolean compareAndSet( int expect, int update) {\n     return unsafe.compareAndSwapInt( this , valueOffset, expect, update);\n }</code></pre>\n<p>其调用了compareAndSet(int expect,int update)方法，其中expect是期望值，即操作前的原始值，而update是操作后的值，以i=2为例，则这里的 expect=2，update=3，它调用了sun.misc.Unsafe的compareAndSwapInt方法来执行，此方法代码如下：</p>\n<pre><code class=\"java\">/***\n    * Compares the value of the integer field at the specified offset\n    * in the supplied object with the given expected value, and updates\n    * it if they match.  The operation of this method should be atomic,\n    * thus providing an uninterruptible way of updating an integer field.\n    *\n    * @param obj the object containing the field to modify.\n    * @param offset the offset of the integer field within &lt;code&gt;obj&lt;/code&gt;.\n    * @param expect the expected value of the field.\n    * @param update the new value of the field if it equals &lt;code&gt;expect&lt;/code&gt;.\n    * @return true if the field was changed.\n    */\n   public native boolean compareAndSwapInt(Object obj, long offset,\n                                           int expect, int update);</code></pre>\n<p>这是一个本地方法，即利用CAS保证其原子性，同时如果失败了则通过循环不断地进行运算直到成功为止，这是和JDK5以前最大的区别，失败的线程不再需要被挂起、重新调度，而是可以无障碍地再度执行，这又极大减少了挂起调度的开销(当然如果CAS长时间不成功，也会造成耗费CPU，这取决于具体应用场景)。</p>\n<p>CAS策略有如下需要注意的事项：</p>\n<p>在线程抢占资源特别频繁的时候(相对于CPU执行效率而言)，会造成长时间的自旋，耗费CPU性能。</p>\n<p>有ABA问题(即在更新前的值是A，但在操作过程中被其他线程更新为B，又更新为 A)，这时当前线程认为是可以执行的，其实是发生了不一致现象，如果这种不一致对程序有影响(真正有这种影响的场景很少，除非是在变量操作过程中以此变量为标识位做一些其他的事，比如初始化配置)，则需要使用AtomicStampedReference(除了对更新前的原值进行比较，也需要用更新前的 stamp标志位来进行比较)。</p>\n<p>只能对一个变量进行原子性操作。如果需要把多个变量作为一个整体来做原子性操作，则应该使用AtomicReference来把这些变量放在一个对象里，针对这个对象做原子性操作。</p>\n<p>CAS在JDK5中被J.U.C包广泛使用，在JDK6中被应用到synchronized的 JVM实现中，因此在JDK5中J.U.C的效率是比synchronized高不少的，而到了JDK6，两者效率相差无几，而synchronized 使用更简单、更不容易出错，所以其是专家组推荐的首选，除非需要用到J.U.C的特殊功能(如阻塞一段时间后放弃，而不是继续等待)。</p>\n"},{"title":"对MySQL执行引擎InnoDB的认识","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-02-29T01:21:20.000Z","password":null,"summary":null,"_content":"\n## InnoDB索引实现\n\n虽然InnoDB也使用B+Tree作为索引结构，但具体实现方式却与MyISAM截然不同。因为InnoDB支持聚簇索引（主键索引），聚簇索引就是表，所以InnoDB不用像MyISAM那样需要独立的行存储。也就是说，InnoDB的数据文件本身就是索引文件。\n\n聚簇索引的每一个叶子节点都包含了主键值、事务ID、用于事务和MVCC的回滚指针以及**所有的剩余列**。假设我们以col1为主键，则下图是一个InnoDB表的聚簇索引（主键索引）（Primary key）示意。\n\n![](对MySQL执行引擎InnoDB的认识/7.png)\n\n与MyISAM不同的是，InnoDB的二级索引和聚簇索引很不相同。**InnoDB的二级索引的叶子节点存储的不是行号（行指针），而是主键列**。这种策略的缺点是二级索引需要两次索引查找，第一次在二级索引中查找主键，第二次在聚簇索引中通过主键查找需要的数据行。\n\n画外音：可以通过我们前面提到过的**索引覆盖**来避免回表查询，这样就只需要一次回表查询，对于InnoDB而言，就是只需要一次索引查找就可以查询到需要的数据记录，因为需要的数据记录已经被索引到二级索引中，直接就可以找到。\n\n好处是InnoDB在移动行时无需更新一级索引中的这个”指针“，因为主键是不会改变的，但是行指针却会改变。\n\nInnoDB的二级索引示意如图：\n\n![](对MySQL执行引擎InnoDB的认识/6.png)\n\n### 使用InnoDB主键应该知道的事项\n\n因为InnoDB的索引的方式通过主键聚集数据，严重依赖主键。索引如果没有定义主键，那么InnoDB会选择一个唯一的非空索引代替。如果没有这样的索引，InnoDB会隐式定义一个主键来作为聚簇索引。\n\n**聚簇索引的优点有：**\n\n1.可以把相关数据存储在一起，减少数据查询时的磁盘I/O\n\n2.数据访问更快，因为聚簇索引就是表，索引和数据保存在一个B+Tree中\n\n3.使用索引覆盖的查询时可以直接使用页节点中的主键值\n\n**聚簇索引的缺点有：**\n\n1.插入速度严重依赖插入顺序\n\n2.更新聚簇索引列的代价很高，因为会强制InnoDB把更新的列移动到新的位置\n\n3.基于聚簇索引的表在插入新行，或者主键被更新导致需要移动行的时候，可能会导致“页分裂”。当行的主键值要求必须将这一行插入到已满的页中时，存储引擎会将该页分裂为两个页面来容纳该行，这就是一次页分裂操作，页分裂会导致表占用更多的存储空间。\n\n画外音：关于**页**，我们在上一篇文章中也提到过。页是计算机管理存储器的逻辑块，硬件及操作系统往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页。存和磁盘以页为单位交换数据。**数据库系统的设计者巧妙利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次磁盘I/O就可以完全载入**。\n\n基于聚簇索引以上的这些特点，**在InnoDB中，我们应该尽量使用和应用无关的主键，例如自增主键，这样可以保证数据行是按照顺序写入的**。而不是使用GUID、UUID生成随机的主键。\n\n**向聚簇索引中插入顺序的索引值：**\n\n每条新纪录总是在前一条记录的后面插入：\n\n![](对MySQL执行引擎InnoDB的认识/5.png)\n\n当页被插满后，继续插入到新的页：\n\n![](对MySQL执行引擎InnoDB的认识/4.png)\n\n**向聚簇索引中插入随机的索引值：**\n\n新的记录可能被插入到之前记录的中间，导致需要强制移动之前的记录：\n\n![](对MySQL执行引擎InnoDB的认识/3.png)\n\n被写满且已经刷到磁盘上的页可能会被重新读取用于再次插入，此时还需要进行页分裂：\n\n![](对MySQL执行引擎InnoDB的认识/2.png)\n\n## 总结\n\nMyISAM和InnoDB两个存储引擎的索引虽然都是使用的B+Tree数据结构，但是在具体实现上还是存在不小差别的。InnoDB支持聚簇索引，聚簇索引就是表，所以InnoDB不用像MyISAM那样需要独立的行存储。也就是说，InnoDB的数据文件本身就是索引文件。而MyISAM的数据文件和索引文件是分开存储的。可以通过MyISAM和InnoDB如何存放表的抽象图帮助快速理解。\n\n**InnoDB（聚簇）表分布：**\n\n![](对MySQL执行引擎InnoDB的认识/1.png)","source":"_posts/对MySQL执行引擎InnoDB的认识.md","raw":"---\ntitle: 对MySQL执行引擎InnoDB的认识\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-02-29 09:21:20\npassword:\nsummary:\ntags:\ncategories: 数据库\n---\n\n## InnoDB索引实现\n\n虽然InnoDB也使用B+Tree作为索引结构，但具体实现方式却与MyISAM截然不同。因为InnoDB支持聚簇索引（主键索引），聚簇索引就是表，所以InnoDB不用像MyISAM那样需要独立的行存储。也就是说，InnoDB的数据文件本身就是索引文件。\n\n聚簇索引的每一个叶子节点都包含了主键值、事务ID、用于事务和MVCC的回滚指针以及**所有的剩余列**。假设我们以col1为主键，则下图是一个InnoDB表的聚簇索引（主键索引）（Primary key）示意。\n\n![](对MySQL执行引擎InnoDB的认识/7.png)\n\n与MyISAM不同的是，InnoDB的二级索引和聚簇索引很不相同。**InnoDB的二级索引的叶子节点存储的不是行号（行指针），而是主键列**。这种策略的缺点是二级索引需要两次索引查找，第一次在二级索引中查找主键，第二次在聚簇索引中通过主键查找需要的数据行。\n\n画外音：可以通过我们前面提到过的**索引覆盖**来避免回表查询，这样就只需要一次回表查询，对于InnoDB而言，就是只需要一次索引查找就可以查询到需要的数据记录，因为需要的数据记录已经被索引到二级索引中，直接就可以找到。\n\n好处是InnoDB在移动行时无需更新一级索引中的这个”指针“，因为主键是不会改变的，但是行指针却会改变。\n\nInnoDB的二级索引示意如图：\n\n![](对MySQL执行引擎InnoDB的认识/6.png)\n\n### 使用InnoDB主键应该知道的事项\n\n因为InnoDB的索引的方式通过主键聚集数据，严重依赖主键。索引如果没有定义主键，那么InnoDB会选择一个唯一的非空索引代替。如果没有这样的索引，InnoDB会隐式定义一个主键来作为聚簇索引。\n\n**聚簇索引的优点有：**\n\n1.可以把相关数据存储在一起，减少数据查询时的磁盘I/O\n\n2.数据访问更快，因为聚簇索引就是表，索引和数据保存在一个B+Tree中\n\n3.使用索引覆盖的查询时可以直接使用页节点中的主键值\n\n**聚簇索引的缺点有：**\n\n1.插入速度严重依赖插入顺序\n\n2.更新聚簇索引列的代价很高，因为会强制InnoDB把更新的列移动到新的位置\n\n3.基于聚簇索引的表在插入新行，或者主键被更新导致需要移动行的时候，可能会导致“页分裂”。当行的主键值要求必须将这一行插入到已满的页中时，存储引擎会将该页分裂为两个页面来容纳该行，这就是一次页分裂操作，页分裂会导致表占用更多的存储空间。\n\n画外音：关于**页**，我们在上一篇文章中也提到过。页是计算机管理存储器的逻辑块，硬件及操作系统往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页。存和磁盘以页为单位交换数据。**数据库系统的设计者巧妙利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次磁盘I/O就可以完全载入**。\n\n基于聚簇索引以上的这些特点，**在InnoDB中，我们应该尽量使用和应用无关的主键，例如自增主键，这样可以保证数据行是按照顺序写入的**。而不是使用GUID、UUID生成随机的主键。\n\n**向聚簇索引中插入顺序的索引值：**\n\n每条新纪录总是在前一条记录的后面插入：\n\n![](对MySQL执行引擎InnoDB的认识/5.png)\n\n当页被插满后，继续插入到新的页：\n\n![](对MySQL执行引擎InnoDB的认识/4.png)\n\n**向聚簇索引中插入随机的索引值：**\n\n新的记录可能被插入到之前记录的中间，导致需要强制移动之前的记录：\n\n![](对MySQL执行引擎InnoDB的认识/3.png)\n\n被写满且已经刷到磁盘上的页可能会被重新读取用于再次插入，此时还需要进行页分裂：\n\n![](对MySQL执行引擎InnoDB的认识/2.png)\n\n## 总结\n\nMyISAM和InnoDB两个存储引擎的索引虽然都是使用的B+Tree数据结构，但是在具体实现上还是存在不小差别的。InnoDB支持聚簇索引，聚簇索引就是表，所以InnoDB不用像MyISAM那样需要独立的行存储。也就是说，InnoDB的数据文件本身就是索引文件。而MyISAM的数据文件和索引文件是分开存储的。可以通过MyISAM和InnoDB如何存放表的抽象图帮助快速理解。\n\n**InnoDB（聚簇）表分布：**\n\n![](对MySQL执行引擎InnoDB的认识/1.png)","slug":"对MySQL执行引擎InnoDB的认识","published":1,"updated":"2020-02-29T07:52:35.943Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mld90025vkvybtxkxowb","content":"<h2 id=\"InnoDB索引实现\"><a href=\"#InnoDB索引实现\" class=\"headerlink\" title=\"InnoDB索引实现\"></a>InnoDB索引实现</h2><p>虽然InnoDB也使用B+Tree作为索引结构，但具体实现方式却与MyISAM截然不同。因为InnoDB支持聚簇索引（主键索引），聚簇索引就是表，所以InnoDB不用像MyISAM那样需要独立的行存储。也就是说，InnoDB的数据文件本身就是索引文件。</p>\n<p>聚簇索引的每一个叶子节点都包含了主键值、事务ID、用于事务和MVCC的回滚指针以及<strong>所有的剩余列</strong>。假设我们以col1为主键，则下图是一个InnoDB表的聚簇索引（主键索引）（Primary key）示意。</p>\n<p><img src=\"/2020/02/29/dui-mysql-zhi-xing-yin-qing-innodb-de-ren-shi/7.png\" alt></p>\n<p>与MyISAM不同的是，InnoDB的二级索引和聚簇索引很不相同。<strong>InnoDB的二级索引的叶子节点存储的不是行号（行指针），而是主键列</strong>。这种策略的缺点是二级索引需要两次索引查找，第一次在二级索引中查找主键，第二次在聚簇索引中通过主键查找需要的数据行。</p>\n<p>画外音：可以通过我们前面提到过的<strong>索引覆盖</strong>来避免回表查询，这样就只需要一次回表查询，对于InnoDB而言，就是只需要一次索引查找就可以查询到需要的数据记录，因为需要的数据记录已经被索引到二级索引中，直接就可以找到。</p>\n<p>好处是InnoDB在移动行时无需更新一级索引中的这个”指针“，因为主键是不会改变的，但是行指针却会改变。</p>\n<p>InnoDB的二级索引示意如图：</p>\n<p><img src=\"/2020/02/29/dui-mysql-zhi-xing-yin-qing-innodb-de-ren-shi/6.png\" alt></p>\n<h3 id=\"使用InnoDB主键应该知道的事项\"><a href=\"#使用InnoDB主键应该知道的事项\" class=\"headerlink\" title=\"使用InnoDB主键应该知道的事项\"></a>使用InnoDB主键应该知道的事项</h3><p>因为InnoDB的索引的方式通过主键聚集数据，严重依赖主键。索引如果没有定义主键，那么InnoDB会选择一个唯一的非空索引代替。如果没有这样的索引，InnoDB会隐式定义一个主键来作为聚簇索引。</p>\n<p><strong>聚簇索引的优点有：</strong></p>\n<p>1.可以把相关数据存储在一起，减少数据查询时的磁盘I/O</p>\n<p>2.数据访问更快，因为聚簇索引就是表，索引和数据保存在一个B+Tree中</p>\n<p>3.使用索引覆盖的查询时可以直接使用页节点中的主键值</p>\n<p><strong>聚簇索引的缺点有：</strong></p>\n<p>1.插入速度严重依赖插入顺序</p>\n<p>2.更新聚簇索引列的代价很高，因为会强制InnoDB把更新的列移动到新的位置</p>\n<p>3.基于聚簇索引的表在插入新行，或者主键被更新导致需要移动行的时候，可能会导致“页分裂”。当行的主键值要求必须将这一行插入到已满的页中时，存储引擎会将该页分裂为两个页面来容纳该行，这就是一次页分裂操作，页分裂会导致表占用更多的存储空间。</p>\n<p>画外音：关于<strong>页</strong>，我们在上一篇文章中也提到过。页是计算机管理存储器的逻辑块，硬件及操作系统往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页。存和磁盘以页为单位交换数据。<strong>数据库系统的设计者巧妙利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次磁盘I/O就可以完全载入</strong>。</p>\n<p>基于聚簇索引以上的这些特点，<strong>在InnoDB中，我们应该尽量使用和应用无关的主键，例如自增主键，这样可以保证数据行是按照顺序写入的</strong>。而不是使用GUID、UUID生成随机的主键。</p>\n<p><strong>向聚簇索引中插入顺序的索引值：</strong></p>\n<p>每条新纪录总是在前一条记录的后面插入：</p>\n<p><img src=\"/2020/02/29/dui-mysql-zhi-xing-yin-qing-innodb-de-ren-shi/5.png\" alt></p>\n<p>当页被插满后，继续插入到新的页：</p>\n<p><img src=\"/2020/02/29/dui-mysql-zhi-xing-yin-qing-innodb-de-ren-shi/4.png\" alt></p>\n<p><strong>向聚簇索引中插入随机的索引值：</strong></p>\n<p>新的记录可能被插入到之前记录的中间，导致需要强制移动之前的记录：</p>\n<p><img src=\"/2020/02/29/dui-mysql-zhi-xing-yin-qing-innodb-de-ren-shi/3.png\" alt></p>\n<p>被写满且已经刷到磁盘上的页可能会被重新读取用于再次插入，此时还需要进行页分裂：</p>\n<p><img src=\"/2020/02/29/dui-mysql-zhi-xing-yin-qing-innodb-de-ren-shi/2.png\" alt></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>MyISAM和InnoDB两个存储引擎的索引虽然都是使用的B+Tree数据结构，但是在具体实现上还是存在不小差别的。InnoDB支持聚簇索引，聚簇索引就是表，所以InnoDB不用像MyISAM那样需要独立的行存储。也就是说，InnoDB的数据文件本身就是索引文件。而MyISAM的数据文件和索引文件是分开存储的。可以通过MyISAM和InnoDB如何存放表的抽象图帮助快速理解。</p>\n<p><strong>InnoDB（聚簇）表分布：</strong></p>\n<p><img src=\"/2020/02/29/dui-mysql-zhi-xing-yin-qing-innodb-de-ren-shi/1.png\" alt></p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h2 id=\"InnoDB索引实现\"><a href=\"#InnoDB索引实现\" class=\"headerlink\" title=\"InnoDB索引实现\"></a>InnoDB索引实现</h2><p>虽然InnoDB也使用B+Tree作为索引结构，但具体实现方式却与MyISAM截然不同。因为InnoDB支持聚簇索引（主键索引），聚簇索引就是表，所以InnoDB不用像MyISAM那样需要独立的行存储。也就是说，InnoDB的数据文件本身就是索引文件。</p>\n<p>聚簇索引的每一个叶子节点都包含了主键值、事务ID、用于事务和MVCC的回滚指针以及<strong>所有的剩余列</strong>。假设我们以col1为主键，则下图是一个InnoDB表的聚簇索引（主键索引）（Primary key）示意。</p>\n<p><img src=\"/2020/02/29/dui-mysql-zhi-xing-yin-qing-innodb-de-ren-shi/7.png\" alt></p>\n<p>与MyISAM不同的是，InnoDB的二级索引和聚簇索引很不相同。<strong>InnoDB的二级索引的叶子节点存储的不是行号（行指针），而是主键列</strong>。这种策略的缺点是二级索引需要两次索引查找，第一次在二级索引中查找主键，第二次在聚簇索引中通过主键查找需要的数据行。</p>\n<p>画外音：可以通过我们前面提到过的<strong>索引覆盖</strong>来避免回表查询，这样就只需要一次回表查询，对于InnoDB而言，就是只需要一次索引查找就可以查询到需要的数据记录，因为需要的数据记录已经被索引到二级索引中，直接就可以找到。</p>\n<p>好处是InnoDB在移动行时无需更新一级索引中的这个”指针“，因为主键是不会改变的，但是行指针却会改变。</p>\n<p>InnoDB的二级索引示意如图：</p>\n<p><img src=\"/2020/02/29/dui-mysql-zhi-xing-yin-qing-innodb-de-ren-shi/6.png\" alt></p>\n<h3 id=\"使用InnoDB主键应该知道的事项\"><a href=\"#使用InnoDB主键应该知道的事项\" class=\"headerlink\" title=\"使用InnoDB主键应该知道的事项\"></a>使用InnoDB主键应该知道的事项</h3><p>因为InnoDB的索引的方式通过主键聚集数据，严重依赖主键。索引如果没有定义主键，那么InnoDB会选择一个唯一的非空索引代替。如果没有这样的索引，InnoDB会隐式定义一个主键来作为聚簇索引。</p>\n<p><strong>聚簇索引的优点有：</strong></p>\n<p>1.可以把相关数据存储在一起，减少数据查询时的磁盘I/O</p>\n<p>2.数据访问更快，因为聚簇索引就是表，索引和数据保存在一个B+Tree中</p>\n<p>3.使用索引覆盖的查询时可以直接使用页节点中的主键值</p>\n<p><strong>聚簇索引的缺点有：</strong></p>\n<p>1.插入速度严重依赖插入顺序</p>\n<p>2.更新聚簇索引列的代价很高，因为会强制InnoDB把更新的列移动到新的位置</p>\n<p>3.基于聚簇索引的表在插入新行，或者主键被更新导致需要移动行的时候，可能会导致“页分裂”。当行的主键值要求必须将这一行插入到已满的页中时，存储引擎会将该页分裂为两个页面来容纳该行，这就是一次页分裂操作，页分裂会导致表占用更多的存储空间。</p>\n<p>画外音：关于<strong>页</strong>，我们在上一篇文章中也提到过。页是计算机管理存储器的逻辑块，硬件及操作系统往往将主存和磁盘存储区分割为连续的大小相等的块，每个存储块称为一页。存和磁盘以页为单位交换数据。<strong>数据库系统的设计者巧妙利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次磁盘I/O就可以完全载入</strong>。</p>\n<p>基于聚簇索引以上的这些特点，<strong>在InnoDB中，我们应该尽量使用和应用无关的主键，例如自增主键，这样可以保证数据行是按照顺序写入的</strong>。而不是使用GUID、UUID生成随机的主键。</p>\n<p><strong>向聚簇索引中插入顺序的索引值：</strong></p>\n<p>每条新纪录总是在前一条记录的后面插入：</p>\n<p><img src=\"/2020/02/29/dui-mysql-zhi-xing-yin-qing-innodb-de-ren-shi/5.png\" alt></p>\n<p>当页被插满后，继续插入到新的页：</p>\n<p><img src=\"/2020/02/29/dui-mysql-zhi-xing-yin-qing-innodb-de-ren-shi/4.png\" alt></p>\n<p><strong>向聚簇索引中插入随机的索引值：</strong></p>\n<p>新的记录可能被插入到之前记录的中间，导致需要强制移动之前的记录：</p>\n<p><img src=\"/2020/02/29/dui-mysql-zhi-xing-yin-qing-innodb-de-ren-shi/3.png\" alt></p>\n<p>被写满且已经刷到磁盘上的页可能会被重新读取用于再次插入，此时还需要进行页分裂：</p>\n<p><img src=\"/2020/02/29/dui-mysql-zhi-xing-yin-qing-innodb-de-ren-shi/2.png\" alt></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>MyISAM和InnoDB两个存储引擎的索引虽然都是使用的B+Tree数据结构，但是在具体实现上还是存在不小差别的。InnoDB支持聚簇索引，聚簇索引就是表，所以InnoDB不用像MyISAM那样需要独立的行存储。也就是说，InnoDB的数据文件本身就是索引文件。而MyISAM的数据文件和索引文件是分开存储的。可以通过MyISAM和InnoDB如何存放表的抽象图帮助快速理解。</p>\n<p><strong>InnoDB（聚簇）表分布：</strong></p>\n<p><img src=\"/2020/02/29/dui-mysql-zhi-xing-yin-qing-innodb-de-ren-shi/1.png\" alt></p>\n"},{"title":"栈的性质及一些使用场景","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-16T14:03:57.000Z","password":null,"summary":null,"_content":"\n## 性质\n\n栈和队列其实是一个工具，他们传统的工具方法 工具类不同，他们是“思想”工具，**栈是后进先出**。\n\n![](栈的性质及一些使用场景/4.png)\n\n![栈结构概念](https://user-gold-cdn.xitu.io/2020/1/4/16f6f70211551f99?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n## 常见的使用栈的场景\n\n### 递归\n\n> 从前山上有座庙，庙里有个老和尚和小和尚，老和尚给小和尚讲故事：“从前山上有座庙......”\n\n有名的斐波那契数列，手动地计算相当困难，即便有计算器在手。而在编程语言中，使用递归可以很好地解决这个难题：\n\n```java\nfunction F(n) {\n  return F(n-1) + F(n-2);\n}\n```\n\n重点来了，计算机如何实现递归？这是一个很笼统的概念，因为等于这个加那个，那个再加这个...... 知其所以然而不知其然。**应用栈的结构，我们可以把未知的结果推入栈内，在弹出的时候逐个计算。** 如下图\n\n![](栈的性质及一些使用场景/3.png)\n\n代码解释：\n\n```java\nfunction recursion() {\n  // 调用栈\n  const stack = [];\n\n  // 解析时\n  // 推入栈\n  // 一般来说，栈有大小限制，如果自己写了个无限递归的函数，那调用栈一直增加，最后溢出\n  for (let i = n; i > 0; i--) {\n    stack.push(F(i));\n  }\n\n  // 执行时\n  // 后入先出，弹出\n  for (let i = 3; i <= n; i++) {\n    F(n-2) = stack.pop();\n    F(n-1) = stack.pop();\n\n    F(n) = F(n-1) + F(n-2)\n    \n    // 计算完成后再推入栈内\n    stack.push(F(n))\n  }\n\n  // 执行完成，栈内剩下最终结果，弹出并返回\n  if (n) return stack.pop()\n}\n```\n\n### 四则运算\n\n> 数学老师：“先乘除，后加减，有括号先算括号。”\n\n分析下计算机四则运算的步骤：\n\n1. 定义运算符功能\n2. 优先级：乘除 >> 加减\n3. 有括号优先计算括号\n\n示例：`(1 + 2) x 3 - 4 ÷ 5`\n\n括号内优先计算，立马得出结果，咋一想还蛮符合队列的规则，先入先出嘛。但在有多个括号的情况下，优先计算最里面的括号，这样就只能推入栈中慢慢计算了。\n\n但是怎么优雅地推入栈内计算，有个伟大的科学家解决了这个难题，波兰逻辑学家想到了一种**不需要括号的后缀表达式，称之为逆波兰**。\n\n示例后缀表达式：`12+3*45/-`\n\n后缀表达式计算过程：\n\n![](栈的性质及一些使用场景/2.png)\n\n转化后的计算简直不要太简单，来看看又是如何利用栈来转的：\n\n![](栈的性质及一些使用场景/1.png)\n\n# ","source":"_posts/栈的性质及一些使用场景.md","raw":"---\ntitle: 栈的性质及一些使用场景\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-16 22:03:57\npassword:\nsummary:\ntags:\ncategories: 数据结构\n---\n\n## 性质\n\n栈和队列其实是一个工具，他们传统的工具方法 工具类不同，他们是“思想”工具，**栈是后进先出**。\n\n![](栈的性质及一些使用场景/4.png)\n\n![栈结构概念](https://user-gold-cdn.xitu.io/2020/1/4/16f6f70211551f99?imageView2/0/w/1280/h/960/format/webp/ignore-error/1)\n\n## 常见的使用栈的场景\n\n### 递归\n\n> 从前山上有座庙，庙里有个老和尚和小和尚，老和尚给小和尚讲故事：“从前山上有座庙......”\n\n有名的斐波那契数列，手动地计算相当困难，即便有计算器在手。而在编程语言中，使用递归可以很好地解决这个难题：\n\n```java\nfunction F(n) {\n  return F(n-1) + F(n-2);\n}\n```\n\n重点来了，计算机如何实现递归？这是一个很笼统的概念，因为等于这个加那个，那个再加这个...... 知其所以然而不知其然。**应用栈的结构，我们可以把未知的结果推入栈内，在弹出的时候逐个计算。** 如下图\n\n![](栈的性质及一些使用场景/3.png)\n\n代码解释：\n\n```java\nfunction recursion() {\n  // 调用栈\n  const stack = [];\n\n  // 解析时\n  // 推入栈\n  // 一般来说，栈有大小限制，如果自己写了个无限递归的函数，那调用栈一直增加，最后溢出\n  for (let i = n; i > 0; i--) {\n    stack.push(F(i));\n  }\n\n  // 执行时\n  // 后入先出，弹出\n  for (let i = 3; i <= n; i++) {\n    F(n-2) = stack.pop();\n    F(n-1) = stack.pop();\n\n    F(n) = F(n-1) + F(n-2)\n    \n    // 计算完成后再推入栈内\n    stack.push(F(n))\n  }\n\n  // 执行完成，栈内剩下最终结果，弹出并返回\n  if (n) return stack.pop()\n}\n```\n\n### 四则运算\n\n> 数学老师：“先乘除，后加减，有括号先算括号。”\n\n分析下计算机四则运算的步骤：\n\n1. 定义运算符功能\n2. 优先级：乘除 >> 加减\n3. 有括号优先计算括号\n\n示例：`(1 + 2) x 3 - 4 ÷ 5`\n\n括号内优先计算，立马得出结果，咋一想还蛮符合队列的规则，先入先出嘛。但在有多个括号的情况下，优先计算最里面的括号，这样就只能推入栈中慢慢计算了。\n\n但是怎么优雅地推入栈内计算，有个伟大的科学家解决了这个难题，波兰逻辑学家想到了一种**不需要括号的后缀表达式，称之为逆波兰**。\n\n示例后缀表达式：`12+3*45/-`\n\n后缀表达式计算过程：\n\n![](栈的性质及一些使用场景/2.png)\n\n转化后的计算简直不要太简单，来看看又是如何利用栈来转的：\n\n![](栈的性质及一些使用场景/1.png)\n\n# ","slug":"栈的性质及一些使用场景","published":1,"updated":"2021-04-29T09:48:30.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mldb0027vkvy07ekjkqf","content":"<h2 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h2><p>栈和队列其实是一个工具，他们传统的工具方法 工具类不同，他们是“思想”工具，<strong>栈是后进先出</strong>。</p>\n<p><img src=\"/2020/01/16/zhan-de-xing-zhi-ji-yi-xie-shi-yong-chang-jing/4.png\" alt></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/1/4/16f6f70211551f99?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"栈结构概念\"></p>\n<h2 id=\"常见的使用栈的场景\"><a href=\"#常见的使用栈的场景\" class=\"headerlink\" title=\"常见的使用栈的场景\"></a>常见的使用栈的场景</h2><h3 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h3><blockquote>\n<p>从前山上有座庙，庙里有个老和尚和小和尚，老和尚给小和尚讲故事：“从前山上有座庙……”</p>\n</blockquote>\n<p>有名的斐波那契数列，手动地计算相当困难，即便有计算器在手。而在编程语言中，使用递归可以很好地解决这个难题：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">function <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>重点来了，计算机如何实现递归？这是一个很笼统的概念，因为等于这个加那个，那个再加这个…… 知其所以然而不知其然。<strong>应用栈的结构，我们可以把未知的结果推入栈内，在弹出的时候逐个计算。</strong> 如下图</p>\n<p><img src=\"/2020/01/16/zhan-de-xing-zhi-ji-yi-xie-shi-yong-chang-jing/3.png\" alt></p>\n<p>代码解释：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\">function <span class=\"token function\">recursion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 调用栈</span>\n  <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 解析时</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 推入栈</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 一般来说，栈有大小限制，如果自己写了个无限递归的函数，那调用栈一直增加，最后溢出</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>let i <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">F</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 执行时</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 后入先出，弹出</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>let i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">F</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 计算完成后再推入栈内</span>\n    stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">F</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 执行完成，栈内剩下最终结果，弹出并返回</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"四则运算\"><a href=\"#四则运算\" class=\"headerlink\" title=\"四则运算\"></a>四则运算</h3><blockquote>\n<p>数学老师：“先乘除，后加减，有括号先算括号。”</p>\n</blockquote>\n<p>分析下计算机四则运算的步骤：</p>\n<ol>\n<li>定义运算符功能</li>\n<li>优先级：乘除 &gt;&gt; 加减</li>\n<li>有括号优先计算括号</li>\n</ol>\n<p>示例：<code>(1 + 2) x 3 - 4 ÷ 5</code></p>\n<p>括号内优先计算，立马得出结果，咋一想还蛮符合队列的规则，先入先出嘛。但在有多个括号的情况下，优先计算最里面的括号，这样就只能推入栈中慢慢计算了。</p>\n<p>但是怎么优雅地推入栈内计算，有个伟大的科学家解决了这个难题，波兰逻辑学家想到了一种<strong>不需要括号的后缀表达式，称之为逆波兰</strong>。</p>\n<p>示例后缀表达式：<code>12+3*45/-</code></p>\n<p>后缀表达式计算过程：</p>\n<p><img src=\"/2020/01/16/zhan-de-xing-zhi-ji-yi-xie-shi-yong-chang-jing/2.png\" alt></p>\n<p>转化后的计算简直不要太简单，来看看又是如何利用栈来转的：</p>\n<p><img src=\"/2020/01/16/zhan-de-xing-zhi-ji-yi-xie-shi-yong-chang-jing/1.png\" alt></p>\n<p># </p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h2 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h2><p>栈和队列其实是一个工具，他们传统的工具方法 工具类不同，他们是“思想”工具，<strong>栈是后进先出</strong>。</p>\n<p><img src=\"/2020/01/16/zhan-de-xing-zhi-ji-yi-xie-shi-yong-chang-jing/4.png\" alt></p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/1/4/16f6f70211551f99?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"栈结构概念\"></p>\n<h2 id=\"常见的使用栈的场景\"><a href=\"#常见的使用栈的场景\" class=\"headerlink\" title=\"常见的使用栈的场景\"></a>常见的使用栈的场景</h2><h3 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h3><blockquote>\n<p>从前山上有座庙，庙里有个老和尚和小和尚，老和尚给小和尚讲故事：“从前山上有座庙……”</p>\n</blockquote>\n<p>有名的斐波那契数列，手动地计算相当困难，即便有计算器在手。而在编程语言中，使用递归可以很好地解决这个难题：</p>\n<pre><code class=\"java\">function F(n) {\n  return F(n-1) + F(n-2);\n}</code></pre>\n<p>重点来了，计算机如何实现递归？这是一个很笼统的概念，因为等于这个加那个，那个再加这个…… 知其所以然而不知其然。<strong>应用栈的结构，我们可以把未知的结果推入栈内，在弹出的时候逐个计算。</strong> 如下图</p>\n<p><img src=\"/2020/01/16/zhan-de-xing-zhi-ji-yi-xie-shi-yong-chang-jing/3.png\" alt></p>\n<p>代码解释：</p>\n<pre><code class=\"java\">function recursion() {\n  // 调用栈\n  const stack = [];\n\n  // 解析时\n  // 推入栈\n  // 一般来说，栈有大小限制，如果自己写了个无限递归的函数，那调用栈一直增加，最后溢出\n  for (let i = n; i &gt; 0; i--) {\n    stack.push(F(i));\n  }\n\n  // 执行时\n  // 后入先出，弹出\n  for (let i = 3; i &lt;= n; i++) {\n    F(n-2) = stack.pop();\n    F(n-1) = stack.pop();\n\n    F(n) = F(n-1) + F(n-2)\n\n    // 计算完成后再推入栈内\n    stack.push(F(n))\n  }\n\n  // 执行完成，栈内剩下最终结果，弹出并返回\n  if (n) return stack.pop()\n}</code></pre>\n<h3 id=\"四则运算\"><a href=\"#四则运算\" class=\"headerlink\" title=\"四则运算\"></a>四则运算</h3><blockquote>\n<p>数学老师：“先乘除，后加减，有括号先算括号。”</p>\n</blockquote>\n<p>分析下计算机四则运算的步骤：</p>\n<ol>\n<li>定义运算符功能</li>\n<li>优先级：乘除 &gt;&gt; 加减</li>\n<li>有括号优先计算括号</li>\n</ol>\n<p>示例：<code>(1 + 2) x 3 - 4 ÷ 5</code></p>\n<p>括号内优先计算，立马得出结果，咋一想还蛮符合队列的规则，先入先出嘛。但在有多个括号的情况下，优先计算最里面的括号，这样就只能推入栈中慢慢计算了。</p>\n<p>但是怎么优雅地推入栈内计算，有个伟大的科学家解决了这个难题，波兰逻辑学家想到了一种<strong>不需要括号的后缀表达式，称之为逆波兰</strong>。</p>\n<p>示例后缀表达式：<code>12+3*45/-</code></p>\n<p>后缀表达式计算过程：</p>\n<p><img src=\"/2020/01/16/zhan-de-xing-zhi-ji-yi-xie-shi-yong-chang-jing/2.png\" alt></p>\n<p>转化后的计算简直不要太简单，来看看又是如何利用栈来转的：</p>\n<p><img src=\"/2020/01/16/zhan-de-xing-zhi-ji-yi-xie-shi-yong-chang-jing/1.png\" alt></p>\n<p># </p>\n"},{"title":"对Mysql读写分离的认识","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-26T13:48:39.000Z","password":null,"summary":null,"img":"/medias/featureimages/mysql.png","_content":"\n### 读写分离应用场景\n\n因为用户的增多，数据的增多，单机的数据库往往支撑不住快速发展的业务，所以数据库集群就产生了！今天来说说读写分离的数据库集群方式！读写分离顾名思义就是读和写分离了，对应到数据库集群一般都是一主一从(一个主库，一个从库)或者一主多从(一个主库，多个从库)，业务服务器把需要写的操作都写到主数据库中，读的操作都去从库查询。主库会同步数据到从库保证数据的一致性。\n\n![](对Mysql读写分离的认识/1.png)\n\n把访问的压力从主库转移到从库\n\n写的操作很多的话不适合这种集群方式\n\n在单机的情况下，一般我们做数据库优化都会加索引，但是加了索引对查询有优化，但是会影响写入，因为写入数据会更新索引。所以做了**主从之后，我们可以单独的针对从库(读库)做索引上的优化，而主库(写库)可以减少索引而提高写的效率。**\n\n看起来还是很简单的，但是有两点要注意：**主从同步延迟、分配机制的考虑**；\n\n### 主从同步延迟\n\n主库有数据写入之后，同时也写入在binlog(二进制日志文件)中，从库是通过binlog文件来同步数据的，这期间会有一定时间的延迟，可能是1秒，如果同时有大量数据写入的话，时间可能更长。\n\n这会导致什么问题呢？比如有一个付款操作，你付款了，主库是已经写入数据，但是查询是到从库查，从库里还没有你的付款记录，所以页面上查询的时候你还没付款。那可不急眼了啊，吞钱了这还了得！打电话给客服投诉！\n\n所以为了解决主从同步延迟的问题有以下几个方法：\n\n#### 1、二次读取\n\n二次读取的意思就是读从库没读到之后再去主库读一下，只要通过对数据库访问的API进行封装就能实现这个功能。很简单，并且和业务之间没有耦合。但是有个问题，如果有很多二次读取相当于压力还是回到了主库身上，等于读写分离白分了。而且如有人恶意攻击，就一直访问没有的数据，那主库就可能爆了。\n\n#### 2、写之后的马上的读操作访问主库\n\n也就是写操作之后，立马的读操作指定访问主库，之后的读操作采取访问从库。这就等于写死了，和业务强耦合了。\n\n#### 3、关键业务读写都由主库承担，非关键业务读写分离\n\n类似付钱的这种业务，读写都到主库，避免延迟的问题，但是例如改个头像啊，个人签名这种比较不重要的就读写分离，查询都去从库查，毕竟延迟一下影响也不大，不会立马打客服电话哈哈。\n\n### 分配机制的考虑\n\n分配机制的考虑也就是怎么制定写操作是去主库写，读操作是去从库读。\n\n一般有两种方式：**代码封装、数据库中间件**。\n\n1、代码封装代码封装的实现很简单，就是抽出一个中间层，让这个中间层来实现读写分离和数据库连接。讲白点就是搞个provider封装了save,select等通常数据库操作，内部save操作的dataSource是主库的，select操作的dataSource是从库的。\n\n优点：就是实现简单，并且可以根据业务定制化变化，随心所欲。\n\n缺点：就是是如果哪个数据库宕机了，发生主从切换了之后，就得修改配置重启。并且如果你的系统很大，一个业务可能包含多个子系统，一个子系统是java写的一个子系统用go写的，这样的话得分别为不同语言实现一套中间层，重复开发。\n\n![代码封装数据访问层](对Mysql读写分离的认识/2.png)\n\n2、数据库中间件就是有一个独立的系统，专门来实现读写分离和数据库连接管理，业务服务器和数据库中间件之间是通过标准的SQL协议交流的，所以在业务服务器看来数据库中间件其实就是个数据库。\n\n优点：因为是通过sql协议的所以可以兼容不同的语言不需要单独写一套，并且有中间件来实现主从切换，业务服务器不需要关心这点。\n\n缺点：多了一个系统其实就等于多了一个关心。。如果数据库中间件挂了的话对吧，而且多了一个系统就等于多了一个瓶颈，所以对中间件的性能要求也高，并且所有的数据库操作都要经过它。并且中间件实现很复杂，难度比代码封装高多了。\n\n但是有开源的数据库中间件例如Mysql Proxy,Mysql Route,Atlas。\n\n![数据库中间件](对Mysql读写分离的认识/3.png)\n\n#### 总结\n\n读写分离相对而言是比较简单的，比分表分库简单，但是它只能分担访问的压力，分担不了存储的压力，也就是你的数据库表的数据逐渐增多，但是面对一张表海量的数据，查询还是很慢的，所以如果业务发展的快数据暴增，到一定时间还是得分库分表。\n\n但是正常情况下，只要当单机真的顶不住压力了才会集群，**不要一上来就集群**，没这个必要。有关于软件的东西都是越简单越好，复杂都是形势所迫。\n\n**一般我们是先优化，优化一些慢查询，优化业务逻辑的调用或者加入缓存等，如果真的优化到没东西优化了然后才上集群，先读写分离，读写分离之后顶不住就再分库分表。**","source":"_posts/对Mysql读写分离的认识.md","raw":"---\ntitle: 对Mysql读写分离的认识\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-26 21:48:39\npassword:\nsummary:\ntags:\nimg: /medias/featureimages/mysql.png\ncategories: 数据库\n---\n\n### 读写分离应用场景\n\n因为用户的增多，数据的增多，单机的数据库往往支撑不住快速发展的业务，所以数据库集群就产生了！今天来说说读写分离的数据库集群方式！读写分离顾名思义就是读和写分离了，对应到数据库集群一般都是一主一从(一个主库，一个从库)或者一主多从(一个主库，多个从库)，业务服务器把需要写的操作都写到主数据库中，读的操作都去从库查询。主库会同步数据到从库保证数据的一致性。\n\n![](对Mysql读写分离的认识/1.png)\n\n把访问的压力从主库转移到从库\n\n写的操作很多的话不适合这种集群方式\n\n在单机的情况下，一般我们做数据库优化都会加索引，但是加了索引对查询有优化，但是会影响写入，因为写入数据会更新索引。所以做了**主从之后，我们可以单独的针对从库(读库)做索引上的优化，而主库(写库)可以减少索引而提高写的效率。**\n\n看起来还是很简单的，但是有两点要注意：**主从同步延迟、分配机制的考虑**；\n\n### 主从同步延迟\n\n主库有数据写入之后，同时也写入在binlog(二进制日志文件)中，从库是通过binlog文件来同步数据的，这期间会有一定时间的延迟，可能是1秒，如果同时有大量数据写入的话，时间可能更长。\n\n这会导致什么问题呢？比如有一个付款操作，你付款了，主库是已经写入数据，但是查询是到从库查，从库里还没有你的付款记录，所以页面上查询的时候你还没付款。那可不急眼了啊，吞钱了这还了得！打电话给客服投诉！\n\n所以为了解决主从同步延迟的问题有以下几个方法：\n\n#### 1、二次读取\n\n二次读取的意思就是读从库没读到之后再去主库读一下，只要通过对数据库访问的API进行封装就能实现这个功能。很简单，并且和业务之间没有耦合。但是有个问题，如果有很多二次读取相当于压力还是回到了主库身上，等于读写分离白分了。而且如有人恶意攻击，就一直访问没有的数据，那主库就可能爆了。\n\n#### 2、写之后的马上的读操作访问主库\n\n也就是写操作之后，立马的读操作指定访问主库，之后的读操作采取访问从库。这就等于写死了，和业务强耦合了。\n\n#### 3、关键业务读写都由主库承担，非关键业务读写分离\n\n类似付钱的这种业务，读写都到主库，避免延迟的问题，但是例如改个头像啊，个人签名这种比较不重要的就读写分离，查询都去从库查，毕竟延迟一下影响也不大，不会立马打客服电话哈哈。\n\n### 分配机制的考虑\n\n分配机制的考虑也就是怎么制定写操作是去主库写，读操作是去从库读。\n\n一般有两种方式：**代码封装、数据库中间件**。\n\n1、代码封装代码封装的实现很简单，就是抽出一个中间层，让这个中间层来实现读写分离和数据库连接。讲白点就是搞个provider封装了save,select等通常数据库操作，内部save操作的dataSource是主库的，select操作的dataSource是从库的。\n\n优点：就是实现简单，并且可以根据业务定制化变化，随心所欲。\n\n缺点：就是是如果哪个数据库宕机了，发生主从切换了之后，就得修改配置重启。并且如果你的系统很大，一个业务可能包含多个子系统，一个子系统是java写的一个子系统用go写的，这样的话得分别为不同语言实现一套中间层，重复开发。\n\n![代码封装数据访问层](对Mysql读写分离的认识/2.png)\n\n2、数据库中间件就是有一个独立的系统，专门来实现读写分离和数据库连接管理，业务服务器和数据库中间件之间是通过标准的SQL协议交流的，所以在业务服务器看来数据库中间件其实就是个数据库。\n\n优点：因为是通过sql协议的所以可以兼容不同的语言不需要单独写一套，并且有中间件来实现主从切换，业务服务器不需要关心这点。\n\n缺点：多了一个系统其实就等于多了一个关心。。如果数据库中间件挂了的话对吧，而且多了一个系统就等于多了一个瓶颈，所以对中间件的性能要求也高，并且所有的数据库操作都要经过它。并且中间件实现很复杂，难度比代码封装高多了。\n\n但是有开源的数据库中间件例如Mysql Proxy,Mysql Route,Atlas。\n\n![数据库中间件](对Mysql读写分离的认识/3.png)\n\n#### 总结\n\n读写分离相对而言是比较简单的，比分表分库简单，但是它只能分担访问的压力，分担不了存储的压力，也就是你的数据库表的数据逐渐增多，但是面对一张表海量的数据，查询还是很慢的，所以如果业务发展的快数据暴增，到一定时间还是得分库分表。\n\n但是正常情况下，只要当单机真的顶不住压力了才会集群，**不要一上来就集群**，没这个必要。有关于软件的东西都是越简单越好，复杂都是形势所迫。\n\n**一般我们是先优化，优化一些慢查询，优化业务逻辑的调用或者加入缓存等，如果真的优化到没东西优化了然后才上集群，先读写分离，读写分离之后顶不住就再分库分表。**","slug":"对Mysql读写分离的认识","published":1,"updated":"2020-02-26T06:57:19.283Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mldf0029vkvyr9hxe4bp","content":"<h3 id=\"读写分离应用场景\"><a href=\"#读写分离应用场景\" class=\"headerlink\" title=\"读写分离应用场景\"></a>读写分离应用场景</h3><p>因为用户的增多，数据的增多，单机的数据库往往支撑不住快速发展的业务，所以数据库集群就产生了！今天来说说读写分离的数据库集群方式！读写分离顾名思义就是读和写分离了，对应到数据库集群一般都是一主一从(一个主库，一个从库)或者一主多从(一个主库，多个从库)，业务服务器把需要写的操作都写到主数据库中，读的操作都去从库查询。主库会同步数据到从库保证数据的一致性。</p>\n<p><img src=\"/2020/01/26/dui-mysql-du-xie-fen-chi-de-ren-shi/1.png\" alt></p>\n<p>把访问的压力从主库转移到从库</p>\n<p>写的操作很多的话不适合这种集群方式</p>\n<p>在单机的情况下，一般我们做数据库优化都会加索引，但是加了索引对查询有优化，但是会影响写入，因为写入数据会更新索引。所以做了<strong>主从之后，我们可以单独的针对从库(读库)做索引上的优化，而主库(写库)可以减少索引而提高写的效率。</strong></p>\n<p>看起来还是很简单的，但是有两点要注意：<strong>主从同步延迟、分配机制的考虑</strong>；</p>\n<h3 id=\"主从同步延迟\"><a href=\"#主从同步延迟\" class=\"headerlink\" title=\"主从同步延迟\"></a>主从同步延迟</h3><p>主库有数据写入之后，同时也写入在binlog(二进制日志文件)中，从库是通过binlog文件来同步数据的，这期间会有一定时间的延迟，可能是1秒，如果同时有大量数据写入的话，时间可能更长。</p>\n<p>这会导致什么问题呢？比如有一个付款操作，你付款了，主库是已经写入数据，但是查询是到从库查，从库里还没有你的付款记录，所以页面上查询的时候你还没付款。那可不急眼了啊，吞钱了这还了得！打电话给客服投诉！</p>\n<p>所以为了解决主从同步延迟的问题有以下几个方法：</p>\n<h4 id=\"1、二次读取\"><a href=\"#1、二次读取\" class=\"headerlink\" title=\"1、二次读取\"></a>1、二次读取</h4><p>二次读取的意思就是读从库没读到之后再去主库读一下，只要通过对数据库访问的API进行封装就能实现这个功能。很简单，并且和业务之间没有耦合。但是有个问题，如果有很多二次读取相当于压力还是回到了主库身上，等于读写分离白分了。而且如有人恶意攻击，就一直访问没有的数据，那主库就可能爆了。</p>\n<h4 id=\"2、写之后的马上的读操作访问主库\"><a href=\"#2、写之后的马上的读操作访问主库\" class=\"headerlink\" title=\"2、写之后的马上的读操作访问主库\"></a>2、写之后的马上的读操作访问主库</h4><p>也就是写操作之后，立马的读操作指定访问主库，之后的读操作采取访问从库。这就等于写死了，和业务强耦合了。</p>\n<h4 id=\"3、关键业务读写都由主库承担，非关键业务读写分离\"><a href=\"#3、关键业务读写都由主库承担，非关键业务读写分离\" class=\"headerlink\" title=\"3、关键业务读写都由主库承担，非关键业务读写分离\"></a>3、关键业务读写都由主库承担，非关键业务读写分离</h4><p>类似付钱的这种业务，读写都到主库，避免延迟的问题，但是例如改个头像啊，个人签名这种比较不重要的就读写分离，查询都去从库查，毕竟延迟一下影响也不大，不会立马打客服电话哈哈。</p>\n<h3 id=\"分配机制的考虑\"><a href=\"#分配机制的考虑\" class=\"headerlink\" title=\"分配机制的考虑\"></a>分配机制的考虑</h3><p>分配机制的考虑也就是怎么制定写操作是去主库写，读操作是去从库读。</p>\n<p>一般有两种方式：<strong>代码封装、数据库中间件</strong>。</p>\n<p>1、代码封装代码封装的实现很简单，就是抽出一个中间层，让这个中间层来实现读写分离和数据库连接。讲白点就是搞个provider封装了save,select等通常数据库操作，内部save操作的dataSource是主库的，select操作的dataSource是从库的。</p>\n<p>优点：就是实现简单，并且可以根据业务定制化变化，随心所欲。</p>\n<p>缺点：就是是如果哪个数据库宕机了，发生主从切换了之后，就得修改配置重启。并且如果你的系统很大，一个业务可能包含多个子系统，一个子系统是java写的一个子系统用go写的，这样的话得分别为不同语言实现一套中间层，重复开发。</p>\n<p><img src=\"/2020/01/26/dui-mysql-du-xie-fen-chi-de-ren-shi/2.png\" alt=\"代码封装数据访问层\"></p>\n<p>2、数据库中间件就是有一个独立的系统，专门来实现读写分离和数据库连接管理，业务服务器和数据库中间件之间是通过标准的SQL协议交流的，所以在业务服务器看来数据库中间件其实就是个数据库。</p>\n<p>优点：因为是通过sql协议的所以可以兼容不同的语言不需要单独写一套，并且有中间件来实现主从切换，业务服务器不需要关心这点。</p>\n<p>缺点：多了一个系统其实就等于多了一个关心。。如果数据库中间件挂了的话对吧，而且多了一个系统就等于多了一个瓶颈，所以对中间件的性能要求也高，并且所有的数据库操作都要经过它。并且中间件实现很复杂，难度比代码封装高多了。</p>\n<p>但是有开源的数据库中间件例如Mysql Proxy,Mysql Route,Atlas。</p>\n<p><img src=\"/2020/01/26/dui-mysql-du-xie-fen-chi-de-ren-shi/3.png\" alt=\"数据库中间件\"></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>读写分离相对而言是比较简单的，比分表分库简单，但是它只能分担访问的压力，分担不了存储的压力，也就是你的数据库表的数据逐渐增多，但是面对一张表海量的数据，查询还是很慢的，所以如果业务发展的快数据暴增，到一定时间还是得分库分表。</p>\n<p>但是正常情况下，只要当单机真的顶不住压力了才会集群，<strong>不要一上来就集群</strong>，没这个必要。有关于软件的东西都是越简单越好，复杂都是形势所迫。</p>\n<p><strong>一般我们是先优化，优化一些慢查询，优化业务逻辑的调用或者加入缓存等，如果真的优化到没东西优化了然后才上集群，先读写分离，读写分离之后顶不住就再分库分表。</strong></p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h3 id=\"读写分离应用场景\"><a href=\"#读写分离应用场景\" class=\"headerlink\" title=\"读写分离应用场景\"></a>读写分离应用场景</h3><p>因为用户的增多，数据的增多，单机的数据库往往支撑不住快速发展的业务，所以数据库集群就产生了！今天来说说读写分离的数据库集群方式！读写分离顾名思义就是读和写分离了，对应到数据库集群一般都是一主一从(一个主库，一个从库)或者一主多从(一个主库，多个从库)，业务服务器把需要写的操作都写到主数据库中，读的操作都去从库查询。主库会同步数据到从库保证数据的一致性。</p>\n<p><img src=\"/2020/01/26/dui-mysql-du-xie-fen-chi-de-ren-shi/1.png\" alt></p>\n<p>把访问的压力从主库转移到从库</p>\n<p>写的操作很多的话不适合这种集群方式</p>\n<p>在单机的情况下，一般我们做数据库优化都会加索引，但是加了索引对查询有优化，但是会影响写入，因为写入数据会更新索引。所以做了<strong>主从之后，我们可以单独的针对从库(读库)做索引上的优化，而主库(写库)可以减少索引而提高写的效率。</strong></p>\n<p>看起来还是很简单的，但是有两点要注意：<strong>主从同步延迟、分配机制的考虑</strong>；</p>\n<h3 id=\"主从同步延迟\"><a href=\"#主从同步延迟\" class=\"headerlink\" title=\"主从同步延迟\"></a>主从同步延迟</h3><p>主库有数据写入之后，同时也写入在binlog(二进制日志文件)中，从库是通过binlog文件来同步数据的，这期间会有一定时间的延迟，可能是1秒，如果同时有大量数据写入的话，时间可能更长。</p>\n<p>这会导致什么问题呢？比如有一个付款操作，你付款了，主库是已经写入数据，但是查询是到从库查，从库里还没有你的付款记录，所以页面上查询的时候你还没付款。那可不急眼了啊，吞钱了这还了得！打电话给客服投诉！</p>\n<p>所以为了解决主从同步延迟的问题有以下几个方法：</p>\n<h4 id=\"1、二次读取\"><a href=\"#1、二次读取\" class=\"headerlink\" title=\"1、二次读取\"></a>1、二次读取</h4><p>二次读取的意思就是读从库没读到之后再去主库读一下，只要通过对数据库访问的API进行封装就能实现这个功能。很简单，并且和业务之间没有耦合。但是有个问题，如果有很多二次读取相当于压力还是回到了主库身上，等于读写分离白分了。而且如有人恶意攻击，就一直访问没有的数据，那主库就可能爆了。</p>\n<h4 id=\"2、写之后的马上的读操作访问主库\"><a href=\"#2、写之后的马上的读操作访问主库\" class=\"headerlink\" title=\"2、写之后的马上的读操作访问主库\"></a>2、写之后的马上的读操作访问主库</h4><p>也就是写操作之后，立马的读操作指定访问主库，之后的读操作采取访问从库。这就等于写死了，和业务强耦合了。</p>\n<h4 id=\"3、关键业务读写都由主库承担，非关键业务读写分离\"><a href=\"#3、关键业务读写都由主库承担，非关键业务读写分离\" class=\"headerlink\" title=\"3、关键业务读写都由主库承担，非关键业务读写分离\"></a>3、关键业务读写都由主库承担，非关键业务读写分离</h4><p>类似付钱的这种业务，读写都到主库，避免延迟的问题，但是例如改个头像啊，个人签名这种比较不重要的就读写分离，查询都去从库查，毕竟延迟一下影响也不大，不会立马打客服电话哈哈。</p>\n<h3 id=\"分配机制的考虑\"><a href=\"#分配机制的考虑\" class=\"headerlink\" title=\"分配机制的考虑\"></a>分配机制的考虑</h3><p>分配机制的考虑也就是怎么制定写操作是去主库写，读操作是去从库读。</p>\n<p>一般有两种方式：<strong>代码封装、数据库中间件</strong>。</p>\n<p>1、代码封装代码封装的实现很简单，就是抽出一个中间层，让这个中间层来实现读写分离和数据库连接。讲白点就是搞个provider封装了save,select等通常数据库操作，内部save操作的dataSource是主库的，select操作的dataSource是从库的。</p>\n<p>优点：就是实现简单，并且可以根据业务定制化变化，随心所欲。</p>\n<p>缺点：就是是如果哪个数据库宕机了，发生主从切换了之后，就得修改配置重启。并且如果你的系统很大，一个业务可能包含多个子系统，一个子系统是java写的一个子系统用go写的，这样的话得分别为不同语言实现一套中间层，重复开发。</p>\n<p><img src=\"/2020/01/26/dui-mysql-du-xie-fen-chi-de-ren-shi/2.png\" alt=\"代码封装数据访问层\"></p>\n<p>2、数据库中间件就是有一个独立的系统，专门来实现读写分离和数据库连接管理，业务服务器和数据库中间件之间是通过标准的SQL协议交流的，所以在业务服务器看来数据库中间件其实就是个数据库。</p>\n<p>优点：因为是通过sql协议的所以可以兼容不同的语言不需要单独写一套，并且有中间件来实现主从切换，业务服务器不需要关心这点。</p>\n<p>缺点：多了一个系统其实就等于多了一个关心。。如果数据库中间件挂了的话对吧，而且多了一个系统就等于多了一个瓶颈，所以对中间件的性能要求也高，并且所有的数据库操作都要经过它。并且中间件实现很复杂，难度比代码封装高多了。</p>\n<p>但是有开源的数据库中间件例如Mysql Proxy,Mysql Route,Atlas。</p>\n<p><img src=\"/2020/01/26/dui-mysql-du-xie-fen-chi-de-ren-shi/3.png\" alt=\"数据库中间件\"></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>读写分离相对而言是比较简单的，比分表分库简单，但是它只能分担访问的压力，分担不了存储的压力，也就是你的数据库表的数据逐渐增多，但是面对一张表海量的数据，查询还是很慢的，所以如果业务发展的快数据暴增，到一定时间还是得分库分表。</p>\n<p>但是正常情况下，只要当单机真的顶不住压力了才会集群，<strong>不要一上来就集群</strong>，没这个必要。有关于软件的东西都是越简单越好，复杂都是形势所迫。</p>\n<p><strong>一般我们是先优化，优化一些慢查询，优化业务逻辑的调用或者加入缓存等，如果真的优化到没东西优化了然后才上集群，先读写分离，读写分离之后顶不住就再分库分表。</strong></p>\n"},{"title":"流式处理框架后起之秀Flink","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-16T13:27:46.000Z","password":null,"summary":null,"img":"/medias/featureimages/flink.jpg","_content":"\n\n\n# Flink简介\n\n## 初识Flink\n\nApache Flink是一个框架和分布式处理引擎，用于对无界和有界数据流进行有状态计算。Flink被设计在所有常见的集群环境中运行，以内存执行速度和任意规模来执行计算。\n\n![](流式处理框架后起之秀Flink/1.jpg) \n\nFlink起源于Stratosphere项目，Stratosphere是在2010~2014年由3所地处柏林的大学和欧洲的一些其他的大学共同进行的研究项目，2014年4月Stratosphere的代码被复制并捐赠给了Apache软件基金会，参加这个孵化项目的初始成员是Stratosphere系统的核心开发人员，2014年12月，Flink一跃成为Apache软件基金会的顶级项目。\n\n![](流式处理框架后起之秀Flink/2.jpg) \n\n \n\n在德语中，Flink一词表示快速和灵巧，项目采用一只松鼠的彩色图案作为logo，这不仅是因为松鼠具有快速和灵巧的特点，还因为柏林的松鼠有一种迷人的红棕色，而Flink的松鼠logo拥有可爱的尾巴，尾巴的颜色与Apache软件基金会的logo颜色相呼应，也就是说，这是一只Apache风格的松鼠。\n\n![](流式处理框架后起之秀Flink/3.jpg)\n\n![4](流式处理框架后起之秀Flink/4.jpg)\n\nFlink虽然诞生的早(2010年)，但是其实是起大早赶晚集，直到2015年才开始突然爆发热度。 \n\n在Flink被apache提升为顶级项目之后，阿里实时计算团队决定在阿里内部建立一个 Flink 分支 Blink，并对 Flink 进行大量的修改和完善，让其适应阿里巴巴这种超大规模的业务场景。\n\nBlink由2016年上线，服务于阿里集团内部搜索、推荐、广告和蚂蚁等大量核心实时业务。与2019年1月Blink正式开源，目前阿里70%的技术部门都有使用该版本。\n\nBlink比起Flink的优势就是对SQL语法的更完善的支持以及执行SQL的性能提升。\n\n![](流式处理框架后起之秀Flink/wps5.jpg) \n\n## **Flink**的重要特点\n\n### 事件驱动型(Event-driven)\n\n事件驱动型应用是一类具有状态的应用，它从一个或多个事件流提取数据，并根据到来的事件触发计算、状态更新或其他外部动作。比较典型的就是以kafka为代表的消息队列几乎都是事件驱动型应用。\n\n与之不同的就是SparkStreaming微批次，如图：\n\n![](流式处理框架后起之秀Flink/wps6.jpg) \n\n   事件驱动型：\n\n![](流式处理框架后起之秀Flink/wps7.jpg) \n\n \n\n### 流与批的世界观\n\n​     **批处理**的特点是有界、持久、大量，非常适合需要访问全套记录才能完成的计算工作，一般用于离线统计。\n\n**流处理**的特点是无界、实时,  无需针对整个数据集执行操作，而是对通过系统传输的每个数据项执行操作，一般用于实时统计。\n\n在**spark**的世界观中，一切都是由批次组成的，离线数据是一个大批次，而实时数据是由一个一个无限的小批次组成的。\n\n 而在**flink**的世界观中，一切都是由流组成的，离线数据是有界限的流，实时数据是一个没有界限的流，这就是所谓的有界流和无界流。\n\n**无界数据流**：**无界数据流有一个开始但是没有结束**，它们不会在生成时终止并提供数据，必须连续处理无界流，也就是说必须在获取后立即处理event。对于无界数据流我们无法等待所有数据都到达，因为输入是无界的，并且在任何时间点都不会完成。处理无界数据通常要求以特定顺序（例如事件发生的顺序）获取event，以便能够推断结果完整性。\n\n**有界数据流**：**有界数据流有明确定义的开始和结束**，可以在执行任何计算之前通过获取所有数据来处理有界流，处理有界流不需要有序获取，因为可以始终对有界数据集进行排序，有界流的处理也称为批处理。\n\n![](流式处理框架后起之秀Flink/wps8.png)\n\n​    这种以流为世界观的架构，获得的最大好处就是具有极低的延迟。\n\n###  分层api\n\n![](流式处理框架后起之秀Flink/wps9.jpg) \n\n最底层级的抽象仅仅提供了有状态流，它将通过过程函数（Process Function）被嵌入到DataStream API中。底层过程函数（Process Function） 与 DataStream API 相集成，使其可以对某些特定的操作进行底层的抽象，它允许用户可以自由地处理来自一个或多个数据流的事件，并使用一致的容错的状态。除此之外，用户可以注册事件时间并处理时间回调，从而使程序可以处理复杂的计算。\n\n实际上，**大多数应用并不需要上述的底层抽象，而是针对核心API（Core APIs） 进行编程，比如DataStream API（有界或无界流数据）以及DataSet API（有界数据集）**。这些API为数据处理提供了通用的构建模块，比如由用户定义的多种形式的转换（transformations），连接（joins），聚合（aggregations），窗口操作（windows）等等。DataSet API 为有界数据集提供了额外的支持，例如循环与迭代。这些API处理的数据类型以类（classes）的形式由各自的编程语言所表示。\n\nTable API 是以表为中心的声明式编程，其中表可能会动态变化（在表达流数据时）。Table API遵循（扩展的）关系模型：表有二维数据结构（schema）（类似于关系数据库中的表），同时API提供可比较的操作，例如select、project、join、group-by、aggregate等。Table API程序声明式地定义了什么逻辑操作应该执行，而不是准确地确定这些操作代码的看上去如何 。 尽管Table API可以通过多种类型的用户自定义函数（UDF）进行扩展，其仍不如核心API更具表达能力，但是使用起来却更加简洁（代码量更少）。除此之外，Table API程序在执行之前会经过内置优化器进行优化。\n\n**你可以在表与 DataStream/DataSet 之间无缝切换，以允许程序将 Table API 与 DataStream 以及 DataSet 混合使用**。\n\nFlink提供的最高层级的抽象是 SQL 。这一层抽象在语法与表达能力上与 Table API 类似，但是是以SQL查询表达式的形式表现程序。SQL抽象与Table API交互密切，同时SQL查询可以直接在Table API定义的表上执行。\n\n### 支持有状态计算\n\nFlink在1.4版本中实现了状态管理，所谓状态管理就是在流失计算过程中将算子的中间结果保存在内存或者文件系统中，等下一个事件进入算子后可以让当前事件的值与历史值进行汇总累计。\n\n### 支持exactly-once语义\n\n在分布式系统中，组成系统的各个计算机是独立的。这些计算机有可能fail。\n\n一个sender发送一条message到receiver。根据receiver出现fail时sender如何处理fail，可以将message delivery分为三种语义:\n\n**At Most once:** 对于一条message,receiver最多收到一次(0次或1次).\n\n可以达成At Most Once的策略:\n\nsender把message发送给receiver.无论receiver是否收到message,sender都不再重发message.\n\n**At Least once:** 对于一条message,receiver最少收到一次(1次及以上).\n\n可以达成At Least Once的策略:\n\nsender把message发送给receiver.当receiver在规定时间内没有回复ACK或回复了error信息,那么sender重发这条message给receiver,直到sender收到receiver的ACK.\n\n**Exactly once:** 对于一条message,receiver确保只收到一次\n\n### 支持事件时间（EventTime)\n\n目前大多数框架时间窗口计算，都是采用当前系统时间，以时间为单位进行的聚合计算只能反应数据到达计算引擎的时间，而并不是实际业务时间\n\n# Flink实战入门\n\n## **批处理wordcount编程实战**\n\n**添加依赖**\n\n```xml\n        <dependency>\n            <groupId>org.apache.flink</groupId>\n            <artifactId>flink-scala_2.11</artifactId>\n            <version>1.7.0</version>\n        </dependency>\n```\n\n**编写程序**\n\n```scala\ndef main(args: Array[String]): Unit = {\n\n  //构造执行环境\n  val env: ExecutionEnvironment = ExecutionEnvironment.getExecutionEnvironment\n  //读取文件\n  val input = \"file:///d:/temp/hello.txt\"\n  val ds: DataSet[String] = env.readTextFile(input)\n  // 其中flatMap 和Map 中  需要引入隐式转换\n  import org.apache.flink.api.scala.createTypeInformation\n  //经过groupby进行分组，sum进行聚合\n  val aggDs: AggregateDataSet[(String, Int)] = ds.flatMap(_.split(\" \")).map((_, 1)).groupBy(0).sum(1)\n  // 打印\n  aggDs.print()\n\n}\n```\n\n## 流处理wordcount编程\n\n**导入依赖**\n\n```xml\n<dependency>\n    <groupId>org.apache.flink</groupId>\n    <artifactId>flink-scala_2.11</artifactId>\n    <version>1.7.0</version>\n</dependency>\n\n<!-- https://mvnrepository.com/artifact/org.apache.flink/flink-streaming-scala -->\n<dependency>\n    <groupId>org.apache.flink</groupId>\n    <artifactId>flink-streaming-scala_2.11</artifactId>\n    <version>1.7.0</version>\n</dependency>\n```\n\n**编写程序**\n\n```scala\nimport org.apache.flink.api.java.utils.ParameterTool\nimport org.apache.flink.streaming.api.scala.{DataStream, StreamExecutionEnvironment}\n\nobject StreamWcApp {\n\n  def main(args: Array[String]): Unit = {\n    //从外部命令中获取参数\n    val tool: ParameterTool = ParameterTool.fromArgs(args)\n    val host: String = tool.get(\"host\")\n    val port: Int = tool.get(\"port\").toInt\n\n    //创建流处理环境\n    val env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment\n    //接收socket文本流\n    val textDstream: DataStream[String] = env.socketTextStream(host,port)\n   // flatMap和Map需要引用的隐式转换\n    import org.apache.flink.api.scala._\n   //处理 分组并且sum聚合\n    val dStream: DataStream[(String, Int)] = textDstream.flatMap(_.split(\" \")).filter(_.nonEmpty).map((_,1)).keyBy(0).sum(1)\n   //打印\n    dStream.print()\n    \n    env.execute()\n  }\n```\n\n\n\n# Flink部署\n\n## standalone模式\n\n###  **安装**\n\n解压缩  flink-1.7.0-bin-hadoop27-scala_2.11.tgz\n\n**修改 flink/conf/flink-conf.yaml 文件**\n\n```yaml\njobmanager.rpc.address:master\n```\n\n**修改/conf/slave文件,添加上集群主机**\n\n```html\nslave1\nslave2\nslave3\n```\n\n**分发给 另外两台机子([分发脚本可通过如下地址获取]())**\n\n```shell\nxsync flink-1.7.0\n```\n\n**启动**\n\n ```shell\nstart-cluster.sh\n ```\n\n###  提交任务\n\n**准备数据文件** \n\n**把含数据文件的文件夹，分发到taskmanage 机器中** \n\n**注:**由于读取数据是从本地磁盘读取，实际任务会被分发到taskmanage的机器中，所以要把目标文件分发。\n\n**执行程序** \n\n ```shell\n..flink run -c 全类名 /jar包位置 --input 输入文件位置 --output 输出文件位置\n ```\n\n **到目标文件夹中查看计算结果**\n\n**注：**计算结果根据会保存到taskmanage的机器下，不会再jobmanage下。\n\n在**web控制台**查看计算过程\n\n ```html\n在浏览器打开\nhttp://master:8081 \n ```\n\n \n\n## yarn模式\n\n**启动hadoop集群**\n\n**启动yarn-session**\n\n```shell\n./yarn-sessin.sh -n 2 -s 6 -jm 1024 -tm test -d\n```\n\n其中：\n\n* -n(--container)：TaskManager的数量。\n\t -s(--slots)：\t每个TaskManager的slot数量，默认一个slot一个core，默认每个taskmanager的slot的个数为1，有时可以多一些taskmanager，做冗余。\n* -jm：JobManager的内存（单位MB)。\n* -tm：每个taskmanager的内存（单位MB)。\n* -nm：yarn 的appName(现在yarn的ui上的名字)。 \n* -d：后台执行。\n\n **执行任务**\n\n```shell\n./flink run -m yarn-cluster -c 主类名 jar包位置 --input 输入文件位置 --output 输出文件位置 \n```\n\n**去yarn控制台查看任务状态**\n\n```html\n去浏览器打开\nhttp://slave1:8088\n```\n\n# Flink架构介绍\n\n## 基本组件栈\n\n了解Spark的朋友会发现Flink的架构和Spark是非常类似的，在整个软件架构体系中，同样遵循着分层的架构设计理念，在降低系统耦合度的同时，也为上层用户构建Flink应用提供了丰富且友好的接口。\n\n![file](流式处理框架后起之秀Flink/6.png)\n\nFlink分为架构分为三层，由上往下依次是API&Libraries层、Runtime核心层以及物理部署层\n\n​        **API&Libraries层**\n\n作为分布式数据处理框架，Flink同时提供了支撑计算和批计算的接口，同时在此基础上抽象出不同的应用类型的组件库，如基于流处理的CEP(复杂事件处理库)、SQL&Table库和基于批处理的FlinkML(机器学习库)等、Gelly(图处理库)等。API层包括构建流计算应用的DataStream API和批计算应用的DataSet API，两者都提供给用户丰富的数据处理高级API，例如Map、FlatMap操作等，同时也提供比较低级的Process Function API，用户可以直接操作状态和时间等底层数据。\n\n　　**Runtime核心层**\n\n　　该层主要负责对上层不同接口提供基础服务，也是Flink分布式计算框架的核心实现层，支持分布式Stream作业的执行、JobGraph到ExecutionGraph的映射转换、任务调度等。将DataSteam和DataSet转成统一的可执行的Task Operator，达到在流式引擎下同时处理批量计算和流式计算的目的。\n\n　　**物理部署层**\n\n　　该层主要涉及Flink的部署模式，目前Flink支持多种部署模式：本地、集群(Standalone、YARN)、云(GCE/EC2)、Kubenetes。Flink能够通过该层能够支持不同平台的部署，用户可以根据需要选择使用对应的部署模式。\n\n## 运行架构\n\n## 任务提交流程（yarn模式）\n\n![Yarn模式任务提交流程](流式处理框架后起之秀Flink/wps23.jpg) \n\nFlink任务提交后，Client向HDFS上传Flink的Jar包和配置，之后向Yarn ResourceManager提交任务，ResourceManager分配Container资源并通知对应的NodeManager启动ApplicationMaster，ApplicationMaster启动后加载Flink的Jar包和配置构建环境，然后启动JobManager，之后ApplicationMaster向ResourceManager申请资源启动TaskManager，ResourceManager分配Container资源后，由ApplicationMaster通知资源所在节点的NodeManager启动TaskManager，NodeManager加载Flink的Jar包和配置构建环境并启动TaskManager，TaskManager启动后向JobManager发送心跳包，并等待JobManager向其分配任务。\n\n## **2** **任务调度原理**\n\n![任务调度原理](流式处理框架后起之秀Flink/wps24.jpg)\n\n客户端不是运行时和程序执行的一部分，但它用于准备并发送dataflow(JobGraph)给Master(JobManager)，然后，客户端断开连接或者维持连接以等待接收计算结果。\n\n当 Flink 集群启动后，首先会启动一个 JobManger 和一个或多个的 TaskManager。由 Client 提交任务给 JobManager，JobManager 再调度任务到各个 TaskManager 去执行，然后 TaskManager 将心跳和统计信息汇报给 JobManager。TaskManager 之间以流的形式进行数据的传输。上述三者均为独立的 JVM 进程。\n\n**Client** 为提交 Job 的客户端，可以是运行在任何机器上（与 JobManager 环境连通即可）。提交 Job 后，Client 可以结束进程（Streaming的任务），也可以不结束并等待结果返回。\n\n**JobManager** 主要负责调度 Job 并协调 Task 做 checkpoint，职责上很像 Storm 的 Nimbus。从 Client 处接收到 Job 和 JAR 包等资源后，会生成优化后的执行计划，并以 Task 的单元调度到各个 TaskManager 去执行。\n\n**TaskManager** 在启动的时候就设置好了槽位数（Slot），每个 slot 能启动一个 Task，Task 为线程。从 JobManager 处接收需要部署的 Task，部署启动后，与自己的上游建立 Netty 连接，接收数据并处理。\n\n**关于执行图**\n\nFlink 中的执行图可以分成四层：**StreamGraph** -> **JobGraph** -> **ExecutionGraph** -> **物理执行图**。\n\n**StreamGraph**：是根据用户通过 Stream API 编写的代码生成的最初的图。用来表示程序的拓扑结构。\n\n**JobGraph**：StreamGraph经过优化后生成了 JobGraph，提交给 JobManager 的数据结构。主要的优化为，将多个符合条件的节点 chain 在一起作为一个节点，这样可以减少数据在节点之间流动所需要的序列化/反序列化/传输消耗。\n\n**ExecutionGraph**：JobManager 根据 JobGraph 生成ExecutionGraph。ExecutionGraph是JobGraph的并行化版本，是调度层最核心的数据结构。\n\n**物理执行图**：JobManager 根据 ExecutionGraph 对 Job 进行调度后，在各个TaskManager 上部署 Task 后形成的“图”，并不是一个具体的数据结构。\n\n![](流式处理框架后起之秀Flink/wps25.jpg)\n\n## **3** **Worker与Slots** \n\n**每一个worker(TaskManager)是一个JVM进程，它可能会在独立的线程上执行一个或多个subtask**。为了控制一个worker能接收多少个task，worker通过task slot来进行控制（一个worker至少有一个task slot）。·\n\n每个task slot表示TaskManager拥有资源的一个固定大小的子集。假如一个TaskManager有三个slot，那么它会将其管理的内存分成三份给各个slot。**资源slot化意味着一个subtask将不需要跟来自其他job的subtask竞争被管理的内存，取而代之的是它将拥有一定数量的内存储备**。需要注意的是，这里不会涉及到CPU的隔离，slot目前仅仅用来隔离task的受管理的内存。\n\n**通过调整task slot的数量，允许用户定义subtask之间如何互相隔离**。如果一个TaskManager一个slot，那将意味着每个task group运行在独立的JVM中（该JVM可能是通过一个特定的容器启动的），而一个TaskManager多个slot意味着更多的subtask可以共享同一个JVM。而在同一个JVM进程中的task将共享TCP连接（基于多路复用）和心跳消息。它们也可能共享数据集和数据结构，因此这减少了每个task的负载。\n\n![TaskManager与Slot](流式处理框架后起之秀Flink/wps26.jpg)\n\n**Task **Slot是静态的概念，是指TaskManager具有的并发执行能力**，可以通过参数taskmanager.numberOfTaskSlots进行配置，而**并行度parallelism是动态概念，即TaskManager运行程序时实际使用的并发能力**，可以通过参数parallelism.default进行配置。\n\n也就是说，假设一共有3个TaskManager，每一个TaskManager中的分配3个TaskSlot，也就是每个TaskManager可以接收3个task，一共9个TaskSlot，如果我们设置parallelism.default=1，即运行程序默认的并行度为1，9个TaskSlot只用了1个，有8个空闲，因此，设置合适的并行度才能提高效率。\n\n![](流式处理框架后起之秀Flink/wps27.jpg) \n\n![](流式处理框架后起之秀Flink/wps28.jpg) \n\n \n\n## **4** **并行数据流**\n\n**Flink程序的执行具有并行、分布式的特性**。在执行过程中，一个 stream 包含一个或多个 stream partition ，而每一个 operator 包含一个或多个 operator subtask，这些operator subtasks在不同的线程、不同的物理机或不同的容器中彼此互不依赖得执行。\n\n**一个特定operator的subtask的个数被称之为其parallelism(并行度)**。一个stream的并行度总是等同于其producing operator的并行度。一个程序中，不同的operator可能具有不同的并行度。\n\n![并行数据流](流式处理框架后起之秀Flink/wps29.jpg)\n\nStream在operator之间传输数据的形式可以是one-to-one(forwarding)的模式也可以是redistributing的模式，具体是哪一种形式，取决于operator的种类。\n\n**One-to-one**：**stream(比如在source和map operator之间)维护着分区以及元素的顺序**。那意味着map operator的subtask看到的元素的个数以及顺序跟source operator的subtask生产的元素的个数、顺序相同，map、fliter、flatMap等算子都是one-to-one的对应关系。\n\nØ **类似于s****park****中的窄依赖**\n\n**Redistributing**：**stream(map()跟keyBy/window之间或者keyBy/window跟sink之间)的分区会发生改变**。每一个operator subtask依据所选择的transformation发送数据到不同的目标subtask。例如，keyBy() 基于hashCode重分区、broadcast和rebalance会随机重新分区，这些算子都会引起redistribute过程，而redistribute过程就类似于Spark中的shuffle过程。\n\nØ **类似于s****park****中的宽依赖**\n\n## **5** **task与operator** **chains**\n\n相同并行度的one to one操作，Flink这样相连的operator 链接在一起形成一个task，原来的operator成为里面的subtask。将operators链接成task是非常有效的优化：**它能减少线程之间的切换和基于缓存区的数据交换，在减少时延的同时提升吞吐量**。链接的行为可以在编程API中进行指定。\n\n ![ task与operatorchains](流式处理框架后起之秀Flink/wps30.jpg)\n\n**OperatorChain的优点**\n\n- 减少线程切换\n- 减少序列化与反序列化\n- 减少延迟并且提高吞吐能力\n\n**OperatorChain 组成条件**\n\n- 上下游算子并行度一致\n- 上下游算子之间没有数据shuffle\n\n# 流计算框架Flink与Storm 的性能对比\n\n|          | Storm                                                        | Flink                                                        |\n| -------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 状态管理 | 无状态，需用户自行进行状态管理                               | 有状态                                                       |\n| 窗口支持 | 对事件窗口支持较弱，缓存整个窗口的所有 数据，窗口结束时一起计算 | 窗口支持较为完善，自带一些窗口聚合方法，并 且会自动管理窗口状态。 |\n| 消息投递 | At Most Once At Least Once                                   | At Most Once At Least Once Exactly Once                      |\n| 容错方式 | ACK机制：对每个消息进行全链路跟踪，失败 或超时进行重发。     | 检查点机制：通过分布式一致性快照机制，对数 据流和算子状态进行保存。在发生错误时，使系 统能够进行回滚。 |\n| 应用现状 | 在美团点评实时计算业务中已有较为成熟的 运用，有管理平台、常用 API 和相应的文档， 大量实时作业基于 Storm 构建。 | 在美团点评实时计算业务中已有一定应用，但 是管理平台、API 及文档等仍需进一步完善。 |\n\n##  框架本身性能\n\n- Storm 单线程吞吐约为 **8.7 万条/秒**，Flink 单线程吞吐 可达 **35 万条/秒**。Flink 吞吐约为 Storm 的 3-5 倍。\n- Storm QPS 接近吞吐时延迟（含 Kafka 读写时间）中位 数约 100 毫秒，99 线约 700 毫秒，Flink 中位数约 50 毫秒，99 线约 300 毫秒。Flink 在 满吞吐时的延迟约为 Storm 的一半，且随着 QPS 逐渐增大，Flink 在延迟上的优势开始体现出来。\n- 综上可得，**Flink 框架本身性能优于 Storm**。\n\n##  复杂用户逻辑对框架差异的削弱\n\n- 单个 Bolt Sleep 时长达到 1 毫秒时， Flink 的延迟仍低于 Storm，但吞吐优势已基本无法体现。\n- 因此，用户逻辑越复杂，本身耗时越长，针对该逻辑的测试体现出来的框架的差异越小。\n\n## 不同消息投递语义的差异\n\n- Flink Exactly Once 的吞吐较 At Least Once 而 言下降 6.3%，延迟差异不大；Storm At Most Once 语义下的吞吐较 At Least Once 提升 16.8%，延迟稍有下降。\n- 由于 Storm 会对每条消息进行 ACK，Flink 是基于一批消息做的检查点，不同的实现原理导 致两者在 At Least Once 语义的花费差异较大，从而影响了性能。而 Flink 实现 Exactly Once 语义仅增加了对齐操作，因此在算子并发量不大、没有出现慢节点的情况下对 Flink 性能的 影响不大。Storm At Most Once 语义下的性能仍然低于 Flink。\n\n## Flink 状态存储后端选择\n\n• Flink 提供了内存、文件系统、RocksDB 三种 StateBackends，三者的对比如下：\n\nStateBackend 过程状态存储 检查点存储 吞吐 推荐使用场景 Memory TM Memory JM Memory 高（3-5 倍 Storm） 调试、无状态或对数据是否 丢失重复无要求 FileSystem TM Memory FS/HDFS 高（3-5 倍 Storm） 普通状态、窗口、KV 结构 （建议作为默认 Backend）\n\n```html\n    RocksDB RocksDB on TM FS/HDFS 低（0.3-0.5 倍 Storm） 超大状态、超长窗口、大型 KV 结构 \n```\n\n## 推荐使用 Flink 的场景\n\n综合上述测试结果，以下实时计算场景建议考虑使用 Flink 框架进行计算：\n\n- 要求消息投递语义为Exactly Once的场景；\n- 数据量较大，要求高吞吐低延迟的场景；\n- 需要进行状态管理或窗口统计的场景。","source":"_posts/流式处理框架后起之秀Flink.md","raw":"---\ntitle: 流式处理框架后起之秀Flink\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-16 21:27:46\npassword:\nsummary:\ntags: \nimg: /medias/featureimages/flink.jpg\ncategories: 大数据\n---\n\n\n\n# Flink简介\n\n## 初识Flink\n\nApache Flink是一个框架和分布式处理引擎，用于对无界和有界数据流进行有状态计算。Flink被设计在所有常见的集群环境中运行，以内存执行速度和任意规模来执行计算。\n\n![](流式处理框架后起之秀Flink/1.jpg) \n\nFlink起源于Stratosphere项目，Stratosphere是在2010~2014年由3所地处柏林的大学和欧洲的一些其他的大学共同进行的研究项目，2014年4月Stratosphere的代码被复制并捐赠给了Apache软件基金会，参加这个孵化项目的初始成员是Stratosphere系统的核心开发人员，2014年12月，Flink一跃成为Apache软件基金会的顶级项目。\n\n![](流式处理框架后起之秀Flink/2.jpg) \n\n \n\n在德语中，Flink一词表示快速和灵巧，项目采用一只松鼠的彩色图案作为logo，这不仅是因为松鼠具有快速和灵巧的特点，还因为柏林的松鼠有一种迷人的红棕色，而Flink的松鼠logo拥有可爱的尾巴，尾巴的颜色与Apache软件基金会的logo颜色相呼应，也就是说，这是一只Apache风格的松鼠。\n\n![](流式处理框架后起之秀Flink/3.jpg)\n\n![4](流式处理框架后起之秀Flink/4.jpg)\n\nFlink虽然诞生的早(2010年)，但是其实是起大早赶晚集，直到2015年才开始突然爆发热度。 \n\n在Flink被apache提升为顶级项目之后，阿里实时计算团队决定在阿里内部建立一个 Flink 分支 Blink，并对 Flink 进行大量的修改和完善，让其适应阿里巴巴这种超大规模的业务场景。\n\nBlink由2016年上线，服务于阿里集团内部搜索、推荐、广告和蚂蚁等大量核心实时业务。与2019年1月Blink正式开源，目前阿里70%的技术部门都有使用该版本。\n\nBlink比起Flink的优势就是对SQL语法的更完善的支持以及执行SQL的性能提升。\n\n![](流式处理框架后起之秀Flink/wps5.jpg) \n\n## **Flink**的重要特点\n\n### 事件驱动型(Event-driven)\n\n事件驱动型应用是一类具有状态的应用，它从一个或多个事件流提取数据，并根据到来的事件触发计算、状态更新或其他外部动作。比较典型的就是以kafka为代表的消息队列几乎都是事件驱动型应用。\n\n与之不同的就是SparkStreaming微批次，如图：\n\n![](流式处理框架后起之秀Flink/wps6.jpg) \n\n   事件驱动型：\n\n![](流式处理框架后起之秀Flink/wps7.jpg) \n\n \n\n### 流与批的世界观\n\n​     **批处理**的特点是有界、持久、大量，非常适合需要访问全套记录才能完成的计算工作，一般用于离线统计。\n\n**流处理**的特点是无界、实时,  无需针对整个数据集执行操作，而是对通过系统传输的每个数据项执行操作，一般用于实时统计。\n\n在**spark**的世界观中，一切都是由批次组成的，离线数据是一个大批次，而实时数据是由一个一个无限的小批次组成的。\n\n 而在**flink**的世界观中，一切都是由流组成的，离线数据是有界限的流，实时数据是一个没有界限的流，这就是所谓的有界流和无界流。\n\n**无界数据流**：**无界数据流有一个开始但是没有结束**，它们不会在生成时终止并提供数据，必须连续处理无界流，也就是说必须在获取后立即处理event。对于无界数据流我们无法等待所有数据都到达，因为输入是无界的，并且在任何时间点都不会完成。处理无界数据通常要求以特定顺序（例如事件发生的顺序）获取event，以便能够推断结果完整性。\n\n**有界数据流**：**有界数据流有明确定义的开始和结束**，可以在执行任何计算之前通过获取所有数据来处理有界流，处理有界流不需要有序获取，因为可以始终对有界数据集进行排序，有界流的处理也称为批处理。\n\n![](流式处理框架后起之秀Flink/wps8.png)\n\n​    这种以流为世界观的架构，获得的最大好处就是具有极低的延迟。\n\n###  分层api\n\n![](流式处理框架后起之秀Flink/wps9.jpg) \n\n最底层级的抽象仅仅提供了有状态流，它将通过过程函数（Process Function）被嵌入到DataStream API中。底层过程函数（Process Function） 与 DataStream API 相集成，使其可以对某些特定的操作进行底层的抽象，它允许用户可以自由地处理来自一个或多个数据流的事件，并使用一致的容错的状态。除此之外，用户可以注册事件时间并处理时间回调，从而使程序可以处理复杂的计算。\n\n实际上，**大多数应用并不需要上述的底层抽象，而是针对核心API（Core APIs） 进行编程，比如DataStream API（有界或无界流数据）以及DataSet API（有界数据集）**。这些API为数据处理提供了通用的构建模块，比如由用户定义的多种形式的转换（transformations），连接（joins），聚合（aggregations），窗口操作（windows）等等。DataSet API 为有界数据集提供了额外的支持，例如循环与迭代。这些API处理的数据类型以类（classes）的形式由各自的编程语言所表示。\n\nTable API 是以表为中心的声明式编程，其中表可能会动态变化（在表达流数据时）。Table API遵循（扩展的）关系模型：表有二维数据结构（schema）（类似于关系数据库中的表），同时API提供可比较的操作，例如select、project、join、group-by、aggregate等。Table API程序声明式地定义了什么逻辑操作应该执行，而不是准确地确定这些操作代码的看上去如何 。 尽管Table API可以通过多种类型的用户自定义函数（UDF）进行扩展，其仍不如核心API更具表达能力，但是使用起来却更加简洁（代码量更少）。除此之外，Table API程序在执行之前会经过内置优化器进行优化。\n\n**你可以在表与 DataStream/DataSet 之间无缝切换，以允许程序将 Table API 与 DataStream 以及 DataSet 混合使用**。\n\nFlink提供的最高层级的抽象是 SQL 。这一层抽象在语法与表达能力上与 Table API 类似，但是是以SQL查询表达式的形式表现程序。SQL抽象与Table API交互密切，同时SQL查询可以直接在Table API定义的表上执行。\n\n### 支持有状态计算\n\nFlink在1.4版本中实现了状态管理，所谓状态管理就是在流失计算过程中将算子的中间结果保存在内存或者文件系统中，等下一个事件进入算子后可以让当前事件的值与历史值进行汇总累计。\n\n### 支持exactly-once语义\n\n在分布式系统中，组成系统的各个计算机是独立的。这些计算机有可能fail。\n\n一个sender发送一条message到receiver。根据receiver出现fail时sender如何处理fail，可以将message delivery分为三种语义:\n\n**At Most once:** 对于一条message,receiver最多收到一次(0次或1次).\n\n可以达成At Most Once的策略:\n\nsender把message发送给receiver.无论receiver是否收到message,sender都不再重发message.\n\n**At Least once:** 对于一条message,receiver最少收到一次(1次及以上).\n\n可以达成At Least Once的策略:\n\nsender把message发送给receiver.当receiver在规定时间内没有回复ACK或回复了error信息,那么sender重发这条message给receiver,直到sender收到receiver的ACK.\n\n**Exactly once:** 对于一条message,receiver确保只收到一次\n\n### 支持事件时间（EventTime)\n\n目前大多数框架时间窗口计算，都是采用当前系统时间，以时间为单位进行的聚合计算只能反应数据到达计算引擎的时间，而并不是实际业务时间\n\n# Flink实战入门\n\n## **批处理wordcount编程实战**\n\n**添加依赖**\n\n```xml\n        <dependency>\n            <groupId>org.apache.flink</groupId>\n            <artifactId>flink-scala_2.11</artifactId>\n            <version>1.7.0</version>\n        </dependency>\n```\n\n**编写程序**\n\n```scala\ndef main(args: Array[String]): Unit = {\n\n  //构造执行环境\n  val env: ExecutionEnvironment = ExecutionEnvironment.getExecutionEnvironment\n  //读取文件\n  val input = \"file:///d:/temp/hello.txt\"\n  val ds: DataSet[String] = env.readTextFile(input)\n  // 其中flatMap 和Map 中  需要引入隐式转换\n  import org.apache.flink.api.scala.createTypeInformation\n  //经过groupby进行分组，sum进行聚合\n  val aggDs: AggregateDataSet[(String, Int)] = ds.flatMap(_.split(\" \")).map((_, 1)).groupBy(0).sum(1)\n  // 打印\n  aggDs.print()\n\n}\n```\n\n## 流处理wordcount编程\n\n**导入依赖**\n\n```xml\n<dependency>\n    <groupId>org.apache.flink</groupId>\n    <artifactId>flink-scala_2.11</artifactId>\n    <version>1.7.0</version>\n</dependency>\n\n<!-- https://mvnrepository.com/artifact/org.apache.flink/flink-streaming-scala -->\n<dependency>\n    <groupId>org.apache.flink</groupId>\n    <artifactId>flink-streaming-scala_2.11</artifactId>\n    <version>1.7.0</version>\n</dependency>\n```\n\n**编写程序**\n\n```scala\nimport org.apache.flink.api.java.utils.ParameterTool\nimport org.apache.flink.streaming.api.scala.{DataStream, StreamExecutionEnvironment}\n\nobject StreamWcApp {\n\n  def main(args: Array[String]): Unit = {\n    //从外部命令中获取参数\n    val tool: ParameterTool = ParameterTool.fromArgs(args)\n    val host: String = tool.get(\"host\")\n    val port: Int = tool.get(\"port\").toInt\n\n    //创建流处理环境\n    val env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment\n    //接收socket文本流\n    val textDstream: DataStream[String] = env.socketTextStream(host,port)\n   // flatMap和Map需要引用的隐式转换\n    import org.apache.flink.api.scala._\n   //处理 分组并且sum聚合\n    val dStream: DataStream[(String, Int)] = textDstream.flatMap(_.split(\" \")).filter(_.nonEmpty).map((_,1)).keyBy(0).sum(1)\n   //打印\n    dStream.print()\n    \n    env.execute()\n  }\n```\n\n\n\n# Flink部署\n\n## standalone模式\n\n###  **安装**\n\n解压缩  flink-1.7.0-bin-hadoop27-scala_2.11.tgz\n\n**修改 flink/conf/flink-conf.yaml 文件**\n\n```yaml\njobmanager.rpc.address:master\n```\n\n**修改/conf/slave文件,添加上集群主机**\n\n```html\nslave1\nslave2\nslave3\n```\n\n**分发给 另外两台机子([分发脚本可通过如下地址获取]())**\n\n```shell\nxsync flink-1.7.0\n```\n\n**启动**\n\n ```shell\nstart-cluster.sh\n ```\n\n###  提交任务\n\n**准备数据文件** \n\n**把含数据文件的文件夹，分发到taskmanage 机器中** \n\n**注:**由于读取数据是从本地磁盘读取，实际任务会被分发到taskmanage的机器中，所以要把目标文件分发。\n\n**执行程序** \n\n ```shell\n..flink run -c 全类名 /jar包位置 --input 输入文件位置 --output 输出文件位置\n ```\n\n **到目标文件夹中查看计算结果**\n\n**注：**计算结果根据会保存到taskmanage的机器下，不会再jobmanage下。\n\n在**web控制台**查看计算过程\n\n ```html\n在浏览器打开\nhttp://master:8081 \n ```\n\n \n\n## yarn模式\n\n**启动hadoop集群**\n\n**启动yarn-session**\n\n```shell\n./yarn-sessin.sh -n 2 -s 6 -jm 1024 -tm test -d\n```\n\n其中：\n\n* -n(--container)：TaskManager的数量。\n\t -s(--slots)：\t每个TaskManager的slot数量，默认一个slot一个core，默认每个taskmanager的slot的个数为1，有时可以多一些taskmanager，做冗余。\n* -jm：JobManager的内存（单位MB)。\n* -tm：每个taskmanager的内存（单位MB)。\n* -nm：yarn 的appName(现在yarn的ui上的名字)。 \n* -d：后台执行。\n\n **执行任务**\n\n```shell\n./flink run -m yarn-cluster -c 主类名 jar包位置 --input 输入文件位置 --output 输出文件位置 \n```\n\n**去yarn控制台查看任务状态**\n\n```html\n去浏览器打开\nhttp://slave1:8088\n```\n\n# Flink架构介绍\n\n## 基本组件栈\n\n了解Spark的朋友会发现Flink的架构和Spark是非常类似的，在整个软件架构体系中，同样遵循着分层的架构设计理念，在降低系统耦合度的同时，也为上层用户构建Flink应用提供了丰富且友好的接口。\n\n![file](流式处理框架后起之秀Flink/6.png)\n\nFlink分为架构分为三层，由上往下依次是API&Libraries层、Runtime核心层以及物理部署层\n\n​        **API&Libraries层**\n\n作为分布式数据处理框架，Flink同时提供了支撑计算和批计算的接口，同时在此基础上抽象出不同的应用类型的组件库，如基于流处理的CEP(复杂事件处理库)、SQL&Table库和基于批处理的FlinkML(机器学习库)等、Gelly(图处理库)等。API层包括构建流计算应用的DataStream API和批计算应用的DataSet API，两者都提供给用户丰富的数据处理高级API，例如Map、FlatMap操作等，同时也提供比较低级的Process Function API，用户可以直接操作状态和时间等底层数据。\n\n　　**Runtime核心层**\n\n　　该层主要负责对上层不同接口提供基础服务，也是Flink分布式计算框架的核心实现层，支持分布式Stream作业的执行、JobGraph到ExecutionGraph的映射转换、任务调度等。将DataSteam和DataSet转成统一的可执行的Task Operator，达到在流式引擎下同时处理批量计算和流式计算的目的。\n\n　　**物理部署层**\n\n　　该层主要涉及Flink的部署模式，目前Flink支持多种部署模式：本地、集群(Standalone、YARN)、云(GCE/EC2)、Kubenetes。Flink能够通过该层能够支持不同平台的部署，用户可以根据需要选择使用对应的部署模式。\n\n## 运行架构\n\n## 任务提交流程（yarn模式）\n\n![Yarn模式任务提交流程](流式处理框架后起之秀Flink/wps23.jpg) \n\nFlink任务提交后，Client向HDFS上传Flink的Jar包和配置，之后向Yarn ResourceManager提交任务，ResourceManager分配Container资源并通知对应的NodeManager启动ApplicationMaster，ApplicationMaster启动后加载Flink的Jar包和配置构建环境，然后启动JobManager，之后ApplicationMaster向ResourceManager申请资源启动TaskManager，ResourceManager分配Container资源后，由ApplicationMaster通知资源所在节点的NodeManager启动TaskManager，NodeManager加载Flink的Jar包和配置构建环境并启动TaskManager，TaskManager启动后向JobManager发送心跳包，并等待JobManager向其分配任务。\n\n## **2** **任务调度原理**\n\n![任务调度原理](流式处理框架后起之秀Flink/wps24.jpg)\n\n客户端不是运行时和程序执行的一部分，但它用于准备并发送dataflow(JobGraph)给Master(JobManager)，然后，客户端断开连接或者维持连接以等待接收计算结果。\n\n当 Flink 集群启动后，首先会启动一个 JobManger 和一个或多个的 TaskManager。由 Client 提交任务给 JobManager，JobManager 再调度任务到各个 TaskManager 去执行，然后 TaskManager 将心跳和统计信息汇报给 JobManager。TaskManager 之间以流的形式进行数据的传输。上述三者均为独立的 JVM 进程。\n\n**Client** 为提交 Job 的客户端，可以是运行在任何机器上（与 JobManager 环境连通即可）。提交 Job 后，Client 可以结束进程（Streaming的任务），也可以不结束并等待结果返回。\n\n**JobManager** 主要负责调度 Job 并协调 Task 做 checkpoint，职责上很像 Storm 的 Nimbus。从 Client 处接收到 Job 和 JAR 包等资源后，会生成优化后的执行计划，并以 Task 的单元调度到各个 TaskManager 去执行。\n\n**TaskManager** 在启动的时候就设置好了槽位数（Slot），每个 slot 能启动一个 Task，Task 为线程。从 JobManager 处接收需要部署的 Task，部署启动后，与自己的上游建立 Netty 连接，接收数据并处理。\n\n**关于执行图**\n\nFlink 中的执行图可以分成四层：**StreamGraph** -> **JobGraph** -> **ExecutionGraph** -> **物理执行图**。\n\n**StreamGraph**：是根据用户通过 Stream API 编写的代码生成的最初的图。用来表示程序的拓扑结构。\n\n**JobGraph**：StreamGraph经过优化后生成了 JobGraph，提交给 JobManager 的数据结构。主要的优化为，将多个符合条件的节点 chain 在一起作为一个节点，这样可以减少数据在节点之间流动所需要的序列化/反序列化/传输消耗。\n\n**ExecutionGraph**：JobManager 根据 JobGraph 生成ExecutionGraph。ExecutionGraph是JobGraph的并行化版本，是调度层最核心的数据结构。\n\n**物理执行图**：JobManager 根据 ExecutionGraph 对 Job 进行调度后，在各个TaskManager 上部署 Task 后形成的“图”，并不是一个具体的数据结构。\n\n![](流式处理框架后起之秀Flink/wps25.jpg)\n\n## **3** **Worker与Slots** \n\n**每一个worker(TaskManager)是一个JVM进程，它可能会在独立的线程上执行一个或多个subtask**。为了控制一个worker能接收多少个task，worker通过task slot来进行控制（一个worker至少有一个task slot）。·\n\n每个task slot表示TaskManager拥有资源的一个固定大小的子集。假如一个TaskManager有三个slot，那么它会将其管理的内存分成三份给各个slot。**资源slot化意味着一个subtask将不需要跟来自其他job的subtask竞争被管理的内存，取而代之的是它将拥有一定数量的内存储备**。需要注意的是，这里不会涉及到CPU的隔离，slot目前仅仅用来隔离task的受管理的内存。\n\n**通过调整task slot的数量，允许用户定义subtask之间如何互相隔离**。如果一个TaskManager一个slot，那将意味着每个task group运行在独立的JVM中（该JVM可能是通过一个特定的容器启动的），而一个TaskManager多个slot意味着更多的subtask可以共享同一个JVM。而在同一个JVM进程中的task将共享TCP连接（基于多路复用）和心跳消息。它们也可能共享数据集和数据结构，因此这减少了每个task的负载。\n\n![TaskManager与Slot](流式处理框架后起之秀Flink/wps26.jpg)\n\n**Task **Slot是静态的概念，是指TaskManager具有的并发执行能力**，可以通过参数taskmanager.numberOfTaskSlots进行配置，而**并行度parallelism是动态概念，即TaskManager运行程序时实际使用的并发能力**，可以通过参数parallelism.default进行配置。\n\n也就是说，假设一共有3个TaskManager，每一个TaskManager中的分配3个TaskSlot，也就是每个TaskManager可以接收3个task，一共9个TaskSlot，如果我们设置parallelism.default=1，即运行程序默认的并行度为1，9个TaskSlot只用了1个，有8个空闲，因此，设置合适的并行度才能提高效率。\n\n![](流式处理框架后起之秀Flink/wps27.jpg) \n\n![](流式处理框架后起之秀Flink/wps28.jpg) \n\n \n\n## **4** **并行数据流**\n\n**Flink程序的执行具有并行、分布式的特性**。在执行过程中，一个 stream 包含一个或多个 stream partition ，而每一个 operator 包含一个或多个 operator subtask，这些operator subtasks在不同的线程、不同的物理机或不同的容器中彼此互不依赖得执行。\n\n**一个特定operator的subtask的个数被称之为其parallelism(并行度)**。一个stream的并行度总是等同于其producing operator的并行度。一个程序中，不同的operator可能具有不同的并行度。\n\n![并行数据流](流式处理框架后起之秀Flink/wps29.jpg)\n\nStream在operator之间传输数据的形式可以是one-to-one(forwarding)的模式也可以是redistributing的模式，具体是哪一种形式，取决于operator的种类。\n\n**One-to-one**：**stream(比如在source和map operator之间)维护着分区以及元素的顺序**。那意味着map operator的subtask看到的元素的个数以及顺序跟source operator的subtask生产的元素的个数、顺序相同，map、fliter、flatMap等算子都是one-to-one的对应关系。\n\nØ **类似于s****park****中的窄依赖**\n\n**Redistributing**：**stream(map()跟keyBy/window之间或者keyBy/window跟sink之间)的分区会发生改变**。每一个operator subtask依据所选择的transformation发送数据到不同的目标subtask。例如，keyBy() 基于hashCode重分区、broadcast和rebalance会随机重新分区，这些算子都会引起redistribute过程，而redistribute过程就类似于Spark中的shuffle过程。\n\nØ **类似于s****park****中的宽依赖**\n\n## **5** **task与operator** **chains**\n\n相同并行度的one to one操作，Flink这样相连的operator 链接在一起形成一个task，原来的operator成为里面的subtask。将operators链接成task是非常有效的优化：**它能减少线程之间的切换和基于缓存区的数据交换，在减少时延的同时提升吞吐量**。链接的行为可以在编程API中进行指定。\n\n ![ task与operatorchains](流式处理框架后起之秀Flink/wps30.jpg)\n\n**OperatorChain的优点**\n\n- 减少线程切换\n- 减少序列化与反序列化\n- 减少延迟并且提高吞吐能力\n\n**OperatorChain 组成条件**\n\n- 上下游算子并行度一致\n- 上下游算子之间没有数据shuffle\n\n# 流计算框架Flink与Storm 的性能对比\n\n|          | Storm                                                        | Flink                                                        |\n| -------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 状态管理 | 无状态，需用户自行进行状态管理                               | 有状态                                                       |\n| 窗口支持 | 对事件窗口支持较弱，缓存整个窗口的所有 数据，窗口结束时一起计算 | 窗口支持较为完善，自带一些窗口聚合方法，并 且会自动管理窗口状态。 |\n| 消息投递 | At Most Once At Least Once                                   | At Most Once At Least Once Exactly Once                      |\n| 容错方式 | ACK机制：对每个消息进行全链路跟踪，失败 或超时进行重发。     | 检查点机制：通过分布式一致性快照机制，对数 据流和算子状态进行保存。在发生错误时，使系 统能够进行回滚。 |\n| 应用现状 | 在美团点评实时计算业务中已有较为成熟的 运用，有管理平台、常用 API 和相应的文档， 大量实时作业基于 Storm 构建。 | 在美团点评实时计算业务中已有一定应用，但 是管理平台、API 及文档等仍需进一步完善。 |\n\n##  框架本身性能\n\n- Storm 单线程吞吐约为 **8.7 万条/秒**，Flink 单线程吞吐 可达 **35 万条/秒**。Flink 吞吐约为 Storm 的 3-5 倍。\n- Storm QPS 接近吞吐时延迟（含 Kafka 读写时间）中位 数约 100 毫秒，99 线约 700 毫秒，Flink 中位数约 50 毫秒，99 线约 300 毫秒。Flink 在 满吞吐时的延迟约为 Storm 的一半，且随着 QPS 逐渐增大，Flink 在延迟上的优势开始体现出来。\n- 综上可得，**Flink 框架本身性能优于 Storm**。\n\n##  复杂用户逻辑对框架差异的削弱\n\n- 单个 Bolt Sleep 时长达到 1 毫秒时， Flink 的延迟仍低于 Storm，但吞吐优势已基本无法体现。\n- 因此，用户逻辑越复杂，本身耗时越长，针对该逻辑的测试体现出来的框架的差异越小。\n\n## 不同消息投递语义的差异\n\n- Flink Exactly Once 的吞吐较 At Least Once 而 言下降 6.3%，延迟差异不大；Storm At Most Once 语义下的吞吐较 At Least Once 提升 16.8%，延迟稍有下降。\n- 由于 Storm 会对每条消息进行 ACK，Flink 是基于一批消息做的检查点，不同的实现原理导 致两者在 At Least Once 语义的花费差异较大，从而影响了性能。而 Flink 实现 Exactly Once 语义仅增加了对齐操作，因此在算子并发量不大、没有出现慢节点的情况下对 Flink 性能的 影响不大。Storm At Most Once 语义下的性能仍然低于 Flink。\n\n## Flink 状态存储后端选择\n\n• Flink 提供了内存、文件系统、RocksDB 三种 StateBackends，三者的对比如下：\n\nStateBackend 过程状态存储 检查点存储 吞吐 推荐使用场景 Memory TM Memory JM Memory 高（3-5 倍 Storm） 调试、无状态或对数据是否 丢失重复无要求 FileSystem TM Memory FS/HDFS 高（3-5 倍 Storm） 普通状态、窗口、KV 结构 （建议作为默认 Backend）\n\n```html\n    RocksDB RocksDB on TM FS/HDFS 低（0.3-0.5 倍 Storm） 超大状态、超长窗口、大型 KV 结构 \n```\n\n## 推荐使用 Flink 的场景\n\n综合上述测试结果，以下实时计算场景建议考虑使用 Flink 框架进行计算：\n\n- 要求消息投递语义为Exactly Once的场景；\n- 数据量较大，要求高吞吐低延迟的场景；\n- 需要进行状态管理或窗口统计的场景。","slug":"流式处理框架后起之秀Flink","published":1,"updated":"2021-04-29T09:59:12.318Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mldj002cvkvy7cjv1wgn","content":"<h1 id=\"Flink简介\"><a href=\"#Flink简介\" class=\"headerlink\" title=\"Flink简介\"></a>Flink简介</h1><h2 id=\"初识Flink\"><a href=\"#初识Flink\" class=\"headerlink\" title=\"初识Flink\"></a>初识Flink</h2><p>Apache Flink是一个框架和分布式处理引擎，用于对无界和有界数据流进行有状态计算。Flink被设计在所有常见的集群环境中运行，以内存执行速度和任意规模来执行计算。</p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/1.jpg\" alt> </p>\n<p>Flink起源于Stratosphere项目，Stratosphere是在2010~2014年由3所地处柏林的大学和欧洲的一些其他的大学共同进行的研究项目，2014年4月Stratosphere的代码被复制并捐赠给了Apache软件基金会，参加这个孵化项目的初始成员是Stratosphere系统的核心开发人员，2014年12月，Flink一跃成为Apache软件基金会的顶级项目。</p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/2.jpg\" alt> </p>\n<p>在德语中，Flink一词表示快速和灵巧，项目采用一只松鼠的彩色图案作为logo，这不仅是因为松鼠具有快速和灵巧的特点，还因为柏林的松鼠有一种迷人的红棕色，而Flink的松鼠logo拥有可爱的尾巴，尾巴的颜色与Apache软件基金会的logo颜色相呼应，也就是说，这是一只Apache风格的松鼠。</p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/3.jpg\" alt></p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/4.jpg\" alt=\"4\"></p>\n<p>Flink虽然诞生的早(2010年)，但是其实是起大早赶晚集，直到2015年才开始突然爆发热度。 </p>\n<p>在Flink被apache提升为顶级项目之后，阿里实时计算团队决定在阿里内部建立一个 Flink 分支 Blink，并对 Flink 进行大量的修改和完善，让其适应阿里巴巴这种超大规模的业务场景。</p>\n<p>Blink由2016年上线，服务于阿里集团内部搜索、推荐、广告和蚂蚁等大量核心实时业务。与2019年1月Blink正式开源，目前阿里70%的技术部门都有使用该版本。</p>\n<p>Blink比起Flink的优势就是对SQL语法的更完善的支持以及执行SQL的性能提升。</p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps5.jpg\" alt> </p>\n<h2 id=\"Flink的重要特点\"><a href=\"#Flink的重要特点\" class=\"headerlink\" title=\"Flink的重要特点\"></a><strong>Flink</strong>的重要特点</h2><h3 id=\"事件驱动型-Event-driven\"><a href=\"#事件驱动型-Event-driven\" class=\"headerlink\" title=\"事件驱动型(Event-driven)\"></a>事件驱动型(Event-driven)</h3><p>事件驱动型应用是一类具有状态的应用，它从一个或多个事件流提取数据，并根据到来的事件触发计算、状态更新或其他外部动作。比较典型的就是以kafka为代表的消息队列几乎都是事件驱动型应用。</p>\n<p>与之不同的就是SparkStreaming微批次，如图：</p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps6.jpg\" alt> </p>\n<p>   事件驱动型：</p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps7.jpg\" alt> </p>\n<h3 id=\"流与批的世界观\"><a href=\"#流与批的世界观\" class=\"headerlink\" title=\"流与批的世界观\"></a>流与批的世界观</h3><p>​     <strong>批处理</strong>的特点是有界、持久、大量，非常适合需要访问全套记录才能完成的计算工作，一般用于离线统计。</p>\n<p><strong>流处理</strong>的特点是无界、实时,  无需针对整个数据集执行操作，而是对通过系统传输的每个数据项执行操作，一般用于实时统计。</p>\n<p>在<strong>spark</strong>的世界观中，一切都是由批次组成的，离线数据是一个大批次，而实时数据是由一个一个无限的小批次组成的。</p>\n<p> 而在<strong>flink</strong>的世界观中，一切都是由流组成的，离线数据是有界限的流，实时数据是一个没有界限的流，这就是所谓的有界流和无界流。</p>\n<p><strong>无界数据流</strong>：<strong>无界数据流有一个开始但是没有结束</strong>，它们不会在生成时终止并提供数据，必须连续处理无界流，也就是说必须在获取后立即处理event。对于无界数据流我们无法等待所有数据都到达，因为输入是无界的，并且在任何时间点都不会完成。处理无界数据通常要求以特定顺序（例如事件发生的顺序）获取event，以便能够推断结果完整性。</p>\n<p><strong>有界数据流</strong>：<strong>有界数据流有明确定义的开始和结束</strong>，可以在执行任何计算之前通过获取所有数据来处理有界流，处理有界流不需要有序获取，因为可以始终对有界数据集进行排序，有界流的处理也称为批处理。</p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps8.png\" alt></p>\n<p>​    这种以流为世界观的架构，获得的最大好处就是具有极低的延迟。</p>\n<h3 id=\"分层api\"><a href=\"#分层api\" class=\"headerlink\" title=\"分层api\"></a>分层api</h3><p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps9.jpg\" alt> </p>\n<p>最底层级的抽象仅仅提供了有状态流，它将通过过程函数（Process Function）被嵌入到DataStream API中。底层过程函数（Process Function） 与 DataStream API 相集成，使其可以对某些特定的操作进行底层的抽象，它允许用户可以自由地处理来自一个或多个数据流的事件，并使用一致的容错的状态。除此之外，用户可以注册事件时间并处理时间回调，从而使程序可以处理复杂的计算。</p>\n<p>实际上，<strong>大多数应用并不需要上述的底层抽象，而是针对核心API（Core APIs） 进行编程，比如DataStream API（有界或无界流数据）以及DataSet API（有界数据集）</strong>。这些API为数据处理提供了通用的构建模块，比如由用户定义的多种形式的转换（transformations），连接（joins），聚合（aggregations），窗口操作（windows）等等。DataSet API 为有界数据集提供了额外的支持，例如循环与迭代。这些API处理的数据类型以类（classes）的形式由各自的编程语言所表示。</p>\n<p>Table API 是以表为中心的声明式编程，其中表可能会动态变化（在表达流数据时）。Table API遵循（扩展的）关系模型：表有二维数据结构（schema）（类似于关系数据库中的表），同时API提供可比较的操作，例如select、project、join、group-by、aggregate等。Table API程序声明式地定义了什么逻辑操作应该执行，而不是准确地确定这些操作代码的看上去如何 。 尽管Table API可以通过多种类型的用户自定义函数（UDF）进行扩展，其仍不如核心API更具表达能力，但是使用起来却更加简洁（代码量更少）。除此之外，Table API程序在执行之前会经过内置优化器进行优化。</p>\n<p><strong>你可以在表与 DataStream/DataSet 之间无缝切换，以允许程序将 Table API 与 DataStream 以及 DataSet 混合使用</strong>。</p>\n<p>Flink提供的最高层级的抽象是 SQL 。这一层抽象在语法与表达能力上与 Table API 类似，但是是以SQL查询表达式的形式表现程序。SQL抽象与Table API交互密切，同时SQL查询可以直接在Table API定义的表上执行。</p>\n<h3 id=\"支持有状态计算\"><a href=\"#支持有状态计算\" class=\"headerlink\" title=\"支持有状态计算\"></a>支持有状态计算</h3><p>Flink在1.4版本中实现了状态管理，所谓状态管理就是在流失计算过程中将算子的中间结果保存在内存或者文件系统中，等下一个事件进入算子后可以让当前事件的值与历史值进行汇总累计。</p>\n<h3 id=\"支持exactly-once语义\"><a href=\"#支持exactly-once语义\" class=\"headerlink\" title=\"支持exactly-once语义\"></a>支持exactly-once语义</h3><p>在分布式系统中，组成系统的各个计算机是独立的。这些计算机有可能fail。</p>\n<p>一个sender发送一条message到receiver。根据receiver出现fail时sender如何处理fail，可以将message delivery分为三种语义:</p>\n<p><strong>At Most once:</strong> 对于一条message,receiver最多收到一次(0次或1次).</p>\n<p>可以达成At Most Once的策略:</p>\n<p>sender把message发送给receiver.无论receiver是否收到message,sender都不再重发message.</p>\n<p><strong>At Least once:</strong> 对于一条message,receiver最少收到一次(1次及以上).</p>\n<p>可以达成At Least Once的策略:</p>\n<p>sender把message发送给receiver.当receiver在规定时间内没有回复ACK或回复了error信息,那么sender重发这条message给receiver,直到sender收到receiver的ACK.</p>\n<p><strong>Exactly once:</strong> 对于一条message,receiver确保只收到一次</p>\n<h3 id=\"支持事件时间（EventTime\"><a href=\"#支持事件时间（EventTime\" class=\"headerlink\" title=\"支持事件时间（EventTime)\"></a>支持事件时间（EventTime)</h3><p>目前大多数框架时间窗口计算，都是采用当前系统时间，以时间为单位进行的聚合计算只能反应数据到达计算引擎的时间，而并不是实际业务时间</p>\n<h1 id=\"Flink实战入门\"><a href=\"#Flink实战入门\" class=\"headerlink\" title=\"Flink实战入门\"></a>Flink实战入门</h1><h2 id=\"批处理wordcount编程实战\"><a href=\"#批处理wordcount编程实战\" class=\"headerlink\" title=\"批处理wordcount编程实战\"></a><strong>批处理wordcount编程实战</strong></h2><p><strong>添加依赖</strong></p>\n<pre class=\"line-numbers language-xml\"><code class=\"language-xml\">        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.flink<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>flink-scala_2.11<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.7.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>编写程序</strong></p>\n<pre class=\"line-numbers language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">//构造执行环境</span>\n  <span class=\"token keyword\">val</span> env<span class=\"token operator\">:</span> ExecutionEnvironment <span class=\"token operator\">=</span> ExecutionEnvironment<span class=\"token punctuation\">.</span>getExecutionEnvironment\n  <span class=\"token comment\" spellcheck=\"true\">//读取文件</span>\n  <span class=\"token keyword\">val</span> input <span class=\"token operator\">=</span> <span class=\"token string\">\"file:///d:/temp/hello.txt\"</span>\n  <span class=\"token keyword\">val</span> ds<span class=\"token operator\">:</span> DataSet<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span>readTextFile<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 其中flatMap 和Map 中  需要引入隐式转换</span>\n  <span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>scala<span class=\"token punctuation\">.</span>createTypeInformation\n  <span class=\"token comment\" spellcheck=\"true\">//经过groupby进行分组，sum进行聚合</span>\n  <span class=\"token keyword\">val</span> aggDs<span class=\"token operator\">:</span> AggregateDataSet<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ds<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>groupBy<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 打印</span>\n  aggDs<span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"流处理wordcount编程\"><a href=\"#流处理wordcount编程\" class=\"headerlink\" title=\"流处理wordcount编程\"></a>流处理wordcount编程</h2><p><strong>导入依赖</strong></p>\n<pre class=\"line-numbers language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.flink<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>flink-scala_2.11<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.7.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">&lt;!-- https://mvnrepository.com/artifact/org.apache.flink/flink-streaming-scala --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.flink<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>flink-streaming-scala_2.11<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.7.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>编写程序</strong></p>\n<pre class=\"line-numbers language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>ParameterTool\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>streaming<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>scala<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span>DataStream<span class=\"token punctuation\">,</span> StreamExecutionEnvironment<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">object</span> StreamWcApp <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">def</span> main<span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//从外部命令中获取参数</span>\n    <span class=\"token keyword\">val</span> tool<span class=\"token operator\">:</span> ParameterTool <span class=\"token operator\">=</span> ParameterTool<span class=\"token punctuation\">.</span>fromArgs<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> host<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> tool<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"host\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">val</span> port<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> tool<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"port\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>toInt\n\n    <span class=\"token comment\" spellcheck=\"true\">//创建流处理环境</span>\n    <span class=\"token keyword\">val</span> env<span class=\"token operator\">:</span> StreamExecutionEnvironment <span class=\"token operator\">=</span> StreamExecutionEnvironment<span class=\"token punctuation\">.</span>getExecutionEnvironment\n    <span class=\"token comment\" spellcheck=\"true\">//接收socket文本流</span>\n    <span class=\"token keyword\">val</span> textDstream<span class=\"token operator\">:</span> DataStream<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span>socketTextStream<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span>port<span class=\"token punctuation\">)</span>\n   <span class=\"token comment\" spellcheck=\"true\">// flatMap和Map需要引用的隐式转换</span>\n    <span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>flink<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>scala<span class=\"token punctuation\">.</span>_\n   <span class=\"token comment\" spellcheck=\"true\">//处理 分组并且sum聚合</span>\n    <span class=\"token keyword\">val</span> dStream<span class=\"token operator\">:</span> DataStream<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> textDstream<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>filter<span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>nonEmpty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>keyBy<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n   <span class=\"token comment\" spellcheck=\"true\">//打印</span>\n    dStream<span class=\"token punctuation\">.</span>print<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    env<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"Flink部署\"><a href=\"#Flink部署\" class=\"headerlink\" title=\"Flink部署\"></a>Flink部署</h1><h2 id=\"standalone模式\"><a href=\"#standalone模式\" class=\"headerlink\" title=\"standalone模式\"></a>standalone模式</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a><strong>安装</strong></h3><p>解压缩  flink-1.7.0-bin-hadoop27-scala_2.11.tgz</p>\n<p><strong>修改 flink/conf/flink-conf.yaml 文件</strong></p>\n<pre class=\"line-numbers language-yaml\"><code class=\"language-yaml\">jobmanager.rpc.address<span class=\"token punctuation\">:</span>master<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>修改/conf/slave文件,添加上集群主机</strong></p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">slave1\nslave2\nslave3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p><strong>分发给 另外两台机子(<a href>分发脚本可通过如下地址获取</a>)</strong></p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">xsync flink-1.7.0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>启动</strong></p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">start-cluster.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"提交任务\"><a href=\"#提交任务\" class=\"headerlink\" title=\"提交任务\"></a>提交任务</h3><p><strong>准备数据文件</strong> </p>\n<p><strong>把含数据文件的文件夹，分发到taskmanage 机器中</strong> </p>\n<p><strong>注:</strong>由于读取数据是从本地磁盘读取，实际任务会被分发到taskmanage的机器中，所以要把目标文件分发。</p>\n<p><strong>执行程序</strong> </p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">..flink run -c 全类名 /jar包位置 --input 输入文件位置 --output 输出文件位置<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p> <strong>到目标文件夹中查看计算结果</strong></p>\n<p><strong>注：</strong>计算结果根据会保存到taskmanage的机器下，不会再jobmanage下。</p>\n<p>在<strong>web控制台</strong>查看计算过程</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">在浏览器打开\nhttp://master:8081 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"yarn模式\"><a href=\"#yarn模式\" class=\"headerlink\" title=\"yarn模式\"></a>yarn模式</h2><p><strong>启动hadoop集群</strong></p>\n<p><strong>启动yarn-session</strong></p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">./yarn-sessin.sh -n 2 -s 6 -jm 1024 -tm test -d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其中：</p>\n<ul>\n<li><p>-n(–container)：TaskManager的数量。<br>   -s(–slots)：    每个TaskManager的slot数量，默认一个slot一个core，默认每个taskmanager的slot的个数为1，有时可以多一些taskmanager，做冗余。</p>\n</li>\n<li><p>-jm：JobManager的内存（单位MB)。</p>\n</li>\n<li><p>-tm：每个taskmanager的内存（单位MB)。</p>\n</li>\n<li><p>-nm：yarn 的appName(现在yarn的ui上的名字)。 </p>\n</li>\n<li><p>-d：后台执行。</p>\n<p><strong>执行任务</strong></p>\n</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">./flink run -m yarn-cluster -c 主类名 jar包位置 --input 输入文件位置 --output 输出文件位置 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>去yarn控制台查看任务状态</strong></p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">去浏览器打开\nhttp://slave1:8088<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h1 id=\"Flink架构介绍\"><a href=\"#Flink架构介绍\" class=\"headerlink\" title=\"Flink架构介绍\"></a>Flink架构介绍</h1><h2 id=\"基本组件栈\"><a href=\"#基本组件栈\" class=\"headerlink\" title=\"基本组件栈\"></a>基本组件栈</h2><p>了解Spark的朋友会发现Flink的架构和Spark是非常类似的，在整个软件架构体系中，同样遵循着分层的架构设计理念，在降低系统耦合度的同时，也为上层用户构建Flink应用提供了丰富且友好的接口。</p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/6.png\" alt=\"file\"></p>\n<p>Flink分为架构分为三层，由上往下依次是API&amp;Libraries层、Runtime核心层以及物理部署层</p>\n<p>​        <strong>API&amp;Libraries层</strong></p>\n<p>作为分布式数据处理框架，Flink同时提供了支撑计算和批计算的接口，同时在此基础上抽象出不同的应用类型的组件库，如基于流处理的CEP(复杂事件处理库)、SQL&amp;Table库和基于批处理的FlinkML(机器学习库)等、Gelly(图处理库)等。API层包括构建流计算应用的DataStream API和批计算应用的DataSet API，两者都提供给用户丰富的数据处理高级API，例如Map、FlatMap操作等，同时也提供比较低级的Process Function API，用户可以直接操作状态和时间等底层数据。</p>\n<p>　　<strong>Runtime核心层</strong></p>\n<p>　　该层主要负责对上层不同接口提供基础服务，也是Flink分布式计算框架的核心实现层，支持分布式Stream作业的执行、JobGraph到ExecutionGraph的映射转换、任务调度等。将DataSteam和DataSet转成统一的可执行的Task Operator，达到在流式引擎下同时处理批量计算和流式计算的目的。</p>\n<p>　　<strong>物理部署层</strong></p>\n<p>　　该层主要涉及Flink的部署模式，目前Flink支持多种部署模式：本地、集群(Standalone、YARN)、云(GCE/EC2)、Kubenetes。Flink能够通过该层能够支持不同平台的部署，用户可以根据需要选择使用对应的部署模式。</p>\n<h2 id=\"运行架构\"><a href=\"#运行架构\" class=\"headerlink\" title=\"运行架构\"></a>运行架构</h2><h2 id=\"任务提交流程（yarn模式）\"><a href=\"#任务提交流程（yarn模式）\" class=\"headerlink\" title=\"任务提交流程（yarn模式）\"></a>任务提交流程（yarn模式）</h2><p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps23.jpg\" alt=\"Yarn模式任务提交流程\"> </p>\n<p>Flink任务提交后，Client向HDFS上传Flink的Jar包和配置，之后向Yarn ResourceManager提交任务，ResourceManager分配Container资源并通知对应的NodeManager启动ApplicationMaster，ApplicationMaster启动后加载Flink的Jar包和配置构建环境，然后启动JobManager，之后ApplicationMaster向ResourceManager申请资源启动TaskManager，ResourceManager分配Container资源后，由ApplicationMaster通知资源所在节点的NodeManager启动TaskManager，NodeManager加载Flink的Jar包和配置构建环境并启动TaskManager，TaskManager启动后向JobManager发送心跳包，并等待JobManager向其分配任务。</p>\n<h2 id=\"2-任务调度原理\"><a href=\"#2-任务调度原理\" class=\"headerlink\" title=\"2 任务调度原理\"></a><strong>2</strong> <strong>任务调度原理</strong></h2><p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps24.jpg\" alt=\"任务调度原理\"></p>\n<p>客户端不是运行时和程序执行的一部分，但它用于准备并发送dataflow(JobGraph)给Master(JobManager)，然后，客户端断开连接或者维持连接以等待接收计算结果。</p>\n<p>当 Flink 集群启动后，首先会启动一个 JobManger 和一个或多个的 TaskManager。由 Client 提交任务给 JobManager，JobManager 再调度任务到各个 TaskManager 去执行，然后 TaskManager 将心跳和统计信息汇报给 JobManager。TaskManager 之间以流的形式进行数据的传输。上述三者均为独立的 JVM 进程。</p>\n<p><strong>Client</strong> 为提交 Job 的客户端，可以是运行在任何机器上（与 JobManager 环境连通即可）。提交 Job 后，Client 可以结束进程（Streaming的任务），也可以不结束并等待结果返回。</p>\n<p><strong>JobManager</strong> 主要负责调度 Job 并协调 Task 做 checkpoint，职责上很像 Storm 的 Nimbus。从 Client 处接收到 Job 和 JAR 包等资源后，会生成优化后的执行计划，并以 Task 的单元调度到各个 TaskManager 去执行。</p>\n<p><strong>TaskManager</strong> 在启动的时候就设置好了槽位数（Slot），每个 slot 能启动一个 Task，Task 为线程。从 JobManager 处接收需要部署的 Task，部署启动后，与自己的上游建立 Netty 连接，接收数据并处理。</p>\n<p><strong>关于执行图</strong></p>\n<p>Flink 中的执行图可以分成四层：<strong>StreamGraph</strong> -&gt; <strong>JobGraph</strong> -&gt; <strong>ExecutionGraph</strong> -&gt; <strong>物理执行图</strong>。</p>\n<p><strong>StreamGraph</strong>：是根据用户通过 Stream API 编写的代码生成的最初的图。用来表示程序的拓扑结构。</p>\n<p><strong>JobGraph</strong>：StreamGraph经过优化后生成了 JobGraph，提交给 JobManager 的数据结构。主要的优化为，将多个符合条件的节点 chain 在一起作为一个节点，这样可以减少数据在节点之间流动所需要的序列化/反序列化/传输消耗。</p>\n<p><strong>ExecutionGraph</strong>：JobManager 根据 JobGraph 生成ExecutionGraph。ExecutionGraph是JobGraph的并行化版本，是调度层最核心的数据结构。</p>\n<p><strong>物理执行图</strong>：JobManager 根据 ExecutionGraph 对 Job 进行调度后，在各个TaskManager 上部署 Task 后形成的“图”，并不是一个具体的数据结构。</p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps25.jpg\" alt></p>\n<h2 id=\"3-Worker与Slots\"><a href=\"#3-Worker与Slots\" class=\"headerlink\" title=\"3 Worker与Slots\"></a><strong>3</strong> <strong>Worker与Slots</strong></h2><p><strong>每一个worker(TaskManager)是一个JVM进程，它可能会在独立的线程上执行一个或多个subtask</strong>。为了控制一个worker能接收多少个task，worker通过task slot来进行控制（一个worker至少有一个task slot）。·</p>\n<p>每个task slot表示TaskManager拥有资源的一个固定大小的子集。假如一个TaskManager有三个slot，那么它会将其管理的内存分成三份给各个slot。<strong>资源slot化意味着一个subtask将不需要跟来自其他job的subtask竞争被管理的内存，取而代之的是它将拥有一定数量的内存储备</strong>。需要注意的是，这里不会涉及到CPU的隔离，slot目前仅仅用来隔离task的受管理的内存。</p>\n<p><strong>通过调整task slot的数量，允许用户定义subtask之间如何互相隔离</strong>。如果一个TaskManager一个slot，那将意味着每个task group运行在独立的JVM中（该JVM可能是通过一个特定的容器启动的），而一个TaskManager多个slot意味着更多的subtask可以共享同一个JVM。而在同一个JVM进程中的task将共享TCP连接（基于多路复用）和心跳消息。它们也可能共享数据集和数据结构，因此这减少了每个task的负载。</p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps26.jpg\" alt=\"TaskManager与Slot\"></p>\n<p><strong>Task **Slot是静态的概念，是指TaskManager具有的并发执行能力</strong>，可以通过参数taskmanager.numberOfTaskSlots进行配置，而<strong>并行度parallelism是动态概念，即TaskManager运行程序时实际使用的并发能力</strong>，可以通过参数parallelism.default进行配置。</p>\n<p>也就是说，假设一共有3个TaskManager，每一个TaskManager中的分配3个TaskSlot，也就是每个TaskManager可以接收3个task，一共9个TaskSlot，如果我们设置parallelism.default=1，即运行程序默认的并行度为1，9个TaskSlot只用了1个，有8个空闲，因此，设置合适的并行度才能提高效率。</p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps27.jpg\" alt> </p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps28.jpg\" alt> </p>\n<h2 id=\"4-并行数据流\"><a href=\"#4-并行数据流\" class=\"headerlink\" title=\"4 并行数据流\"></a><strong>4</strong> <strong>并行数据流</strong></h2><p><strong>Flink程序的执行具有并行、分布式的特性</strong>。在执行过程中，一个 stream 包含一个或多个 stream partition ，而每一个 operator 包含一个或多个 operator subtask，这些operator subtasks在不同的线程、不同的物理机或不同的容器中彼此互不依赖得执行。</p>\n<p><strong>一个特定operator的subtask的个数被称之为其parallelism(并行度)</strong>。一个stream的并行度总是等同于其producing operator的并行度。一个程序中，不同的operator可能具有不同的并行度。</p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps29.jpg\" alt=\"并行数据流\"></p>\n<p>Stream在operator之间传输数据的形式可以是one-to-one(forwarding)的模式也可以是redistributing的模式，具体是哪一种形式，取决于operator的种类。</p>\n<p><strong>One-to-one</strong>：<strong>stream(比如在source和map operator之间)维护着分区以及元素的顺序</strong>。那意味着map operator的subtask看到的元素的个数以及顺序跟source operator的subtask生产的元素的个数、顺序相同，map、fliter、flatMap等算子都是one-to-one的对应关系。</p>\n<p>Ø <strong>类似于s**</strong>park<strong>**中的窄依赖</strong></p>\n<p><strong>Redistributing</strong>：<strong>stream(map()跟keyBy/window之间或者keyBy/window跟sink之间)的分区会发生改变</strong>。每一个operator subtask依据所选择的transformation发送数据到不同的目标subtask。例如，keyBy() 基于hashCode重分区、broadcast和rebalance会随机重新分区，这些算子都会引起redistribute过程，而redistribute过程就类似于Spark中的shuffle过程。</p>\n<p>Ø <strong>类似于s**</strong>park<strong>**中的宽依赖</strong></p>\n<h2 id=\"5-task与operator-chains\"><a href=\"#5-task与operator-chains\" class=\"headerlink\" title=\"5 task与operator chains\"></a><strong>5</strong> <strong>task与operator</strong> <strong>chains</strong></h2><p>相同并行度的one to one操作，Flink这样相连的operator 链接在一起形成一个task，原来的operator成为里面的subtask。将operators链接成task是非常有效的优化：<strong>它能减少线程之间的切换和基于缓存区的数据交换，在减少时延的同时提升吞吐量</strong>。链接的行为可以在编程API中进行指定。</p>\n<p> <img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps30.jpg\" alt=\" task与operatorchains\"></p>\n<p><strong>OperatorChain的优点</strong></p>\n<ul>\n<li>减少线程切换</li>\n<li>减少序列化与反序列化</li>\n<li>减少延迟并且提高吞吐能力</li>\n</ul>\n<p><strong>OperatorChain 组成条件</strong></p>\n<ul>\n<li>上下游算子并行度一致</li>\n<li>上下游算子之间没有数据shuffle</li>\n</ul>\n<h1 id=\"流计算框架Flink与Storm-的性能对比\"><a href=\"#流计算框架Flink与Storm-的性能对比\" class=\"headerlink\" title=\"流计算框架Flink与Storm 的性能对比\"></a>流计算框架Flink与Storm 的性能对比</h1><table>\n<thead>\n<tr>\n<th></th>\n<th>Storm</th>\n<th>Flink</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>状态管理</td>\n<td>无状态，需用户自行进行状态管理</td>\n<td>有状态</td>\n</tr>\n<tr>\n<td>窗口支持</td>\n<td>对事件窗口支持较弱，缓存整个窗口的所有 数据，窗口结束时一起计算</td>\n<td>窗口支持较为完善，自带一些窗口聚合方法，并 且会自动管理窗口状态。</td>\n</tr>\n<tr>\n<td>消息投递</td>\n<td>At Most Once At Least Once</td>\n<td>At Most Once At Least Once Exactly Once</td>\n</tr>\n<tr>\n<td>容错方式</td>\n<td>ACK机制：对每个消息进行全链路跟踪，失败 或超时进行重发。</td>\n<td>检查点机制：通过分布式一致性快照机制，对数 据流和算子状态进行保存。在发生错误时，使系 统能够进行回滚。</td>\n</tr>\n<tr>\n<td>应用现状</td>\n<td>在美团点评实时计算业务中已有较为成熟的 运用，有管理平台、常用 API 和相应的文档， 大量实时作业基于 Storm 构建。</td>\n<td>在美团点评实时计算业务中已有一定应用，但 是管理平台、API 及文档等仍需进一步完善。</td>\n</tr>\n</tbody></table>\n<h2 id=\"框架本身性能\"><a href=\"#框架本身性能\" class=\"headerlink\" title=\"框架本身性能\"></a>框架本身性能</h2><ul>\n<li>Storm 单线程吞吐约为 <strong>8.7 万条/秒</strong>，Flink 单线程吞吐 可达 <strong>35 万条/秒</strong>。Flink 吞吐约为 Storm 的 3-5 倍。</li>\n<li>Storm QPS 接近吞吐时延迟（含 Kafka 读写时间）中位 数约 100 毫秒，99 线约 700 毫秒，Flink 中位数约 50 毫秒，99 线约 300 毫秒。Flink 在 满吞吐时的延迟约为 Storm 的一半，且随着 QPS 逐渐增大，Flink 在延迟上的优势开始体现出来。</li>\n<li>综上可得，<strong>Flink 框架本身性能优于 Storm</strong>。</li>\n</ul>\n<h2 id=\"复杂用户逻辑对框架差异的削弱\"><a href=\"#复杂用户逻辑对框架差异的削弱\" class=\"headerlink\" title=\"复杂用户逻辑对框架差异的削弱\"></a>复杂用户逻辑对框架差异的削弱</h2><ul>\n<li>单个 Bolt Sleep 时长达到 1 毫秒时， Flink 的延迟仍低于 Storm，但吞吐优势已基本无法体现。</li>\n<li>因此，用户逻辑越复杂，本身耗时越长，针对该逻辑的测试体现出来的框架的差异越小。</li>\n</ul>\n<h2 id=\"不同消息投递语义的差异\"><a href=\"#不同消息投递语义的差异\" class=\"headerlink\" title=\"不同消息投递语义的差异\"></a>不同消息投递语义的差异</h2><ul>\n<li>Flink Exactly Once 的吞吐较 At Least Once 而 言下降 6.3%，延迟差异不大；Storm At Most Once 语义下的吞吐较 At Least Once 提升 16.8%，延迟稍有下降。</li>\n<li>由于 Storm 会对每条消息进行 ACK，Flink 是基于一批消息做的检查点，不同的实现原理导 致两者在 At Least Once 语义的花费差异较大，从而影响了性能。而 Flink 实现 Exactly Once 语义仅增加了对齐操作，因此在算子并发量不大、没有出现慢节点的情况下对 Flink 性能的 影响不大。Storm At Most Once 语义下的性能仍然低于 Flink。</li>\n</ul>\n<h2 id=\"Flink-状态存储后端选择\"><a href=\"#Flink-状态存储后端选择\" class=\"headerlink\" title=\"Flink 状态存储后端选择\"></a>Flink 状态存储后端选择</h2><p>• Flink 提供了内存、文件系统、RocksDB 三种 StateBackends，三者的对比如下：</p>\n<p>StateBackend 过程状态存储 检查点存储 吞吐 推荐使用场景 Memory TM Memory JM Memory 高（3-5 倍 Storm） 调试、无状态或对数据是否 丢失重复无要求 FileSystem TM Memory FS/HDFS 高（3-5 倍 Storm） 普通状态、窗口、KV 结构 （建议作为默认 Backend）</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\">    RocksDB RocksDB on TM FS/HDFS 低（0.3-0.5 倍 Storm） 超大状态、超长窗口、大型 KV 结构 <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"推荐使用-Flink-的场景\"><a href=\"#推荐使用-Flink-的场景\" class=\"headerlink\" title=\"推荐使用 Flink 的场景\"></a>推荐使用 Flink 的场景</h2><p>综合上述测试结果，以下实时计算场景建议考虑使用 Flink 框架进行计算：</p>\n<ul>\n<li>要求消息投递语义为Exactly Once的场景；</li>\n<li>数据量较大，要求高吞吐低延迟的场景；</li>\n<li>需要进行状态管理或窗口统计的场景。</li>\n</ul>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h1 id=\"Flink简介\"><a href=\"#Flink简介\" class=\"headerlink\" title=\"Flink简介\"></a>Flink简介</h1><h2 id=\"初识Flink\"><a href=\"#初识Flink\" class=\"headerlink\" title=\"初识Flink\"></a>初识Flink</h2><p>Apache Flink是一个框架和分布式处理引擎，用于对无界和有界数据流进行有状态计算。Flink被设计在所有常见的集群环境中运行，以内存执行速度和任意规模来执行计算。</p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/1.jpg\" alt> </p>\n<p>Flink起源于Stratosphere项目，Stratosphere是在2010~2014年由3所地处柏林的大学和欧洲的一些其他的大学共同进行的研究项目，2014年4月Stratosphere的代码被复制并捐赠给了Apache软件基金会，参加这个孵化项目的初始成员是Stratosphere系统的核心开发人员，2014年12月，Flink一跃成为Apache软件基金会的顶级项目。</p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/2.jpg\" alt> </p>\n<p>在德语中，Flink一词表示快速和灵巧，项目采用一只松鼠的彩色图案作为logo，这不仅是因为松鼠具有快速和灵巧的特点，还因为柏林的松鼠有一种迷人的红棕色，而Flink的松鼠logo拥有可爱的尾巴，尾巴的颜色与Apache软件基金会的logo颜色相呼应，也就是说，这是一只Apache风格的松鼠。</p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/3.jpg\" alt></p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/4.jpg\" alt=\"4\"></p>\n<p>Flink虽然诞生的早(2010年)，但是其实是起大早赶晚集，直到2015年才开始突然爆发热度。 </p>\n<p>在Flink被apache提升为顶级项目之后，阿里实时计算团队决定在阿里内部建立一个 Flink 分支 Blink，并对 Flink 进行大量的修改和完善，让其适应阿里巴巴这种超大规模的业务场景。</p>\n<p>Blink由2016年上线，服务于阿里集团内部搜索、推荐、广告和蚂蚁等大量核心实时业务。与2019年1月Blink正式开源，目前阿里70%的技术部门都有使用该版本。</p>\n<p>Blink比起Flink的优势就是对SQL语法的更完善的支持以及执行SQL的性能提升。</p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps5.jpg\" alt> </p>\n<h2 id=\"Flink的重要特点\"><a href=\"#Flink的重要特点\" class=\"headerlink\" title=\"Flink的重要特点\"></a><strong>Flink</strong>的重要特点</h2><h3 id=\"事件驱动型-Event-driven\"><a href=\"#事件驱动型-Event-driven\" class=\"headerlink\" title=\"事件驱动型(Event-driven)\"></a>事件驱动型(Event-driven)</h3><p>事件驱动型应用是一类具有状态的应用，它从一个或多个事件流提取数据，并根据到来的事件触发计算、状态更新或其他外部动作。比较典型的就是以kafka为代表的消息队列几乎都是事件驱动型应用。</p>\n<p>与之不同的就是SparkStreaming微批次，如图：</p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps6.jpg\" alt> </p>\n<p>   事件驱动型：</p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps7.jpg\" alt> </p>\n<h3 id=\"流与批的世界观\"><a href=\"#流与批的世界观\" class=\"headerlink\" title=\"流与批的世界观\"></a>流与批的世界观</h3><p>​     <strong>批处理</strong>的特点是有界、持久、大量，非常适合需要访问全套记录才能完成的计算工作，一般用于离线统计。</p>\n<p><strong>流处理</strong>的特点是无界、实时,  无需针对整个数据集执行操作，而是对通过系统传输的每个数据项执行操作，一般用于实时统计。</p>\n<p>在<strong>spark</strong>的世界观中，一切都是由批次组成的，离线数据是一个大批次，而实时数据是由一个一个无限的小批次组成的。</p>\n<p> 而在<strong>flink</strong>的世界观中，一切都是由流组成的，离线数据是有界限的流，实时数据是一个没有界限的流，这就是所谓的有界流和无界流。</p>\n<p><strong>无界数据流</strong>：<strong>无界数据流有一个开始但是没有结束</strong>，它们不会在生成时终止并提供数据，必须连续处理无界流，也就是说必须在获取后立即处理event。对于无界数据流我们无法等待所有数据都到达，因为输入是无界的，并且在任何时间点都不会完成。处理无界数据通常要求以特定顺序（例如事件发生的顺序）获取event，以便能够推断结果完整性。</p>\n<p><strong>有界数据流</strong>：<strong>有界数据流有明确定义的开始和结束</strong>，可以在执行任何计算之前通过获取所有数据来处理有界流，处理有界流不需要有序获取，因为可以始终对有界数据集进行排序，有界流的处理也称为批处理。</p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps8.png\" alt></p>\n<p>​    这种以流为世界观的架构，获得的最大好处就是具有极低的延迟。</p>\n<h3 id=\"分层api\"><a href=\"#分层api\" class=\"headerlink\" title=\"分层api\"></a>分层api</h3><p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps9.jpg\" alt> </p>\n<p>最底层级的抽象仅仅提供了有状态流，它将通过过程函数（Process Function）被嵌入到DataStream API中。底层过程函数（Process Function） 与 DataStream API 相集成，使其可以对某些特定的操作进行底层的抽象，它允许用户可以自由地处理来自一个或多个数据流的事件，并使用一致的容错的状态。除此之外，用户可以注册事件时间并处理时间回调，从而使程序可以处理复杂的计算。</p>\n<p>实际上，<strong>大多数应用并不需要上述的底层抽象，而是针对核心API（Core APIs） 进行编程，比如DataStream API（有界或无界流数据）以及DataSet API（有界数据集）</strong>。这些API为数据处理提供了通用的构建模块，比如由用户定义的多种形式的转换（transformations），连接（joins），聚合（aggregations），窗口操作（windows）等等。DataSet API 为有界数据集提供了额外的支持，例如循环与迭代。这些API处理的数据类型以类（classes）的形式由各自的编程语言所表示。</p>\n<p>Table API 是以表为中心的声明式编程，其中表可能会动态变化（在表达流数据时）。Table API遵循（扩展的）关系模型：表有二维数据结构（schema）（类似于关系数据库中的表），同时API提供可比较的操作，例如select、project、join、group-by、aggregate等。Table API程序声明式地定义了什么逻辑操作应该执行，而不是准确地确定这些操作代码的看上去如何 。 尽管Table API可以通过多种类型的用户自定义函数（UDF）进行扩展，其仍不如核心API更具表达能力，但是使用起来却更加简洁（代码量更少）。除此之外，Table API程序在执行之前会经过内置优化器进行优化。</p>\n<p><strong>你可以在表与 DataStream/DataSet 之间无缝切换，以允许程序将 Table API 与 DataStream 以及 DataSet 混合使用</strong>。</p>\n<p>Flink提供的最高层级的抽象是 SQL 。这一层抽象在语法与表达能力上与 Table API 类似，但是是以SQL查询表达式的形式表现程序。SQL抽象与Table API交互密切，同时SQL查询可以直接在Table API定义的表上执行。</p>\n<h3 id=\"支持有状态计算\"><a href=\"#支持有状态计算\" class=\"headerlink\" title=\"支持有状态计算\"></a>支持有状态计算</h3><p>Flink在1.4版本中实现了状态管理，所谓状态管理就是在流失计算过程中将算子的中间结果保存在内存或者文件系统中，等下一个事件进入算子后可以让当前事件的值与历史值进行汇总累计。</p>\n<h3 id=\"支持exactly-once语义\"><a href=\"#支持exactly-once语义\" class=\"headerlink\" title=\"支持exactly-once语义\"></a>支持exactly-once语义</h3><p>在分布式系统中，组成系统的各个计算机是独立的。这些计算机有可能fail。</p>\n<p>一个sender发送一条message到receiver。根据receiver出现fail时sender如何处理fail，可以将message delivery分为三种语义:</p>\n<p><strong>At Most once:</strong> 对于一条message,receiver最多收到一次(0次或1次).</p>\n<p>可以达成At Most Once的策略:</p>\n<p>sender把message发送给receiver.无论receiver是否收到message,sender都不再重发message.</p>\n<p><strong>At Least once:</strong> 对于一条message,receiver最少收到一次(1次及以上).</p>\n<p>可以达成At Least Once的策略:</p>\n<p>sender把message发送给receiver.当receiver在规定时间内没有回复ACK或回复了error信息,那么sender重发这条message给receiver,直到sender收到receiver的ACK.</p>\n<p><strong>Exactly once:</strong> 对于一条message,receiver确保只收到一次</p>\n<h3 id=\"支持事件时间（EventTime\"><a href=\"#支持事件时间（EventTime\" class=\"headerlink\" title=\"支持事件时间（EventTime)\"></a>支持事件时间（EventTime)</h3><p>目前大多数框架时间窗口计算，都是采用当前系统时间，以时间为单位进行的聚合计算只能反应数据到达计算引擎的时间，而并不是实际业务时间</p>\n<h1 id=\"Flink实战入门\"><a href=\"#Flink实战入门\" class=\"headerlink\" title=\"Flink实战入门\"></a>Flink实战入门</h1><h2 id=\"批处理wordcount编程实战\"><a href=\"#批处理wordcount编程实战\" class=\"headerlink\" title=\"批处理wordcount编程实战\"></a><strong>批处理wordcount编程实战</strong></h2><p><strong>添加依赖</strong></p>\n<pre><code class=\"xml\">        &lt;dependency&gt;\n            &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;\n            &lt;artifactId&gt;flink-scala_2.11&lt;/artifactId&gt;\n            &lt;version&gt;1.7.0&lt;/version&gt;\n        &lt;/dependency&gt;</code></pre>\n<p><strong>编写程序</strong></p>\n<pre><code class=\"scala\">def main(args: Array[String]): Unit = {\n\n  //构造执行环境\n  val env: ExecutionEnvironment = ExecutionEnvironment.getExecutionEnvironment\n  //读取文件\n  val input = &quot;file:///d:/temp/hello.txt&quot;\n  val ds: DataSet[String] = env.readTextFile(input)\n  // 其中flatMap 和Map 中  需要引入隐式转换\n  import org.apache.flink.api.scala.createTypeInformation\n  //经过groupby进行分组，sum进行聚合\n  val aggDs: AggregateDataSet[(String, Int)] = ds.flatMap(_.split(&quot; &quot;)).map((_, 1)).groupBy(0).sum(1)\n  // 打印\n  aggDs.print()\n\n}</code></pre>\n<h2 id=\"流处理wordcount编程\"><a href=\"#流处理wordcount编程\" class=\"headerlink\" title=\"流处理wordcount编程\"></a>流处理wordcount编程</h2><p><strong>导入依赖</strong></p>\n<pre><code class=\"xml\">&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;\n    &lt;artifactId&gt;flink-scala_2.11&lt;/artifactId&gt;\n    &lt;version&gt;1.7.0&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;!-- https://mvnrepository.com/artifact/org.apache.flink/flink-streaming-scala --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.apache.flink&lt;/groupId&gt;\n    &lt;artifactId&gt;flink-streaming-scala_2.11&lt;/artifactId&gt;\n    &lt;version&gt;1.7.0&lt;/version&gt;\n&lt;/dependency&gt;</code></pre>\n<p><strong>编写程序</strong></p>\n<pre><code class=\"scala\">import org.apache.flink.api.java.utils.ParameterTool\nimport org.apache.flink.streaming.api.scala.{DataStream, StreamExecutionEnvironment}\n\nobject StreamWcApp {\n\n  def main(args: Array[String]): Unit = {\n    //从外部命令中获取参数\n    val tool: ParameterTool = ParameterTool.fromArgs(args)\n    val host: String = tool.get(&quot;host&quot;)\n    val port: Int = tool.get(&quot;port&quot;).toInt\n\n    //创建流处理环境\n    val env: StreamExecutionEnvironment = StreamExecutionEnvironment.getExecutionEnvironment\n    //接收socket文本流\n    val textDstream: DataStream[String] = env.socketTextStream(host,port)\n   // flatMap和Map需要引用的隐式转换\n    import org.apache.flink.api.scala._\n   //处理 分组并且sum聚合\n    val dStream: DataStream[(String, Int)] = textDstream.flatMap(_.split(&quot; &quot;)).filter(_.nonEmpty).map((_,1)).keyBy(0).sum(1)\n   //打印\n    dStream.print()\n\n    env.execute()\n  }</code></pre>\n<h1 id=\"Flink部署\"><a href=\"#Flink部署\" class=\"headerlink\" title=\"Flink部署\"></a>Flink部署</h1><h2 id=\"standalone模式\"><a href=\"#standalone模式\" class=\"headerlink\" title=\"standalone模式\"></a>standalone模式</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a><strong>安装</strong></h3><p>解压缩  flink-1.7.0-bin-hadoop27-scala_2.11.tgz</p>\n<p><strong>修改 flink/conf/flink-conf.yaml 文件</strong></p>\n<pre><code class=\"yaml\">jobmanager.rpc.address:master</code></pre>\n<p><strong>修改/conf/slave文件,添加上集群主机</strong></p>\n<pre><code class=\"html\">slave1\nslave2\nslave3</code></pre>\n<p><strong>分发给 另外两台机子(<a href>分发脚本可通过如下地址获取</a>)</strong></p>\n<pre><code class=\"shell\">xsync flink-1.7.0</code></pre>\n<p><strong>启动</strong></p>\n<pre><code class=\"shell\">start-cluster.sh</code></pre>\n<h3 id=\"提交任务\"><a href=\"#提交任务\" class=\"headerlink\" title=\"提交任务\"></a>提交任务</h3><p><strong>准备数据文件</strong> </p>\n<p><strong>把含数据文件的文件夹，分发到taskmanage 机器中</strong> </p>\n<p><strong>注:</strong>由于读取数据是从本地磁盘读取，实际任务会被分发到taskmanage的机器中，所以要把目标文件分发。</p>\n<p><strong>执行程序</strong> </p>\n<pre><code class=\"shell\">..flink run -c 全类名 /jar包位置 --input 输入文件位置 --output 输出文件位置</code></pre>\n<p> <strong>到目标文件夹中查看计算结果</strong></p>\n<p><strong>注：</strong>计算结果根据会保存到taskmanage的机器下，不会再jobmanage下。</p>\n<p>在<strong>web控制台</strong>查看计算过程</p>\n<pre><code class=\"html\">在浏览器打开\nhttp://master:8081 </code></pre>\n<h2 id=\"yarn模式\"><a href=\"#yarn模式\" class=\"headerlink\" title=\"yarn模式\"></a>yarn模式</h2><p><strong>启动hadoop集群</strong></p>\n<p><strong>启动yarn-session</strong></p>\n<pre><code class=\"shell\">./yarn-sessin.sh -n 2 -s 6 -jm 1024 -tm test -d</code></pre>\n<p>其中：</p>\n<ul>\n<li><p>-n(–container)：TaskManager的数量。<br>   -s(–slots)：    每个TaskManager的slot数量，默认一个slot一个core，默认每个taskmanager的slot的个数为1，有时可以多一些taskmanager，做冗余。</p>\n</li>\n<li><p>-jm：JobManager的内存（单位MB)。</p>\n</li>\n<li><p>-tm：每个taskmanager的内存（单位MB)。</p>\n</li>\n<li><p>-nm：yarn 的appName(现在yarn的ui上的名字)。 </p>\n</li>\n<li><p>-d：后台执行。</p>\n<p><strong>执行任务</strong></p>\n</li>\n</ul>\n<pre><code class=\"shell\">./flink run -m yarn-cluster -c 主类名 jar包位置 --input 输入文件位置 --output 输出文件位置 </code></pre>\n<p><strong>去yarn控制台查看任务状态</strong></p>\n<pre><code class=\"html\">去浏览器打开\nhttp://slave1:8088</code></pre>\n<h1 id=\"Flink架构介绍\"><a href=\"#Flink架构介绍\" class=\"headerlink\" title=\"Flink架构介绍\"></a>Flink架构介绍</h1><h2 id=\"基本组件栈\"><a href=\"#基本组件栈\" class=\"headerlink\" title=\"基本组件栈\"></a>基本组件栈</h2><p>了解Spark的朋友会发现Flink的架构和Spark是非常类似的，在整个软件架构体系中，同样遵循着分层的架构设计理念，在降低系统耦合度的同时，也为上层用户构建Flink应用提供了丰富且友好的接口。</p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/6.png\" alt=\"file\"></p>\n<p>Flink分为架构分为三层，由上往下依次是API&amp;Libraries层、Runtime核心层以及物理部署层</p>\n<p>​        <strong>API&amp;Libraries层</strong></p>\n<p>作为分布式数据处理框架，Flink同时提供了支撑计算和批计算的接口，同时在此基础上抽象出不同的应用类型的组件库，如基于流处理的CEP(复杂事件处理库)、SQL&amp;Table库和基于批处理的FlinkML(机器学习库)等、Gelly(图处理库)等。API层包括构建流计算应用的DataStream API和批计算应用的DataSet API，两者都提供给用户丰富的数据处理高级API，例如Map、FlatMap操作等，同时也提供比较低级的Process Function API，用户可以直接操作状态和时间等底层数据。</p>\n<p>　　<strong>Runtime核心层</strong></p>\n<p>　　该层主要负责对上层不同接口提供基础服务，也是Flink分布式计算框架的核心实现层，支持分布式Stream作业的执行、JobGraph到ExecutionGraph的映射转换、任务调度等。将DataSteam和DataSet转成统一的可执行的Task Operator，达到在流式引擎下同时处理批量计算和流式计算的目的。</p>\n<p>　　<strong>物理部署层</strong></p>\n<p>　　该层主要涉及Flink的部署模式，目前Flink支持多种部署模式：本地、集群(Standalone、YARN)、云(GCE/EC2)、Kubenetes。Flink能够通过该层能够支持不同平台的部署，用户可以根据需要选择使用对应的部署模式。</p>\n<h2 id=\"运行架构\"><a href=\"#运行架构\" class=\"headerlink\" title=\"运行架构\"></a>运行架构</h2><h2 id=\"任务提交流程（yarn模式）\"><a href=\"#任务提交流程（yarn模式）\" class=\"headerlink\" title=\"任务提交流程（yarn模式）\"></a>任务提交流程（yarn模式）</h2><p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps23.jpg\" alt=\"Yarn模式任务提交流程\"> </p>\n<p>Flink任务提交后，Client向HDFS上传Flink的Jar包和配置，之后向Yarn ResourceManager提交任务，ResourceManager分配Container资源并通知对应的NodeManager启动ApplicationMaster，ApplicationMaster启动后加载Flink的Jar包和配置构建环境，然后启动JobManager，之后ApplicationMaster向ResourceManager申请资源启动TaskManager，ResourceManager分配Container资源后，由ApplicationMaster通知资源所在节点的NodeManager启动TaskManager，NodeManager加载Flink的Jar包和配置构建环境并启动TaskManager，TaskManager启动后向JobManager发送心跳包，并等待JobManager向其分配任务。</p>\n<h2 id=\"2-任务调度原理\"><a href=\"#2-任务调度原理\" class=\"headerlink\" title=\"2 任务调度原理\"></a><strong>2</strong> <strong>任务调度原理</strong></h2><p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps24.jpg\" alt=\"任务调度原理\"></p>\n<p>客户端不是运行时和程序执行的一部分，但它用于准备并发送dataflow(JobGraph)给Master(JobManager)，然后，客户端断开连接或者维持连接以等待接收计算结果。</p>\n<p>当 Flink 集群启动后，首先会启动一个 JobManger 和一个或多个的 TaskManager。由 Client 提交任务给 JobManager，JobManager 再调度任务到各个 TaskManager 去执行，然后 TaskManager 将心跳和统计信息汇报给 JobManager。TaskManager 之间以流的形式进行数据的传输。上述三者均为独立的 JVM 进程。</p>\n<p><strong>Client</strong> 为提交 Job 的客户端，可以是运行在任何机器上（与 JobManager 环境连通即可）。提交 Job 后，Client 可以结束进程（Streaming的任务），也可以不结束并等待结果返回。</p>\n<p><strong>JobManager</strong> 主要负责调度 Job 并协调 Task 做 checkpoint，职责上很像 Storm 的 Nimbus。从 Client 处接收到 Job 和 JAR 包等资源后，会生成优化后的执行计划，并以 Task 的单元调度到各个 TaskManager 去执行。</p>\n<p><strong>TaskManager</strong> 在启动的时候就设置好了槽位数（Slot），每个 slot 能启动一个 Task，Task 为线程。从 JobManager 处接收需要部署的 Task，部署启动后，与自己的上游建立 Netty 连接，接收数据并处理。</p>\n<p><strong>关于执行图</strong></p>\n<p>Flink 中的执行图可以分成四层：<strong>StreamGraph</strong> -&gt; <strong>JobGraph</strong> -&gt; <strong>ExecutionGraph</strong> -&gt; <strong>物理执行图</strong>。</p>\n<p><strong>StreamGraph</strong>：是根据用户通过 Stream API 编写的代码生成的最初的图。用来表示程序的拓扑结构。</p>\n<p><strong>JobGraph</strong>：StreamGraph经过优化后生成了 JobGraph，提交给 JobManager 的数据结构。主要的优化为，将多个符合条件的节点 chain 在一起作为一个节点，这样可以减少数据在节点之间流动所需要的序列化/反序列化/传输消耗。</p>\n<p><strong>ExecutionGraph</strong>：JobManager 根据 JobGraph 生成ExecutionGraph。ExecutionGraph是JobGraph的并行化版本，是调度层最核心的数据结构。</p>\n<p><strong>物理执行图</strong>：JobManager 根据 ExecutionGraph 对 Job 进行调度后，在各个TaskManager 上部署 Task 后形成的“图”，并不是一个具体的数据结构。</p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps25.jpg\" alt></p>\n<h2 id=\"3-Worker与Slots\"><a href=\"#3-Worker与Slots\" class=\"headerlink\" title=\"3 Worker与Slots\"></a><strong>3</strong> <strong>Worker与Slots</strong></h2><p><strong>每一个worker(TaskManager)是一个JVM进程，它可能会在独立的线程上执行一个或多个subtask</strong>。为了控制一个worker能接收多少个task，worker通过task slot来进行控制（一个worker至少有一个task slot）。·</p>\n<p>每个task slot表示TaskManager拥有资源的一个固定大小的子集。假如一个TaskManager有三个slot，那么它会将其管理的内存分成三份给各个slot。<strong>资源slot化意味着一个subtask将不需要跟来自其他job的subtask竞争被管理的内存，取而代之的是它将拥有一定数量的内存储备</strong>。需要注意的是，这里不会涉及到CPU的隔离，slot目前仅仅用来隔离task的受管理的内存。</p>\n<p><strong>通过调整task slot的数量，允许用户定义subtask之间如何互相隔离</strong>。如果一个TaskManager一个slot，那将意味着每个task group运行在独立的JVM中（该JVM可能是通过一个特定的容器启动的），而一个TaskManager多个slot意味着更多的subtask可以共享同一个JVM。而在同一个JVM进程中的task将共享TCP连接（基于多路复用）和心跳消息。它们也可能共享数据集和数据结构，因此这减少了每个task的负载。</p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps26.jpg\" alt=\"TaskManager与Slot\"></p>\n<p><strong>Task **Slot是静态的概念，是指TaskManager具有的并发执行能力</strong>，可以通过参数taskmanager.numberOfTaskSlots进行配置，而<strong>并行度parallelism是动态概念，即TaskManager运行程序时实际使用的并发能力</strong>，可以通过参数parallelism.default进行配置。</p>\n<p>也就是说，假设一共有3个TaskManager，每一个TaskManager中的分配3个TaskSlot，也就是每个TaskManager可以接收3个task，一共9个TaskSlot，如果我们设置parallelism.default=1，即运行程序默认的并行度为1，9个TaskSlot只用了1个，有8个空闲，因此，设置合适的并行度才能提高效率。</p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps27.jpg\" alt> </p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps28.jpg\" alt> </p>\n<h2 id=\"4-并行数据流\"><a href=\"#4-并行数据流\" class=\"headerlink\" title=\"4 并行数据流\"></a><strong>4</strong> <strong>并行数据流</strong></h2><p><strong>Flink程序的执行具有并行、分布式的特性</strong>。在执行过程中，一个 stream 包含一个或多个 stream partition ，而每一个 operator 包含一个或多个 operator subtask，这些operator subtasks在不同的线程、不同的物理机或不同的容器中彼此互不依赖得执行。</p>\n<p><strong>一个特定operator的subtask的个数被称之为其parallelism(并行度)</strong>。一个stream的并行度总是等同于其producing operator的并行度。一个程序中，不同的operator可能具有不同的并行度。</p>\n<p><img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps29.jpg\" alt=\"并行数据流\"></p>\n<p>Stream在operator之间传输数据的形式可以是one-to-one(forwarding)的模式也可以是redistributing的模式，具体是哪一种形式，取决于operator的种类。</p>\n<p><strong>One-to-one</strong>：<strong>stream(比如在source和map operator之间)维护着分区以及元素的顺序</strong>。那意味着map operator的subtask看到的元素的个数以及顺序跟source operator的subtask生产的元素的个数、顺序相同，map、fliter、flatMap等算子都是one-to-one的对应关系。</p>\n<p>Ø <strong>类似于s**</strong>park<strong>**中的窄依赖</strong></p>\n<p><strong>Redistributing</strong>：<strong>stream(map()跟keyBy/window之间或者keyBy/window跟sink之间)的分区会发生改变</strong>。每一个operator subtask依据所选择的transformation发送数据到不同的目标subtask。例如，keyBy() 基于hashCode重分区、broadcast和rebalance会随机重新分区，这些算子都会引起redistribute过程，而redistribute过程就类似于Spark中的shuffle过程。</p>\n<p>Ø <strong>类似于s**</strong>park<strong>**中的宽依赖</strong></p>\n<h2 id=\"5-task与operator-chains\"><a href=\"#5-task与operator-chains\" class=\"headerlink\" title=\"5 task与operator chains\"></a><strong>5</strong> <strong>task与operator</strong> <strong>chains</strong></h2><p>相同并行度的one to one操作，Flink这样相连的operator 链接在一起形成一个task，原来的operator成为里面的subtask。将operators链接成task是非常有效的优化：<strong>它能减少线程之间的切换和基于缓存区的数据交换，在减少时延的同时提升吞吐量</strong>。链接的行为可以在编程API中进行指定。</p>\n<p> <img src=\"/2020/01/16/liu-shi-chu-li-kuang-jia-hou-qi-zhi-xiu-flink/wps30.jpg\" alt=\" task与operatorchains\"></p>\n<p><strong>OperatorChain的优点</strong></p>\n<ul>\n<li>减少线程切换</li>\n<li>减少序列化与反序列化</li>\n<li>减少延迟并且提高吞吐能力</li>\n</ul>\n<p><strong>OperatorChain 组成条件</strong></p>\n<ul>\n<li>上下游算子并行度一致</li>\n<li>上下游算子之间没有数据shuffle</li>\n</ul>\n<h1 id=\"流计算框架Flink与Storm-的性能对比\"><a href=\"#流计算框架Flink与Storm-的性能对比\" class=\"headerlink\" title=\"流计算框架Flink与Storm 的性能对比\"></a>流计算框架Flink与Storm 的性能对比</h1><table>\n<thead>\n<tr>\n<th></th>\n<th>Storm</th>\n<th>Flink</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>状态管理</td>\n<td>无状态，需用户自行进行状态管理</td>\n<td>有状态</td>\n</tr>\n<tr>\n<td>窗口支持</td>\n<td>对事件窗口支持较弱，缓存整个窗口的所有 数据，窗口结束时一起计算</td>\n<td>窗口支持较为完善，自带一些窗口聚合方法，并 且会自动管理窗口状态。</td>\n</tr>\n<tr>\n<td>消息投递</td>\n<td>At Most Once At Least Once</td>\n<td>At Most Once At Least Once Exactly Once</td>\n</tr>\n<tr>\n<td>容错方式</td>\n<td>ACK机制：对每个消息进行全链路跟踪，失败 或超时进行重发。</td>\n<td>检查点机制：通过分布式一致性快照机制，对数 据流和算子状态进行保存。在发生错误时，使系 统能够进行回滚。</td>\n</tr>\n<tr>\n<td>应用现状</td>\n<td>在美团点评实时计算业务中已有较为成熟的 运用，有管理平台、常用 API 和相应的文档， 大量实时作业基于 Storm 构建。</td>\n<td>在美团点评实时计算业务中已有一定应用，但 是管理平台、API 及文档等仍需进一步完善。</td>\n</tr>\n</tbody></table>\n<h2 id=\"框架本身性能\"><a href=\"#框架本身性能\" class=\"headerlink\" title=\"框架本身性能\"></a>框架本身性能</h2><ul>\n<li>Storm 单线程吞吐约为 <strong>8.7 万条/秒</strong>，Flink 单线程吞吐 可达 <strong>35 万条/秒</strong>。Flink 吞吐约为 Storm 的 3-5 倍。</li>\n<li>Storm QPS 接近吞吐时延迟（含 Kafka 读写时间）中位 数约 100 毫秒，99 线约 700 毫秒，Flink 中位数约 50 毫秒，99 线约 300 毫秒。Flink 在 满吞吐时的延迟约为 Storm 的一半，且随着 QPS 逐渐增大，Flink 在延迟上的优势开始体现出来。</li>\n<li>综上可得，<strong>Flink 框架本身性能优于 Storm</strong>。</li>\n</ul>\n<h2 id=\"复杂用户逻辑对框架差异的削弱\"><a href=\"#复杂用户逻辑对框架差异的削弱\" class=\"headerlink\" title=\"复杂用户逻辑对框架差异的削弱\"></a>复杂用户逻辑对框架差异的削弱</h2><ul>\n<li>单个 Bolt Sleep 时长达到 1 毫秒时， Flink 的延迟仍低于 Storm，但吞吐优势已基本无法体现。</li>\n<li>因此，用户逻辑越复杂，本身耗时越长，针对该逻辑的测试体现出来的框架的差异越小。</li>\n</ul>\n<h2 id=\"不同消息投递语义的差异\"><a href=\"#不同消息投递语义的差异\" class=\"headerlink\" title=\"不同消息投递语义的差异\"></a>不同消息投递语义的差异</h2><ul>\n<li>Flink Exactly Once 的吞吐较 At Least Once 而 言下降 6.3%，延迟差异不大；Storm At Most Once 语义下的吞吐较 At Least Once 提升 16.8%，延迟稍有下降。</li>\n<li>由于 Storm 会对每条消息进行 ACK，Flink 是基于一批消息做的检查点，不同的实现原理导 致两者在 At Least Once 语义的花费差异较大，从而影响了性能。而 Flink 实现 Exactly Once 语义仅增加了对齐操作，因此在算子并发量不大、没有出现慢节点的情况下对 Flink 性能的 影响不大。Storm At Most Once 语义下的性能仍然低于 Flink。</li>\n</ul>\n<h2 id=\"Flink-状态存储后端选择\"><a href=\"#Flink-状态存储后端选择\" class=\"headerlink\" title=\"Flink 状态存储后端选择\"></a>Flink 状态存储后端选择</h2><p>• Flink 提供了内存、文件系统、RocksDB 三种 StateBackends，三者的对比如下：</p>\n<p>StateBackend 过程状态存储 检查点存储 吞吐 推荐使用场景 Memory TM Memory JM Memory 高（3-5 倍 Storm） 调试、无状态或对数据是否 丢失重复无要求 FileSystem TM Memory FS/HDFS 高（3-5 倍 Storm） 普通状态、窗口、KV 结构 （建议作为默认 Backend）</p>\n<pre><code class=\"html\">    RocksDB RocksDB on TM FS/HDFS 低（0.3-0.5 倍 Storm） 超大状态、超长窗口、大型 KV 结构 </code></pre>\n<h2 id=\"推荐使用-Flink-的场景\"><a href=\"#推荐使用-Flink-的场景\" class=\"headerlink\" title=\"推荐使用 Flink 的场景\"></a>推荐使用 Flink 的场景</h2><p>综合上述测试结果，以下实时计算场景建议考虑使用 Flink 框架进行计算：</p>\n<ul>\n<li>要求消息投递语义为Exactly Once的场景；</li>\n<li>数据量较大，要求高吞吐低延迟的场景；</li>\n<li>需要进行状态管理或窗口统计的场景。</li>\n</ul>\n"},{"title":"深入理解JSP","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-09T14:19:10.000Z","password":null,"summary":null,"_content":"\n#### JSP介绍\n\n JSP（Java server page）是Java EE规范最基本成员，他是Java Web开发的重点知识，虽然我们一直在用，但其原理知之甚少。今天重点研究一些JSP核心内容以及其工作原理。\n\n  JSP和Servlet的本质是一样的，因为JSP最终需要编译成Servlet才能运行，换句话说JSP是生成Servler的草稿文件。\n\n  JSP比较简单，就是在HTML中嵌入Java代码，或者使用JSP标签，包括使用用户自定义标签，从而可以动态的提供内容。早起JSP应用比较广泛，一个web应用可以全部由JSP页面组成，只需要少量的JavaBean即可，但是这样导致了JSP职责过于复杂，这是Java EE标准的出现无疑是雪中送炭，因此JSP慢慢发展成单一的表现技术，不再承担业务逻辑组件以及持久层组件的责任。\n\n#### JSP基本原理\n\n  JSP的本质是servlet，当用户指定servlet发送请求时，servlet利用输出流动态生成HTML页,由于包含大量的HTML标签,静态文本等格式导致servlet的开发效率极低，所有的表现逻辑，包括布局、色彩及图像等，都必须耦合在Java代码中。jsp使得静态的部分无需Java程序控制，只有那些需要从数据库读取或者需要动态生成的页面内容才使用Java脚本控制。\n\n#### JSP和Servlet是什么关系?\n\n　　Servlet是一个特殊的Java程序，它运行于服务器的JVM中，能够依靠服务器的支持向浏览器提供显示内容。JSP本质上是Servlet的一种简易形式，JSP会被服务器处理成一个类似于Servlet的Java程序，可以简化页面内容的生成。Servlet和JSP最主要的不同点在于，Servlet的应用逻辑是在Java文件中，并且完全从表示层中的HTML分离开来。而JSP的情况是Java和HTML可以组合成一个扩展名为.jsp的文件。有人说，Servlet就是在Java中写HTML，而JSP就是在HTML中写Java代码，当然这个说法是很片面且不够准确的。JSP侧重于视图，Servlet更侧重于控制逻辑，在MVC架构模式中，JSP适合充当视图(view)而Servlet适合充当控制器(controller)。\n\n**思考:为什么项目部署后修改jsp不需要重新启动?**(可查阅jTomcat类加载器架构了解)\n\n#### JSP中的四种作用域\n\nJSP中的四种作用域包括page、request、session和application，具体来说：\n\n- page代表与一个页面相关的对象和属性。\n- request代表与Web客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个Web组件;需要在页面显示的临时数据可以置于此作用域。\n- session代表与某个用户与服务器建立的一次会话相关的对象和属性。跟某个用户相关的数据应该放在用户自己的session中。\n- application代表与整个Web应用程序相关的对象和属性，它实质上是跨越整个Web应用程序，包括多个页面、请求和会话的一个全局作用域。\n\n#### 实现会话跟踪的技术\n\n　　由于HTTP协议本身是无状态的，服务器为了区分不同的用户，就需要对用户会话进行跟踪，简单的说就是为用户进行登记，为用户分配唯一的ID，下一次用户在请求中包含此ID，服务器据此判断到底是哪一个用户。\n\n　　1)URL 重写：在URL中添加用户会话的信息作为请求的参数，或者将唯一的会话ID添加到URL结尾以标识一个会话。\n\n　　2) 设置表单隐藏域：将和会话跟踪相关的字段添加到隐式表单域中，这些信息不会在浏览器中显示但是提交表单时会提交给服务器。\n\n　　这两种方式很难处理跨越多个页面的信息传递，因为如果每次都要修改URL或在页面中添加隐式表单域来存储用户会话相关信息，事情将变得非常麻烦。\n\n　　3)cookie：cookie有两种，一种是基于窗口的，浏览器窗口关闭后，cookie就没有了;另一种是将信息存储在一个临时文件中，并设置存在的时间。当用户通过浏览器和服务器建立一次会话后，会话ID就会随响应信息返回存储在基于窗口的cookie中，那就意味着只要浏览器没有关闭，会话没有超时，下一次请求时这个会话ID又会提交给服务器让服务器识别用户身份。会话中可以为用户保存信息。会话对象是在服务器内存中的，而基于窗口的cookie是在客户端内存中的。如果浏览器禁用了cookie，那么就需要通过下面两种方式进行会话跟踪。当然，在使用cookie时要注意几点：首先不要在cookie中存放敏感信息;其次cookie存储的数据量有限(4k)，不能将过多的内容存储cookie中;再者浏览器通常只允许一个站点最多存放20个cookie。当然，和用户会话相关的其他信息(除了会话ID)也可以存在cookie方便进行会话跟踪。\n\n　　4)HttpSession：在所有会话跟踪技术中，HttpSession对象是最强大也是功能最多的。当一个用户第一次访问某个网站时会自动创建HttpSession，每个用户可以访问他自己的HttpSession。可以通过HttpServletRequest对象的getSession方法获得HttpSession，通过HttpSession的setAttribute方法可以将一个值放在HttpSession中，通过调用HttpSession对象的getAttribute方法，同时传入属性名就可以获取保存在HttpSession中的对象。与上面三种方式不同的是，HttpSession放在服务器的内存中，因此不要将过大的对象放在里面，即使目前的Servlet容器可以在内存将满时将HttpSession中的对象移到其他存储设备中，但是这样势必影响性能。添加到HttpSession中的值可以是任意Java对象，这个对象最好实现了Serializable接口，这样Servlet容器在必要的时候可以将其序列化到文件中，否则在序列化时就会出现异常。\n\n#### 过滤器作用和用法\n\n　　Java Web开发中的过滤器(filter)是从Servlet 2.3规范开始增加的功能，并在Servlet 2.4规范中得到增强。对Web应用来说，过滤器是一个驻留在服务器端的Web组件，它可以截取客户端和服务器之间的请求与响应信息，并对这些信息进行过滤。当Web容器接受到一个对资源的请求时，它将判断是否有过滤器与这个资源相关联。如果有，那么容器将把请求交给过滤器进行处理。在过滤器中，你可以改变请求的内容，或者重新设置请求的报头信息，然后再将请求发送给目标资源。当目标资源对请求作出响应时候，容器同样会将响应先转发给过滤器，在过滤器中你可以对响应的内容进行转换，然后再将响应发送到客户端。\n\n　　常见的过滤器用途主要包括：对用户请求进行统一认证、对用户的访问请求进行记录和审核、对用户发送的数据进行过滤或替换、转换图象格式、对响应内容进行压缩以减少传输量、对请求或响应进行加解密处理、触发资源访问事件、对XML的输出应用XSLT等。\n\n　　过滤器相关的接口主要有：Filter、FilterConfig和FilterChain。\n\n　　监听器有哪些作用和用法?\n\n　　Java Web开发中的监听器(listener)就是application、session、request三个对象创建、销毁或者往其中添加修改删除属性时自动执行代码的功能组件，如下所示：\n\n　　ServletContextListener：对Servlet上下文的创建和销毁进行监听。\n\n　　ervletContextAttributeListener：监听Servlet上下文属性的添加、删除和替换。\n\n　　HttpSessionAttributeListener：对Session对象中属性的添加、删除和替换进行监听。\n\n　　ServletRequestListener：对请求对象的初始化和销毁进行监听。\n\n　　ServletRequestAttributeListener：对请求对象属性的添加、删除和替换进行监听。\n\n　　HttpSessionListener：对Session的创建和销毁进行监听。\n\n　　补充： session的销毁有两种情况：\n\n　　session超时(可以在web.xml中通过/标签配置超时时间);\n\n　　通过调用session对象的invalidate()方法使session失效。\n\n注意:为什么项目部署后修改jsp不需要重新启动?","source":"_posts/深入理解JSP.md","raw":"---\ntitle: 深入理解JSP\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-09 22:19:10\npassword:\nsummary:\ntags:\ncategories: java\n---\n\n#### JSP介绍\n\n JSP（Java server page）是Java EE规范最基本成员，他是Java Web开发的重点知识，虽然我们一直在用，但其原理知之甚少。今天重点研究一些JSP核心内容以及其工作原理。\n\n  JSP和Servlet的本质是一样的，因为JSP最终需要编译成Servlet才能运行，换句话说JSP是生成Servler的草稿文件。\n\n  JSP比较简单，就是在HTML中嵌入Java代码，或者使用JSP标签，包括使用用户自定义标签，从而可以动态的提供内容。早起JSP应用比较广泛，一个web应用可以全部由JSP页面组成，只需要少量的JavaBean即可，但是这样导致了JSP职责过于复杂，这是Java EE标准的出现无疑是雪中送炭，因此JSP慢慢发展成单一的表现技术，不再承担业务逻辑组件以及持久层组件的责任。\n\n#### JSP基本原理\n\n  JSP的本质是servlet，当用户指定servlet发送请求时，servlet利用输出流动态生成HTML页,由于包含大量的HTML标签,静态文本等格式导致servlet的开发效率极低，所有的表现逻辑，包括布局、色彩及图像等，都必须耦合在Java代码中。jsp使得静态的部分无需Java程序控制，只有那些需要从数据库读取或者需要动态生成的页面内容才使用Java脚本控制。\n\n#### JSP和Servlet是什么关系?\n\n　　Servlet是一个特殊的Java程序，它运行于服务器的JVM中，能够依靠服务器的支持向浏览器提供显示内容。JSP本质上是Servlet的一种简易形式，JSP会被服务器处理成一个类似于Servlet的Java程序，可以简化页面内容的生成。Servlet和JSP最主要的不同点在于，Servlet的应用逻辑是在Java文件中，并且完全从表示层中的HTML分离开来。而JSP的情况是Java和HTML可以组合成一个扩展名为.jsp的文件。有人说，Servlet就是在Java中写HTML，而JSP就是在HTML中写Java代码，当然这个说法是很片面且不够准确的。JSP侧重于视图，Servlet更侧重于控制逻辑，在MVC架构模式中，JSP适合充当视图(view)而Servlet适合充当控制器(controller)。\n\n**思考:为什么项目部署后修改jsp不需要重新启动?**(可查阅jTomcat类加载器架构了解)\n\n#### JSP中的四种作用域\n\nJSP中的四种作用域包括page、request、session和application，具体来说：\n\n- page代表与一个页面相关的对象和属性。\n- request代表与Web客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个Web组件;需要在页面显示的临时数据可以置于此作用域。\n- session代表与某个用户与服务器建立的一次会话相关的对象和属性。跟某个用户相关的数据应该放在用户自己的session中。\n- application代表与整个Web应用程序相关的对象和属性，它实质上是跨越整个Web应用程序，包括多个页面、请求和会话的一个全局作用域。\n\n#### 实现会话跟踪的技术\n\n　　由于HTTP协议本身是无状态的，服务器为了区分不同的用户，就需要对用户会话进行跟踪，简单的说就是为用户进行登记，为用户分配唯一的ID，下一次用户在请求中包含此ID，服务器据此判断到底是哪一个用户。\n\n　　1)URL 重写：在URL中添加用户会话的信息作为请求的参数，或者将唯一的会话ID添加到URL结尾以标识一个会话。\n\n　　2) 设置表单隐藏域：将和会话跟踪相关的字段添加到隐式表单域中，这些信息不会在浏览器中显示但是提交表单时会提交给服务器。\n\n　　这两种方式很难处理跨越多个页面的信息传递，因为如果每次都要修改URL或在页面中添加隐式表单域来存储用户会话相关信息，事情将变得非常麻烦。\n\n　　3)cookie：cookie有两种，一种是基于窗口的，浏览器窗口关闭后，cookie就没有了;另一种是将信息存储在一个临时文件中，并设置存在的时间。当用户通过浏览器和服务器建立一次会话后，会话ID就会随响应信息返回存储在基于窗口的cookie中，那就意味着只要浏览器没有关闭，会话没有超时，下一次请求时这个会话ID又会提交给服务器让服务器识别用户身份。会话中可以为用户保存信息。会话对象是在服务器内存中的，而基于窗口的cookie是在客户端内存中的。如果浏览器禁用了cookie，那么就需要通过下面两种方式进行会话跟踪。当然，在使用cookie时要注意几点：首先不要在cookie中存放敏感信息;其次cookie存储的数据量有限(4k)，不能将过多的内容存储cookie中;再者浏览器通常只允许一个站点最多存放20个cookie。当然，和用户会话相关的其他信息(除了会话ID)也可以存在cookie方便进行会话跟踪。\n\n　　4)HttpSession：在所有会话跟踪技术中，HttpSession对象是最强大也是功能最多的。当一个用户第一次访问某个网站时会自动创建HttpSession，每个用户可以访问他自己的HttpSession。可以通过HttpServletRequest对象的getSession方法获得HttpSession，通过HttpSession的setAttribute方法可以将一个值放在HttpSession中，通过调用HttpSession对象的getAttribute方法，同时传入属性名就可以获取保存在HttpSession中的对象。与上面三种方式不同的是，HttpSession放在服务器的内存中，因此不要将过大的对象放在里面，即使目前的Servlet容器可以在内存将满时将HttpSession中的对象移到其他存储设备中，但是这样势必影响性能。添加到HttpSession中的值可以是任意Java对象，这个对象最好实现了Serializable接口，这样Servlet容器在必要的时候可以将其序列化到文件中，否则在序列化时就会出现异常。\n\n#### 过滤器作用和用法\n\n　　Java Web开发中的过滤器(filter)是从Servlet 2.3规范开始增加的功能，并在Servlet 2.4规范中得到增强。对Web应用来说，过滤器是一个驻留在服务器端的Web组件，它可以截取客户端和服务器之间的请求与响应信息，并对这些信息进行过滤。当Web容器接受到一个对资源的请求时，它将判断是否有过滤器与这个资源相关联。如果有，那么容器将把请求交给过滤器进行处理。在过滤器中，你可以改变请求的内容，或者重新设置请求的报头信息，然后再将请求发送给目标资源。当目标资源对请求作出响应时候，容器同样会将响应先转发给过滤器，在过滤器中你可以对响应的内容进行转换，然后再将响应发送到客户端。\n\n　　常见的过滤器用途主要包括：对用户请求进行统一认证、对用户的访问请求进行记录和审核、对用户发送的数据进行过滤或替换、转换图象格式、对响应内容进行压缩以减少传输量、对请求或响应进行加解密处理、触发资源访问事件、对XML的输出应用XSLT等。\n\n　　过滤器相关的接口主要有：Filter、FilterConfig和FilterChain。\n\n　　监听器有哪些作用和用法?\n\n　　Java Web开发中的监听器(listener)就是application、session、request三个对象创建、销毁或者往其中添加修改删除属性时自动执行代码的功能组件，如下所示：\n\n　　ServletContextListener：对Servlet上下文的创建和销毁进行监听。\n\n　　ervletContextAttributeListener：监听Servlet上下文属性的添加、删除和替换。\n\n　　HttpSessionAttributeListener：对Session对象中属性的添加、删除和替换进行监听。\n\n　　ServletRequestListener：对请求对象的初始化和销毁进行监听。\n\n　　ServletRequestAttributeListener：对请求对象属性的添加、删除和替换进行监听。\n\n　　HttpSessionListener：对Session的创建和销毁进行监听。\n\n　　补充： session的销毁有两种情况：\n\n　　session超时(可以在web.xml中通过/标签配置超时时间);\n\n　　通过调用session对象的invalidate()方法使session失效。\n\n注意:为什么项目部署后修改jsp不需要重新启动?","slug":"深入理解JSP","published":1,"updated":"2020-07-08T14:35:12.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mldn002evkvy9f21uc63","content":"<h4 id=\"JSP介绍\"><a href=\"#JSP介绍\" class=\"headerlink\" title=\"JSP介绍\"></a>JSP介绍</h4><p> JSP（Java server page）是Java EE规范最基本成员，他是Java Web开发的重点知识，虽然我们一直在用，但其原理知之甚少。今天重点研究一些JSP核心内容以及其工作原理。</p>\n<p>  JSP和Servlet的本质是一样的，因为JSP最终需要编译成Servlet才能运行，换句话说JSP是生成Servler的草稿文件。</p>\n<p>  JSP比较简单，就是在HTML中嵌入Java代码，或者使用JSP标签，包括使用用户自定义标签，从而可以动态的提供内容。早起JSP应用比较广泛，一个web应用可以全部由JSP页面组成，只需要少量的JavaBean即可，但是这样导致了JSP职责过于复杂，这是Java EE标准的出现无疑是雪中送炭，因此JSP慢慢发展成单一的表现技术，不再承担业务逻辑组件以及持久层组件的责任。</p>\n<h4 id=\"JSP基本原理\"><a href=\"#JSP基本原理\" class=\"headerlink\" title=\"JSP基本原理\"></a>JSP基本原理</h4><p>  JSP的本质是servlet，当用户指定servlet发送请求时，servlet利用输出流动态生成HTML页,由于包含大量的HTML标签,静态文本等格式导致servlet的开发效率极低，所有的表现逻辑，包括布局、色彩及图像等，都必须耦合在Java代码中。jsp使得静态的部分无需Java程序控制，只有那些需要从数据库读取或者需要动态生成的页面内容才使用Java脚本控制。</p>\n<h4 id=\"JSP和Servlet是什么关系\"><a href=\"#JSP和Servlet是什么关系\" class=\"headerlink\" title=\"JSP和Servlet是什么关系?\"></a>JSP和Servlet是什么关系?</h4><p>　　Servlet是一个特殊的Java程序，它运行于服务器的JVM中，能够依靠服务器的支持向浏览器提供显示内容。JSP本质上是Servlet的一种简易形式，JSP会被服务器处理成一个类似于Servlet的Java程序，可以简化页面内容的生成。Servlet和JSP最主要的不同点在于，Servlet的应用逻辑是在Java文件中，并且完全从表示层中的HTML分离开来。而JSP的情况是Java和HTML可以组合成一个扩展名为.jsp的文件。有人说，Servlet就是在Java中写HTML，而JSP就是在HTML中写Java代码，当然这个说法是很片面且不够准确的。JSP侧重于视图，Servlet更侧重于控制逻辑，在MVC架构模式中，JSP适合充当视图(view)而Servlet适合充当控制器(controller)。</p>\n<p><strong>思考:为什么项目部署后修改jsp不需要重新启动?</strong>(可查阅jTomcat类加载器架构了解)</p>\n<h4 id=\"JSP中的四种作用域\"><a href=\"#JSP中的四种作用域\" class=\"headerlink\" title=\"JSP中的四种作用域\"></a>JSP中的四种作用域</h4><p>JSP中的四种作用域包括page、request、session和application，具体来说：</p>\n<ul>\n<li>page代表与一个页面相关的对象和属性。</li>\n<li>request代表与Web客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个Web组件;需要在页面显示的临时数据可以置于此作用域。</li>\n<li>session代表与某个用户与服务器建立的一次会话相关的对象和属性。跟某个用户相关的数据应该放在用户自己的session中。</li>\n<li>application代表与整个Web应用程序相关的对象和属性，它实质上是跨越整个Web应用程序，包括多个页面、请求和会话的一个全局作用域。</li>\n</ul>\n<h4 id=\"实现会话跟踪的技术\"><a href=\"#实现会话跟踪的技术\" class=\"headerlink\" title=\"实现会话跟踪的技术\"></a>实现会话跟踪的技术</h4><p>　　由于HTTP协议本身是无状态的，服务器为了区分不同的用户，就需要对用户会话进行跟踪，简单的说就是为用户进行登记，为用户分配唯一的ID，下一次用户在请求中包含此ID，服务器据此判断到底是哪一个用户。</p>\n<p>　　1)URL 重写：在URL中添加用户会话的信息作为请求的参数，或者将唯一的会话ID添加到URL结尾以标识一个会话。</p>\n<p>　　2) 设置表单隐藏域：将和会话跟踪相关的字段添加到隐式表单域中，这些信息不会在浏览器中显示但是提交表单时会提交给服务器。</p>\n<p>　　这两种方式很难处理跨越多个页面的信息传递，因为如果每次都要修改URL或在页面中添加隐式表单域来存储用户会话相关信息，事情将变得非常麻烦。</p>\n<p>　　3)cookie：cookie有两种，一种是基于窗口的，浏览器窗口关闭后，cookie就没有了;另一种是将信息存储在一个临时文件中，并设置存在的时间。当用户通过浏览器和服务器建立一次会话后，会话ID就会随响应信息返回存储在基于窗口的cookie中，那就意味着只要浏览器没有关闭，会话没有超时，下一次请求时这个会话ID又会提交给服务器让服务器识别用户身份。会话中可以为用户保存信息。会话对象是在服务器内存中的，而基于窗口的cookie是在客户端内存中的。如果浏览器禁用了cookie，那么就需要通过下面两种方式进行会话跟踪。当然，在使用cookie时要注意几点：首先不要在cookie中存放敏感信息;其次cookie存储的数据量有限(4k)，不能将过多的内容存储cookie中;再者浏览器通常只允许一个站点最多存放20个cookie。当然，和用户会话相关的其他信息(除了会话ID)也可以存在cookie方便进行会话跟踪。</p>\n<p>　　4)HttpSession：在所有会话跟踪技术中，HttpSession对象是最强大也是功能最多的。当一个用户第一次访问某个网站时会自动创建HttpSession，每个用户可以访问他自己的HttpSession。可以通过HttpServletRequest对象的getSession方法获得HttpSession，通过HttpSession的setAttribute方法可以将一个值放在HttpSession中，通过调用HttpSession对象的getAttribute方法，同时传入属性名就可以获取保存在HttpSession中的对象。与上面三种方式不同的是，HttpSession放在服务器的内存中，因此不要将过大的对象放在里面，即使目前的Servlet容器可以在内存将满时将HttpSession中的对象移到其他存储设备中，但是这样势必影响性能。添加到HttpSession中的值可以是任意Java对象，这个对象最好实现了Serializable接口，这样Servlet容器在必要的时候可以将其序列化到文件中，否则在序列化时就会出现异常。</p>\n<h4 id=\"过滤器作用和用法\"><a href=\"#过滤器作用和用法\" class=\"headerlink\" title=\"过滤器作用和用法\"></a>过滤器作用和用法</h4><p>　　Java Web开发中的过滤器(filter)是从Servlet 2.3规范开始增加的功能，并在Servlet 2.4规范中得到增强。对Web应用来说，过滤器是一个驻留在服务器端的Web组件，它可以截取客户端和服务器之间的请求与响应信息，并对这些信息进行过滤。当Web容器接受到一个对资源的请求时，它将判断是否有过滤器与这个资源相关联。如果有，那么容器将把请求交给过滤器进行处理。在过滤器中，你可以改变请求的内容，或者重新设置请求的报头信息，然后再将请求发送给目标资源。当目标资源对请求作出响应时候，容器同样会将响应先转发给过滤器，在过滤器中你可以对响应的内容进行转换，然后再将响应发送到客户端。</p>\n<p>　　常见的过滤器用途主要包括：对用户请求进行统一认证、对用户的访问请求进行记录和审核、对用户发送的数据进行过滤或替换、转换图象格式、对响应内容进行压缩以减少传输量、对请求或响应进行加解密处理、触发资源访问事件、对XML的输出应用XSLT等。</p>\n<p>　　过滤器相关的接口主要有：Filter、FilterConfig和FilterChain。</p>\n<p>　　监听器有哪些作用和用法?</p>\n<p>　　Java Web开发中的监听器(listener)就是application、session、request三个对象创建、销毁或者往其中添加修改删除属性时自动执行代码的功能组件，如下所示：</p>\n<p>　　ServletContextListener：对Servlet上下文的创建和销毁进行监听。</p>\n<p>　　ervletContextAttributeListener：监听Servlet上下文属性的添加、删除和替换。</p>\n<p>　　HttpSessionAttributeListener：对Session对象中属性的添加、删除和替换进行监听。</p>\n<p>　　ServletRequestListener：对请求对象的初始化和销毁进行监听。</p>\n<p>　　ServletRequestAttributeListener：对请求对象属性的添加、删除和替换进行监听。</p>\n<p>　　HttpSessionListener：对Session的创建和销毁进行监听。</p>\n<p>　　补充： session的销毁有两种情况：</p>\n<p>　　session超时(可以在web.xml中通过/标签配置超时时间);</p>\n<p>　　通过调用session对象的invalidate()方法使session失效。</p>\n<p>注意:为什么项目部署后修改jsp不需要重新启动?</p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h4 id=\"JSP介绍\"><a href=\"#JSP介绍\" class=\"headerlink\" title=\"JSP介绍\"></a>JSP介绍</h4><p> JSP（Java server page）是Java EE规范最基本成员，他是Java Web开发的重点知识，虽然我们一直在用，但其原理知之甚少。今天重点研究一些JSP核心内容以及其工作原理。</p>\n<p>  JSP和Servlet的本质是一样的，因为JSP最终需要编译成Servlet才能运行，换句话说JSP是生成Servler的草稿文件。</p>\n<p>  JSP比较简单，就是在HTML中嵌入Java代码，或者使用JSP标签，包括使用用户自定义标签，从而可以动态的提供内容。早起JSP应用比较广泛，一个web应用可以全部由JSP页面组成，只需要少量的JavaBean即可，但是这样导致了JSP职责过于复杂，这是Java EE标准的出现无疑是雪中送炭，因此JSP慢慢发展成单一的表现技术，不再承担业务逻辑组件以及持久层组件的责任。</p>\n<h4 id=\"JSP基本原理\"><a href=\"#JSP基本原理\" class=\"headerlink\" title=\"JSP基本原理\"></a>JSP基本原理</h4><p>  JSP的本质是servlet，当用户指定servlet发送请求时，servlet利用输出流动态生成HTML页,由于包含大量的HTML标签,静态文本等格式导致servlet的开发效率极低，所有的表现逻辑，包括布局、色彩及图像等，都必须耦合在Java代码中。jsp使得静态的部分无需Java程序控制，只有那些需要从数据库读取或者需要动态生成的页面内容才使用Java脚本控制。</p>\n<h4 id=\"JSP和Servlet是什么关系\"><a href=\"#JSP和Servlet是什么关系\" class=\"headerlink\" title=\"JSP和Servlet是什么关系?\"></a>JSP和Servlet是什么关系?</h4><p>　　Servlet是一个特殊的Java程序，它运行于服务器的JVM中，能够依靠服务器的支持向浏览器提供显示内容。JSP本质上是Servlet的一种简易形式，JSP会被服务器处理成一个类似于Servlet的Java程序，可以简化页面内容的生成。Servlet和JSP最主要的不同点在于，Servlet的应用逻辑是在Java文件中，并且完全从表示层中的HTML分离开来。而JSP的情况是Java和HTML可以组合成一个扩展名为.jsp的文件。有人说，Servlet就是在Java中写HTML，而JSP就是在HTML中写Java代码，当然这个说法是很片面且不够准确的。JSP侧重于视图，Servlet更侧重于控制逻辑，在MVC架构模式中，JSP适合充当视图(view)而Servlet适合充当控制器(controller)。</p>\n<p><strong>思考:为什么项目部署后修改jsp不需要重新启动?</strong>(可查阅jTomcat类加载器架构了解)</p>\n<h4 id=\"JSP中的四种作用域\"><a href=\"#JSP中的四种作用域\" class=\"headerlink\" title=\"JSP中的四种作用域\"></a>JSP中的四种作用域</h4><p>JSP中的四种作用域包括page、request、session和application，具体来说：</p>\n<ul>\n<li>page代表与一个页面相关的对象和属性。</li>\n<li>request代表与Web客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个Web组件;需要在页面显示的临时数据可以置于此作用域。</li>\n<li>session代表与某个用户与服务器建立的一次会话相关的对象和属性。跟某个用户相关的数据应该放在用户自己的session中。</li>\n<li>application代表与整个Web应用程序相关的对象和属性，它实质上是跨越整个Web应用程序，包括多个页面、请求和会话的一个全局作用域。</li>\n</ul>\n<h4 id=\"实现会话跟踪的技术\"><a href=\"#实现会话跟踪的技术\" class=\"headerlink\" title=\"实现会话跟踪的技术\"></a>实现会话跟踪的技术</h4><p>　　由于HTTP协议本身是无状态的，服务器为了区分不同的用户，就需要对用户会话进行跟踪，简单的说就是为用户进行登记，为用户分配唯一的ID，下一次用户在请求中包含此ID，服务器据此判断到底是哪一个用户。</p>\n<p>　　1)URL 重写：在URL中添加用户会话的信息作为请求的参数，或者将唯一的会话ID添加到URL结尾以标识一个会话。</p>\n<p>　　2) 设置表单隐藏域：将和会话跟踪相关的字段添加到隐式表单域中，这些信息不会在浏览器中显示但是提交表单时会提交给服务器。</p>\n<p>　　这两种方式很难处理跨越多个页面的信息传递，因为如果每次都要修改URL或在页面中添加隐式表单域来存储用户会话相关信息，事情将变得非常麻烦。</p>\n<p>　　3)cookie：cookie有两种，一种是基于窗口的，浏览器窗口关闭后，cookie就没有了;另一种是将信息存储在一个临时文件中，并设置存在的时间。当用户通过浏览器和服务器建立一次会话后，会话ID就会随响应信息返回存储在基于窗口的cookie中，那就意味着只要浏览器没有关闭，会话没有超时，下一次请求时这个会话ID又会提交给服务器让服务器识别用户身份。会话中可以为用户保存信息。会话对象是在服务器内存中的，而基于窗口的cookie是在客户端内存中的。如果浏览器禁用了cookie，那么就需要通过下面两种方式进行会话跟踪。当然，在使用cookie时要注意几点：首先不要在cookie中存放敏感信息;其次cookie存储的数据量有限(4k)，不能将过多的内容存储cookie中;再者浏览器通常只允许一个站点最多存放20个cookie。当然，和用户会话相关的其他信息(除了会话ID)也可以存在cookie方便进行会话跟踪。</p>\n<p>　　4)HttpSession：在所有会话跟踪技术中，HttpSession对象是最强大也是功能最多的。当一个用户第一次访问某个网站时会自动创建HttpSession，每个用户可以访问他自己的HttpSession。可以通过HttpServletRequest对象的getSession方法获得HttpSession，通过HttpSession的setAttribute方法可以将一个值放在HttpSession中，通过调用HttpSession对象的getAttribute方法，同时传入属性名就可以获取保存在HttpSession中的对象。与上面三种方式不同的是，HttpSession放在服务器的内存中，因此不要将过大的对象放在里面，即使目前的Servlet容器可以在内存将满时将HttpSession中的对象移到其他存储设备中，但是这样势必影响性能。添加到HttpSession中的值可以是任意Java对象，这个对象最好实现了Serializable接口，这样Servlet容器在必要的时候可以将其序列化到文件中，否则在序列化时就会出现异常。</p>\n<h4 id=\"过滤器作用和用法\"><a href=\"#过滤器作用和用法\" class=\"headerlink\" title=\"过滤器作用和用法\"></a>过滤器作用和用法</h4><p>　　Java Web开发中的过滤器(filter)是从Servlet 2.3规范开始增加的功能，并在Servlet 2.4规范中得到增强。对Web应用来说，过滤器是一个驻留在服务器端的Web组件，它可以截取客户端和服务器之间的请求与响应信息，并对这些信息进行过滤。当Web容器接受到一个对资源的请求时，它将判断是否有过滤器与这个资源相关联。如果有，那么容器将把请求交给过滤器进行处理。在过滤器中，你可以改变请求的内容，或者重新设置请求的报头信息，然后再将请求发送给目标资源。当目标资源对请求作出响应时候，容器同样会将响应先转发给过滤器，在过滤器中你可以对响应的内容进行转换，然后再将响应发送到客户端。</p>\n<p>　　常见的过滤器用途主要包括：对用户请求进行统一认证、对用户的访问请求进行记录和审核、对用户发送的数据进行过滤或替换、转换图象格式、对响应内容进行压缩以减少传输量、对请求或响应进行加解密处理、触发资源访问事件、对XML的输出应用XSLT等。</p>\n<p>　　过滤器相关的接口主要有：Filter、FilterConfig和FilterChain。</p>\n<p>　　监听器有哪些作用和用法?</p>\n<p>　　Java Web开发中的监听器(listener)就是application、session、request三个对象创建、销毁或者往其中添加修改删除属性时自动执行代码的功能组件，如下所示：</p>\n<p>　　ServletContextListener：对Servlet上下文的创建和销毁进行监听。</p>\n<p>　　ervletContextAttributeListener：监听Servlet上下文属性的添加、删除和替换。</p>\n<p>　　HttpSessionAttributeListener：对Session对象中属性的添加、删除和替换进行监听。</p>\n<p>　　ServletRequestListener：对请求对象的初始化和销毁进行监听。</p>\n<p>　　ServletRequestAttributeListener：对请求对象属性的添加、删除和替换进行监听。</p>\n<p>　　HttpSessionListener：对Session的创建和销毁进行监听。</p>\n<p>　　补充： session的销毁有两种情况：</p>\n<p>　　session超时(可以在web.xml中通过/标签配置超时时间);</p>\n<p>　　通过调用session对象的invalidate()方法使session失效。</p>\n<p>注意:为什么项目部署后修改jsp不需要重新启动?</p>\n"},{"title":"深入理解java的BIO、NIO、AIO","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-02-29T03:47:08.000Z","password":null,"summary":null,"_content":"\n# IO 介绍\n\n我们通常所说的 BIO 是相对于 NIO 来说的，BIO 也就是 Java 开始之初推出的 IO 操作模块，BIO 是 BlockingIO 的缩写，顾名思义就是阻塞 IO 的意思。\n\n##  BIO、NIO、AIO的区别\n\n1. BIO 就是传统的 [java.io](http://java.io) 包，它是基于流模型实现的，交互的方式是同步、阻塞方式，也就是说在读入输入流或者输出流时，在读写动作完成之前，线程会一直阻塞在那里，它们之间的调用是可靠的线性顺序。它的优点就是代码比较简单、直观；缺点就是 IO 的效率和扩展性很低，容易成为应用性能瓶颈。\n2. NIO 是 Java 1.4 引入的 java.nio 包，提供了 Channel、Selector、Buffer 等新的抽象，可以构建多路复用的、同步非阻塞 IO 程序，同时提供了更接近操作系统底层高性能的数据操作方式。\n3. AIO 是 Java 1.7 之后引入的包，是 NIO 的升级版本，提供了异步非堵塞的 IO 操作方式，所以人们叫它 AIO（Asynchronous IO），异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。\n\n**在JAVA NIO框架中，我们说到了一个重要概念“selector”（选择器）。它负责代替应用查询中所有已注册的通道到操作系统中进行IO事件轮询、管理当前注册的通道集合，定位发生事件的通道等操操作；但是在JAVA AIO框架中，由于应用程序不是“轮询”方式，而是订阅-通知方式，所以不再需要“selector”（选择器）了，改由channel通道直接到操作系统注册监听。** \n\n**JAVA AIO框架中，只实现了两种网络IO通道“AsynchronousServerSocketChannel”（服务器监听通道）、“AsynchronousSocketChannel”（socket套接字通道）。但是无论哪种通道他们都有独立的fileDescriptor（文件标识符）、attachment（附件，附件可以使任意对象，类似“通道上下文”），并被独立的SocketChannelReadHandle类实例引用。** \n\n# 同步、异步、阻塞、非阻塞\n\n上面说了很多关于同步、异步、阻塞和非阻塞的概念，接下来就具体聊一下它们4个的含义，以及组合之后形成的性能分析。\n\n##  同步与异步\n\n同步就是一个任务的完成需要依赖另外一个任务时，只有等待被依赖的任务完成后，依赖的任务才能算完成，这是一种可靠的任务序列。要么成功都成功，失败都失败，两个任务的状态可以保持一致。而异步是不需要等待被依赖的任务完成，只是通知被依赖的任务要完成什么工作，依赖的任务也立即执行，只要自己完成了整个任务就算完成了。至于被依赖的任务最终是否真正完成，依赖它的任务无法确定，所以它是不可靠的任务序列。我们可以用打电话和发短信来很好的比喻同步与异步操作。\n\n##  阻塞与非阻塞\n\n阻塞与非阻塞主要是从 CPU 的消耗上来说的，阻塞就是 CPU 停下来等待一个慢的操作完成 CPU 才接着完成其它的事。非阻塞就是在这个慢的操作在执行时 CPU 去干其它别的事，等这个慢的操作完成时，CPU 再接着完成后续的操作。虽然表面上看非阻塞的方式可以明显的提高 CPU 的利用率，但是也带了另外一种后果就是系统的线程切换增加。增加的 CPU 使用时间能不能补偿系统的切换成本需要好好评估。\n\n## 同/异、阻/非堵塞 组合\n\n同/异、阻/非堵塞的组合，有四种类型，如下表：\n\n| 组合方式   | 性能分析                                                     |\n| ---------- | ------------------------------------------------------------ |\n| 同步阻塞   | 最常用的一种用法，使用也是最简单的，但是 I/O 性能一般很差，CPU 大部分在空闲状态。 |\n| 同步非阻塞 | 提升 I/O 性能的常用手段，就是将 I/O 的阻塞改成非阻塞方式，尤其在网络 I/O 是长连接，同时传输数据也不是很多的情况下，提升性能非常有效。 这种方式通常能提升 I/O 性能，但是会增加CPU 消耗，要考虑增加的 I/O 性能能不能补偿 CPU 的消耗，也就是系统的瓶颈是在 I/O 还是在 CPU 上。 |\n| 异步阻塞   | 这种方式在分布式数据库中经常用到，例如在网一个分布式数据库中写一条记录，通常会有一份是同步阻塞的记录，而还有两至三份是备份记录会写到其它机器上，这些备份记录通常都是采用异步阻塞的方式写 I/O。异步阻塞对网络 I/O 能够提升效率，尤其像上面这种同时写多份相同数据的情况。 |\n| 异步非阻塞 | 这种组合方式用起来比较复杂，只有在一些非常复杂的分布式情况下使用，像集群之间的消息同步机制一般用这种 I/O 组合方式。如 Cassandra 的 Gossip 通信机制就是采用异步非阻塞的方式。它适合同时要传多份相同的数据到集群中不同的机器，同时数据的传输量虽然不大，但是却非常频繁。这种网络 I/O 用这个方式性能能达到最高。 |\n\n# Socket 和 NIO 的多路复用\n\n本节带你实现最基础的 Socket 的同时，同时会实现 NIO 多路复用，还有 AIO 中 Socket 的实现。\n\n## 传统的 Socket 实现\n\n接下来我们将会实现一个简单的 Socket，服务器端只发给客户端信息，再由客户端打印出来的例子，代码如下：\n\n```java\nint port = 4343; //端口号\n// Socket 服务器端（简单的发送信息）\nThread sThread = new Thread(new Runnable() {\n    @Override\n    public void run() {\n        try {\n            ServerSocket serverSocket = new ServerSocket(port);\n            while (true) {\n                // 等待连接\n                Socket socket = serverSocket.accept();\n                Thread sHandlerThread = new Thread(new Runnable() {\n                    @Override\n                    public void run() {\n                        try (PrintWriter printWriter = new PrintWriter(socket.getOutputStream())) {\n                            printWriter.println(\"hello world！\");\n                            printWriter.flush();\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                });\n                sHandlerThread.start();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n});\nsThread.start();\n\n// Socket 客户端（接收信息并打印）\ntry (Socket cSocket = new Socket(InetAddress.getLocalHost(), port)) {\n    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(cSocket.getInputStream()));\n    bufferedReader.lines().forEach(s -> System.out.println(\"客户端：\" + s));\n} catch (UnknownHostException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n- 调用 accept 方法，阻塞等待客户端连接；\n- 利用 Socket 模拟了一个简单的客户端，只进行连接、读取和打印；\n\n在 Java 中，线程的实现是比较重量级的，所以线程的启动或者销毁是很消耗服务器的资源的，即使使用线程池来实现，使用上述传统的 Socket 方式，当连接数极具上升也会带来性能瓶颈，原因是线程的上线文切换开销会在高并发的时候体现的很明显，并且以上操作方式还是同步阻塞式的编程，性能问题在高并发的时候就会体现的尤为明显。\n\n以上的流程，如下图：\n\n![](深入理解java的BIO、NIO、AIO/2.png)\n\n##  NIO 多路复用\n\n介于以上高并发的问题，NIO 的多路复用功能就显得意义非凡了。\n\nNIO 是利用了单线程轮询事件的机制，通过高效地定位就绪的 Channel，来决定做什么，仅仅 select 阶段是阻塞的，可以有效避免大量客户端连接时，频繁线程切换带来的问题，应用的扩展能力有了非常大的提高。\n\n```java\n// NIO 多路复用\nThreadPoolExecutor threadPool = new ThreadPoolExecutor(4, 4,\n        60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());\nthreadPool.execute(new Runnable() {\n    @Override\n    public void run() {\n        try (Selector selector = Selector.open();\n             ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();) {\n            serverSocketChannel.bind(new InetSocketAddress(InetAddress.getLocalHost(), port));\n            serverSocketChannel.configureBlocking(false);\n            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n            while (true) {\n                selector.select(); // 阻塞等待就绪的Channel\n                Set<SelectionKey> selectionKeys = selector.selectedKeys();\n                Iterator<SelectionKey> iterator = selectionKeys.iterator();\n                while (iterator.hasNext()) {\n                    SelectionKey key = iterator.next();\n                    try (SocketChannel channel = ((ServerSocketChannel) key.channel()).accept()) {\n                        channel.write(Charset.defaultCharset().encode(\"你好，世界\"));\n                    }\n                    iterator.remove();\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n});\n\n// Socket 客户端（接收信息并打印）\ntry (Socket cSocket = new Socket(InetAddress.getLocalHost(), port)) {\n    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(cSocket.getInputStream()));\n    bufferedReader.lines().forEach(s -> System.out.println(\"NIO 客户端：\" + s));\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n- 首先，通过 Selector.open() 创建一个 Selector，作为类似调度员的角色；\n- 然后，创建一个 ServerSocketChannel，并且向 Selector 注册，通过指定 SelectionKey.OP_ACCEPT，告诉调度员，它关注的是新的连接请求；\n- 为什么我们要明确配置非阻塞模式呢？这是因为阻塞模式下，注册操作是不允许的，会抛出 IllegalBlockingModeException 异常；\n- Selector 阻塞在 select 操作，当有 Channel 发生接入请求，就会被唤醒；\n\n下面的图，可以有效的说明 NIO 复用的流程：\n\n![](深入理解java的BIO、NIO、AIO/1.png)\n\n就这样 NIO 的多路复用就大大提升了服务器端响应高并发的能力。\n\n## AIO 版 Socket 实现\n\nJava 1.7 提供了 AIO 实现的 Socket 是这样的，如下代码：\n\n```java\n// AIO线程复用版\nThread sThread = new Thread(new Runnable() {\n    @Override\n    public void run() {\n        AsynchronousChannelGroup group = null;\n        try {\n            group = AsynchronousChannelGroup.withThreadPool(Executors.newFixedThreadPool(4));\n            AsynchronousServerSocketChannel server = AsynchronousServerSocketChannel.open(group).bind(new InetSocketAddress(InetAddress.getLocalHost(), port));\n            server.accept(null, new CompletionHandler<AsynchronousSocketChannel, AsynchronousServerSocketChannel>() {\n                @Override\n                public void completed(AsynchronousSocketChannel result, AsynchronousServerSocketChannel attachment) {\n                    server.accept(null, this); // 接收下一个请求\n                    try {\n                        Future<Integer> f = result.write(Charset.defaultCharset().encode(\"你好，世界\"));\n                        f.get();\n                        System.out.println(\"服务端发送时间：\" + new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()));\n                        result.close();\n                    } catch (InterruptedException | ExecutionException | IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n\n                @Override\n                public void failed(Throwable exc, AsynchronousServerSocketChannel attachment) {\n                }\n            });\n            group.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);\n        } catch (IOException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n});\nsThread.start();\n\n// Socket 客户端\nAsynchronousSocketChannel client = AsynchronousSocketChannel.open();\nFuture<Void> future = client.connect(new InetSocketAddress(InetAddress.getLocalHost(), port));\nfuture.get();\nByteBuffer buffer = ByteBuffer.allocate(100);\nclient.read(buffer, null, new CompletionHandler<Integer, Void>() {\n    @Override\n    public void completed(Integer result, Void attachment) {\n        System.out.println(\"客户端打印：\" + new String(buffer.array()));\n    }\n\n    @Override\n    public void failed(Throwable exc, Void attachment) {\n        exc.printStackTrace();\n        try {\n            client.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n});\nThread.sleep(10 * 1000);\n```\n\n","source":"_posts/深入理解java的BIO、NIO、AIO.md","raw":"---\ntitle: 深入理解java的BIO、NIO、AIO\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-02-29 11:47:08\npassword:\nsummary:\ntags:\ncategories: java\n---\n\n# IO 介绍\n\n我们通常所说的 BIO 是相对于 NIO 来说的，BIO 也就是 Java 开始之初推出的 IO 操作模块，BIO 是 BlockingIO 的缩写，顾名思义就是阻塞 IO 的意思。\n\n##  BIO、NIO、AIO的区别\n\n1. BIO 就是传统的 [java.io](http://java.io) 包，它是基于流模型实现的，交互的方式是同步、阻塞方式，也就是说在读入输入流或者输出流时，在读写动作完成之前，线程会一直阻塞在那里，它们之间的调用是可靠的线性顺序。它的优点就是代码比较简单、直观；缺点就是 IO 的效率和扩展性很低，容易成为应用性能瓶颈。\n2. NIO 是 Java 1.4 引入的 java.nio 包，提供了 Channel、Selector、Buffer 等新的抽象，可以构建多路复用的、同步非阻塞 IO 程序，同时提供了更接近操作系统底层高性能的数据操作方式。\n3. AIO 是 Java 1.7 之后引入的包，是 NIO 的升级版本，提供了异步非堵塞的 IO 操作方式，所以人们叫它 AIO（Asynchronous IO），异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。\n\n**在JAVA NIO框架中，我们说到了一个重要概念“selector”（选择器）。它负责代替应用查询中所有已注册的通道到操作系统中进行IO事件轮询、管理当前注册的通道集合，定位发生事件的通道等操操作；但是在JAVA AIO框架中，由于应用程序不是“轮询”方式，而是订阅-通知方式，所以不再需要“selector”（选择器）了，改由channel通道直接到操作系统注册监听。** \n\n**JAVA AIO框架中，只实现了两种网络IO通道“AsynchronousServerSocketChannel”（服务器监听通道）、“AsynchronousSocketChannel”（socket套接字通道）。但是无论哪种通道他们都有独立的fileDescriptor（文件标识符）、attachment（附件，附件可以使任意对象，类似“通道上下文”），并被独立的SocketChannelReadHandle类实例引用。** \n\n# 同步、异步、阻塞、非阻塞\n\n上面说了很多关于同步、异步、阻塞和非阻塞的概念，接下来就具体聊一下它们4个的含义，以及组合之后形成的性能分析。\n\n##  同步与异步\n\n同步就是一个任务的完成需要依赖另外一个任务时，只有等待被依赖的任务完成后，依赖的任务才能算完成，这是一种可靠的任务序列。要么成功都成功，失败都失败，两个任务的状态可以保持一致。而异步是不需要等待被依赖的任务完成，只是通知被依赖的任务要完成什么工作，依赖的任务也立即执行，只要自己完成了整个任务就算完成了。至于被依赖的任务最终是否真正完成，依赖它的任务无法确定，所以它是不可靠的任务序列。我们可以用打电话和发短信来很好的比喻同步与异步操作。\n\n##  阻塞与非阻塞\n\n阻塞与非阻塞主要是从 CPU 的消耗上来说的，阻塞就是 CPU 停下来等待一个慢的操作完成 CPU 才接着完成其它的事。非阻塞就是在这个慢的操作在执行时 CPU 去干其它别的事，等这个慢的操作完成时，CPU 再接着完成后续的操作。虽然表面上看非阻塞的方式可以明显的提高 CPU 的利用率，但是也带了另外一种后果就是系统的线程切换增加。增加的 CPU 使用时间能不能补偿系统的切换成本需要好好评估。\n\n## 同/异、阻/非堵塞 组合\n\n同/异、阻/非堵塞的组合，有四种类型，如下表：\n\n| 组合方式   | 性能分析                                                     |\n| ---------- | ------------------------------------------------------------ |\n| 同步阻塞   | 最常用的一种用法，使用也是最简单的，但是 I/O 性能一般很差，CPU 大部分在空闲状态。 |\n| 同步非阻塞 | 提升 I/O 性能的常用手段，就是将 I/O 的阻塞改成非阻塞方式，尤其在网络 I/O 是长连接，同时传输数据也不是很多的情况下，提升性能非常有效。 这种方式通常能提升 I/O 性能，但是会增加CPU 消耗，要考虑增加的 I/O 性能能不能补偿 CPU 的消耗，也就是系统的瓶颈是在 I/O 还是在 CPU 上。 |\n| 异步阻塞   | 这种方式在分布式数据库中经常用到，例如在网一个分布式数据库中写一条记录，通常会有一份是同步阻塞的记录，而还有两至三份是备份记录会写到其它机器上，这些备份记录通常都是采用异步阻塞的方式写 I/O。异步阻塞对网络 I/O 能够提升效率，尤其像上面这种同时写多份相同数据的情况。 |\n| 异步非阻塞 | 这种组合方式用起来比较复杂，只有在一些非常复杂的分布式情况下使用，像集群之间的消息同步机制一般用这种 I/O 组合方式。如 Cassandra 的 Gossip 通信机制就是采用异步非阻塞的方式。它适合同时要传多份相同的数据到集群中不同的机器，同时数据的传输量虽然不大，但是却非常频繁。这种网络 I/O 用这个方式性能能达到最高。 |\n\n# Socket 和 NIO 的多路复用\n\n本节带你实现最基础的 Socket 的同时，同时会实现 NIO 多路复用，还有 AIO 中 Socket 的实现。\n\n## 传统的 Socket 实现\n\n接下来我们将会实现一个简单的 Socket，服务器端只发给客户端信息，再由客户端打印出来的例子，代码如下：\n\n```java\nint port = 4343; //端口号\n// Socket 服务器端（简单的发送信息）\nThread sThread = new Thread(new Runnable() {\n    @Override\n    public void run() {\n        try {\n            ServerSocket serverSocket = new ServerSocket(port);\n            while (true) {\n                // 等待连接\n                Socket socket = serverSocket.accept();\n                Thread sHandlerThread = new Thread(new Runnable() {\n                    @Override\n                    public void run() {\n                        try (PrintWriter printWriter = new PrintWriter(socket.getOutputStream())) {\n                            printWriter.println(\"hello world！\");\n                            printWriter.flush();\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                });\n                sHandlerThread.start();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n});\nsThread.start();\n\n// Socket 客户端（接收信息并打印）\ntry (Socket cSocket = new Socket(InetAddress.getLocalHost(), port)) {\n    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(cSocket.getInputStream()));\n    bufferedReader.lines().forEach(s -> System.out.println(\"客户端：\" + s));\n} catch (UnknownHostException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n- 调用 accept 方法，阻塞等待客户端连接；\n- 利用 Socket 模拟了一个简单的客户端，只进行连接、读取和打印；\n\n在 Java 中，线程的实现是比较重量级的，所以线程的启动或者销毁是很消耗服务器的资源的，即使使用线程池来实现，使用上述传统的 Socket 方式，当连接数极具上升也会带来性能瓶颈，原因是线程的上线文切换开销会在高并发的时候体现的很明显，并且以上操作方式还是同步阻塞式的编程，性能问题在高并发的时候就会体现的尤为明显。\n\n以上的流程，如下图：\n\n![](深入理解java的BIO、NIO、AIO/2.png)\n\n##  NIO 多路复用\n\n介于以上高并发的问题，NIO 的多路复用功能就显得意义非凡了。\n\nNIO 是利用了单线程轮询事件的机制，通过高效地定位就绪的 Channel，来决定做什么，仅仅 select 阶段是阻塞的，可以有效避免大量客户端连接时，频繁线程切换带来的问题，应用的扩展能力有了非常大的提高。\n\n```java\n// NIO 多路复用\nThreadPoolExecutor threadPool = new ThreadPoolExecutor(4, 4,\n        60L, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>());\nthreadPool.execute(new Runnable() {\n    @Override\n    public void run() {\n        try (Selector selector = Selector.open();\n             ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();) {\n            serverSocketChannel.bind(new InetSocketAddress(InetAddress.getLocalHost(), port));\n            serverSocketChannel.configureBlocking(false);\n            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n            while (true) {\n                selector.select(); // 阻塞等待就绪的Channel\n                Set<SelectionKey> selectionKeys = selector.selectedKeys();\n                Iterator<SelectionKey> iterator = selectionKeys.iterator();\n                while (iterator.hasNext()) {\n                    SelectionKey key = iterator.next();\n                    try (SocketChannel channel = ((ServerSocketChannel) key.channel()).accept()) {\n                        channel.write(Charset.defaultCharset().encode(\"你好，世界\"));\n                    }\n                    iterator.remove();\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n});\n\n// Socket 客户端（接收信息并打印）\ntry (Socket cSocket = new Socket(InetAddress.getLocalHost(), port)) {\n    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(cSocket.getInputStream()));\n    bufferedReader.lines().forEach(s -> System.out.println(\"NIO 客户端：\" + s));\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```\n\n- 首先，通过 Selector.open() 创建一个 Selector，作为类似调度员的角色；\n- 然后，创建一个 ServerSocketChannel，并且向 Selector 注册，通过指定 SelectionKey.OP_ACCEPT，告诉调度员，它关注的是新的连接请求；\n- 为什么我们要明确配置非阻塞模式呢？这是因为阻塞模式下，注册操作是不允许的，会抛出 IllegalBlockingModeException 异常；\n- Selector 阻塞在 select 操作，当有 Channel 发生接入请求，就会被唤醒；\n\n下面的图，可以有效的说明 NIO 复用的流程：\n\n![](深入理解java的BIO、NIO、AIO/1.png)\n\n就这样 NIO 的多路复用就大大提升了服务器端响应高并发的能力。\n\n## AIO 版 Socket 实现\n\nJava 1.7 提供了 AIO 实现的 Socket 是这样的，如下代码：\n\n```java\n// AIO线程复用版\nThread sThread = new Thread(new Runnable() {\n    @Override\n    public void run() {\n        AsynchronousChannelGroup group = null;\n        try {\n            group = AsynchronousChannelGroup.withThreadPool(Executors.newFixedThreadPool(4));\n            AsynchronousServerSocketChannel server = AsynchronousServerSocketChannel.open(group).bind(new InetSocketAddress(InetAddress.getLocalHost(), port));\n            server.accept(null, new CompletionHandler<AsynchronousSocketChannel, AsynchronousServerSocketChannel>() {\n                @Override\n                public void completed(AsynchronousSocketChannel result, AsynchronousServerSocketChannel attachment) {\n                    server.accept(null, this); // 接收下一个请求\n                    try {\n                        Future<Integer> f = result.write(Charset.defaultCharset().encode(\"你好，世界\"));\n                        f.get();\n                        System.out.println(\"服务端发送时间：\" + new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date()));\n                        result.close();\n                    } catch (InterruptedException | ExecutionException | IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n\n                @Override\n                public void failed(Throwable exc, AsynchronousServerSocketChannel attachment) {\n                }\n            });\n            group.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);\n        } catch (IOException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n});\nsThread.start();\n\n// Socket 客户端\nAsynchronousSocketChannel client = AsynchronousSocketChannel.open();\nFuture<Void> future = client.connect(new InetSocketAddress(InetAddress.getLocalHost(), port));\nfuture.get();\nByteBuffer buffer = ByteBuffer.allocate(100);\nclient.read(buffer, null, new CompletionHandler<Integer, Void>() {\n    @Override\n    public void completed(Integer result, Void attachment) {\n        System.out.println(\"客户端打印：\" + new String(buffer.array()));\n    }\n\n    @Override\n    public void failed(Throwable exc, Void attachment) {\n        exc.printStackTrace();\n        try {\n            client.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n});\nThread.sleep(10 * 1000);\n```\n\n","slug":"深入理解java的BIO、NIO、AIO","published":1,"updated":"2021-04-29T11:01:21.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mldq002gvkvye92ruzop","content":"<h1 id=\"IO-介绍\"><a href=\"#IO-介绍\" class=\"headerlink\" title=\"IO 介绍\"></a>IO 介绍</h1><p>我们通常所说的 BIO 是相对于 NIO 来说的，BIO 也就是 Java 开始之初推出的 IO 操作模块，BIO 是 BlockingIO 的缩写，顾名思义就是阻塞 IO 的意思。</p>\n<h2 id=\"BIO、NIO、AIO的区别\"><a href=\"#BIO、NIO、AIO的区别\" class=\"headerlink\" title=\"BIO、NIO、AIO的区别\"></a>BIO、NIO、AIO的区别</h2><ol>\n<li>BIO 就是传统的 <a href=\"http://java.io\" target=\"_blank\" rel=\"noopener\">java.io</a> 包，它是基于流模型实现的，交互的方式是同步、阻塞方式，也就是说在读入输入流或者输出流时，在读写动作完成之前，线程会一直阻塞在那里，它们之间的调用是可靠的线性顺序。它的优点就是代码比较简单、直观；缺点就是 IO 的效率和扩展性很低，容易成为应用性能瓶颈。</li>\n<li>NIO 是 Java 1.4 引入的 java.nio 包，提供了 Channel、Selector、Buffer 等新的抽象，可以构建多路复用的、同步非阻塞 IO 程序，同时提供了更接近操作系统底层高性能的数据操作方式。</li>\n<li>AIO 是 Java 1.7 之后引入的包，是 NIO 的升级版本，提供了异步非堵塞的 IO 操作方式，所以人们叫它 AIO（Asynchronous IO），异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。</li>\n</ol>\n<p><strong>在JAVA NIO框架中，我们说到了一个重要概念“selector”（选择器）。它负责代替应用查询中所有已注册的通道到操作系统中进行IO事件轮询、管理当前注册的通道集合，定位发生事件的通道等操操作；但是在JAVA AIO框架中，由于应用程序不是“轮询”方式，而是订阅-通知方式，所以不再需要“selector”（选择器）了，改由channel通道直接到操作系统注册监听。</strong> </p>\n<p><strong>JAVA AIO框架中，只实现了两种网络IO通道“AsynchronousServerSocketChannel”（服务器监听通道）、“AsynchronousSocketChannel”（socket套接字通道）。但是无论哪种通道他们都有独立的fileDescriptor（文件标识符）、attachment（附件，附件可以使任意对象，类似“通道上下文”），并被独立的SocketChannelReadHandle类实例引用。</strong> </p>\n<h1 id=\"同步、异步、阻塞、非阻塞\"><a href=\"#同步、异步、阻塞、非阻塞\" class=\"headerlink\" title=\"同步、异步、阻塞、非阻塞\"></a>同步、异步、阻塞、非阻塞</h1><p>上面说了很多关于同步、异步、阻塞和非阻塞的概念，接下来就具体聊一下它们4个的含义，以及组合之后形成的性能分析。</p>\n<h2 id=\"同步与异步\"><a href=\"#同步与异步\" class=\"headerlink\" title=\"同步与异步\"></a>同步与异步</h2><p>同步就是一个任务的完成需要依赖另外一个任务时，只有等待被依赖的任务完成后，依赖的任务才能算完成，这是一种可靠的任务序列。要么成功都成功，失败都失败，两个任务的状态可以保持一致。而异步是不需要等待被依赖的任务完成，只是通知被依赖的任务要完成什么工作，依赖的任务也立即执行，只要自己完成了整个任务就算完成了。至于被依赖的任务最终是否真正完成，依赖它的任务无法确定，所以它是不可靠的任务序列。我们可以用打电话和发短信来很好的比喻同步与异步操作。</p>\n<h2 id=\"阻塞与非阻塞\"><a href=\"#阻塞与非阻塞\" class=\"headerlink\" title=\"阻塞与非阻塞\"></a>阻塞与非阻塞</h2><p>阻塞与非阻塞主要是从 CPU 的消耗上来说的，阻塞就是 CPU 停下来等待一个慢的操作完成 CPU 才接着完成其它的事。非阻塞就是在这个慢的操作在执行时 CPU 去干其它别的事，等这个慢的操作完成时，CPU 再接着完成后续的操作。虽然表面上看非阻塞的方式可以明显的提高 CPU 的利用率，但是也带了另外一种后果就是系统的线程切换增加。增加的 CPU 使用时间能不能补偿系统的切换成本需要好好评估。</p>\n<h2 id=\"同-异、阻-非堵塞-组合\"><a href=\"#同-异、阻-非堵塞-组合\" class=\"headerlink\" title=\"同/异、阻/非堵塞 组合\"></a>同/异、阻/非堵塞 组合</h2><p>同/异、阻/非堵塞的组合，有四种类型，如下表：</p>\n<table>\n<thead>\n<tr>\n<th>组合方式</th>\n<th>性能分析</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>同步阻塞</td>\n<td>最常用的一种用法，使用也是最简单的，但是 I/O 性能一般很差，CPU 大部分在空闲状态。</td>\n</tr>\n<tr>\n<td>同步非阻塞</td>\n<td>提升 I/O 性能的常用手段，就是将 I/O 的阻塞改成非阻塞方式，尤其在网络 I/O 是长连接，同时传输数据也不是很多的情况下，提升性能非常有效。 这种方式通常能提升 I/O 性能，但是会增加CPU 消耗，要考虑增加的 I/O 性能能不能补偿 CPU 的消耗，也就是系统的瓶颈是在 I/O 还是在 CPU 上。</td>\n</tr>\n<tr>\n<td>异步阻塞</td>\n<td>这种方式在分布式数据库中经常用到，例如在网一个分布式数据库中写一条记录，通常会有一份是同步阻塞的记录，而还有两至三份是备份记录会写到其它机器上，这些备份记录通常都是采用异步阻塞的方式写 I/O。异步阻塞对网络 I/O 能够提升效率，尤其像上面这种同时写多份相同数据的情况。</td>\n</tr>\n<tr>\n<td>异步非阻塞</td>\n<td>这种组合方式用起来比较复杂，只有在一些非常复杂的分布式情况下使用，像集群之间的消息同步机制一般用这种 I/O 组合方式。如 Cassandra 的 Gossip 通信机制就是采用异步非阻塞的方式。它适合同时要传多份相同的数据到集群中不同的机器，同时数据的传输量虽然不大，但是却非常频繁。这种网络 I/O 用这个方式性能能达到最高。</td>\n</tr>\n</tbody></table>\n<h1 id=\"Socket-和-NIO-的多路复用\"><a href=\"#Socket-和-NIO-的多路复用\" class=\"headerlink\" title=\"Socket 和 NIO 的多路复用\"></a>Socket 和 NIO 的多路复用</h1><p>本节带你实现最基础的 Socket 的同时，同时会实现 NIO 多路复用，还有 AIO 中 Socket 的实现。</p>\n<h2 id=\"传统的-Socket-实现\"><a href=\"#传统的-Socket-实现\" class=\"headerlink\" title=\"传统的 Socket 实现\"></a>传统的 Socket 实现</h2><p>接下来我们将会实现一个简单的 Socket，服务器端只发给客户端信息，再由客户端打印出来的例子，代码如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> port <span class=\"token operator\">=</span> <span class=\"token number\">4343</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//端口号</span>\n<span class=\"token comment\" spellcheck=\"true\">// Socket 服务器端（简单的发送信息）</span>\nThread sThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            ServerSocket serverSocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerSocket</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 等待连接</span>\n                Socket socket <span class=\"token operator\">=</span> serverSocket<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Thread sHandlerThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token annotation punctuation\">@Override</span>\n                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span>PrintWriter printWriter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintWriter</span><span class=\"token punctuation\">(</span>socket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            printWriter<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            printWriter<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                sHandlerThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Socket 客户端（接收信息并打印）</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span>Socket cSocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Socket</span><span class=\"token punctuation\">(</span>InetAddress<span class=\"token punctuation\">.</span><span class=\"token function\">getLocalHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    BufferedReader bufferedReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>cSocket<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    bufferedReader<span class=\"token punctuation\">.</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-</span><span class=\"token operator\">></span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端：\"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UnknownHostException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>调用 accept 方法，阻塞等待客户端连接；</li>\n<li>利用 Socket 模拟了一个简单的客户端，只进行连接、读取和打印；</li>\n</ul>\n<p>在 Java 中，线程的实现是比较重量级的，所以线程的启动或者销毁是很消耗服务器的资源的，即使使用线程池来实现，使用上述传统的 Socket 方式，当连接数极具上升也会带来性能瓶颈，原因是线程的上线文切换开销会在高并发的时候体现的很明显，并且以上操作方式还是同步阻塞式的编程，性能问题在高并发的时候就会体现的尤为明显。</p>\n<p>以上的流程，如下图：</p>\n<p><img src=\"/2020/02/29/shen-ru-li-jie-java-de-bio-nio-aio/2.png\" alt></p>\n<h2 id=\"NIO-多路复用\"><a href=\"#NIO-多路复用\" class=\"headerlink\" title=\"NIO 多路复用\"></a>NIO 多路复用</h2><p>介于以上高并发的问题，NIO 的多路复用功能就显得意义非凡了。</p>\n<p>NIO 是利用了单线程轮询事件的机制，通过高效地定位就绪的 Channel，来决定做什么，仅仅 select 阶段是阻塞的，可以有效避免大量客户端连接时，频繁线程切换带来的问题，应用的扩展能力有了非常大的提高。</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// NIO 多路复用</span>\nThreadPoolExecutor threadPool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n        60L<span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token operator\">&lt;</span>Runnable<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nthreadPool<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span>Selector selector <span class=\"token operator\">=</span> Selector<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             ServerSocketChannel serverSocketChannel <span class=\"token operator\">=</span> ServerSocketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            serverSocketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InetSocketAddress</span><span class=\"token punctuation\">(</span>InetAddress<span class=\"token punctuation\">.</span><span class=\"token function\">getLocalHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            serverSocketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">configureBlocking</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            serverSocketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">,</span> SelectionKey<span class=\"token punctuation\">.</span>OP_ACCEPT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                selector<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 阻塞等待就绪的Channel</span>\n                Set<span class=\"token operator\">&lt;</span>SelectionKey<span class=\"token operator\">></span> selectionKeys <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">.</span><span class=\"token function\">selectedKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Iterator<span class=\"token operator\">&lt;</span>SelectionKey<span class=\"token operator\">></span> iterator <span class=\"token operator\">=</span> selectionKeys<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    SelectionKey key <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span>SocketChannel channel <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ServerSocketChannel<span class=\"token punctuation\">)</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        channel<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>Charset<span class=\"token punctuation\">.</span><span class=\"token function\">defaultCharset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好，世界\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    iterator<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Socket 客户端（接收信息并打印）</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span>Socket cSocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Socket</span><span class=\"token punctuation\">(</span>InetAddress<span class=\"token punctuation\">.</span><span class=\"token function\">getLocalHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    BufferedReader bufferedReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>cSocket<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    bufferedReader<span class=\"token punctuation\">.</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">-</span><span class=\"token operator\">></span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NIO 客户端：\"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>首先，通过 Selector.open() 创建一个 Selector，作为类似调度员的角色；</li>\n<li>然后，创建一个 ServerSocketChannel，并且向 Selector 注册，通过指定 SelectionKey.OP_ACCEPT，告诉调度员，它关注的是新的连接请求；</li>\n<li>为什么我们要明确配置非阻塞模式呢？这是因为阻塞模式下，注册操作是不允许的，会抛出 IllegalBlockingModeException 异常；</li>\n<li>Selector 阻塞在 select 操作，当有 Channel 发生接入请求，就会被唤醒；</li>\n</ul>\n<p>下面的图，可以有效的说明 NIO 复用的流程：</p>\n<p><img src=\"/2020/02/29/shen-ru-li-jie-java-de-bio-nio-aio/1.png\" alt></p>\n<p>就这样 NIO 的多路复用就大大提升了服务器端响应高并发的能力。</p>\n<h2 id=\"AIO-版-Socket-实现\"><a href=\"#AIO-版-Socket-实现\" class=\"headerlink\" title=\"AIO 版 Socket 实现\"></a>AIO 版 Socket 实现</h2><p>Java 1.7 提供了 AIO 实现的 Socket 是这样的，如下代码：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// AIO线程复用版</span>\nThread sThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        AsynchronousChannelGroup group <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            group <span class=\"token operator\">=</span> AsynchronousChannelGroup<span class=\"token punctuation\">.</span><span class=\"token function\">withThreadPool</span><span class=\"token punctuation\">(</span>Executors<span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            AsynchronousServerSocketChannel server <span class=\"token operator\">=</span> AsynchronousServerSocketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InetSocketAddress</span><span class=\"token punctuation\">(</span>InetAddress<span class=\"token punctuation\">.</span><span class=\"token function\">getLocalHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            server<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CompletionHandler</span><span class=\"token operator\">&lt;</span>AsynchronousSocketChannel<span class=\"token punctuation\">,</span> AsynchronousServerSocketChannel<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token annotation punctuation\">@Override</span>\n                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">completed</span><span class=\"token punctuation\">(</span>AsynchronousSocketChannel result<span class=\"token punctuation\">,</span> AsynchronousServerSocketChannel attachment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    server<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 接收下一个请求</span>\n                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                        Future<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">></span> f <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>Charset<span class=\"token punctuation\">.</span><span class=\"token function\">defaultCharset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好，世界\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        f<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务端发送时间：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        result<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> <span class=\"token operator\">|</span> ExecutionException <span class=\"token operator\">|</span> IOException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token annotation punctuation\">@Override</span>\n                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">failed</span><span class=\"token punctuation\">(</span>Throwable exc<span class=\"token punctuation\">,</span> AsynchronousServerSocketChannel attachment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            group<span class=\"token punctuation\">.</span><span class=\"token function\">awaitTermination</span><span class=\"token punctuation\">(</span>Long<span class=\"token punctuation\">.</span>MAX_VALUE<span class=\"token punctuation\">,</span> TimeUnit<span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> <span class=\"token operator\">|</span> InterruptedException e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Socket 客户端</span>\nAsynchronousSocketChannel client <span class=\"token operator\">=</span> AsynchronousSocketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nFuture<span class=\"token operator\">&lt;</span>Void<span class=\"token operator\">></span> future <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InetSocketAddress</span><span class=\"token punctuation\">(</span>InetAddress<span class=\"token punctuation\">.</span><span class=\"token function\">getLocalHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfuture<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nByteBuffer buffer <span class=\"token operator\">=</span> ByteBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nclient<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> null<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CompletionHandler</span><span class=\"token operator\">&lt;</span>Integer<span class=\"token punctuation\">,</span> Void<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">completed</span><span class=\"token punctuation\">(</span>Integer result<span class=\"token punctuation\">,</span> Void attachment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端打印：\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">failed</span><span class=\"token punctuation\">(</span>Throwable exc<span class=\"token punctuation\">,</span> Void attachment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        exc<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            client<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nThread<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h1 id=\"IO-介绍\"><a href=\"#IO-介绍\" class=\"headerlink\" title=\"IO 介绍\"></a>IO 介绍</h1><p>我们通常所说的 BIO 是相对于 NIO 来说的，BIO 也就是 Java 开始之初推出的 IO 操作模块，BIO 是 BlockingIO 的缩写，顾名思义就是阻塞 IO 的意思。</p>\n<h2 id=\"BIO、NIO、AIO的区别\"><a href=\"#BIO、NIO、AIO的区别\" class=\"headerlink\" title=\"BIO、NIO、AIO的区别\"></a>BIO、NIO、AIO的区别</h2><ol>\n<li>BIO 就是传统的 <a href=\"http://java.io\" target=\"_blank\" rel=\"noopener\">java.io</a> 包，它是基于流模型实现的，交互的方式是同步、阻塞方式，也就是说在读入输入流或者输出流时，在读写动作完成之前，线程会一直阻塞在那里，它们之间的调用是可靠的线性顺序。它的优点就是代码比较简单、直观；缺点就是 IO 的效率和扩展性很低，容易成为应用性能瓶颈。</li>\n<li>NIO 是 Java 1.4 引入的 java.nio 包，提供了 Channel、Selector、Buffer 等新的抽象，可以构建多路复用的、同步非阻塞 IO 程序，同时提供了更接近操作系统底层高性能的数据操作方式。</li>\n<li>AIO 是 Java 1.7 之后引入的包，是 NIO 的升级版本，提供了异步非堵塞的 IO 操作方式，所以人们叫它 AIO（Asynchronous IO），异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。</li>\n</ol>\n<p><strong>在JAVA NIO框架中，我们说到了一个重要概念“selector”（选择器）。它负责代替应用查询中所有已注册的通道到操作系统中进行IO事件轮询、管理当前注册的通道集合，定位发生事件的通道等操操作；但是在JAVA AIO框架中，由于应用程序不是“轮询”方式，而是订阅-通知方式，所以不再需要“selector”（选择器）了，改由channel通道直接到操作系统注册监听。</strong> </p>\n<p><strong>JAVA AIO框架中，只实现了两种网络IO通道“AsynchronousServerSocketChannel”（服务器监听通道）、“AsynchronousSocketChannel”（socket套接字通道）。但是无论哪种通道他们都有独立的fileDescriptor（文件标识符）、attachment（附件，附件可以使任意对象，类似“通道上下文”），并被独立的SocketChannelReadHandle类实例引用。</strong> </p>\n<h1 id=\"同步、异步、阻塞、非阻塞\"><a href=\"#同步、异步、阻塞、非阻塞\" class=\"headerlink\" title=\"同步、异步、阻塞、非阻塞\"></a>同步、异步、阻塞、非阻塞</h1><p>上面说了很多关于同步、异步、阻塞和非阻塞的概念，接下来就具体聊一下它们4个的含义，以及组合之后形成的性能分析。</p>\n<h2 id=\"同步与异步\"><a href=\"#同步与异步\" class=\"headerlink\" title=\"同步与异步\"></a>同步与异步</h2><p>同步就是一个任务的完成需要依赖另外一个任务时，只有等待被依赖的任务完成后，依赖的任务才能算完成，这是一种可靠的任务序列。要么成功都成功，失败都失败，两个任务的状态可以保持一致。而异步是不需要等待被依赖的任务完成，只是通知被依赖的任务要完成什么工作，依赖的任务也立即执行，只要自己完成了整个任务就算完成了。至于被依赖的任务最终是否真正完成，依赖它的任务无法确定，所以它是不可靠的任务序列。我们可以用打电话和发短信来很好的比喻同步与异步操作。</p>\n<h2 id=\"阻塞与非阻塞\"><a href=\"#阻塞与非阻塞\" class=\"headerlink\" title=\"阻塞与非阻塞\"></a>阻塞与非阻塞</h2><p>阻塞与非阻塞主要是从 CPU 的消耗上来说的，阻塞就是 CPU 停下来等待一个慢的操作完成 CPU 才接着完成其它的事。非阻塞就是在这个慢的操作在执行时 CPU 去干其它别的事，等这个慢的操作完成时，CPU 再接着完成后续的操作。虽然表面上看非阻塞的方式可以明显的提高 CPU 的利用率，但是也带了另外一种后果就是系统的线程切换增加。增加的 CPU 使用时间能不能补偿系统的切换成本需要好好评估。</p>\n<h2 id=\"同-异、阻-非堵塞-组合\"><a href=\"#同-异、阻-非堵塞-组合\" class=\"headerlink\" title=\"同/异、阻/非堵塞 组合\"></a>同/异、阻/非堵塞 组合</h2><p>同/异、阻/非堵塞的组合，有四种类型，如下表：</p>\n<table>\n<thead>\n<tr>\n<th>组合方式</th>\n<th>性能分析</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>同步阻塞</td>\n<td>最常用的一种用法，使用也是最简单的，但是 I/O 性能一般很差，CPU 大部分在空闲状态。</td>\n</tr>\n<tr>\n<td>同步非阻塞</td>\n<td>提升 I/O 性能的常用手段，就是将 I/O 的阻塞改成非阻塞方式，尤其在网络 I/O 是长连接，同时传输数据也不是很多的情况下，提升性能非常有效。 这种方式通常能提升 I/O 性能，但是会增加CPU 消耗，要考虑增加的 I/O 性能能不能补偿 CPU 的消耗，也就是系统的瓶颈是在 I/O 还是在 CPU 上。</td>\n</tr>\n<tr>\n<td>异步阻塞</td>\n<td>这种方式在分布式数据库中经常用到，例如在网一个分布式数据库中写一条记录，通常会有一份是同步阻塞的记录，而还有两至三份是备份记录会写到其它机器上，这些备份记录通常都是采用异步阻塞的方式写 I/O。异步阻塞对网络 I/O 能够提升效率，尤其像上面这种同时写多份相同数据的情况。</td>\n</tr>\n<tr>\n<td>异步非阻塞</td>\n<td>这种组合方式用起来比较复杂，只有在一些非常复杂的分布式情况下使用，像集群之间的消息同步机制一般用这种 I/O 组合方式。如 Cassandra 的 Gossip 通信机制就是采用异步非阻塞的方式。它适合同时要传多份相同的数据到集群中不同的机器，同时数据的传输量虽然不大，但是却非常频繁。这种网络 I/O 用这个方式性能能达到最高。</td>\n</tr>\n</tbody></table>\n<h1 id=\"Socket-和-NIO-的多路复用\"><a href=\"#Socket-和-NIO-的多路复用\" class=\"headerlink\" title=\"Socket 和 NIO 的多路复用\"></a>Socket 和 NIO 的多路复用</h1><p>本节带你实现最基础的 Socket 的同时，同时会实现 NIO 多路复用，还有 AIO 中 Socket 的实现。</p>\n<h2 id=\"传统的-Socket-实现\"><a href=\"#传统的-Socket-实现\" class=\"headerlink\" title=\"传统的 Socket 实现\"></a>传统的 Socket 实现</h2><p>接下来我们将会实现一个简单的 Socket，服务器端只发给客户端信息，再由客户端打印出来的例子，代码如下：</p>\n<pre><code class=\"java\">int port = 4343; //端口号\n// Socket 服务器端（简单的发送信息）\nThread sThread = new Thread(new Runnable() {\n    @Override\n    public void run() {\n        try {\n            ServerSocket serverSocket = new ServerSocket(port);\n            while (true) {\n                // 等待连接\n                Socket socket = serverSocket.accept();\n                Thread sHandlerThread = new Thread(new Runnable() {\n                    @Override\n                    public void run() {\n                        try (PrintWriter printWriter = new PrintWriter(socket.getOutputStream())) {\n                            printWriter.println(&quot;hello world！&quot;);\n                            printWriter.flush();\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                });\n                sHandlerThread.start();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n});\nsThread.start();\n\n// Socket 客户端（接收信息并打印）\ntry (Socket cSocket = new Socket(InetAddress.getLocalHost(), port)) {\n    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(cSocket.getInputStream()));\n    bufferedReader.lines().forEach(s -&gt; System.out.println(&quot;客户端：&quot; + s));\n} catch (UnknownHostException e) {\n    e.printStackTrace();\n} catch (IOException e) {\n    e.printStackTrace();\n}</code></pre>\n<ul>\n<li>调用 accept 方法，阻塞等待客户端连接；</li>\n<li>利用 Socket 模拟了一个简单的客户端，只进行连接、读取和打印；</li>\n</ul>\n<p>在 Java 中，线程的实现是比较重量级的，所以线程的启动或者销毁是很消耗服务器的资源的，即使使用线程池来实现，使用上述传统的 Socket 方式，当连接数极具上升也会带来性能瓶颈，原因是线程的上线文切换开销会在高并发的时候体现的很明显，并且以上操作方式还是同步阻塞式的编程，性能问题在高并发的时候就会体现的尤为明显。</p>\n<p>以上的流程，如下图：</p>\n<p><img src=\"/2020/02/29/shen-ru-li-jie-java-de-bio-nio-aio/2.png\" alt></p>\n<h2 id=\"NIO-多路复用\"><a href=\"#NIO-多路复用\" class=\"headerlink\" title=\"NIO 多路复用\"></a>NIO 多路复用</h2><p>介于以上高并发的问题，NIO 的多路复用功能就显得意义非凡了。</p>\n<p>NIO 是利用了单线程轮询事件的机制，通过高效地定位就绪的 Channel，来决定做什么，仅仅 select 阶段是阻塞的，可以有效避免大量客户端连接时，频繁线程切换带来的问题，应用的扩展能力有了非常大的提高。</p>\n<pre><code class=\"java\">// NIO 多路复用\nThreadPoolExecutor threadPool = new ThreadPoolExecutor(4, 4,\n        60L, TimeUnit.SECONDS, new LinkedBlockingQueue&lt;Runnable&gt;());\nthreadPool.execute(new Runnable() {\n    @Override\n    public void run() {\n        try (Selector selector = Selector.open();\n             ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();) {\n            serverSocketChannel.bind(new InetSocketAddress(InetAddress.getLocalHost(), port));\n            serverSocketChannel.configureBlocking(false);\n            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n            while (true) {\n                selector.select(); // 阻塞等待就绪的Channel\n                Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();\n                Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();\n                while (iterator.hasNext()) {\n                    SelectionKey key = iterator.next();\n                    try (SocketChannel channel = ((ServerSocketChannel) key.channel()).accept()) {\n                        channel.write(Charset.defaultCharset().encode(&quot;你好，世界&quot;));\n                    }\n                    iterator.remove();\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n});\n\n// Socket 客户端（接收信息并打印）\ntry (Socket cSocket = new Socket(InetAddress.getLocalHost(), port)) {\n    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(cSocket.getInputStream()));\n    bufferedReader.lines().forEach(s -&gt; System.out.println(&quot;NIO 客户端：&quot; + s));\n} catch (IOException e) {\n    e.printStackTrace();\n}</code></pre>\n<ul>\n<li>首先，通过 Selector.open() 创建一个 Selector，作为类似调度员的角色；</li>\n<li>然后，创建一个 ServerSocketChannel，并且向 Selector 注册，通过指定 SelectionKey.OP_ACCEPT，告诉调度员，它关注的是新的连接请求；</li>\n<li>为什么我们要明确配置非阻塞模式呢？这是因为阻塞模式下，注册操作是不允许的，会抛出 IllegalBlockingModeException 异常；</li>\n<li>Selector 阻塞在 select 操作，当有 Channel 发生接入请求，就会被唤醒；</li>\n</ul>\n<p>下面的图，可以有效的说明 NIO 复用的流程：</p>\n<p><img src=\"/2020/02/29/shen-ru-li-jie-java-de-bio-nio-aio/1.png\" alt></p>\n<p>就这样 NIO 的多路复用就大大提升了服务器端响应高并发的能力。</p>\n<h2 id=\"AIO-版-Socket-实现\"><a href=\"#AIO-版-Socket-实现\" class=\"headerlink\" title=\"AIO 版 Socket 实现\"></a>AIO 版 Socket 实现</h2><p>Java 1.7 提供了 AIO 实现的 Socket 是这样的，如下代码：</p>\n<pre><code class=\"java\">// AIO线程复用版\nThread sThread = new Thread(new Runnable() {\n    @Override\n    public void run() {\n        AsynchronousChannelGroup group = null;\n        try {\n            group = AsynchronousChannelGroup.withThreadPool(Executors.newFixedThreadPool(4));\n            AsynchronousServerSocketChannel server = AsynchronousServerSocketChannel.open(group).bind(new InetSocketAddress(InetAddress.getLocalHost(), port));\n            server.accept(null, new CompletionHandler&lt;AsynchronousSocketChannel, AsynchronousServerSocketChannel&gt;() {\n                @Override\n                public void completed(AsynchronousSocketChannel result, AsynchronousServerSocketChannel attachment) {\n                    server.accept(null, this); // 接收下一个请求\n                    try {\n                        Future&lt;Integer&gt; f = result.write(Charset.defaultCharset().encode(&quot;你好，世界&quot;));\n                        f.get();\n                        System.out.println(&quot;服务端发送时间：&quot; + new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;).format(new Date()));\n                        result.close();\n                    } catch (InterruptedException | ExecutionException | IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n\n                @Override\n                public void failed(Throwable exc, AsynchronousServerSocketChannel attachment) {\n                }\n            });\n            group.awaitTermination(Long.MAX_VALUE, TimeUnit.SECONDS);\n        } catch (IOException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n});\nsThread.start();\n\n// Socket 客户端\nAsynchronousSocketChannel client = AsynchronousSocketChannel.open();\nFuture&lt;Void&gt; future = client.connect(new InetSocketAddress(InetAddress.getLocalHost(), port));\nfuture.get();\nByteBuffer buffer = ByteBuffer.allocate(100);\nclient.read(buffer, null, new CompletionHandler&lt;Integer, Void&gt;() {\n    @Override\n    public void completed(Integer result, Void attachment) {\n        System.out.println(&quot;客户端打印：&quot; + new String(buffer.array()));\n    }\n\n    @Override\n    public void failed(Throwable exc, Void attachment) {\n        exc.printStackTrace();\n        try {\n            client.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n});\nThread.sleep(10 * 1000);</code></pre>\n"},{"title":"理解KMP回溯","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-03T07:28:02.000Z","password":null,"summary":null,"_content":"\n#### 理解KMP回溯\n\n相信大家都看过KMP算法，但是对于它的回溯确是难以理解。我们先来看一下KMP中的next数组生成代码：\n\n```java\n//用于生成next数组\nprivate static int[] get_next(String target){\n    int[] next = new int[target.length()];\n    next[0] = -1;\n    int i = 0, j = -1;\n    while(i < target.length() - 1){\n        if (j == -1 || target.charAt(i) == target.charAt(j)) {\n            ++i;\n            ++j;\n            next[i] = j;\n        } else {\n            j = next[j];\n        }\n    }\n    return next;\n}\n```\n- 其中数组的next中的值计算方式是：\n\nnext[j] = Max{k | 1<k<j,且‘p1p2...pk’=‘p(j-k)...p(j - 1)’}\n\n- ##### 概念\n\n*简单来说next[j]表示的就是两个相等的字符串的长度，这两个字符串分别是从头开始记的长度为next[j]的和以next[j]的前一个字符结尾的长度为next[j]。*\n\n- ##### 例子\n\n例如：字符串\"ababaaaba\" next = [-1,0,0,1,2,3,1,1,2]\n其中的回溯环节就是从next[5] = 3 到 next[6] = 1;\n\n其中next[5]时：是\"ababa\"中前缀\"aba\"与后缀\"aba\"的长度，当i = 6时，\"ababaa\"中\"a\"不等于\"b\",所以回溯到j = next[j],其中j为现在next[5]的值。\n\n- ##### 理解\n\n**我开始也是很不明白为什么就可以直接回到j = next[next[5]] = 0处开始向后比较，后来仔细研究发现原因是，通过前面的比较它已经排除了所有的前缀字符串等于后缀字符串的长度大于回溯到当前j的可能 。**\n就拿上面的“ababa”到“ababaa”举例：\n其实我们想不通的无非就是它是怎么排除“aba”!=\"baa\"转而直接去判断前缀“ab”是否等于后缀“aa”,后来我仔细分析才发现因为如果前面的“aba” = \"baa\"要成立，必须有“前缀ab”等于后缀“ba”,而得到next[5]=3的时候已经隐式的得到的第一个“ba”等于第二个“ba”(当时是“aba” = \"aba\")\n从而有“aba”中三个值都应该相等，与前面矛盾。可能你早就看不懂我在说什么了，来一点数学表达式比较实际：\n\n- ##### 数学证明\n\n②开始有p1p2....pj = pi - j ....pi-1，可以得出pj = pj-1  j = 1,2,...\n假设 next[j] = k 就有 p1p2...pk = pj-k ...pj-1\tk = 1,2...\n若加入pi != pj + 1,则需要回溯到判断pk 是否等于pj;\n首先证明：pi-j+1...pi ！= p1p2...pj,反证：假设：pi-j+1...pi = p1p2...p，又p1p2....pj = pi - j ....pi-1\n所以有pi - j ....pi-1 =pi-j+1...pi ,得到pi-j=pi-j+1=...=pi;与前面矛盾，所以有pi-j+1...pi ！= p1p2...pj\n同理可以得出pi-j+2...pi ！= p1p2...pj-1  。。。。。pi-j+k...pi ！= p1p2...pj-k+1  。。。。。\n所以可以直接回溯到j = next[j]继续向后判断\n\nKMP完整代码\n\n```java\nprivate static int[] get_next(String target){\n    int[] next = new int[target.length()];\n    next[0] = -1;\n    int i = 0, j = -1;\n    while(i < target.length() - 1){\n        if (j == -1 || target.charAt(i) == target.charAt(j)) {\n            ++i;\n            ++j;\n            next[i] = j;\n        } else {\n            j = next[j];\n        }\n    }\n    return next;\n}\n\nint kmp(String s, String pattern) {\n    int i = 0,j = 0;\n    int slen = s.length(), plen = pattern.length();\n    int[] next = get_next(pattern);\n    while (i < slen && j < plen) {\n        if (s.charAt(i) == pattern.charAt(j)) {\n            i++;\n            j++;\n        } else {\n            if (next[j] == -1) {\n                i++;\n                j = 0;\n            } else {\n                j = next[j];\n            }\n        }\n        if (j == plen) {\n            return i - j;\n        }\n    }\n    return -1;\n}\n```","source":"_posts/理解KMP回溯.md","raw":"---\ntitle: 理解KMP回溯\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-03 15:28:02\npassword:\nsummary:\ntags:\ncategories: 数据结构\n---\n\n#### 理解KMP回溯\n\n相信大家都看过KMP算法，但是对于它的回溯确是难以理解。我们先来看一下KMP中的next数组生成代码：\n\n```java\n//用于生成next数组\nprivate static int[] get_next(String target){\n    int[] next = new int[target.length()];\n    next[0] = -1;\n    int i = 0, j = -1;\n    while(i < target.length() - 1){\n        if (j == -1 || target.charAt(i) == target.charAt(j)) {\n            ++i;\n            ++j;\n            next[i] = j;\n        } else {\n            j = next[j];\n        }\n    }\n    return next;\n}\n```\n- 其中数组的next中的值计算方式是：\n\nnext[j] = Max{k | 1<k<j,且‘p1p2...pk’=‘p(j-k)...p(j - 1)’}\n\n- ##### 概念\n\n*简单来说next[j]表示的就是两个相等的字符串的长度，这两个字符串分别是从头开始记的长度为next[j]的和以next[j]的前一个字符结尾的长度为next[j]。*\n\n- ##### 例子\n\n例如：字符串\"ababaaaba\" next = [-1,0,0,1,2,3,1,1,2]\n其中的回溯环节就是从next[5] = 3 到 next[6] = 1;\n\n其中next[5]时：是\"ababa\"中前缀\"aba\"与后缀\"aba\"的长度，当i = 6时，\"ababaa\"中\"a\"不等于\"b\",所以回溯到j = next[j],其中j为现在next[5]的值。\n\n- ##### 理解\n\n**我开始也是很不明白为什么就可以直接回到j = next[next[5]] = 0处开始向后比较，后来仔细研究发现原因是，通过前面的比较它已经排除了所有的前缀字符串等于后缀字符串的长度大于回溯到当前j的可能 。**\n就拿上面的“ababa”到“ababaa”举例：\n其实我们想不通的无非就是它是怎么排除“aba”!=\"baa\"转而直接去判断前缀“ab”是否等于后缀“aa”,后来我仔细分析才发现因为如果前面的“aba” = \"baa\"要成立，必须有“前缀ab”等于后缀“ba”,而得到next[5]=3的时候已经隐式的得到的第一个“ba”等于第二个“ba”(当时是“aba” = \"aba\")\n从而有“aba”中三个值都应该相等，与前面矛盾。可能你早就看不懂我在说什么了，来一点数学表达式比较实际：\n\n- ##### 数学证明\n\n②开始有p1p2....pj = pi - j ....pi-1，可以得出pj = pj-1  j = 1,2,...\n假设 next[j] = k 就有 p1p2...pk = pj-k ...pj-1\tk = 1,2...\n若加入pi != pj + 1,则需要回溯到判断pk 是否等于pj;\n首先证明：pi-j+1...pi ！= p1p2...pj,反证：假设：pi-j+1...pi = p1p2...p，又p1p2....pj = pi - j ....pi-1\n所以有pi - j ....pi-1 =pi-j+1...pi ,得到pi-j=pi-j+1=...=pi;与前面矛盾，所以有pi-j+1...pi ！= p1p2...pj\n同理可以得出pi-j+2...pi ！= p1p2...pj-1  。。。。。pi-j+k...pi ！= p1p2...pj-k+1  。。。。。\n所以可以直接回溯到j = next[j]继续向后判断\n\nKMP完整代码\n\n```java\nprivate static int[] get_next(String target){\n    int[] next = new int[target.length()];\n    next[0] = -1;\n    int i = 0, j = -1;\n    while(i < target.length() - 1){\n        if (j == -1 || target.charAt(i) == target.charAt(j)) {\n            ++i;\n            ++j;\n            next[i] = j;\n        } else {\n            j = next[j];\n        }\n    }\n    return next;\n}\n\nint kmp(String s, String pattern) {\n    int i = 0,j = 0;\n    int slen = s.length(), plen = pattern.length();\n    int[] next = get_next(pattern);\n    while (i < slen && j < plen) {\n        if (s.charAt(i) == pattern.charAt(j)) {\n            i++;\n            j++;\n        } else {\n            if (next[j] == -1) {\n                i++;\n                j = 0;\n            } else {\n                j = next[j];\n            }\n        }\n        if (j == plen) {\n            return i - j;\n        }\n    }\n    return -1;\n}\n```","slug":"理解KMP回溯","published":1,"updated":"2021-04-29T10:37:18.306Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mldt002ivkvytdo9m5vl","content":"<h4 id=\"理解KMP回溯\"><a href=\"#理解KMP回溯\" class=\"headerlink\" title=\"理解KMP回溯\"></a>理解KMP回溯</h4><p>相信大家都看过KMP算法，但是对于它的回溯确是难以理解。我们先来看一下KMP中的next数组生成代码：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//用于生成next数组</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">get_next</span><span class=\"token punctuation\">(</span>String target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    next<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span>\n            next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>其中数组的next中的值计算方式是：</li>\n</ul>\n<p>next[j] = Max{k | 1&lt;k&lt;j,且‘p1p2…pk’=‘p(j-k)…p(j - 1)’}</p>\n<ul>\n<li><h5 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h5></li>\n</ul>\n<p><em>简单来说next[j]表示的就是两个相等的字符串的长度，这两个字符串分别是从头开始记的长度为next[j]的和以next[j]的前一个字符结尾的长度为next[j]。</em></p>\n<ul>\n<li><h5 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h5></li>\n</ul>\n<p>例如：字符串”ababaaaba” next = [-1,0,0,1,2,3,1,1,2]<br>其中的回溯环节就是从next[5] = 3 到 next[6] = 1;</p>\n<p>其中next[5]时：是”ababa”中前缀”aba”与后缀”aba”的长度，当i = 6时，”ababaa”中”a”不等于”b”,所以回溯到j = next[j],其中j为现在next[5]的值。</p>\n<ul>\n<li><h5 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h5></li>\n</ul>\n<p><strong>我开始也是很不明白为什么就可以直接回到j = next[next[5]] = 0处开始向后比较，后来仔细研究发现原因是，通过前面的比较它已经排除了所有的前缀字符串等于后缀字符串的长度大于回溯到当前j的可能 。</strong><br>就拿上面的“ababa”到“ababaa”举例：<br>其实我们想不通的无非就是它是怎么排除“aba”!=”baa”转而直接去判断前缀“ab”是否等于后缀“aa”,后来我仔细分析才发现因为如果前面的“aba” = “baa”要成立，必须有“前缀ab”等于后缀“ba”,而得到next[5]=3的时候已经隐式的得到的第一个“ba”等于第二个“ba”(当时是“aba” = “aba”)<br>从而有“aba”中三个值都应该相等，与前面矛盾。可能你早就看不懂我在说什么了，来一点数学表达式比较实际：</p>\n<ul>\n<li><h5 id=\"数学证明\"><a href=\"#数学证明\" class=\"headerlink\" title=\"数学证明\"></a>数学证明</h5></li>\n</ul>\n<p>②开始有p1p2….pj = pi - j ….pi-1，可以得出pj = pj-1  j = 1,2,…<br>假设 next[j] = k 就有 p1p2…pk = pj-k …pj-1    k = 1,2…<br>若加入pi != pj + 1,则需要回溯到判断pk 是否等于pj;<br>首先证明：pi-j+1…pi ！= p1p2…pj,反证：假设：pi-j+1…pi = p1p2…p，又p1p2….pj = pi - j ….pi-1<br>所以有pi - j ….pi-1 =pi-j+1…pi ,得到pi-j=pi-j+1=…=pi;与前面矛盾，所以有pi-j+1…pi ！= p1p2…pj<br>同理可以得出pi-j+2…pi ！= p1p2…pj-1  。。。。。pi-j+k…pi ！= p1p2…pj-k+1  。。。。。<br>所以可以直接回溯到j = next[j]继续向后判断</p>\n<p>KMP完整代码</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">get_next</span><span class=\"token punctuation\">(</span>String target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    next<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">||</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span>\n            next<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">kmp</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">,</span> String pattern<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> slen <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> plen <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> next <span class=\"token operator\">=</span> <span class=\"token function\">get_next</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> slen <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> plen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> pattern<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                j <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> plen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> i <span class=\"token operator\">-</span> j<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h4 id=\"理解KMP回溯\"><a href=\"#理解KMP回溯\" class=\"headerlink\" title=\"理解KMP回溯\"></a>理解KMP回溯</h4><p>相信大家都看过KMP算法，但是对于它的回溯确是难以理解。我们先来看一下KMP中的next数组生成代码：</p>\n<pre><code class=\"java\">//用于生成next数组\nprivate static int[] get_next(String target){\n    int[] next = new int[target.length()];\n    next[0] = -1;\n    int i = 0, j = -1;\n    while(i &lt; target.length() - 1){\n        if (j == -1 || target.charAt(i) == target.charAt(j)) {\n            ++i;\n            ++j;\n            next[i] = j;\n        } else {\n            j = next[j];\n        }\n    }\n    return next;\n}</code></pre>\n<ul>\n<li>其中数组的next中的值计算方式是：</li>\n</ul>\n<p>next[j] = Max{k | 1&lt;k&lt;j,且‘p1p2…pk’=‘p(j-k)…p(j - 1)’}</p>\n<ul>\n<li><h5 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h5></li>\n</ul>\n<p><em>简单来说next[j]表示的就是两个相等的字符串的长度，这两个字符串分别是从头开始记的长度为next[j]的和以next[j]的前一个字符结尾的长度为next[j]。</em></p>\n<ul>\n<li><h5 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h5></li>\n</ul>\n<p>例如：字符串”ababaaaba” next = [-1,0,0,1,2,3,1,1,2]<br>其中的回溯环节就是从next[5] = 3 到 next[6] = 1;</p>\n<p>其中next[5]时：是”ababa”中前缀”aba”与后缀”aba”的长度，当i = 6时，”ababaa”中”a”不等于”b”,所以回溯到j = next[j],其中j为现在next[5]的值。</p>\n<ul>\n<li><h5 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h5></li>\n</ul>\n<p><strong>我开始也是很不明白为什么就可以直接回到j = next[next[5]] = 0处开始向后比较，后来仔细研究发现原因是，通过前面的比较它已经排除了所有的前缀字符串等于后缀字符串的长度大于回溯到当前j的可能 。</strong><br>就拿上面的“ababa”到“ababaa”举例：<br>其实我们想不通的无非就是它是怎么排除“aba”!=”baa”转而直接去判断前缀“ab”是否等于后缀“aa”,后来我仔细分析才发现因为如果前面的“aba” = “baa”要成立，必须有“前缀ab”等于后缀“ba”,而得到next[5]=3的时候已经隐式的得到的第一个“ba”等于第二个“ba”(当时是“aba” = “aba”)<br>从而有“aba”中三个值都应该相等，与前面矛盾。可能你早就看不懂我在说什么了，来一点数学表达式比较实际：</p>\n<ul>\n<li><h5 id=\"数学证明\"><a href=\"#数学证明\" class=\"headerlink\" title=\"数学证明\"></a>数学证明</h5></li>\n</ul>\n<p>②开始有p1p2….pj = pi - j ….pi-1，可以得出pj = pj-1  j = 1,2,…<br>假设 next[j] = k 就有 p1p2…pk = pj-k …pj-1    k = 1,2…<br>若加入pi != pj + 1,则需要回溯到判断pk 是否等于pj;<br>首先证明：pi-j+1…pi ！= p1p2…pj,反证：假设：pi-j+1…pi = p1p2…p，又p1p2….pj = pi - j ….pi-1<br>所以有pi - j ….pi-1 =pi-j+1…pi ,得到pi-j=pi-j+1=…=pi;与前面矛盾，所以有pi-j+1…pi ！= p1p2…pj<br>同理可以得出pi-j+2…pi ！= p1p2…pj-1  。。。。。pi-j+k…pi ！= p1p2…pj-k+1  。。。。。<br>所以可以直接回溯到j = next[j]继续向后判断</p>\n<p>KMP完整代码</p>\n<pre><code class=\"java\">private static int[] get_next(String target){\n    int[] next = new int[target.length()];\n    next[0] = -1;\n    int i = 0, j = -1;\n    while(i &lt; target.length() - 1){\n        if (j == -1 || target.charAt(i) == target.charAt(j)) {\n            ++i;\n            ++j;\n            next[i] = j;\n        } else {\n            j = next[j];\n        }\n    }\n    return next;\n}\n\nint kmp(String s, String pattern) {\n    int i = 0,j = 0;\n    int slen = s.length(), plen = pattern.length();\n    int[] next = get_next(pattern);\n    while (i &lt; slen &amp;&amp; j &lt; plen) {\n        if (s.charAt(i) == pattern.charAt(j)) {\n            i++;\n            j++;\n        } else {\n            if (next[j] == -1) {\n                i++;\n                j = 0;\n            } else {\n                j = next[j];\n            }\n        }\n        if (j == plen) {\n            return i - j;\n        }\n    }\n    return -1;\n}</code></pre>\n"},{"title":"真正意义的流式处理框架Strom","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-16T13:27:19.000Z","password":null,"summary":null,"_content":"\n# Storm基础入门\n\n- Apache Storm是一个分布式实时大数据处理系统。Storm设计用于在容错和水平可扩展方法中处理大量数据。它是一个流数据框架，具有最高的摄取率。\n\n## Storm的核心组件\n\n- Nimbus：即Storm的Master，负责资源分配和任务调度。一个Storm集群只有一个Nimbus。\n- Supervisor：即Storm的Slave，负责接收Nimbus分配的任务，管理所有Worker，一个Supervisor节点中包含多个Worker进程。\n- Worker：工作进程，每个工作进程中都有多个Task。 Task：任务，在 Storm 集群中每个 Spout 和 Bolt 都由若干个任务（tasks）来执行。每个任务都与一个执行线程相对应。\n- Topology：计算拓扑，Storm 的拓扑是对实时计算应用逻辑的封装，它的作用与 MapReduce 的任务（Job）很相似，区别在于 MapReduce 的一个 Job 在得到结果之后总会结束，而拓扑会一直在集群中运行，直到你手动去终止它。拓扑还可以理解成由一系列通过数据流（Stream Grouping）相互关联的 Spout 和 Bolt 组成的的拓扑结构。\n- Stream：数据流（Streams）是 Storm 中最核心的抽象概念。一个数据流指的是在分布式环境中并行创建、处理的一组元组（tuple）的无界序列。数据流可以由一种能够表述数据流中元组的域（fields）的模式来定义。\n- Spout：数据源（Spout）是拓扑中数据流的来源。一般 Spout 会从一个外部的数据源读取元组然后将他们发送到拓扑中。根据需求的不同，Spout 既可以定义为可靠的数据源，也可以定义为不可靠的数据源。一个可靠的 Spout能够在它发送的元组处理失败时重新发送该元组，以确保所有的元组都能得到正确的处理；相对应的，不可靠的 Spout 就不会在元组发送之后对元组进行任何其他的处理。一个 Spout可以发送多个数据流。\n- Bolt：拓扑中所有的数据处理均是由 Bolt 完成的。通过数据过滤（filtering）、函数处理（functions）、聚合（aggregations）、联结（joins）、数据库交互等功能，Bolt 几乎能够完成任何一种数据处理需求。一个 Bolt 可以实现简单的数据流转换，而更复杂的数据流变换通常需要使用多个 Bolt 并通过多个步骤完成。\n- Stream grouping：为拓扑中的每个 Bolt 的确定输入数据流是定义一个拓扑的重要环节。数据流分组定义了在 Bolt 的不同任务（tasks）中划分数据流的方式。在 Storm 中有八种内置的数据流分组方式。\n- Reliability：可靠性。Storm 可以通过拓扑来确保每个发送的元组都能得到正确处理。通过跟踪由 Spout 发出的每个元组构成的元组树可以确定元组是否已经完成处理。每个拓扑都有一个“消息延时”参数，如果 Storm 在延时时间内没有检测到元组是否处理完成，就会将该元组标记为处理失败，并会在稍后重新发送该元组。\n\n## storm Linux安装\n\n首先需要3台虚拟机,并且安装好JDK1.8,python2.6.6以上版本,还要在3台虚拟机上安装好zookeeper. 下载地址:\n\n- Zookeeper：[zookeeper.apache.org/releases.ht…](https://zookeeper.apache.org/releases.html#download)\n- Storm: [storm.apache.org/downloads.h…](http://storm.apache.org/downloads.html)\n- 将下载下来的storm保存到/usr/local/目录,将apache-storm-1.2.2.tar.gz文件进行解压 在linux上输入:\n\n```shell\ntar -zxvf apache-storm-1.2.2.tar.gz\n```\n\n- 得到apache-storm-1.2.2。配置环境变量编辑 /etc/profile 文件\n\n```shell\nexport STORM_HOME=/opt/storm/storm1.1\nexport PATH=.:${JAVA_HOME}/bin:${ZK_HOME}/bin:${STORM_HOME}/bin:$PATH\n```\n\n编辑 /usr/local/apache-storm-1.2.2/conf 的 storm.yarm\n\n```html\n storm.zookeeper.servers:\n     - \"192.168.1.21\"\n     - \"192.168.1.23\"\n     - \"192.168.1.24\"\n storm.local.dir: \"/usr/local/apache-storm-1.2.2/data\"\n nimbus.host: \"192.168.70.68\"\n ui.port: 10088\n supervisor.slots.ports:\n     - 6700\n     - 6701\n     - 6702\n     - 6703\n```\n\n注意的是每个参数前面必须有空格，-的后面也需要\n\n- storm.zookeeper.servers是指定zookeeper的服务地址。\n- storm.local.dir 表示存储目录。\n- nimbus.host 表示主机节点。\n- ui.port 主机端口\n- supervisor.slots.ports 表示worker 端口。\n\n## 启动Storm\n\n进入到/usr/local/apache-storm-1.2.2/bin 目录下 首先启动主节点\n\n```shell\nnohup ./strom nimbus & \n```\n\n启动图形界面\n\n```shell\nnohup ./storm ui &\n```\n\n启动其他节点\n\n```shell\nnohup ./storm supervisor &\n```\n\n在浏览器访问主节点[http://192.168.70.68:10088](https://juejin.im/post/5c9aeb95f265da610849b2b8) 看到界面表示成功。\n\n# Storm 核心概念详解\n\n## 一、Storm核心概念\n\n![](真正意义的流式处理框架Strom/4.png)\n\n### 1.1 Topologies（拓扑）\n\n一个完整的 Storm 流处理程序被称为 Storm topology(拓扑)。它是一个是由 `Spouts` 和 `Bolts`通过 `Stream` 连接起来的有向无环图，Storm 会保持每个提交到集群的 topology 持续地运行，从而处理源源不断的数据流，直到你将主动其杀死 (kill) 为止。\n\n### 1.2 Streams（流）\n\n`Stream` 是 Storm 中的核心概念。一个 `Stream` 是一个无界的、以分布式方式并行创建和处理的 `Tuple` 序列。Tuple 可以包含大多数基本类型以及自定义类型的数据。简单来说，Tuple 就是流数据的实际载体，而 Stream 就是一系列 Tuple。\n\n### 1.3 Spouts\n\n`Spouts` 是流数据的源头，一个 Spout 可以向不止一个 `Streams` 中发送数据。`Spout` 通常分为**可靠**和**不可靠**两种：可靠的 `Spout` 能够在失败时重新发送 Tuple, 不可靠的 `Spout` 一旦把 Tuple 发送出去就置之不理了。\n\n### 1.4 Bolts\n\n`Bolts` 是流数据的处理单元，它可以从一个或者多个 `Streams` 中接收数据，处理完成后再发射到新的 `Streams` 中。`Bolts` 可以执行过滤 (filtering)，聚合 (aggregations)，连接 (joins) 等操作，并能与文件系统或数据库进行交互。\n\n### 1.5 Stream groupings（分组策略）\n\n![](真正意义的流式处理框架Strom/1.png)\n\n`spouts` 和 `bolts` 在集群上执行任务时，是由多个 Task 并行执行 (如上图，每一个圆圈代表一个 Task)。当一个 Tuple 需要从 Bolt A 发送给 Bolt B 执行的时候，程序如何知道应该发送给 Bolt B 的哪一个 Task 执行呢？\n\n这是由 Stream groupings 分组策略来决定的，Storm 中一共有如下 8 个内置的 Stream Grouping。当然你也可以通过实现 `CustomStreamGrouping` 接口来实现自定义 Stream 分组策略。\n\n1. **Shuffle grouping**\n\n   Tuples 随机的分发到每个 Bolt 的每个 Task 上，每个 Bolt 获取到等量的 Tuples。\n\n2. **Fields grouping**\n\n   Streams 通过 grouping 指定的字段 (field) 来分组。假设通过 `user-id` 字段进行分区，那么具有相同 `user-id` 的 Tuples 就会发送到同一个 Task。\n\n3. **Partial Key grouping**\n\n   Streams 通过 grouping 中指定的字段 (field) 来分组，与 `Fields Grouping` 相似。但是对于两个下游的 Bolt 来说是负载均衡的，可以在输入数据不平均的情况下提供更好的优化。\n\n4. **All grouping**\n\n   Streams 会被所有的 Bolt 的 Tasks 进行复制。由于存在数据重复处理，所以需要谨慎使用。\n\n5. **Global grouping**\n\n   整个 Streams 会进入 Bolt 的其中一个 Task，通常会进入 id 最小的 Task。\n\n6. **None grouping**\n\n   当前 None grouping 和 Shuffle grouping 等价，都是进行随机分发。\n\n7. **Direct grouping**\n\n   Direct grouping 只能被用于 direct streams 。使用这种方式需要由 Tuple 的生产者直接指定由哪个 Task 进行处理。\n\n8. **Local or shuffle grouping**\n\n   如果目标 Bolt 有 Tasks 和当前 Bolt 的 Tasks 处在同一个 Worker 进程中，那么则优先将 Tuple Shuffled 到处于同一个进程的目标 Bolt 的 Tasks 上，这样可以最大限度地减少网络传输。否则，就和普通的 `Shuffle Grouping` 行为一致。\n\n## 二、Storm架构详解\n\n![](真正意义的流式处理框架Strom/2.png)\n\n### 2.1 Nimbus进程\n\n也叫做 Master Node，是 Storm 集群工作的全局指挥官。主要功能如下：\n\n1. 通过 Thrift 接口，监听并接收 Client 提交的 Topology；\n2. 根据集群 Workers 的资源情况，将 Client 提交的 Topology 进行任务分配，分配结果写入 Zookeeper;\n3. 通过 Thrift 接口，监听 Supervisor 的下载 Topology 代码的请求，并提供下载 ;\n4. 通过 Thrift 接口，监听 UI 对统计信息的读取，从 Zookeeper 上读取统计信息，返回给 UI;\n5. 若进程退出后，立即在本机重启，则不影响集群运行。\n\n### 2.2 Supervisor进程\n\n也叫做 Worker Node , 是 Storm 集群的资源管理者，按需启动 Worker 进程。主要功能如下：\n\n1. 定时从 Zookeeper 检查是否有新 Topology 代码未下载到本地 ，并定时删除旧 Topology 代码 ;\n2. 根据 Nimbus 的任务分配计划，在本机按需启动 1 个或多个 Worker 进程，并监控所有的 Worker 进程的情况；\n3. 若进程退出，立即在本机重启，则不影响集群运行。\n\n### 2.3 zookeeper的作用\n\nNimbus 和 Supervisor 进程都被设计为**快速失败**（遇到任何意外情况时进程自毁）和**无状态**（所有状态保存在 Zookeeper 或磁盘上）。 这样设计的好处就是如果它们的进程被意外销毁，那么在重新启动后，就只需要从 Zookeeper 上获取之前的状态数据即可，并不会造成任何数据丢失。\n\n### 2.4 Worker进程\n\nStorm 集群的任务构造者 ，构造 Spoult 或 Bolt 的 Task 实例，启动 Executor 线程。主要功能如下：\n\n1. 根据 Zookeeper 上分配的 Task，在本进程中启动 1 个或多个 Executor 线程，将构造好的 Task 实例交给 Executor 去运行；\n2. 向 Zookeeper 写入心跳 ；\n3. 维持传输队列，发送 Tuple 到其他的 Worker ；\n4. 若进程退出，立即在本机重启，则不影响集群运行。\n\n### 2.5 Executor线程\n\nStorm 集群的任务执行者 ，循环执行 Task 代码。主要功能如下：\n\n1. 执行 1 个或多个 Task；\n2. 执行 Acker 机制，负责发送 Task 处理状态给对应 Spout 所在的 worker。\n\n### 2.6 并行度\n\n![](真正意义的流式处理框架Strom/3.png)\n\n1 个 Worker 进程执行的是 1 个 Topology 的子集，不会出现 1 个 Worker 为多个 Topology 服务的情况，因此 1 个运行中的 Topology 就是由集群中多台物理机上的多个 Worker 进程组成的。1 个 Worker 进程会启动 1 个或多个 Executor 线程来执行 1 个 Topology 的 Component(组件，即 Spout 或 Bolt)。\n\nExecutor 是 1 个被 Worker 进程启动的单独线程。每个 Executor 会运行 1 个 Component 中的一个或者多个 Task。\n\nTask 是组成 Component 的代码单元。Topology 启动后，1 个 Component 的 Task 数目是固定不变的，但该 Component 使用的 Executor 线程数可以动态调整（例如：1 个 Executor 线程可以执行该 Component 的 1 个或多个 Task 实例）。这意味着，对于 1 个 Component 来说，`#threads<=#tasks`（线程数小于等于 Task 数目）这样的情况是存在的。默认情况下 Task 的数目等于 Executor 线程数，即 1 个 Executor 线程只运行 1 个 Task。\n\n**总结如下：**\n\n- 一个运行中的 Topology 由集群中的多个 Worker 进程组成的；\n- 在默认情况下，每个 Worker 进程默认启动一个 Executor 线程；\n- 在默认情况下，每个 Executor 默认启动一个 Task 线程；\n- Task 是组成 Component 的代码单元。\n\n# Strom实战入门\n\n**第一步引入依赖**\n\n```xml\n<--使用storm有这个就够了-->\n    <dependency>\n        <groupId>org.apache.storm</groupId>\n        <artifactId>storm-client</artifactId>\n        <version>2.0.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.apache.storm</groupId>\n        <artifactId>storm-hbase</artifactId>\n        <version>2.0.0</version>\n    </dependency>\n```\n\n\n\n**第二步编写Spout获取从HBase中获取数据,类实现IRichSpout接口(也可以继承BaseRichSpout,里面实现了一些基础功能)**\n\n```java\npublic class EventSpout implements IRichSpout {\n\n    private SpoutOutputCollector spoutOutputCollector;\n\n    private HBaseDao hBaseDao = null;\n\n    private Long startRowKey = 1566377894517L;\n\n    private Long endRowKey = startRowKey + 300000L;\n\n    private List<Result> result = null;\n\n    public void open(Map map, TopologyContext topologyContext, SpoutOutputCollector spoutOutputCollector) {\n        this.spoutOutputCollector = spoutOutputCollector;\n        hBaseDao = new HBaseDaoImpl();\n    }\n\n    public void nextTuple() {\n        if (result == null || result.size() <= 0){\n            result = hBaseDao.getRows(\"mjw:tb_event\", startRowKey.toString(),endRowKey.toString());\n\n            startRowKey = endRowKey + 1;\n            long current = System.currentTimeMillis();\n            endRowKey = endRowKey + 300000 > current ? current : endRowKey + 300000;\n\n        }\n        if (result != null && result.size() >0){\n            Result result = this.result.remove(0);\n            Cell[] cells = result.rawCells();\n            for (Cell cell : cells) {\n                if (Bytes.toString(CellUtil.cloneQualifier(cell)).equals(\"name\")){\n                    String name = Bytes.toString(CellUtil.cloneValue(cell));\n                    spoutOutputCollector.emit(new Values(name));\n                }\n            }\n        }\n }\n```\n\n**第三步编写Bolt获取处理数据,编写类实现IRichBolt接口**\n\n```java\npublic class SelectEventBlot implements IRichBolt {\n\n    private OutputCollector outputCollector;\n\n    private HBaseDaoImpl hBaseDao;\n\n    private String event = null;\n\n    private String type = null;\n\n    public void prepare(Map map, TopologyContext topologyContext, OutputCollector outputCollector) {\n        this.outputCollector = outputCollector;\n        hBaseDao = new HBaseDaoImpl();\n    }\n\n    public void execute(Tuple tuple) {\n        String name = tuple.getString(0);\n        hBaseDao.insert(\"mjw:tb_event_count1\",\"test\",\"track\",\"test\",name);\n        try{\n            traveseJson(new JSONObject(name));\n            hBaseDao.insert(\"mjw:tb_event_count1\",type,\"track\",type,type);\n            outputCollector.emit(new Values(event,type));\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n    public void declareOutputFields(OutputFieldsDeclarer outputFieldsDeclarer) {\n        outputFieldsDeclarer.declare(new Fields(\"event\",\"type\"));\n    }\n\n    public void traveseJson(Object json){\n\n        if(json == null){\n            return;\n        }\n        if(json instanceof JSONObject){//json 是一个map\n            //将json转换为JsonObject对象\n            JSONObject jsonStr = (JSONObject) json;\n            //迭代器迭代 map集合所有的keys\n            Iterator it = jsonStr.keys();\n            while(it.hasNext()){\n                //获取map的key\n                String key = (String) it.next();\n                //得到value的值\n                Object value = jsonStr.get(key);\n                if (key.equals(\"type\")){\n                    type = (String) value;\n                }\n                if (key.equals(\"event\")){\n                    event = (String) value;\n                }\n                //递归遍历\n               traveseJson(value);\n            }\n        }else if(json instanceof JSONArray){// if  json 是 数组\n            JSONArray jsonStr = (JSONArray) json;\n            //获取Array 的长度\n            int length = jsonStr.length();\n            for (int i = 0; i <length; i++) {\n                traveseJson(jsonStr.get(i));\n            }\n        }else {//其他类型\n            return ;\n        }\n    }\n}\n```\n\n**第四步编写Bolt保存数据(如果逻辑简单,一个bolt就可以了)**\n\n```java\npublic class SaveEventBlot implements IRichBolt {\n\n    private Map eventMap = new HashMap<String,Integer>();\n\n    private Map typeMap = new HashMap<String,String>();\n\n    private Long beginTime = 0L;\n\n    private Long endTime = 0L;\n\n    private HBaseDao hBaseDao = null;\n\n    public void execute(Tuple tuple) {\n        if (tuple != null){\n            String event = tuple.getString(0);\n            if (eventMap.containsKey(event)){\n                eventMap.put(event,(Integer)eventMap.get(event) + 1);\n            }else {\n                eventMap.put(event,1);\n            }\n            String type = tuple.getString(1);\n            if (!typeMap.containsKey(event)){\n                typeMap.put(event,type);\n            }\n            endTime = System.currentTimeMillis();\n            if (endTime - beginTime >= 5000) {\n                // 5s 写一次库\n                for (Object key : eventMap.keySet()) {\n                    Result result = hBaseDao.getOneRow(\"mjw:tb_event_count1\", typeMap.get(key) + \"\" + key.toString());\n                    Integer value = null;\n                    if (result != null) {\n                        Cell[] cells = result.rawCells();\n                        int add_value = 0;\n                        for (Cell cell : cells) {\n                            add_value = Integer.parseInt(Bytes.toString(CellUtil.cloneValue(cell)));\n                        }\n                         value = add_value +(Integer) eventMap.get(key);\n                    }\n                    hBaseDao.insert(\"mjw:tb_event_count1\",typeMap.get(key) + \"\" + key.toString(),(String) typeMap.get(key),key.toString(),value.toString());\n                }\n\n                //重置时间map\n                eventMap = new HashMap<String,Integer>();\n                // 需要重置初始时间\n                beginTime = System.currentTimeMillis();\n            }\n        }\n    }\n\n    public Map<String, Object> getComponentConfiguration() {\n        return null;\n    }\n\n    public void prepare(Map<String, Object> map, TopologyContext topologyContext, OutputCollector outputCollector) {\n        hBaseDao = new HBaseDaoImpl();\n        beginTime = System.currentTimeMillis();\n    }\n}\n```\n\n**第五步编写启动类,构建整个拓扑结构,然后提交任务**\n\n```java\npublic class EventTopology {\n    public static void main(String[] args) {\n        TopologyBuilder builder = new TopologyBuilder();\n        builder.setSpout(\"spout\",new EventSpout());\n        builder.setBolt(\"select_blot\", new SelectEventBlot()).shuffleGrouping(\"spout\");\n        builder.setBolt(\"save_blot\", new SaveEventBlot()).shuffleGrouping(\"select_blot\");\n        Config config = new Config();\n        if (args.length > 0){\n            try {\n                StormSubmitter.submitTopology(args[0],config,builder.createTopology());\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n","source":"_posts/真正意义的流式处理框架Strom.md","raw":"---\ntitle: 真正意义的流式处理框架Strom\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-16 21:27:19\npassword:\nsummary:\ntags:\ncategories: 大数据\n---\n\n# Storm基础入门\n\n- Apache Storm是一个分布式实时大数据处理系统。Storm设计用于在容错和水平可扩展方法中处理大量数据。它是一个流数据框架，具有最高的摄取率。\n\n## Storm的核心组件\n\n- Nimbus：即Storm的Master，负责资源分配和任务调度。一个Storm集群只有一个Nimbus。\n- Supervisor：即Storm的Slave，负责接收Nimbus分配的任务，管理所有Worker，一个Supervisor节点中包含多个Worker进程。\n- Worker：工作进程，每个工作进程中都有多个Task。 Task：任务，在 Storm 集群中每个 Spout 和 Bolt 都由若干个任务（tasks）来执行。每个任务都与一个执行线程相对应。\n- Topology：计算拓扑，Storm 的拓扑是对实时计算应用逻辑的封装，它的作用与 MapReduce 的任务（Job）很相似，区别在于 MapReduce 的一个 Job 在得到结果之后总会结束，而拓扑会一直在集群中运行，直到你手动去终止它。拓扑还可以理解成由一系列通过数据流（Stream Grouping）相互关联的 Spout 和 Bolt 组成的的拓扑结构。\n- Stream：数据流（Streams）是 Storm 中最核心的抽象概念。一个数据流指的是在分布式环境中并行创建、处理的一组元组（tuple）的无界序列。数据流可以由一种能够表述数据流中元组的域（fields）的模式来定义。\n- Spout：数据源（Spout）是拓扑中数据流的来源。一般 Spout 会从一个外部的数据源读取元组然后将他们发送到拓扑中。根据需求的不同，Spout 既可以定义为可靠的数据源，也可以定义为不可靠的数据源。一个可靠的 Spout能够在它发送的元组处理失败时重新发送该元组，以确保所有的元组都能得到正确的处理；相对应的，不可靠的 Spout 就不会在元组发送之后对元组进行任何其他的处理。一个 Spout可以发送多个数据流。\n- Bolt：拓扑中所有的数据处理均是由 Bolt 完成的。通过数据过滤（filtering）、函数处理（functions）、聚合（aggregations）、联结（joins）、数据库交互等功能，Bolt 几乎能够完成任何一种数据处理需求。一个 Bolt 可以实现简单的数据流转换，而更复杂的数据流变换通常需要使用多个 Bolt 并通过多个步骤完成。\n- Stream grouping：为拓扑中的每个 Bolt 的确定输入数据流是定义一个拓扑的重要环节。数据流分组定义了在 Bolt 的不同任务（tasks）中划分数据流的方式。在 Storm 中有八种内置的数据流分组方式。\n- Reliability：可靠性。Storm 可以通过拓扑来确保每个发送的元组都能得到正确处理。通过跟踪由 Spout 发出的每个元组构成的元组树可以确定元组是否已经完成处理。每个拓扑都有一个“消息延时”参数，如果 Storm 在延时时间内没有检测到元组是否处理完成，就会将该元组标记为处理失败，并会在稍后重新发送该元组。\n\n## storm Linux安装\n\n首先需要3台虚拟机,并且安装好JDK1.8,python2.6.6以上版本,还要在3台虚拟机上安装好zookeeper. 下载地址:\n\n- Zookeeper：[zookeeper.apache.org/releases.ht…](https://zookeeper.apache.org/releases.html#download)\n- Storm: [storm.apache.org/downloads.h…](http://storm.apache.org/downloads.html)\n- 将下载下来的storm保存到/usr/local/目录,将apache-storm-1.2.2.tar.gz文件进行解压 在linux上输入:\n\n```shell\ntar -zxvf apache-storm-1.2.2.tar.gz\n```\n\n- 得到apache-storm-1.2.2。配置环境变量编辑 /etc/profile 文件\n\n```shell\nexport STORM_HOME=/opt/storm/storm1.1\nexport PATH=.:${JAVA_HOME}/bin:${ZK_HOME}/bin:${STORM_HOME}/bin:$PATH\n```\n\n编辑 /usr/local/apache-storm-1.2.2/conf 的 storm.yarm\n\n```html\n storm.zookeeper.servers:\n     - \"192.168.1.21\"\n     - \"192.168.1.23\"\n     - \"192.168.1.24\"\n storm.local.dir: \"/usr/local/apache-storm-1.2.2/data\"\n nimbus.host: \"192.168.70.68\"\n ui.port: 10088\n supervisor.slots.ports:\n     - 6700\n     - 6701\n     - 6702\n     - 6703\n```\n\n注意的是每个参数前面必须有空格，-的后面也需要\n\n- storm.zookeeper.servers是指定zookeeper的服务地址。\n- storm.local.dir 表示存储目录。\n- nimbus.host 表示主机节点。\n- ui.port 主机端口\n- supervisor.slots.ports 表示worker 端口。\n\n## 启动Storm\n\n进入到/usr/local/apache-storm-1.2.2/bin 目录下 首先启动主节点\n\n```shell\nnohup ./strom nimbus & \n```\n\n启动图形界面\n\n```shell\nnohup ./storm ui &\n```\n\n启动其他节点\n\n```shell\nnohup ./storm supervisor &\n```\n\n在浏览器访问主节点[http://192.168.70.68:10088](https://juejin.im/post/5c9aeb95f265da610849b2b8) 看到界面表示成功。\n\n# Storm 核心概念详解\n\n## 一、Storm核心概念\n\n![](真正意义的流式处理框架Strom/4.png)\n\n### 1.1 Topologies（拓扑）\n\n一个完整的 Storm 流处理程序被称为 Storm topology(拓扑)。它是一个是由 `Spouts` 和 `Bolts`通过 `Stream` 连接起来的有向无环图，Storm 会保持每个提交到集群的 topology 持续地运行，从而处理源源不断的数据流，直到你将主动其杀死 (kill) 为止。\n\n### 1.2 Streams（流）\n\n`Stream` 是 Storm 中的核心概念。一个 `Stream` 是一个无界的、以分布式方式并行创建和处理的 `Tuple` 序列。Tuple 可以包含大多数基本类型以及自定义类型的数据。简单来说，Tuple 就是流数据的实际载体，而 Stream 就是一系列 Tuple。\n\n### 1.3 Spouts\n\n`Spouts` 是流数据的源头，一个 Spout 可以向不止一个 `Streams` 中发送数据。`Spout` 通常分为**可靠**和**不可靠**两种：可靠的 `Spout` 能够在失败时重新发送 Tuple, 不可靠的 `Spout` 一旦把 Tuple 发送出去就置之不理了。\n\n### 1.4 Bolts\n\n`Bolts` 是流数据的处理单元，它可以从一个或者多个 `Streams` 中接收数据，处理完成后再发射到新的 `Streams` 中。`Bolts` 可以执行过滤 (filtering)，聚合 (aggregations)，连接 (joins) 等操作，并能与文件系统或数据库进行交互。\n\n### 1.5 Stream groupings（分组策略）\n\n![](真正意义的流式处理框架Strom/1.png)\n\n`spouts` 和 `bolts` 在集群上执行任务时，是由多个 Task 并行执行 (如上图，每一个圆圈代表一个 Task)。当一个 Tuple 需要从 Bolt A 发送给 Bolt B 执行的时候，程序如何知道应该发送给 Bolt B 的哪一个 Task 执行呢？\n\n这是由 Stream groupings 分组策略来决定的，Storm 中一共有如下 8 个内置的 Stream Grouping。当然你也可以通过实现 `CustomStreamGrouping` 接口来实现自定义 Stream 分组策略。\n\n1. **Shuffle grouping**\n\n   Tuples 随机的分发到每个 Bolt 的每个 Task 上，每个 Bolt 获取到等量的 Tuples。\n\n2. **Fields grouping**\n\n   Streams 通过 grouping 指定的字段 (field) 来分组。假设通过 `user-id` 字段进行分区，那么具有相同 `user-id` 的 Tuples 就会发送到同一个 Task。\n\n3. **Partial Key grouping**\n\n   Streams 通过 grouping 中指定的字段 (field) 来分组，与 `Fields Grouping` 相似。但是对于两个下游的 Bolt 来说是负载均衡的，可以在输入数据不平均的情况下提供更好的优化。\n\n4. **All grouping**\n\n   Streams 会被所有的 Bolt 的 Tasks 进行复制。由于存在数据重复处理，所以需要谨慎使用。\n\n5. **Global grouping**\n\n   整个 Streams 会进入 Bolt 的其中一个 Task，通常会进入 id 最小的 Task。\n\n6. **None grouping**\n\n   当前 None grouping 和 Shuffle grouping 等价，都是进行随机分发。\n\n7. **Direct grouping**\n\n   Direct grouping 只能被用于 direct streams 。使用这种方式需要由 Tuple 的生产者直接指定由哪个 Task 进行处理。\n\n8. **Local or shuffle grouping**\n\n   如果目标 Bolt 有 Tasks 和当前 Bolt 的 Tasks 处在同一个 Worker 进程中，那么则优先将 Tuple Shuffled 到处于同一个进程的目标 Bolt 的 Tasks 上，这样可以最大限度地减少网络传输。否则，就和普通的 `Shuffle Grouping` 行为一致。\n\n## 二、Storm架构详解\n\n![](真正意义的流式处理框架Strom/2.png)\n\n### 2.1 Nimbus进程\n\n也叫做 Master Node，是 Storm 集群工作的全局指挥官。主要功能如下：\n\n1. 通过 Thrift 接口，监听并接收 Client 提交的 Topology；\n2. 根据集群 Workers 的资源情况，将 Client 提交的 Topology 进行任务分配，分配结果写入 Zookeeper;\n3. 通过 Thrift 接口，监听 Supervisor 的下载 Topology 代码的请求，并提供下载 ;\n4. 通过 Thrift 接口，监听 UI 对统计信息的读取，从 Zookeeper 上读取统计信息，返回给 UI;\n5. 若进程退出后，立即在本机重启，则不影响集群运行。\n\n### 2.2 Supervisor进程\n\n也叫做 Worker Node , 是 Storm 集群的资源管理者，按需启动 Worker 进程。主要功能如下：\n\n1. 定时从 Zookeeper 检查是否有新 Topology 代码未下载到本地 ，并定时删除旧 Topology 代码 ;\n2. 根据 Nimbus 的任务分配计划，在本机按需启动 1 个或多个 Worker 进程，并监控所有的 Worker 进程的情况；\n3. 若进程退出，立即在本机重启，则不影响集群运行。\n\n### 2.3 zookeeper的作用\n\nNimbus 和 Supervisor 进程都被设计为**快速失败**（遇到任何意外情况时进程自毁）和**无状态**（所有状态保存在 Zookeeper 或磁盘上）。 这样设计的好处就是如果它们的进程被意外销毁，那么在重新启动后，就只需要从 Zookeeper 上获取之前的状态数据即可，并不会造成任何数据丢失。\n\n### 2.4 Worker进程\n\nStorm 集群的任务构造者 ，构造 Spoult 或 Bolt 的 Task 实例，启动 Executor 线程。主要功能如下：\n\n1. 根据 Zookeeper 上分配的 Task，在本进程中启动 1 个或多个 Executor 线程，将构造好的 Task 实例交给 Executor 去运行；\n2. 向 Zookeeper 写入心跳 ；\n3. 维持传输队列，发送 Tuple 到其他的 Worker ；\n4. 若进程退出，立即在本机重启，则不影响集群运行。\n\n### 2.5 Executor线程\n\nStorm 集群的任务执行者 ，循环执行 Task 代码。主要功能如下：\n\n1. 执行 1 个或多个 Task；\n2. 执行 Acker 机制，负责发送 Task 处理状态给对应 Spout 所在的 worker。\n\n### 2.6 并行度\n\n![](真正意义的流式处理框架Strom/3.png)\n\n1 个 Worker 进程执行的是 1 个 Topology 的子集，不会出现 1 个 Worker 为多个 Topology 服务的情况，因此 1 个运行中的 Topology 就是由集群中多台物理机上的多个 Worker 进程组成的。1 个 Worker 进程会启动 1 个或多个 Executor 线程来执行 1 个 Topology 的 Component(组件，即 Spout 或 Bolt)。\n\nExecutor 是 1 个被 Worker 进程启动的单独线程。每个 Executor 会运行 1 个 Component 中的一个或者多个 Task。\n\nTask 是组成 Component 的代码单元。Topology 启动后，1 个 Component 的 Task 数目是固定不变的，但该 Component 使用的 Executor 线程数可以动态调整（例如：1 个 Executor 线程可以执行该 Component 的 1 个或多个 Task 实例）。这意味着，对于 1 个 Component 来说，`#threads<=#tasks`（线程数小于等于 Task 数目）这样的情况是存在的。默认情况下 Task 的数目等于 Executor 线程数，即 1 个 Executor 线程只运行 1 个 Task。\n\n**总结如下：**\n\n- 一个运行中的 Topology 由集群中的多个 Worker 进程组成的；\n- 在默认情况下，每个 Worker 进程默认启动一个 Executor 线程；\n- 在默认情况下，每个 Executor 默认启动一个 Task 线程；\n- Task 是组成 Component 的代码单元。\n\n# Strom实战入门\n\n**第一步引入依赖**\n\n```xml\n<--使用storm有这个就够了-->\n    <dependency>\n        <groupId>org.apache.storm</groupId>\n        <artifactId>storm-client</artifactId>\n        <version>2.0.0</version>\n    </dependency>\n    <dependency>\n        <groupId>org.apache.storm</groupId>\n        <artifactId>storm-hbase</artifactId>\n        <version>2.0.0</version>\n    </dependency>\n```\n\n\n\n**第二步编写Spout获取从HBase中获取数据,类实现IRichSpout接口(也可以继承BaseRichSpout,里面实现了一些基础功能)**\n\n```java\npublic class EventSpout implements IRichSpout {\n\n    private SpoutOutputCollector spoutOutputCollector;\n\n    private HBaseDao hBaseDao = null;\n\n    private Long startRowKey = 1566377894517L;\n\n    private Long endRowKey = startRowKey + 300000L;\n\n    private List<Result> result = null;\n\n    public void open(Map map, TopologyContext topologyContext, SpoutOutputCollector spoutOutputCollector) {\n        this.spoutOutputCollector = spoutOutputCollector;\n        hBaseDao = new HBaseDaoImpl();\n    }\n\n    public void nextTuple() {\n        if (result == null || result.size() <= 0){\n            result = hBaseDao.getRows(\"mjw:tb_event\", startRowKey.toString(),endRowKey.toString());\n\n            startRowKey = endRowKey + 1;\n            long current = System.currentTimeMillis();\n            endRowKey = endRowKey + 300000 > current ? current : endRowKey + 300000;\n\n        }\n        if (result != null && result.size() >0){\n            Result result = this.result.remove(0);\n            Cell[] cells = result.rawCells();\n            for (Cell cell : cells) {\n                if (Bytes.toString(CellUtil.cloneQualifier(cell)).equals(\"name\")){\n                    String name = Bytes.toString(CellUtil.cloneValue(cell));\n                    spoutOutputCollector.emit(new Values(name));\n                }\n            }\n        }\n }\n```\n\n**第三步编写Bolt获取处理数据,编写类实现IRichBolt接口**\n\n```java\npublic class SelectEventBlot implements IRichBolt {\n\n    private OutputCollector outputCollector;\n\n    private HBaseDaoImpl hBaseDao;\n\n    private String event = null;\n\n    private String type = null;\n\n    public void prepare(Map map, TopologyContext topologyContext, OutputCollector outputCollector) {\n        this.outputCollector = outputCollector;\n        hBaseDao = new HBaseDaoImpl();\n    }\n\n    public void execute(Tuple tuple) {\n        String name = tuple.getString(0);\n        hBaseDao.insert(\"mjw:tb_event_count1\",\"test\",\"track\",\"test\",name);\n        try{\n            traveseJson(new JSONObject(name));\n            hBaseDao.insert(\"mjw:tb_event_count1\",type,\"track\",type,type);\n            outputCollector.emit(new Values(event,type));\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n    public void declareOutputFields(OutputFieldsDeclarer outputFieldsDeclarer) {\n        outputFieldsDeclarer.declare(new Fields(\"event\",\"type\"));\n    }\n\n    public void traveseJson(Object json){\n\n        if(json == null){\n            return;\n        }\n        if(json instanceof JSONObject){//json 是一个map\n            //将json转换为JsonObject对象\n            JSONObject jsonStr = (JSONObject) json;\n            //迭代器迭代 map集合所有的keys\n            Iterator it = jsonStr.keys();\n            while(it.hasNext()){\n                //获取map的key\n                String key = (String) it.next();\n                //得到value的值\n                Object value = jsonStr.get(key);\n                if (key.equals(\"type\")){\n                    type = (String) value;\n                }\n                if (key.equals(\"event\")){\n                    event = (String) value;\n                }\n                //递归遍历\n               traveseJson(value);\n            }\n        }else if(json instanceof JSONArray){// if  json 是 数组\n            JSONArray jsonStr = (JSONArray) json;\n            //获取Array 的长度\n            int length = jsonStr.length();\n            for (int i = 0; i <length; i++) {\n                traveseJson(jsonStr.get(i));\n            }\n        }else {//其他类型\n            return ;\n        }\n    }\n}\n```\n\n**第四步编写Bolt保存数据(如果逻辑简单,一个bolt就可以了)**\n\n```java\npublic class SaveEventBlot implements IRichBolt {\n\n    private Map eventMap = new HashMap<String,Integer>();\n\n    private Map typeMap = new HashMap<String,String>();\n\n    private Long beginTime = 0L;\n\n    private Long endTime = 0L;\n\n    private HBaseDao hBaseDao = null;\n\n    public void execute(Tuple tuple) {\n        if (tuple != null){\n            String event = tuple.getString(0);\n            if (eventMap.containsKey(event)){\n                eventMap.put(event,(Integer)eventMap.get(event) + 1);\n            }else {\n                eventMap.put(event,1);\n            }\n            String type = tuple.getString(1);\n            if (!typeMap.containsKey(event)){\n                typeMap.put(event,type);\n            }\n            endTime = System.currentTimeMillis();\n            if (endTime - beginTime >= 5000) {\n                // 5s 写一次库\n                for (Object key : eventMap.keySet()) {\n                    Result result = hBaseDao.getOneRow(\"mjw:tb_event_count1\", typeMap.get(key) + \"\" + key.toString());\n                    Integer value = null;\n                    if (result != null) {\n                        Cell[] cells = result.rawCells();\n                        int add_value = 0;\n                        for (Cell cell : cells) {\n                            add_value = Integer.parseInt(Bytes.toString(CellUtil.cloneValue(cell)));\n                        }\n                         value = add_value +(Integer) eventMap.get(key);\n                    }\n                    hBaseDao.insert(\"mjw:tb_event_count1\",typeMap.get(key) + \"\" + key.toString(),(String) typeMap.get(key),key.toString(),value.toString());\n                }\n\n                //重置时间map\n                eventMap = new HashMap<String,Integer>();\n                // 需要重置初始时间\n                beginTime = System.currentTimeMillis();\n            }\n        }\n    }\n\n    public Map<String, Object> getComponentConfiguration() {\n        return null;\n    }\n\n    public void prepare(Map<String, Object> map, TopologyContext topologyContext, OutputCollector outputCollector) {\n        hBaseDao = new HBaseDaoImpl();\n        beginTime = System.currentTimeMillis();\n    }\n}\n```\n\n**第五步编写启动类,构建整个拓扑结构,然后提交任务**\n\n```java\npublic class EventTopology {\n    public static void main(String[] args) {\n        TopologyBuilder builder = new TopologyBuilder();\n        builder.setSpout(\"spout\",new EventSpout());\n        builder.setBolt(\"select_blot\", new SelectEventBlot()).shuffleGrouping(\"spout\");\n        builder.setBolt(\"save_blot\", new SaveEventBlot()).shuffleGrouping(\"select_blot\");\n        Config config = new Config();\n        if (args.length > 0){\n            try {\n                StormSubmitter.submitTopology(args[0],config,builder.createTopology());\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n","slug":"真正意义的流式处理框架Strom","published":1,"updated":"2021-04-29T10:04:35.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mldw002kvkvy3z2tzx8e","content":"<h1 id=\"Storm基础入门\"><a href=\"#Storm基础入门\" class=\"headerlink\" title=\"Storm基础入门\"></a>Storm基础入门</h1><ul>\n<li>Apache Storm是一个分布式实时大数据处理系统。Storm设计用于在容错和水平可扩展方法中处理大量数据。它是一个流数据框架，具有最高的摄取率。</li>\n</ul>\n<h2 id=\"Storm的核心组件\"><a href=\"#Storm的核心组件\" class=\"headerlink\" title=\"Storm的核心组件\"></a>Storm的核心组件</h2><ul>\n<li>Nimbus：即Storm的Master，负责资源分配和任务调度。一个Storm集群只有一个Nimbus。</li>\n<li>Supervisor：即Storm的Slave，负责接收Nimbus分配的任务，管理所有Worker，一个Supervisor节点中包含多个Worker进程。</li>\n<li>Worker：工作进程，每个工作进程中都有多个Task。 Task：任务，在 Storm 集群中每个 Spout 和 Bolt 都由若干个任务（tasks）来执行。每个任务都与一个执行线程相对应。</li>\n<li>Topology：计算拓扑，Storm 的拓扑是对实时计算应用逻辑的封装，它的作用与 MapReduce 的任务（Job）很相似，区别在于 MapReduce 的一个 Job 在得到结果之后总会结束，而拓扑会一直在集群中运行，直到你手动去终止它。拓扑还可以理解成由一系列通过数据流（Stream Grouping）相互关联的 Spout 和 Bolt 组成的的拓扑结构。</li>\n<li>Stream：数据流（Streams）是 Storm 中最核心的抽象概念。一个数据流指的是在分布式环境中并行创建、处理的一组元组（tuple）的无界序列。数据流可以由一种能够表述数据流中元组的域（fields）的模式来定义。</li>\n<li>Spout：数据源（Spout）是拓扑中数据流的来源。一般 Spout 会从一个外部的数据源读取元组然后将他们发送到拓扑中。根据需求的不同，Spout 既可以定义为可靠的数据源，也可以定义为不可靠的数据源。一个可靠的 Spout能够在它发送的元组处理失败时重新发送该元组，以确保所有的元组都能得到正确的处理；相对应的，不可靠的 Spout 就不会在元组发送之后对元组进行任何其他的处理。一个 Spout可以发送多个数据流。</li>\n<li>Bolt：拓扑中所有的数据处理均是由 Bolt 完成的。通过数据过滤（filtering）、函数处理（functions）、聚合（aggregations）、联结（joins）、数据库交互等功能，Bolt 几乎能够完成任何一种数据处理需求。一个 Bolt 可以实现简单的数据流转换，而更复杂的数据流变换通常需要使用多个 Bolt 并通过多个步骤完成。</li>\n<li>Stream grouping：为拓扑中的每个 Bolt 的确定输入数据流是定义一个拓扑的重要环节。数据流分组定义了在 Bolt 的不同任务（tasks）中划分数据流的方式。在 Storm 中有八种内置的数据流分组方式。</li>\n<li>Reliability：可靠性。Storm 可以通过拓扑来确保每个发送的元组都能得到正确处理。通过跟踪由 Spout 发出的每个元组构成的元组树可以确定元组是否已经完成处理。每个拓扑都有一个“消息延时”参数，如果 Storm 在延时时间内没有检测到元组是否处理完成，就会将该元组标记为处理失败，并会在稍后重新发送该元组。</li>\n</ul>\n<h2 id=\"storm-Linux安装\"><a href=\"#storm-Linux安装\" class=\"headerlink\" title=\"storm Linux安装\"></a>storm Linux安装</h2><p>首先需要3台虚拟机,并且安装好JDK1.8,python2.6.6以上版本,还要在3台虚拟机上安装好zookeeper. 下载地址:</p>\n<ul>\n<li>Zookeeper：<a href=\"https://zookeeper.apache.org/releases.html#download\" target=\"_blank\" rel=\"noopener\">zookeeper.apache.org/releases.ht…</a></li>\n<li>Storm: <a href=\"http://storm.apache.org/downloads.html\" target=\"_blank\" rel=\"noopener\">storm.apache.org/downloads.h…</a></li>\n<li>将下载下来的storm保存到/usr/local/目录,将apache-storm-1.2.2.tar.gz文件进行解压 在linux上输入:</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">tar -zxvf apache-storm-1.2.2.tar.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>得到apache-storm-1.2.2。配置环境变量编辑 /etc/profile 文件</li>\n</ul>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">export STORM_HOME=/opt/storm/storm1.1\nexport PATH=.:${JAVA_HOME}/bin:${ZK_HOME}/bin:${STORM_HOME}/bin:$PATH<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>编辑 /usr/local/apache-storm-1.2.2/conf 的 storm.yarm</p>\n<pre class=\"line-numbers language-html\"><code class=\"language-html\"> storm.zookeeper.servers:\n     - \"192.168.1.21\"\n     - \"192.168.1.23\"\n     - \"192.168.1.24\"\n storm.local.dir: \"/usr/local/apache-storm-1.2.2/data\"\n nimbus.host: \"192.168.70.68\"\n ui.port: 10088\n supervisor.slots.ports:\n     - 6700\n     - 6701\n     - 6702\n     - 6703<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意的是每个参数前面必须有空格，-的后面也需要</p>\n<ul>\n<li>storm.zookeeper.servers是指定zookeeper的服务地址。</li>\n<li>storm.local.dir 表示存储目录。</li>\n<li>nimbus.host 表示主机节点。</li>\n<li>ui.port 主机端口</li>\n<li>supervisor.slots.ports 表示worker 端口。</li>\n</ul>\n<h2 id=\"启动Storm\"><a href=\"#启动Storm\" class=\"headerlink\" title=\"启动Storm\"></a>启动Storm</h2><p>进入到/usr/local/apache-storm-1.2.2/bin 目录下 首先启动主节点</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">nohup ./strom nimbus & <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>启动图形界面</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">nohup ./storm ui &<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>启动其他节点</p>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">nohup ./storm supervisor &<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在浏览器访问主节点<a href=\"https://juejin.im/post/5c9aeb95f265da610849b2b8\" target=\"_blank\" rel=\"noopener\">http://192.168.70.68:10088</a> 看到界面表示成功。</p>\n<h1 id=\"Storm-核心概念详解\"><a href=\"#Storm-核心概念详解\" class=\"headerlink\" title=\"Storm 核心概念详解\"></a>Storm 核心概念详解</h1><h2 id=\"一、Storm核心概念\"><a href=\"#一、Storm核心概念\" class=\"headerlink\" title=\"一、Storm核心概念\"></a>一、Storm核心概念</h2><p><img src=\"/2020/01/16/zhen-zheng-yi-yi-de-liu-shi-chu-li-kuang-jia-strom/4.png\" alt></p>\n<h3 id=\"1-1-Topologies（拓扑）\"><a href=\"#1-1-Topologies（拓扑）\" class=\"headerlink\" title=\"1.1 Topologies（拓扑）\"></a>1.1 Topologies（拓扑）</h3><p>一个完整的 Storm 流处理程序被称为 Storm topology(拓扑)。它是一个是由 <code>Spouts</code> 和 <code>Bolts</code>通过 <code>Stream</code> 连接起来的有向无环图，Storm 会保持每个提交到集群的 topology 持续地运行，从而处理源源不断的数据流，直到你将主动其杀死 (kill) 为止。</p>\n<h3 id=\"1-2-Streams（流）\"><a href=\"#1-2-Streams（流）\" class=\"headerlink\" title=\"1.2 Streams（流）\"></a>1.2 Streams（流）</h3><p><code>Stream</code> 是 Storm 中的核心概念。一个 <code>Stream</code> 是一个无界的、以分布式方式并行创建和处理的 <code>Tuple</code> 序列。Tuple 可以包含大多数基本类型以及自定义类型的数据。简单来说，Tuple 就是流数据的实际载体，而 Stream 就是一系列 Tuple。</p>\n<h3 id=\"1-3-Spouts\"><a href=\"#1-3-Spouts\" class=\"headerlink\" title=\"1.3 Spouts\"></a>1.3 Spouts</h3><p><code>Spouts</code> 是流数据的源头，一个 Spout 可以向不止一个 <code>Streams</code> 中发送数据。<code>Spout</code> 通常分为<strong>可靠</strong>和<strong>不可靠</strong>两种：可靠的 <code>Spout</code> 能够在失败时重新发送 Tuple, 不可靠的 <code>Spout</code> 一旦把 Tuple 发送出去就置之不理了。</p>\n<h3 id=\"1-4-Bolts\"><a href=\"#1-4-Bolts\" class=\"headerlink\" title=\"1.4 Bolts\"></a>1.4 Bolts</h3><p><code>Bolts</code> 是流数据的处理单元，它可以从一个或者多个 <code>Streams</code> 中接收数据，处理完成后再发射到新的 <code>Streams</code> 中。<code>Bolts</code> 可以执行过滤 (filtering)，聚合 (aggregations)，连接 (joins) 等操作，并能与文件系统或数据库进行交互。</p>\n<h3 id=\"1-5-Stream-groupings（分组策略）\"><a href=\"#1-5-Stream-groupings（分组策略）\" class=\"headerlink\" title=\"1.5 Stream groupings（分组策略）\"></a>1.5 Stream groupings（分组策略）</h3><p><img src=\"/2020/01/16/zhen-zheng-yi-yi-de-liu-shi-chu-li-kuang-jia-strom/1.png\" alt></p>\n<p><code>spouts</code> 和 <code>bolts</code> 在集群上执行任务时，是由多个 Task 并行执行 (如上图，每一个圆圈代表一个 Task)。当一个 Tuple 需要从 Bolt A 发送给 Bolt B 执行的时候，程序如何知道应该发送给 Bolt B 的哪一个 Task 执行呢？</p>\n<p>这是由 Stream groupings 分组策略来决定的，Storm 中一共有如下 8 个内置的 Stream Grouping。当然你也可以通过实现 <code>CustomStreamGrouping</code> 接口来实现自定义 Stream 分组策略。</p>\n<ol>\n<li><p><strong>Shuffle grouping</strong></p>\n<p>Tuples 随机的分发到每个 Bolt 的每个 Task 上，每个 Bolt 获取到等量的 Tuples。</p>\n</li>\n<li><p><strong>Fields grouping</strong></p>\n<p>Streams 通过 grouping 指定的字段 (field) 来分组。假设通过 <code>user-id</code> 字段进行分区，那么具有相同 <code>user-id</code> 的 Tuples 就会发送到同一个 Task。</p>\n</li>\n<li><p><strong>Partial Key grouping</strong></p>\n<p>Streams 通过 grouping 中指定的字段 (field) 来分组，与 <code>Fields Grouping</code> 相似。但是对于两个下游的 Bolt 来说是负载均衡的，可以在输入数据不平均的情况下提供更好的优化。</p>\n</li>\n<li><p><strong>All grouping</strong></p>\n<p>Streams 会被所有的 Bolt 的 Tasks 进行复制。由于存在数据重复处理，所以需要谨慎使用。</p>\n</li>\n<li><p><strong>Global grouping</strong></p>\n<p>整个 Streams 会进入 Bolt 的其中一个 Task，通常会进入 id 最小的 Task。</p>\n</li>\n<li><p><strong>None grouping</strong></p>\n<p>当前 None grouping 和 Shuffle grouping 等价，都是进行随机分发。</p>\n</li>\n<li><p><strong>Direct grouping</strong></p>\n<p>Direct grouping 只能被用于 direct streams 。使用这种方式需要由 Tuple 的生产者直接指定由哪个 Task 进行处理。</p>\n</li>\n<li><p><strong>Local or shuffle grouping</strong></p>\n<p>如果目标 Bolt 有 Tasks 和当前 Bolt 的 Tasks 处在同一个 Worker 进程中，那么则优先将 Tuple Shuffled 到处于同一个进程的目标 Bolt 的 Tasks 上，这样可以最大限度地减少网络传输。否则，就和普通的 <code>Shuffle Grouping</code> 行为一致。</p>\n</li>\n</ol>\n<h2 id=\"二、Storm架构详解\"><a href=\"#二、Storm架构详解\" class=\"headerlink\" title=\"二、Storm架构详解\"></a>二、Storm架构详解</h2><p><img src=\"/2020/01/16/zhen-zheng-yi-yi-de-liu-shi-chu-li-kuang-jia-strom/2.png\" alt></p>\n<h3 id=\"2-1-Nimbus进程\"><a href=\"#2-1-Nimbus进程\" class=\"headerlink\" title=\"2.1 Nimbus进程\"></a>2.1 Nimbus进程</h3><p>也叫做 Master Node，是 Storm 集群工作的全局指挥官。主要功能如下：</p>\n<ol>\n<li>通过 Thrift 接口，监听并接收 Client 提交的 Topology；</li>\n<li>根据集群 Workers 的资源情况，将 Client 提交的 Topology 进行任务分配，分配结果写入 Zookeeper;</li>\n<li>通过 Thrift 接口，监听 Supervisor 的下载 Topology 代码的请求，并提供下载 ;</li>\n<li>通过 Thrift 接口，监听 UI 对统计信息的读取，从 Zookeeper 上读取统计信息，返回给 UI;</li>\n<li>若进程退出后，立即在本机重启，则不影响集群运行。</li>\n</ol>\n<h3 id=\"2-2-Supervisor进程\"><a href=\"#2-2-Supervisor进程\" class=\"headerlink\" title=\"2.2 Supervisor进程\"></a>2.2 Supervisor进程</h3><p>也叫做 Worker Node , 是 Storm 集群的资源管理者，按需启动 Worker 进程。主要功能如下：</p>\n<ol>\n<li>定时从 Zookeeper 检查是否有新 Topology 代码未下载到本地 ，并定时删除旧 Topology 代码 ;</li>\n<li>根据 Nimbus 的任务分配计划，在本机按需启动 1 个或多个 Worker 进程，并监控所有的 Worker 进程的情况；</li>\n<li>若进程退出，立即在本机重启，则不影响集群运行。</li>\n</ol>\n<h3 id=\"2-3-zookeeper的作用\"><a href=\"#2-3-zookeeper的作用\" class=\"headerlink\" title=\"2.3 zookeeper的作用\"></a>2.3 zookeeper的作用</h3><p>Nimbus 和 Supervisor 进程都被设计为<strong>快速失败</strong>（遇到任何意外情况时进程自毁）和<strong>无状态</strong>（所有状态保存在 Zookeeper 或磁盘上）。 这样设计的好处就是如果它们的进程被意外销毁，那么在重新启动后，就只需要从 Zookeeper 上获取之前的状态数据即可，并不会造成任何数据丢失。</p>\n<h3 id=\"2-4-Worker进程\"><a href=\"#2-4-Worker进程\" class=\"headerlink\" title=\"2.4 Worker进程\"></a>2.4 Worker进程</h3><p>Storm 集群的任务构造者 ，构造 Spoult 或 Bolt 的 Task 实例，启动 Executor 线程。主要功能如下：</p>\n<ol>\n<li>根据 Zookeeper 上分配的 Task，在本进程中启动 1 个或多个 Executor 线程，将构造好的 Task 实例交给 Executor 去运行；</li>\n<li>向 Zookeeper 写入心跳 ；</li>\n<li>维持传输队列，发送 Tuple 到其他的 Worker ；</li>\n<li>若进程退出，立即在本机重启，则不影响集群运行。</li>\n</ol>\n<h3 id=\"2-5-Executor线程\"><a href=\"#2-5-Executor线程\" class=\"headerlink\" title=\"2.5 Executor线程\"></a>2.5 Executor线程</h3><p>Storm 集群的任务执行者 ，循环执行 Task 代码。主要功能如下：</p>\n<ol>\n<li>执行 1 个或多个 Task；</li>\n<li>执行 Acker 机制，负责发送 Task 处理状态给对应 Spout 所在的 worker。</li>\n</ol>\n<h3 id=\"2-6-并行度\"><a href=\"#2-6-并行度\" class=\"headerlink\" title=\"2.6 并行度\"></a>2.6 并行度</h3><p><img src=\"/2020/01/16/zhen-zheng-yi-yi-de-liu-shi-chu-li-kuang-jia-strom/3.png\" alt></p>\n<p>1 个 Worker 进程执行的是 1 个 Topology 的子集，不会出现 1 个 Worker 为多个 Topology 服务的情况，因此 1 个运行中的 Topology 就是由集群中多台物理机上的多个 Worker 进程组成的。1 个 Worker 进程会启动 1 个或多个 Executor 线程来执行 1 个 Topology 的 Component(组件，即 Spout 或 Bolt)。</p>\n<p>Executor 是 1 个被 Worker 进程启动的单独线程。每个 Executor 会运行 1 个 Component 中的一个或者多个 Task。</p>\n<p>Task 是组成 Component 的代码单元。Topology 启动后，1 个 Component 的 Task 数目是固定不变的，但该 Component 使用的 Executor 线程数可以动态调整（例如：1 个 Executor 线程可以执行该 Component 的 1 个或多个 Task 实例）。这意味着，对于 1 个 Component 来说，<code>#threads&lt;=#tasks</code>（线程数小于等于 Task 数目）这样的情况是存在的。默认情况下 Task 的数目等于 Executor 线程数，即 1 个 Executor 线程只运行 1 个 Task。</p>\n<p><strong>总结如下：</strong></p>\n<ul>\n<li>一个运行中的 Topology 由集群中的多个 Worker 进程组成的；</li>\n<li>在默认情况下，每个 Worker 进程默认启动一个 Executor 线程；</li>\n<li>在默认情况下，每个 Executor 默认启动一个 Task 线程；</li>\n<li>Task 是组成 Component 的代码单元。</li>\n</ul>\n<h1 id=\"Strom实战入门\"><a href=\"#Strom实战入门\" class=\"headerlink\" title=\"Strom实战入门\"></a>Strom实战入门</h1><p><strong>第一步引入依赖</strong></p>\n<pre class=\"line-numbers language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>--使用storm有这个就够了--</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.storm<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>storm-client<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.apache.storm<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>storm-hbase<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>第二步编写Spout获取从HBase中获取数据,类实现IRichSpout接口(也可以继承BaseRichSpout,里面实现了一些基础功能)</strong></p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EventSpout</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IRichSpout</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> SpoutOutputCollector spoutOutputCollector<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> HBaseDao hBaseDao <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> Long startRowKey <span class=\"token operator\">=</span> 1566377894517L<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> Long endRowKey <span class=\"token operator\">=</span> startRowKey <span class=\"token operator\">+</span> 300000L<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> List<span class=\"token operator\">&lt;</span>Result<span class=\"token operator\">></span> result <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>Map map<span class=\"token punctuation\">,</span> TopologyContext topologyContext<span class=\"token punctuation\">,</span> SpoutOutputCollector spoutOutputCollector<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>spoutOutputCollector <span class=\"token operator\">=</span> spoutOutputCollector<span class=\"token punctuation\">;</span>\n        hBaseDao <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HBaseDaoImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">nextTuple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">=</span> hBaseDao<span class=\"token punctuation\">.</span><span class=\"token function\">getRows</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mjw:tb_event\"</span><span class=\"token punctuation\">,</span> startRowKey<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>endRowKey<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            startRowKey <span class=\"token operator\">=</span> endRowKey <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">long</span> current <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            endRowKey <span class=\"token operator\">=</span> endRowKey <span class=\"token operator\">+</span> <span class=\"token number\">300000</span> <span class=\"token operator\">></span> current <span class=\"token operator\">?</span> current <span class=\"token operator\">:</span> endRowKey <span class=\"token operator\">+</span> <span class=\"token number\">300000</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            Result result <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Cell<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cells <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">rawCells</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Cell cell <span class=\"token operator\">:</span> cells<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Bytes<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>CellUtil<span class=\"token punctuation\">.</span><span class=\"token function\">cloneQualifier</span><span class=\"token punctuation\">(</span>cell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    String name <span class=\"token operator\">=</span> Bytes<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>CellUtil<span class=\"token punctuation\">.</span><span class=\"token function\">cloneValue</span><span class=\"token punctuation\">(</span>cell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    spoutOutputCollector<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Values</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>第三步编写Bolt获取处理数据,编写类实现IRichBolt接口</strong></p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SelectEventBlot</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IRichBolt</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> OutputCollector outputCollector<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> HBaseDaoImpl hBaseDao<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> String event <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> String type <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span>Map map<span class=\"token punctuation\">,</span> TopologyContext topologyContext<span class=\"token punctuation\">,</span> OutputCollector outputCollector<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>outputCollector <span class=\"token operator\">=</span> outputCollector<span class=\"token punctuation\">;</span>\n        hBaseDao <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HBaseDaoImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>Tuple tuple<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        String name <span class=\"token operator\">=</span> tuple<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hBaseDao<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mjw:tb_event_count1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"track\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">traveseJson</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            hBaseDao<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mjw:tb_event_count1\"</span><span class=\"token punctuation\">,</span>type<span class=\"token punctuation\">,</span><span class=\"token string\">\"track\"</span><span class=\"token punctuation\">,</span>type<span class=\"token punctuation\">,</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            outputCollector<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Values</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">declareOutputFields</span><span class=\"token punctuation\">(</span>OutputFieldsDeclarer outputFieldsDeclarer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        outputFieldsDeclarer<span class=\"token punctuation\">.</span><span class=\"token function\">declare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Fields</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"event\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">traveseJson</span><span class=\"token punctuation\">(</span>Object json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>json <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>json <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">JSONObject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">//json 是一个map</span>\n            <span class=\"token comment\" spellcheck=\"true\">//将json转换为JsonObject对象</span>\n            JSONObject jsonStr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>JSONObject<span class=\"token punctuation\">)</span> json<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//迭代器迭代 map集合所有的keys</span>\n            Iterator it <span class=\"token operator\">=</span> jsonStr<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">//获取map的key</span>\n                String key <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//得到value的值</span>\n                Object value <span class=\"token operator\">=</span> jsonStr<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    type <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span> value<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"event\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    event <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span> value<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\" spellcheck=\"true\">//递归遍历</span>\n               <span class=\"token function\">traveseJson</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>json <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">JSONArray</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">// if  json 是 数组</span>\n            JSONArray jsonStr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>JSONArray<span class=\"token punctuation\">)</span> json<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//获取Array 的长度</span>\n            <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> jsonStr<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">traveseJson</span><span class=\"token punctuation\">(</span>jsonStr<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">//其他类型</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>第四步编写Bolt保存数据(如果逻辑简单,一个bolt就可以了)</strong></p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SaveEventBlot</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IRichBolt</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> Map eventMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span>Integer<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> Map typeMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> Long beginTime <span class=\"token operator\">=</span> 0L<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> Long endTime <span class=\"token operator\">=</span> 0L<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> HBaseDao hBaseDao <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>Tuple tuple<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tuple <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            String event <span class=\"token operator\">=</span> tuple<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eventMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                eventMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">)</span>eventMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                eventMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            String type <span class=\"token operator\">=</span> tuple<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>typeMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                typeMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            endTime <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>endTime <span class=\"token operator\">-</span> beginTime <span class=\"token operator\">>=</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 5s 写一次库</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Object key <span class=\"token operator\">:</span> eventMap<span class=\"token punctuation\">.</span><span class=\"token function\">keySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    Result result <span class=\"token operator\">=</span> hBaseDao<span class=\"token punctuation\">.</span><span class=\"token function\">getOneRow</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mjw:tb_event_count1\"</span><span class=\"token punctuation\">,</span> typeMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    Integer value <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        Cell<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cells <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">rawCells</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">int</span> add_value <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Cell cell <span class=\"token operator\">:</span> cells<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            add_value <span class=\"token operator\">=</span> Integer<span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>Bytes<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>CellUtil<span class=\"token punctuation\">.</span><span class=\"token function\">cloneValue</span><span class=\"token punctuation\">(</span>cell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                         value <span class=\"token operator\">=</span> add_value <span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">)</span> eventMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    hBaseDao<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mjw:tb_event_count1\"</span><span class=\"token punctuation\">,</span>typeMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span> typeMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token comment\" spellcheck=\"true\">//重置时间map</span>\n                eventMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span>Integer<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 需要重置初始时间</span>\n                beginTime <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Object<span class=\"token operator\">></span> <span class=\"token function\">getComponentConfiguration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span>Map<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Object<span class=\"token operator\">></span> map<span class=\"token punctuation\">,</span> TopologyContext topologyContext<span class=\"token punctuation\">,</span> OutputCollector outputCollector<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        hBaseDao <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HBaseDaoImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        beginTime <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>第五步编写启动类,构建整个拓扑结构,然后提交任务</strong></p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EventTopology</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        TopologyBuilder builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TopologyBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">setSpout</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spout\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">EventSpout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">setBolt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select_blot\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SelectEventBlot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">shuffleGrouping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"spout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        builder<span class=\"token punctuation\">.</span><span class=\"token function\">setBolt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"save_blot\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SaveEventBlot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">shuffleGrouping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select_blot\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Config config <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Config</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                StormSubmitter<span class=\"token punctuation\">.</span><span class=\"token function\">submitTopology</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>config<span class=\"token punctuation\">,</span>builder<span class=\"token punctuation\">.</span><span class=\"token function\">createTopology</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h1 id=\"Storm基础入门\"><a href=\"#Storm基础入门\" class=\"headerlink\" title=\"Storm基础入门\"></a>Storm基础入门</h1><ul>\n<li>Apache Storm是一个分布式实时大数据处理系统。Storm设计用于在容错和水平可扩展方法中处理大量数据。它是一个流数据框架，具有最高的摄取率。</li>\n</ul>\n<h2 id=\"Storm的核心组件\"><a href=\"#Storm的核心组件\" class=\"headerlink\" title=\"Storm的核心组件\"></a>Storm的核心组件</h2><ul>\n<li>Nimbus：即Storm的Master，负责资源分配和任务调度。一个Storm集群只有一个Nimbus。</li>\n<li>Supervisor：即Storm的Slave，负责接收Nimbus分配的任务，管理所有Worker，一个Supervisor节点中包含多个Worker进程。</li>\n<li>Worker：工作进程，每个工作进程中都有多个Task。 Task：任务，在 Storm 集群中每个 Spout 和 Bolt 都由若干个任务（tasks）来执行。每个任务都与一个执行线程相对应。</li>\n<li>Topology：计算拓扑，Storm 的拓扑是对实时计算应用逻辑的封装，它的作用与 MapReduce 的任务（Job）很相似，区别在于 MapReduce 的一个 Job 在得到结果之后总会结束，而拓扑会一直在集群中运行，直到你手动去终止它。拓扑还可以理解成由一系列通过数据流（Stream Grouping）相互关联的 Spout 和 Bolt 组成的的拓扑结构。</li>\n<li>Stream：数据流（Streams）是 Storm 中最核心的抽象概念。一个数据流指的是在分布式环境中并行创建、处理的一组元组（tuple）的无界序列。数据流可以由一种能够表述数据流中元组的域（fields）的模式来定义。</li>\n<li>Spout：数据源（Spout）是拓扑中数据流的来源。一般 Spout 会从一个外部的数据源读取元组然后将他们发送到拓扑中。根据需求的不同，Spout 既可以定义为可靠的数据源，也可以定义为不可靠的数据源。一个可靠的 Spout能够在它发送的元组处理失败时重新发送该元组，以确保所有的元组都能得到正确的处理；相对应的，不可靠的 Spout 就不会在元组发送之后对元组进行任何其他的处理。一个 Spout可以发送多个数据流。</li>\n<li>Bolt：拓扑中所有的数据处理均是由 Bolt 完成的。通过数据过滤（filtering）、函数处理（functions）、聚合（aggregations）、联结（joins）、数据库交互等功能，Bolt 几乎能够完成任何一种数据处理需求。一个 Bolt 可以实现简单的数据流转换，而更复杂的数据流变换通常需要使用多个 Bolt 并通过多个步骤完成。</li>\n<li>Stream grouping：为拓扑中的每个 Bolt 的确定输入数据流是定义一个拓扑的重要环节。数据流分组定义了在 Bolt 的不同任务（tasks）中划分数据流的方式。在 Storm 中有八种内置的数据流分组方式。</li>\n<li>Reliability：可靠性。Storm 可以通过拓扑来确保每个发送的元组都能得到正确处理。通过跟踪由 Spout 发出的每个元组构成的元组树可以确定元组是否已经完成处理。每个拓扑都有一个“消息延时”参数，如果 Storm 在延时时间内没有检测到元组是否处理完成，就会将该元组标记为处理失败，并会在稍后重新发送该元组。</li>\n</ul>\n<h2 id=\"storm-Linux安装\"><a href=\"#storm-Linux安装\" class=\"headerlink\" title=\"storm Linux安装\"></a>storm Linux安装</h2><p>首先需要3台虚拟机,并且安装好JDK1.8,python2.6.6以上版本,还要在3台虚拟机上安装好zookeeper. 下载地址:</p>\n<ul>\n<li>Zookeeper：<a href=\"https://zookeeper.apache.org/releases.html#download\" target=\"_blank\" rel=\"noopener\">zookeeper.apache.org/releases.ht…</a></li>\n<li>Storm: <a href=\"http://storm.apache.org/downloads.html\" target=\"_blank\" rel=\"noopener\">storm.apache.org/downloads.h…</a></li>\n<li>将下载下来的storm保存到/usr/local/目录,将apache-storm-1.2.2.tar.gz文件进行解压 在linux上输入:</li>\n</ul>\n<pre><code class=\"shell\">tar -zxvf apache-storm-1.2.2.tar.gz</code></pre>\n<ul>\n<li>得到apache-storm-1.2.2。配置环境变量编辑 /etc/profile 文件</li>\n</ul>\n<pre><code class=\"shell\">export STORM_HOME=/opt/storm/storm1.1\nexport PATH=.:${JAVA_HOME}/bin:${ZK_HOME}/bin:${STORM_HOME}/bin:$PATH</code></pre>\n<p>编辑 /usr/local/apache-storm-1.2.2/conf 的 storm.yarm</p>\n<pre><code class=\"html\"> storm.zookeeper.servers:\n     - &quot;192.168.1.21&quot;\n     - &quot;192.168.1.23&quot;\n     - &quot;192.168.1.24&quot;\n storm.local.dir: &quot;/usr/local/apache-storm-1.2.2/data&quot;\n nimbus.host: &quot;192.168.70.68&quot;\n ui.port: 10088\n supervisor.slots.ports:\n     - 6700\n     - 6701\n     - 6702\n     - 6703</code></pre>\n<p>注意的是每个参数前面必须有空格，-的后面也需要</p>\n<ul>\n<li>storm.zookeeper.servers是指定zookeeper的服务地址。</li>\n<li>storm.local.dir 表示存储目录。</li>\n<li>nimbus.host 表示主机节点。</li>\n<li>ui.port 主机端口</li>\n<li>supervisor.slots.ports 表示worker 端口。</li>\n</ul>\n<h2 id=\"启动Storm\"><a href=\"#启动Storm\" class=\"headerlink\" title=\"启动Storm\"></a>启动Storm</h2><p>进入到/usr/local/apache-storm-1.2.2/bin 目录下 首先启动主节点</p>\n<pre><code class=\"shell\">nohup ./strom nimbus &amp; </code></pre>\n<p>启动图形界面</p>\n<pre><code class=\"shell\">nohup ./storm ui &amp;</code></pre>\n<p>启动其他节点</p>\n<pre><code class=\"shell\">nohup ./storm supervisor &amp;</code></pre>\n<p>在浏览器访问主节点<a href=\"https://juejin.im/post/5c9aeb95f265da610849b2b8\" target=\"_blank\" rel=\"noopener\">http://192.168.70.68:10088</a> 看到界面表示成功。</p>\n<h1 id=\"Storm-核心概念详解\"><a href=\"#Storm-核心概念详解\" class=\"headerlink\" title=\"Storm 核心概念详解\"></a>Storm 核心概念详解</h1><h2 id=\"一、Storm核心概念\"><a href=\"#一、Storm核心概念\" class=\"headerlink\" title=\"一、Storm核心概念\"></a>一、Storm核心概念</h2><p><img src=\"/2020/01/16/zhen-zheng-yi-yi-de-liu-shi-chu-li-kuang-jia-strom/4.png\" alt></p>\n<h3 id=\"1-1-Topologies（拓扑）\"><a href=\"#1-1-Topologies（拓扑）\" class=\"headerlink\" title=\"1.1 Topologies（拓扑）\"></a>1.1 Topologies（拓扑）</h3><p>一个完整的 Storm 流处理程序被称为 Storm topology(拓扑)。它是一个是由 <code>Spouts</code> 和 <code>Bolts</code>通过 <code>Stream</code> 连接起来的有向无环图，Storm 会保持每个提交到集群的 topology 持续地运行，从而处理源源不断的数据流，直到你将主动其杀死 (kill) 为止。</p>\n<h3 id=\"1-2-Streams（流）\"><a href=\"#1-2-Streams（流）\" class=\"headerlink\" title=\"1.2 Streams（流）\"></a>1.2 Streams（流）</h3><p><code>Stream</code> 是 Storm 中的核心概念。一个 <code>Stream</code> 是一个无界的、以分布式方式并行创建和处理的 <code>Tuple</code> 序列。Tuple 可以包含大多数基本类型以及自定义类型的数据。简单来说，Tuple 就是流数据的实际载体，而 Stream 就是一系列 Tuple。</p>\n<h3 id=\"1-3-Spouts\"><a href=\"#1-3-Spouts\" class=\"headerlink\" title=\"1.3 Spouts\"></a>1.3 Spouts</h3><p><code>Spouts</code> 是流数据的源头，一个 Spout 可以向不止一个 <code>Streams</code> 中发送数据。<code>Spout</code> 通常分为<strong>可靠</strong>和<strong>不可靠</strong>两种：可靠的 <code>Spout</code> 能够在失败时重新发送 Tuple, 不可靠的 <code>Spout</code> 一旦把 Tuple 发送出去就置之不理了。</p>\n<h3 id=\"1-4-Bolts\"><a href=\"#1-4-Bolts\" class=\"headerlink\" title=\"1.4 Bolts\"></a>1.4 Bolts</h3><p><code>Bolts</code> 是流数据的处理单元，它可以从一个或者多个 <code>Streams</code> 中接收数据，处理完成后再发射到新的 <code>Streams</code> 中。<code>Bolts</code> 可以执行过滤 (filtering)，聚合 (aggregations)，连接 (joins) 等操作，并能与文件系统或数据库进行交互。</p>\n<h3 id=\"1-5-Stream-groupings（分组策略）\"><a href=\"#1-5-Stream-groupings（分组策略）\" class=\"headerlink\" title=\"1.5 Stream groupings（分组策略）\"></a>1.5 Stream groupings（分组策略）</h3><p><img src=\"/2020/01/16/zhen-zheng-yi-yi-de-liu-shi-chu-li-kuang-jia-strom/1.png\" alt></p>\n<p><code>spouts</code> 和 <code>bolts</code> 在集群上执行任务时，是由多个 Task 并行执行 (如上图，每一个圆圈代表一个 Task)。当一个 Tuple 需要从 Bolt A 发送给 Bolt B 执行的时候，程序如何知道应该发送给 Bolt B 的哪一个 Task 执行呢？</p>\n<p>这是由 Stream groupings 分组策略来决定的，Storm 中一共有如下 8 个内置的 Stream Grouping。当然你也可以通过实现 <code>CustomStreamGrouping</code> 接口来实现自定义 Stream 分组策略。</p>\n<ol>\n<li><p><strong>Shuffle grouping</strong></p>\n<p>Tuples 随机的分发到每个 Bolt 的每个 Task 上，每个 Bolt 获取到等量的 Tuples。</p>\n</li>\n<li><p><strong>Fields grouping</strong></p>\n<p>Streams 通过 grouping 指定的字段 (field) 来分组。假设通过 <code>user-id</code> 字段进行分区，那么具有相同 <code>user-id</code> 的 Tuples 就会发送到同一个 Task。</p>\n</li>\n<li><p><strong>Partial Key grouping</strong></p>\n<p>Streams 通过 grouping 中指定的字段 (field) 来分组，与 <code>Fields Grouping</code> 相似。但是对于两个下游的 Bolt 来说是负载均衡的，可以在输入数据不平均的情况下提供更好的优化。</p>\n</li>\n<li><p><strong>All grouping</strong></p>\n<p>Streams 会被所有的 Bolt 的 Tasks 进行复制。由于存在数据重复处理，所以需要谨慎使用。</p>\n</li>\n<li><p><strong>Global grouping</strong></p>\n<p>整个 Streams 会进入 Bolt 的其中一个 Task，通常会进入 id 最小的 Task。</p>\n</li>\n<li><p><strong>None grouping</strong></p>\n<p>当前 None grouping 和 Shuffle grouping 等价，都是进行随机分发。</p>\n</li>\n<li><p><strong>Direct grouping</strong></p>\n<p>Direct grouping 只能被用于 direct streams 。使用这种方式需要由 Tuple 的生产者直接指定由哪个 Task 进行处理。</p>\n</li>\n<li><p><strong>Local or shuffle grouping</strong></p>\n<p>如果目标 Bolt 有 Tasks 和当前 Bolt 的 Tasks 处在同一个 Worker 进程中，那么则优先将 Tuple Shuffled 到处于同一个进程的目标 Bolt 的 Tasks 上，这样可以最大限度地减少网络传输。否则，就和普通的 <code>Shuffle Grouping</code> 行为一致。</p>\n</li>\n</ol>\n<h2 id=\"二、Storm架构详解\"><a href=\"#二、Storm架构详解\" class=\"headerlink\" title=\"二、Storm架构详解\"></a>二、Storm架构详解</h2><p><img src=\"/2020/01/16/zhen-zheng-yi-yi-de-liu-shi-chu-li-kuang-jia-strom/2.png\" alt></p>\n<h3 id=\"2-1-Nimbus进程\"><a href=\"#2-1-Nimbus进程\" class=\"headerlink\" title=\"2.1 Nimbus进程\"></a>2.1 Nimbus进程</h3><p>也叫做 Master Node，是 Storm 集群工作的全局指挥官。主要功能如下：</p>\n<ol>\n<li>通过 Thrift 接口，监听并接收 Client 提交的 Topology；</li>\n<li>根据集群 Workers 的资源情况，将 Client 提交的 Topology 进行任务分配，分配结果写入 Zookeeper;</li>\n<li>通过 Thrift 接口，监听 Supervisor 的下载 Topology 代码的请求，并提供下载 ;</li>\n<li>通过 Thrift 接口，监听 UI 对统计信息的读取，从 Zookeeper 上读取统计信息，返回给 UI;</li>\n<li>若进程退出后，立即在本机重启，则不影响集群运行。</li>\n</ol>\n<h3 id=\"2-2-Supervisor进程\"><a href=\"#2-2-Supervisor进程\" class=\"headerlink\" title=\"2.2 Supervisor进程\"></a>2.2 Supervisor进程</h3><p>也叫做 Worker Node , 是 Storm 集群的资源管理者，按需启动 Worker 进程。主要功能如下：</p>\n<ol>\n<li>定时从 Zookeeper 检查是否有新 Topology 代码未下载到本地 ，并定时删除旧 Topology 代码 ;</li>\n<li>根据 Nimbus 的任务分配计划，在本机按需启动 1 个或多个 Worker 进程，并监控所有的 Worker 进程的情况；</li>\n<li>若进程退出，立即在本机重启，则不影响集群运行。</li>\n</ol>\n<h3 id=\"2-3-zookeeper的作用\"><a href=\"#2-3-zookeeper的作用\" class=\"headerlink\" title=\"2.3 zookeeper的作用\"></a>2.3 zookeeper的作用</h3><p>Nimbus 和 Supervisor 进程都被设计为<strong>快速失败</strong>（遇到任何意外情况时进程自毁）和<strong>无状态</strong>（所有状态保存在 Zookeeper 或磁盘上）。 这样设计的好处就是如果它们的进程被意外销毁，那么在重新启动后，就只需要从 Zookeeper 上获取之前的状态数据即可，并不会造成任何数据丢失。</p>\n<h3 id=\"2-4-Worker进程\"><a href=\"#2-4-Worker进程\" class=\"headerlink\" title=\"2.4 Worker进程\"></a>2.4 Worker进程</h3><p>Storm 集群的任务构造者 ，构造 Spoult 或 Bolt 的 Task 实例，启动 Executor 线程。主要功能如下：</p>\n<ol>\n<li>根据 Zookeeper 上分配的 Task，在本进程中启动 1 个或多个 Executor 线程，将构造好的 Task 实例交给 Executor 去运行；</li>\n<li>向 Zookeeper 写入心跳 ；</li>\n<li>维持传输队列，发送 Tuple 到其他的 Worker ；</li>\n<li>若进程退出，立即在本机重启，则不影响集群运行。</li>\n</ol>\n<h3 id=\"2-5-Executor线程\"><a href=\"#2-5-Executor线程\" class=\"headerlink\" title=\"2.5 Executor线程\"></a>2.5 Executor线程</h3><p>Storm 集群的任务执行者 ，循环执行 Task 代码。主要功能如下：</p>\n<ol>\n<li>执行 1 个或多个 Task；</li>\n<li>执行 Acker 机制，负责发送 Task 处理状态给对应 Spout 所在的 worker。</li>\n</ol>\n<h3 id=\"2-6-并行度\"><a href=\"#2-6-并行度\" class=\"headerlink\" title=\"2.6 并行度\"></a>2.6 并行度</h3><p><img src=\"/2020/01/16/zhen-zheng-yi-yi-de-liu-shi-chu-li-kuang-jia-strom/3.png\" alt></p>\n<p>1 个 Worker 进程执行的是 1 个 Topology 的子集，不会出现 1 个 Worker 为多个 Topology 服务的情况，因此 1 个运行中的 Topology 就是由集群中多台物理机上的多个 Worker 进程组成的。1 个 Worker 进程会启动 1 个或多个 Executor 线程来执行 1 个 Topology 的 Component(组件，即 Spout 或 Bolt)。</p>\n<p>Executor 是 1 个被 Worker 进程启动的单独线程。每个 Executor 会运行 1 个 Component 中的一个或者多个 Task。</p>\n<p>Task 是组成 Component 的代码单元。Topology 启动后，1 个 Component 的 Task 数目是固定不变的，但该 Component 使用的 Executor 线程数可以动态调整（例如：1 个 Executor 线程可以执行该 Component 的 1 个或多个 Task 实例）。这意味着，对于 1 个 Component 来说，<code>#threads&lt;=#tasks</code>（线程数小于等于 Task 数目）这样的情况是存在的。默认情况下 Task 的数目等于 Executor 线程数，即 1 个 Executor 线程只运行 1 个 Task。</p>\n<p><strong>总结如下：</strong></p>\n<ul>\n<li>一个运行中的 Topology 由集群中的多个 Worker 进程组成的；</li>\n<li>在默认情况下，每个 Worker 进程默认启动一个 Executor 线程；</li>\n<li>在默认情况下，每个 Executor 默认启动一个 Task 线程；</li>\n<li>Task 是组成 Component 的代码单元。</li>\n</ul>\n<h1 id=\"Strom实战入门\"><a href=\"#Strom实战入门\" class=\"headerlink\" title=\"Strom实战入门\"></a>Strom实战入门</h1><p><strong>第一步引入依赖</strong></p>\n<pre><code class=\"xml\">&lt;--使用storm有这个就够了--&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.storm&lt;/groupId&gt;\n        &lt;artifactId&gt;storm-client&lt;/artifactId&gt;\n        &lt;version&gt;2.0.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.apache.storm&lt;/groupId&gt;\n        &lt;artifactId&gt;storm-hbase&lt;/artifactId&gt;\n        &lt;version&gt;2.0.0&lt;/version&gt;\n    &lt;/dependency&gt;</code></pre>\n<p><strong>第二步编写Spout获取从HBase中获取数据,类实现IRichSpout接口(也可以继承BaseRichSpout,里面实现了一些基础功能)</strong></p>\n<pre><code class=\"java\">public class EventSpout implements IRichSpout {\n\n    private SpoutOutputCollector spoutOutputCollector;\n\n    private HBaseDao hBaseDao = null;\n\n    private Long startRowKey = 1566377894517L;\n\n    private Long endRowKey = startRowKey + 300000L;\n\n    private List&lt;Result&gt; result = null;\n\n    public void open(Map map, TopologyContext topologyContext, SpoutOutputCollector spoutOutputCollector) {\n        this.spoutOutputCollector = spoutOutputCollector;\n        hBaseDao = new HBaseDaoImpl();\n    }\n\n    public void nextTuple() {\n        if (result == null || result.size() &lt;= 0){\n            result = hBaseDao.getRows(&quot;mjw:tb_event&quot;, startRowKey.toString(),endRowKey.toString());\n\n            startRowKey = endRowKey + 1;\n            long current = System.currentTimeMillis();\n            endRowKey = endRowKey + 300000 &gt; current ? current : endRowKey + 300000;\n\n        }\n        if (result != null &amp;&amp; result.size() &gt;0){\n            Result result = this.result.remove(0);\n            Cell[] cells = result.rawCells();\n            for (Cell cell : cells) {\n                if (Bytes.toString(CellUtil.cloneQualifier(cell)).equals(&quot;name&quot;)){\n                    String name = Bytes.toString(CellUtil.cloneValue(cell));\n                    spoutOutputCollector.emit(new Values(name));\n                }\n            }\n        }\n }</code></pre>\n<p><strong>第三步编写Bolt获取处理数据,编写类实现IRichBolt接口</strong></p>\n<pre><code class=\"java\">public class SelectEventBlot implements IRichBolt {\n\n    private OutputCollector outputCollector;\n\n    private HBaseDaoImpl hBaseDao;\n\n    private String event = null;\n\n    private String type = null;\n\n    public void prepare(Map map, TopologyContext topologyContext, OutputCollector outputCollector) {\n        this.outputCollector = outputCollector;\n        hBaseDao = new HBaseDaoImpl();\n    }\n\n    public void execute(Tuple tuple) {\n        String name = tuple.getString(0);\n        hBaseDao.insert(&quot;mjw:tb_event_count1&quot;,&quot;test&quot;,&quot;track&quot;,&quot;test&quot;,name);\n        try{\n            traveseJson(new JSONObject(name));\n            hBaseDao.insert(&quot;mjw:tb_event_count1&quot;,type,&quot;track&quot;,type,type);\n            outputCollector.emit(new Values(event,type));\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n    public void declareOutputFields(OutputFieldsDeclarer outputFieldsDeclarer) {\n        outputFieldsDeclarer.declare(new Fields(&quot;event&quot;,&quot;type&quot;));\n    }\n\n    public void traveseJson(Object json){\n\n        if(json == null){\n            return;\n        }\n        if(json instanceof JSONObject){//json 是一个map\n            //将json转换为JsonObject对象\n            JSONObject jsonStr = (JSONObject) json;\n            //迭代器迭代 map集合所有的keys\n            Iterator it = jsonStr.keys();\n            while(it.hasNext()){\n                //获取map的key\n                String key = (String) it.next();\n                //得到value的值\n                Object value = jsonStr.get(key);\n                if (key.equals(&quot;type&quot;)){\n                    type = (String) value;\n                }\n                if (key.equals(&quot;event&quot;)){\n                    event = (String) value;\n                }\n                //递归遍历\n               traveseJson(value);\n            }\n        }else if(json instanceof JSONArray){// if  json 是 数组\n            JSONArray jsonStr = (JSONArray) json;\n            //获取Array 的长度\n            int length = jsonStr.length();\n            for (int i = 0; i &lt;length; i++) {\n                traveseJson(jsonStr.get(i));\n            }\n        }else {//其他类型\n            return ;\n        }\n    }\n}</code></pre>\n<p><strong>第四步编写Bolt保存数据(如果逻辑简单,一个bolt就可以了)</strong></p>\n<pre><code class=\"java\">public class SaveEventBlot implements IRichBolt {\n\n    private Map eventMap = new HashMap&lt;String,Integer&gt;();\n\n    private Map typeMap = new HashMap&lt;String,String&gt;();\n\n    private Long beginTime = 0L;\n\n    private Long endTime = 0L;\n\n    private HBaseDao hBaseDao = null;\n\n    public void execute(Tuple tuple) {\n        if (tuple != null){\n            String event = tuple.getString(0);\n            if (eventMap.containsKey(event)){\n                eventMap.put(event,(Integer)eventMap.get(event) + 1);\n            }else {\n                eventMap.put(event,1);\n            }\n            String type = tuple.getString(1);\n            if (!typeMap.containsKey(event)){\n                typeMap.put(event,type);\n            }\n            endTime = System.currentTimeMillis();\n            if (endTime - beginTime &gt;= 5000) {\n                // 5s 写一次库\n                for (Object key : eventMap.keySet()) {\n                    Result result = hBaseDao.getOneRow(&quot;mjw:tb_event_count1&quot;, typeMap.get(key) + &quot;&quot; + key.toString());\n                    Integer value = null;\n                    if (result != null) {\n                        Cell[] cells = result.rawCells();\n                        int add_value = 0;\n                        for (Cell cell : cells) {\n                            add_value = Integer.parseInt(Bytes.toString(CellUtil.cloneValue(cell)));\n                        }\n                         value = add_value +(Integer) eventMap.get(key);\n                    }\n                    hBaseDao.insert(&quot;mjw:tb_event_count1&quot;,typeMap.get(key) + &quot;&quot; + key.toString(),(String) typeMap.get(key),key.toString(),value.toString());\n                }\n\n                //重置时间map\n                eventMap = new HashMap&lt;String,Integer&gt;();\n                // 需要重置初始时间\n                beginTime = System.currentTimeMillis();\n            }\n        }\n    }\n\n    public Map&lt;String, Object&gt; getComponentConfiguration() {\n        return null;\n    }\n\n    public void prepare(Map&lt;String, Object&gt; map, TopologyContext topologyContext, OutputCollector outputCollector) {\n        hBaseDao = new HBaseDaoImpl();\n        beginTime = System.currentTimeMillis();\n    }\n}</code></pre>\n<p><strong>第五步编写启动类,构建整个拓扑结构,然后提交任务</strong></p>\n<pre><code class=\"java\">public class EventTopology {\n    public static void main(String[] args) {\n        TopologyBuilder builder = new TopologyBuilder();\n        builder.setSpout(&quot;spout&quot;,new EventSpout());\n        builder.setBolt(&quot;select_blot&quot;, new SelectEventBlot()).shuffleGrouping(&quot;spout&quot;);\n        builder.setBolt(&quot;save_blot&quot;, new SaveEventBlot()).shuffleGrouping(&quot;select_blot&quot;);\n        Config config = new Config();\n        if (args.length &gt; 0){\n            try {\n                StormSubmitter.submitTopology(args[0],config,builder.createTopology());\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}</code></pre>\n"},{"title":"稳定排序与非稳定排序的应用场景","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-22T12:55:27.000Z","password":null,"summary":null,"_content":"\n### 稳定非稳定如何界定\n\n![](稳定排序与非稳定排序的应用场景/stable1.png)\n\n原始数据，a2和a4的位置都是3。对于稳定排序来说，排序后的序列，a2一定还是在a4前面。但是对于非稳定排序来说，就不一定了，可能排完序之后，a4反而在a2的前面了。\n\n哪些常用算法是稳定的，哪些是不稳定的呢？\n\n**(1)冒泡排序** \n        冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，我想你是不会再无聊地把他们俩交换一下的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法。 \n**(2)选择排序** \n      选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n-1个元素，第n个元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么交换后稳定性就被破坏了。比较拗口，举个例子，序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。 \n**(3)插入排序**\n     插入排序是在一个已经有序的小序列的基础上，一次插入一个元素。当然，刚开始这个有序的小序列只有1个元素，就是第一个元素。比较是从有序序列的末尾开始，也就是想要插入的元素和已经有序的最大者开始比起，如果比它大则直接插入在其后面，否则一直往前找直到找到它该插入的位置。如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳定的。\n\n**(4)快速排序**\n    快速排序有两个方向，左边的i下标一直往右走，当a[i] <= a[center_index]，其中center_index是中枢元素的数组下标，一般取为数组第0个元素。而右边的j下标一直往左走，当a[j] > a[center_index]。如果i和j都走不动了，i <= j, 交换a[i]和a[j],重复上面的过程，直到i>j。交换a[j]和a[center_index]，完成一趟快速排序。在中枢元素和a[j]交换的时候，很有可能把前面的元素的稳定性打乱，比如序列为 5 3 3 4 3 8 9 10 11，现在中枢元素5和3(第5个元素，下标从1开始计)交换就会把元素3的稳定性打乱，所以快速排序是一个不稳定的排序算法，不稳定发生在中枢元素和a[j] 交换的时刻。\n\n**(5)归并排序** \n    归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素(认为直接有序)或者2个序列(1次比较和交换),然后把各个有序的段序列合并成一个有序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定性。那么，在短的有序序列合并的过程中，稳定是是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。 \n**(6)基数排序** \n   基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序，最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以其是稳定的排序算法。 \n**(7)希尔排序(shell)**\n    希尔排序是按照不同步长对元素进行插入排序，当刚开始元素很无序的时候，步长最大，所以插入排序的元素个数很少，速度很快；当元素基本有序了，步长很小，插入排序对于有序的序列效率很高。所以，希尔排序的时间复杂度会比o(n^2)好一些。由于多次插入排序，我们知道一次插入排序是稳定的，不会改变相同元素的相对顺序，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱，所以shell排序是不稳定的。 \n**(8)堆排序** \n   我们知道堆的结构是节点i的孩子为2*i和2*i+1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n 的序列，堆排序的过程是从第n/2开始和其子节点共3个值选择最大(大顶堆)或者最小(小顶堆),这3个元素之间的选择当然不会破坏稳定性。但当为n /2-1, n/2-2, ...1这些个父节点选择元素时，就会破坏稳定性。有可能第n/2个父节点交换把后面一个元素交换过去了，而第n/2-1个父节点把后面一个相同的元素没有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法。\n\n![](稳定排序与非稳定排序的应用场景/0_1275286328kIDC.png)\n\n综上，得出结论: 选择排序、快速排序、希尔排序、堆排序不是稳定的排序算法，而冒泡排序、插入排序、归并排序和基数排序是稳定的排序算法。\n\n**思考**：既然最后都是有序序列，为什么还要分稳定和非稳定的排序呢？\n\n### 为什么要分稳定和非稳定呢？\n\n**看一个典型的场景：每次考试完成后，都会按照分数进行排序。分高的自然就是第一名。分数相同的同学怎么办呢？那就是按照上次的分数来分高低。上次分高的排在前面。**\n\n**这个时候就应该用稳定排序，在上次排好序的序列上，再针对这次的分数进行排序。稳定排序的结果能保证这次相同分数的人，上次分高的在前面。**\n\n**再比如我们熟知的基数排序与计数排序,当对最后一位进行计数排序后,当倒数第二位的数字相同时,必须保证第一轮技术排序排在前面的经过重排后还在前面。这时就需要计数排序是稳定的。**\n\n**其实就是有两个排序关键字的时候，稳定排序可以让第一个关键字排序的结果服务于第二个关键字排序中数值相等的那些数。**","source":"_posts/稳定排序与非稳定排序的应用场景.md","raw":"---\ntitle: 稳定排序与非稳定排序的应用场景\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-22 20:55:27\npassword:\nsummary:\ntags:\ncategories: 数据结构\n---\n\n### 稳定非稳定如何界定\n\n![](稳定排序与非稳定排序的应用场景/stable1.png)\n\n原始数据，a2和a4的位置都是3。对于稳定排序来说，排序后的序列，a2一定还是在a4前面。但是对于非稳定排序来说，就不一定了，可能排完序之后，a4反而在a2的前面了。\n\n哪些常用算法是稳定的，哪些是不稳定的呢？\n\n**(1)冒泡排序** \n        冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，我想你是不会再无聊地把他们俩交换一下的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法。 \n**(2)选择排序** \n      选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n-1个元素，第n个元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么交换后稳定性就被破坏了。比较拗口，举个例子，序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。 \n**(3)插入排序**\n     插入排序是在一个已经有序的小序列的基础上，一次插入一个元素。当然，刚开始这个有序的小序列只有1个元素，就是第一个元素。比较是从有序序列的末尾开始，也就是想要插入的元素和已经有序的最大者开始比起，如果比它大则直接插入在其后面，否则一直往前找直到找到它该插入的位置。如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳定的。\n\n**(4)快速排序**\n    快速排序有两个方向，左边的i下标一直往右走，当a[i] <= a[center_index]，其中center_index是中枢元素的数组下标，一般取为数组第0个元素。而右边的j下标一直往左走，当a[j] > a[center_index]。如果i和j都走不动了，i <= j, 交换a[i]和a[j],重复上面的过程，直到i>j。交换a[j]和a[center_index]，完成一趟快速排序。在中枢元素和a[j]交换的时候，很有可能把前面的元素的稳定性打乱，比如序列为 5 3 3 4 3 8 9 10 11，现在中枢元素5和3(第5个元素，下标从1开始计)交换就会把元素3的稳定性打乱，所以快速排序是一个不稳定的排序算法，不稳定发生在中枢元素和a[j] 交换的时刻。\n\n**(5)归并排序** \n    归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素(认为直接有序)或者2个序列(1次比较和交换),然后把各个有序的段序列合并成一个有序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定性。那么，在短的有序序列合并的过程中，稳定是是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。 \n**(6)基数排序** \n   基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序，最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以其是稳定的排序算法。 \n**(7)希尔排序(shell)**\n    希尔排序是按照不同步长对元素进行插入排序，当刚开始元素很无序的时候，步长最大，所以插入排序的元素个数很少，速度很快；当元素基本有序了，步长很小，插入排序对于有序的序列效率很高。所以，希尔排序的时间复杂度会比o(n^2)好一些。由于多次插入排序，我们知道一次插入排序是稳定的，不会改变相同元素的相对顺序，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱，所以shell排序是不稳定的。 \n**(8)堆排序** \n   我们知道堆的结构是节点i的孩子为2*i和2*i+1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n 的序列，堆排序的过程是从第n/2开始和其子节点共3个值选择最大(大顶堆)或者最小(小顶堆),这3个元素之间的选择当然不会破坏稳定性。但当为n /2-1, n/2-2, ...1这些个父节点选择元素时，就会破坏稳定性。有可能第n/2个父节点交换把后面一个元素交换过去了，而第n/2-1个父节点把后面一个相同的元素没有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法。\n\n![](稳定排序与非稳定排序的应用场景/0_1275286328kIDC.png)\n\n综上，得出结论: 选择排序、快速排序、希尔排序、堆排序不是稳定的排序算法，而冒泡排序、插入排序、归并排序和基数排序是稳定的排序算法。\n\n**思考**：既然最后都是有序序列，为什么还要分稳定和非稳定的排序呢？\n\n### 为什么要分稳定和非稳定呢？\n\n**看一个典型的场景：每次考试完成后，都会按照分数进行排序。分高的自然就是第一名。分数相同的同学怎么办呢？那就是按照上次的分数来分高低。上次分高的排在前面。**\n\n**这个时候就应该用稳定排序，在上次排好序的序列上，再针对这次的分数进行排序。稳定排序的结果能保证这次相同分数的人，上次分高的在前面。**\n\n**再比如我们熟知的基数排序与计数排序,当对最后一位进行计数排序后,当倒数第二位的数字相同时,必须保证第一轮技术排序排在前面的经过重排后还在前面。这时就需要计数排序是稳定的。**\n\n**其实就是有两个排序关键字的时候，稳定排序可以让第一个关键字排序的结果服务于第二个关键字排序中数值相等的那些数。**","slug":"稳定排序与非稳定排序的应用场景","published":1,"updated":"2020-02-26T06:52:48.175Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mle1002mvkvyn1jomnu5","content":"<h3 id=\"稳定非稳定如何界定\"><a href=\"#稳定非稳定如何界定\" class=\"headerlink\" title=\"稳定非稳定如何界定\"></a>稳定非稳定如何界定</h3><p><img src=\"/2020/01/22/wen-ding-pai-xu-yu-fei-wen-ding-pai-xu-de-ying-yong-chang-jing/stable1.png\" alt></p>\n<p>原始数据，a2和a4的位置都是3。对于稳定排序来说，排序后的序列，a2一定还是在a4前面。但是对于非稳定排序来说，就不一定了，可能排完序之后，a4反而在a2的前面了。</p>\n<p>哪些常用算法是稳定的，哪些是不稳定的呢？</p>\n<p><strong>(1)冒泡排序</strong><br>        冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，我想你是不会再无聊地把他们俩交换一下的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法。<br><strong>(2)选择排序</strong><br>      选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n-1个元素，第n个元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么交换后稳定性就被破坏了。比较拗口，举个例子，序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。<br><strong>(3)插入排序</strong><br>     插入排序是在一个已经有序的小序列的基础上，一次插入一个元素。当然，刚开始这个有序的小序列只有1个元素，就是第一个元素。比较是从有序序列的末尾开始，也就是想要插入的元素和已经有序的最大者开始比起，如果比它大则直接插入在其后面，否则一直往前找直到找到它该插入的位置。如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳定的。</p>\n<p><strong>(4)快速排序</strong><br>    快速排序有两个方向，左边的i下标一直往右走，当a[i] &lt;= a[center_index]，其中center_index是中枢元素的数组下标，一般取为数组第0个元素。而右边的j下标一直往左走，当a[j] &gt; a[center_index]。如果i和j都走不动了，i &lt;= j, 交换a[i]和a[j],重复上面的过程，直到i&gt;j。交换a[j]和a[center_index]，完成一趟快速排序。在中枢元素和a[j]交换的时候，很有可能把前面的元素的稳定性打乱，比如序列为 5 3 3 4 3 8 9 10 11，现在中枢元素5和3(第5个元素，下标从1开始计)交换就会把元素3的稳定性打乱，所以快速排序是一个不稳定的排序算法，不稳定发生在中枢元素和a[j] 交换的时刻。</p>\n<p><strong>(5)归并排序</strong><br>    归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素(认为直接有序)或者2个序列(1次比较和交换),然后把各个有序的段序列合并成一个有序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定性。那么，在短的有序序列合并的过程中，稳定是是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。<br><strong>(6)基数排序</strong><br>   基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序，最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以其是稳定的排序算法。<br><strong>(7)希尔排序(shell)</strong><br>    希尔排序是按照不同步长对元素进行插入排序，当刚开始元素很无序的时候，步长最大，所以插入排序的元素个数很少，速度很快；当元素基本有序了，步长很小，插入排序对于有序的序列效率很高。所以，希尔排序的时间复杂度会比o(n^2)好一些。由于多次插入排序，我们知道一次插入排序是稳定的，不会改变相同元素的相对顺序，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱，所以shell排序是不稳定的。<br><strong>(8)堆排序</strong><br>   我们知道堆的结构是节点i的孩子为2<em>i和2</em>i+1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n 的序列，堆排序的过程是从第n/2开始和其子节点共3个值选择最大(大顶堆)或者最小(小顶堆),这3个元素之间的选择当然不会破坏稳定性。但当为n /2-1, n/2-2, …1这些个父节点选择元素时，就会破坏稳定性。有可能第n/2个父节点交换把后面一个元素交换过去了，而第n/2-1个父节点把后面一个相同的元素没有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法。</p>\n<p><img src=\"/2020/01/22/wen-ding-pai-xu-yu-fei-wen-ding-pai-xu-de-ying-yong-chang-jing/0_1275286328kIDC.png\" alt></p>\n<p>综上，得出结论: 选择排序、快速排序、希尔排序、堆排序不是稳定的排序算法，而冒泡排序、插入排序、归并排序和基数排序是稳定的排序算法。</p>\n<p><strong>思考</strong>：既然最后都是有序序列，为什么还要分稳定和非稳定的排序呢？</p>\n<h3 id=\"为什么要分稳定和非稳定呢？\"><a href=\"#为什么要分稳定和非稳定呢？\" class=\"headerlink\" title=\"为什么要分稳定和非稳定呢？\"></a>为什么要分稳定和非稳定呢？</h3><p><strong>看一个典型的场景：每次考试完成后，都会按照分数进行排序。分高的自然就是第一名。分数相同的同学怎么办呢？那就是按照上次的分数来分高低。上次分高的排在前面。</strong></p>\n<p><strong>这个时候就应该用稳定排序，在上次排好序的序列上，再针对这次的分数进行排序。稳定排序的结果能保证这次相同分数的人，上次分高的在前面。</strong></p>\n<p><strong>再比如我们熟知的基数排序与计数排序,当对最后一位进行计数排序后,当倒数第二位的数字相同时,必须保证第一轮技术排序排在前面的经过重排后还在前面。这时就需要计数排序是稳定的。</strong></p>\n<p><strong>其实就是有两个排序关键字的时候，稳定排序可以让第一个关键字排序的结果服务于第二个关键字排序中数值相等的那些数。</strong></p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h3 id=\"稳定非稳定如何界定\"><a href=\"#稳定非稳定如何界定\" class=\"headerlink\" title=\"稳定非稳定如何界定\"></a>稳定非稳定如何界定</h3><p><img src=\"/2020/01/22/wen-ding-pai-xu-yu-fei-wen-ding-pai-xu-de-ying-yong-chang-jing/stable1.png\" alt></p>\n<p>原始数据，a2和a4的位置都是3。对于稳定排序来说，排序后的序列，a2一定还是在a4前面。但是对于非稳定排序来说，就不一定了，可能排完序之后，a4反而在a2的前面了。</p>\n<p>哪些常用算法是稳定的，哪些是不稳定的呢？</p>\n<p><strong>(1)冒泡排序</strong><br>        冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，我想你是不会再无聊地把他们俩交换一下的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法。<br><strong>(2)选择排序</strong><br>      选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第n-1个元素，第n个元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么交换后稳定性就被破坏了。比较拗口，举个例子，序列5 8 5 2 9，我们知道第一遍选择第1个元素5会和2交换，那么原序列中2个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。<br><strong>(3)插入排序</strong><br>     插入排序是在一个已经有序的小序列的基础上，一次插入一个元素。当然，刚开始这个有序的小序列只有1个元素，就是第一个元素。比较是从有序序列的末尾开始，也就是想要插入的元素和已经有序的最大者开始比起，如果比它大则直接插入在其后面，否则一直往前找直到找到它该插入的位置。如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳定的。</p>\n<p><strong>(4)快速排序</strong><br>    快速排序有两个方向，左边的i下标一直往右走，当a[i] &lt;= a[center_index]，其中center_index是中枢元素的数组下标，一般取为数组第0个元素。而右边的j下标一直往左走，当a[j] &gt; a[center_index]。如果i和j都走不动了，i &lt;= j, 交换a[i]和a[j],重复上面的过程，直到i&gt;j。交换a[j]和a[center_index]，完成一趟快速排序。在中枢元素和a[j]交换的时候，很有可能把前面的元素的稳定性打乱，比如序列为 5 3 3 4 3 8 9 10 11，现在中枢元素5和3(第5个元素，下标从1开始计)交换就会把元素3的稳定性打乱，所以快速排序是一个不稳定的排序算法，不稳定发生在中枢元素和a[j] 交换的时刻。</p>\n<p><strong>(5)归并排序</strong><br>    归并排序是把序列递归地分成短序列，递归出口是短序列只有1个元素(认为直接有序)或者2个序列(1次比较和交换),然后把各个有序的段序列合并成一个有序的长序列，不断合并直到原序列全部排好序。可以发现，在1个或2个元素时，1个元素不会交换，2个元素如果大小相等也没有人故意交换，这不会破坏稳定性。那么，在短的有序序列合并的过程中，稳定是是否受到破坏？没有，合并过程中我们可以保证如果两个当前元素相等时，我们把处在前面的序列的元素保存在结果序列的前面，这样就保证了稳定性。所以，归并排序也是稳定的排序算法。<br><strong>(6)基数排序</strong><br>   基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序，最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以其是稳定的排序算法。<br><strong>(7)希尔排序(shell)</strong><br>    希尔排序是按照不同步长对元素进行插入排序，当刚开始元素很无序的时候，步长最大，所以插入排序的元素个数很少，速度很快；当元素基本有序了，步长很小，插入排序对于有序的序列效率很高。所以，希尔排序的时间复杂度会比o(n^2)好一些。由于多次插入排序，我们知道一次插入排序是稳定的，不会改变相同元素的相对顺序，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱，所以shell排序是不稳定的。<br><strong>(8)堆排序</strong><br>   我们知道堆的结构是节点i的孩子为2<em>i和2</em>i+1节点，大顶堆要求父节点大于等于其2个子节点，小顶堆要求父节点小于等于其2个子节点。在一个长为n 的序列，堆排序的过程是从第n/2开始和其子节点共3个值选择最大(大顶堆)或者最小(小顶堆),这3个元素之间的选择当然不会破坏稳定性。但当为n /2-1, n/2-2, …1这些个父节点选择元素时，就会破坏稳定性。有可能第n/2个父节点交换把后面一个元素交换过去了，而第n/2-1个父节点把后面一个相同的元素没有交换，那么这2个相同的元素之间的稳定性就被破坏了。所以，堆排序不是稳定的排序算法。</p>\n<p><img src=\"/2020/01/22/wen-ding-pai-xu-yu-fei-wen-ding-pai-xu-de-ying-yong-chang-jing/0_1275286328kIDC.png\" alt></p>\n<p>综上，得出结论: 选择排序、快速排序、希尔排序、堆排序不是稳定的排序算法，而冒泡排序、插入排序、归并排序和基数排序是稳定的排序算法。</p>\n<p><strong>思考</strong>：既然最后都是有序序列，为什么还要分稳定和非稳定的排序呢？</p>\n<h3 id=\"为什么要分稳定和非稳定呢？\"><a href=\"#为什么要分稳定和非稳定呢？\" class=\"headerlink\" title=\"为什么要分稳定和非稳定呢？\"></a>为什么要分稳定和非稳定呢？</h3><p><strong>看一个典型的场景：每次考试完成后，都会按照分数进行排序。分高的自然就是第一名。分数相同的同学怎么办呢？那就是按照上次的分数来分高低。上次分高的排在前面。</strong></p>\n<p><strong>这个时候就应该用稳定排序，在上次排好序的序列上，再针对这次的分数进行排序。稳定排序的结果能保证这次相同分数的人，上次分高的在前面。</strong></p>\n<p><strong>再比如我们熟知的基数排序与计数排序,当对最后一位进行计数排序后,当倒数第二位的数字相同时,必须保证第一轮技术排序排在前面的经过重排后还在前面。这时就需要计数排序是稳定的。</strong></p>\n<p><strong>其实就是有两个排序关键字的时候，稳定排序可以让第一个关键字排序的结果服务于第二个关键字排序中数值相等的那些数。</strong></p>\n"},{"title":"红黑树的建立与维护","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-16T14:05:01.000Z","password":null,"summary":null,"_content":"\n### 红黑树介绍\n\n红黑树(Red-Black Tree，简称R-B Tree)，它一种特殊的二叉查找树。 \n红黑树是特殊的二叉查找树，意味着它满足二叉查找树的特征：任意一个节点所包含的键值，大于等于左孩子的键值，小于等于右孩子的键值。 \n除了具备该特性之外，红黑树还包括许多额外的信息。\n\n红黑树的每个节点上都有存储位表示节点的颜色，颜色是红(Red)或黑(Black)。\n\n红黑树的特性: \n(1) 每个节点或者是黑色，或者是红色。 \n(2) 根节点是黑色。 \n(3) 每个叶子节点是黑色。 [注意：这里叶子节点，是指为空的叶子节点！] \n(4) 如果一个节点是红色的，则它的子节点必须是黑色的。 \n(5) 从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。\n\n关于它的特性，需要注意的是： \n第一，特性(3)中的叶子节点，是只为空(NIL或null)的节点。 \n第二，特性(5)，确保没有一条路径会比其他路径长出俩倍。因而，红黑树是相对是接近平衡的二叉树。\n\n红黑树的主要是想对2-3查找树进行编码，尤其是对2-3查找树中的3-nodes节点添加额外的信息。红黑树中将节点之间的链接分为两种不同类型，红色链接，他用来链接两个2-nodes节点来表示一个3-nodes节点。黑色链接用来链接普通的2-3节点。特别的，使用红色链接的两个2-nodes来表示一个3-nodes节点，并且向左倾斜，即一个2-node是另一个2-node的左子节点。这种做法的好处是查找的时候不用做任何修改，和普通的二叉查找树相同。\n\n根据以上描述，红黑树定义如下：\n\n红黑树是一种具有红色和黑色链接的平衡查找树，同时满足：\n\n1.红色节点向左倾斜 \n2.一个节点不可能有两个红色链接 \n3.整个树完全黑色平衡，即从根节点到所以叶子结点的路径上，黑色链接的个数都相同。\n\n下图可以看到红黑树其实是2-3树的另外一种表现形式：如果我们将红色的连线水平绘制，那么他链接的两个2-node节点就是2-3树中的一个3-node节点了。\n\n![](红黑树的建立与维护/1.png)\n\n### 红黑树java代码实现\n\n```java\nimport java.util.ArrayList;\n\npublic class RBTree<K extends Comparable<K>, V> {\n\n    private static final boolean RED = true;\n    private static final boolean BLACK = false;\n\n    private class Node{\n        public K key;\n        public V value;\n        public Node left, right;\n        public boolean color;\n\n        public Node(K key, V value){\n            this.key = key;\n            this.value = value;\n            left = null;\n            right = null;\n            color = RED;\n        }\n    }\n\n    private Node root;\n    private int size;\n\n    public RBTree(){\n        root = null;\n        size = 0;\n    }\n\n    public int getSize(){\n        return size;\n    }\n\n    public boolean isEmpty(){\n        return size == 0;\n    }\n\n    // 判断节点node的颜色\n    private boolean isRed(Node node){\n        if(node == null)\n            return BLACK;\n        return node.color;\n    }\n\n    //   node                     x\n    //  /   \\     左旋转         /  \\\n    // T1   x   --------->   node   T3\n    //     / \\              /   \\\n    //    T2 T3            T1   T2\n    private Node leftRotate(Node node){\n\n        Node x = node.right;\n\n        // 左旋转\n        node.right = x.left;\n        x.left = node;\n\n        x.color = node.color;\n        node.color = RED;\n\n        return x;\n    }\n\n    //     node                   x\n    //    /   \\     右旋转       /  \\\n    //   x    T2   ------->   y   node\n    //  / \\                       /  \\\n    // y  T1                     T1  T2\n    private Node rightRotate(Node node){\n\n        Node x = node.left;\n\n        // 右旋转\n        node.left = x.right;\n        x.right = node;\n\n        x.color = node.color;\n        node.color = RED;\n\n        return x;\n    }\n\n    // 颜色翻转\n    private void flipColors(Node node){\n\n        node.color = RED;\n        node.left.color = BLACK;\n        node.right.color = BLACK;\n    }\n\n    // 向红黑树中添加新的元素(key, value)\n    public void add(K key, V value){\n        root = add(root, key, value);\n        root.color = BLACK; // 最终根节点为黑色节点\n    }\n\n    // 向以node为根的红黑树中插入元素(key, value)，递归算法\n    // 返回插入新节点后红黑树的根\n    private Node add(Node node, K key, V value){\n\n        if(node == null){\n            size ++;\n            return new Node(key, value); // 默认插入红色节点\n        }\n\n        if(key.compareTo(node.key) < 0)\n            node.left = add(node.left, key, value);\n        else if(key.compareTo(node.key) > 0)\n            node.right = add(node.right, key, value);\n        else // key.compareTo(node.key) == 0\n            node.value = value;\n\n        if (isRed(node.right) && !isRed(node.left))\n            node = leftRotate(node);\n\n        if (isRed(node.left) && isRed(node.left.left))\n            node = rightRotate(node);\n\n        if (isRed(node.left) && isRed(node.right))\n            flipColors(node);\n\n        return node;\n    }\n\n    // 返回以node为根节点的二分搜索树中，key所在的节点\n    private Node getNode(Node node, K key){\n\n        if(node == null)\n            return null;\n\n        if(key.equals(node.key))\n            return node;\n        else if(key.compareTo(node.key) < 0)\n            return getNode(node.left, key);\n        else // if(key.compareTo(node.key) > 0)\n            return getNode(node.right, key);\n    }\n\n    public boolean contains(K key){\n        return getNode(root, key) != null;\n    }\n\n    public V get(K key){\n\n        Node node = getNode(root, key);\n        return node == null ? null : node.value;\n    }\n\n    public void set(K key, V newValue){\n        Node node = getNode(root, key);\n        if(node == null)\n            throw new IllegalArgumentException(key + \" doesn't exist!\");\n\n        node.value = newValue;\n    }\n\n    // 返回以node为根的二分搜索树的最小值所在的节点\n    private Node minimum(Node node){\n        if(node.left == null)\n            return node;\n        return minimum(node.left);\n    }\n\n    // 删除掉以node为根的二分搜索树中的最小节点\n    // 返回删除节点后新的二分搜索树的根\n    private Node removeMin(Node node){\n\n        if(node.left == null){\n            Node rightNode = node.right;\n            node.right = null;\n            size --;\n            return rightNode;\n        }\n\n        node.left = removeMin(node.left);\n        return node;\n    }\n\n    // 从二分搜索树中删除键为key的节点\n    public V remove(K key){\n\n        Node node = getNode(root, key);\n        if(node != null){\n            root = remove(root, key);\n            return node.value;\n        }\n        return null;\n    }\n\n    private Node remove(Node node, K key){\n\n        if( node == null )\n            return null;\n\n        if( key.compareTo(node.key) < 0 ){\n            node.left = remove(node.left , key);\n            return node;\n        }\n        else if(key.compareTo(node.key) > 0 ){\n            node.right = remove(node.right, key);\n            return node;\n        }\n        else{   // key.compareTo(node.key) == 0\n\n            // 待删除节点左子树为空的情况\n            if(node.left == null){\n                Node rightNode = node.right;\n                node.right = null;\n                size --;\n                return rightNode;\n            }\n\n            // 待删除节点右子树为空的情况\n            if(node.right == null){\n                Node leftNode = node.left;\n                node.left = null;\n                size --;\n                return leftNode;\n            }\n\n            // 待删除节点左右子树均不为空的情况\n\n            // 找到比待删除节点大的最小节点, 即待删除节点右子树的最小节点\n            // 用这个节点顶替待删除节点的位置\n            Node successor = minimum(node.right);\n            successor.right = removeMin(node.right);\n            successor.left = node.left;\n\n            node.left = node.right = null;\n\n            return successor;\n        }\n    }\n\n    public static void main(String[] args){\n\n        System.out.println(\"Pride and Prejudice\");\n\n        ArrayList<String> words = new ArrayList<>();\n        if(FileOperation.readFile(\"pride-and-prejudice.txt\", words)) {\n            System.out.println(\"Total words: \" + words.size());\n\n            RBTree<String, Integer> map = new RBTree<>();\n            for (String word : words) {\n                if (map.contains(word))\n                    map.set(word, map.get(word) + 1);\n                else\n                    map.add(word, 1);\n            }\n\n            System.out.println(\"Total different words: \" + map.getSize());\n            System.out.println(\"Frequency of PRIDE: \" + map.get(\"pride\"));\n            System.out.println(\"Frequency of PREJUDICE: \" + map.get(\"prejudice\"));\n        }\n\n        System.out.println();\n\t}\n}\n```\n### 红黑树优点与使用场景\n\n红黑树并不追求“完全平衡”——它只要求部分地达到平衡要求，降低了对旋转的要求，从而提高了性能。\n\n红黑树能够以O(log2 n) 的时间复杂度进行搜索、插入、删除操作。此外，由于它的设计，任何不平衡都会在三次旋转之内解决。当然，还有一些更好的，但实现起来更复杂的数据结构 能够做到一步旋转之内达到平衡，但红黑树能够给我们一个比较“便宜”的解决方案。红黑树的算法时间复杂度和AVL相同，但统计性能比AVL树更高。\n\n当然，红黑树并不适应所有应用树的领域。如果数据基本上是静态的，那么让他们待在他们能够插入，并且不影响平衡的地方会具有更好的性能。如果数据完全是静态的，例如，做一个哈希表，性能可能会更好一些。\n\n在实际的系统中，例如，需要使用动态规则的防火墙系统，使用红黑树而不是散列表被实践证明具有更好的伸缩性。\n\n在jDK1.8以后HashMap结构就引入了红黑树,在链表长度达到八的时候将链表转化为红黑树.","source":"_posts/红黑树的建立与维护.md","raw":"---\ntitle: 红黑树的建立与维护\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-16 22:05:01\npassword:\nsummary:\ntags:\ncategories: 数据结构\n---\n\n### 红黑树介绍\n\n红黑树(Red-Black Tree，简称R-B Tree)，它一种特殊的二叉查找树。 \n红黑树是特殊的二叉查找树，意味着它满足二叉查找树的特征：任意一个节点所包含的键值，大于等于左孩子的键值，小于等于右孩子的键值。 \n除了具备该特性之外，红黑树还包括许多额外的信息。\n\n红黑树的每个节点上都有存储位表示节点的颜色，颜色是红(Red)或黑(Black)。\n\n红黑树的特性: \n(1) 每个节点或者是黑色，或者是红色。 \n(2) 根节点是黑色。 \n(3) 每个叶子节点是黑色。 [注意：这里叶子节点，是指为空的叶子节点！] \n(4) 如果一个节点是红色的，则它的子节点必须是黑色的。 \n(5) 从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。\n\n关于它的特性，需要注意的是： \n第一，特性(3)中的叶子节点，是只为空(NIL或null)的节点。 \n第二，特性(5)，确保没有一条路径会比其他路径长出俩倍。因而，红黑树是相对是接近平衡的二叉树。\n\n红黑树的主要是想对2-3查找树进行编码，尤其是对2-3查找树中的3-nodes节点添加额外的信息。红黑树中将节点之间的链接分为两种不同类型，红色链接，他用来链接两个2-nodes节点来表示一个3-nodes节点。黑色链接用来链接普通的2-3节点。特别的，使用红色链接的两个2-nodes来表示一个3-nodes节点，并且向左倾斜，即一个2-node是另一个2-node的左子节点。这种做法的好处是查找的时候不用做任何修改，和普通的二叉查找树相同。\n\n根据以上描述，红黑树定义如下：\n\n红黑树是一种具有红色和黑色链接的平衡查找树，同时满足：\n\n1.红色节点向左倾斜 \n2.一个节点不可能有两个红色链接 \n3.整个树完全黑色平衡，即从根节点到所以叶子结点的路径上，黑色链接的个数都相同。\n\n下图可以看到红黑树其实是2-3树的另外一种表现形式：如果我们将红色的连线水平绘制，那么他链接的两个2-node节点就是2-3树中的一个3-node节点了。\n\n![](红黑树的建立与维护/1.png)\n\n### 红黑树java代码实现\n\n```java\nimport java.util.ArrayList;\n\npublic class RBTree<K extends Comparable<K>, V> {\n\n    private static final boolean RED = true;\n    private static final boolean BLACK = false;\n\n    private class Node{\n        public K key;\n        public V value;\n        public Node left, right;\n        public boolean color;\n\n        public Node(K key, V value){\n            this.key = key;\n            this.value = value;\n            left = null;\n            right = null;\n            color = RED;\n        }\n    }\n\n    private Node root;\n    private int size;\n\n    public RBTree(){\n        root = null;\n        size = 0;\n    }\n\n    public int getSize(){\n        return size;\n    }\n\n    public boolean isEmpty(){\n        return size == 0;\n    }\n\n    // 判断节点node的颜色\n    private boolean isRed(Node node){\n        if(node == null)\n            return BLACK;\n        return node.color;\n    }\n\n    //   node                     x\n    //  /   \\     左旋转         /  \\\n    // T1   x   --------->   node   T3\n    //     / \\              /   \\\n    //    T2 T3            T1   T2\n    private Node leftRotate(Node node){\n\n        Node x = node.right;\n\n        // 左旋转\n        node.right = x.left;\n        x.left = node;\n\n        x.color = node.color;\n        node.color = RED;\n\n        return x;\n    }\n\n    //     node                   x\n    //    /   \\     右旋转       /  \\\n    //   x    T2   ------->   y   node\n    //  / \\                       /  \\\n    // y  T1                     T1  T2\n    private Node rightRotate(Node node){\n\n        Node x = node.left;\n\n        // 右旋转\n        node.left = x.right;\n        x.right = node;\n\n        x.color = node.color;\n        node.color = RED;\n\n        return x;\n    }\n\n    // 颜色翻转\n    private void flipColors(Node node){\n\n        node.color = RED;\n        node.left.color = BLACK;\n        node.right.color = BLACK;\n    }\n\n    // 向红黑树中添加新的元素(key, value)\n    public void add(K key, V value){\n        root = add(root, key, value);\n        root.color = BLACK; // 最终根节点为黑色节点\n    }\n\n    // 向以node为根的红黑树中插入元素(key, value)，递归算法\n    // 返回插入新节点后红黑树的根\n    private Node add(Node node, K key, V value){\n\n        if(node == null){\n            size ++;\n            return new Node(key, value); // 默认插入红色节点\n        }\n\n        if(key.compareTo(node.key) < 0)\n            node.left = add(node.left, key, value);\n        else if(key.compareTo(node.key) > 0)\n            node.right = add(node.right, key, value);\n        else // key.compareTo(node.key) == 0\n            node.value = value;\n\n        if (isRed(node.right) && !isRed(node.left))\n            node = leftRotate(node);\n\n        if (isRed(node.left) && isRed(node.left.left))\n            node = rightRotate(node);\n\n        if (isRed(node.left) && isRed(node.right))\n            flipColors(node);\n\n        return node;\n    }\n\n    // 返回以node为根节点的二分搜索树中，key所在的节点\n    private Node getNode(Node node, K key){\n\n        if(node == null)\n            return null;\n\n        if(key.equals(node.key))\n            return node;\n        else if(key.compareTo(node.key) < 0)\n            return getNode(node.left, key);\n        else // if(key.compareTo(node.key) > 0)\n            return getNode(node.right, key);\n    }\n\n    public boolean contains(K key){\n        return getNode(root, key) != null;\n    }\n\n    public V get(K key){\n\n        Node node = getNode(root, key);\n        return node == null ? null : node.value;\n    }\n\n    public void set(K key, V newValue){\n        Node node = getNode(root, key);\n        if(node == null)\n            throw new IllegalArgumentException(key + \" doesn't exist!\");\n\n        node.value = newValue;\n    }\n\n    // 返回以node为根的二分搜索树的最小值所在的节点\n    private Node minimum(Node node){\n        if(node.left == null)\n            return node;\n        return minimum(node.left);\n    }\n\n    // 删除掉以node为根的二分搜索树中的最小节点\n    // 返回删除节点后新的二分搜索树的根\n    private Node removeMin(Node node){\n\n        if(node.left == null){\n            Node rightNode = node.right;\n            node.right = null;\n            size --;\n            return rightNode;\n        }\n\n        node.left = removeMin(node.left);\n        return node;\n    }\n\n    // 从二分搜索树中删除键为key的节点\n    public V remove(K key){\n\n        Node node = getNode(root, key);\n        if(node != null){\n            root = remove(root, key);\n            return node.value;\n        }\n        return null;\n    }\n\n    private Node remove(Node node, K key){\n\n        if( node == null )\n            return null;\n\n        if( key.compareTo(node.key) < 0 ){\n            node.left = remove(node.left , key);\n            return node;\n        }\n        else if(key.compareTo(node.key) > 0 ){\n            node.right = remove(node.right, key);\n            return node;\n        }\n        else{   // key.compareTo(node.key) == 0\n\n            // 待删除节点左子树为空的情况\n            if(node.left == null){\n                Node rightNode = node.right;\n                node.right = null;\n                size --;\n                return rightNode;\n            }\n\n            // 待删除节点右子树为空的情况\n            if(node.right == null){\n                Node leftNode = node.left;\n                node.left = null;\n                size --;\n                return leftNode;\n            }\n\n            // 待删除节点左右子树均不为空的情况\n\n            // 找到比待删除节点大的最小节点, 即待删除节点右子树的最小节点\n            // 用这个节点顶替待删除节点的位置\n            Node successor = minimum(node.right);\n            successor.right = removeMin(node.right);\n            successor.left = node.left;\n\n            node.left = node.right = null;\n\n            return successor;\n        }\n    }\n\n    public static void main(String[] args){\n\n        System.out.println(\"Pride and Prejudice\");\n\n        ArrayList<String> words = new ArrayList<>();\n        if(FileOperation.readFile(\"pride-and-prejudice.txt\", words)) {\n            System.out.println(\"Total words: \" + words.size());\n\n            RBTree<String, Integer> map = new RBTree<>();\n            for (String word : words) {\n                if (map.contains(word))\n                    map.set(word, map.get(word) + 1);\n                else\n                    map.add(word, 1);\n            }\n\n            System.out.println(\"Total different words: \" + map.getSize());\n            System.out.println(\"Frequency of PRIDE: \" + map.get(\"pride\"));\n            System.out.println(\"Frequency of PREJUDICE: \" + map.get(\"prejudice\"));\n        }\n\n        System.out.println();\n\t}\n}\n```\n### 红黑树优点与使用场景\n\n红黑树并不追求“完全平衡”——它只要求部分地达到平衡要求，降低了对旋转的要求，从而提高了性能。\n\n红黑树能够以O(log2 n) 的时间复杂度进行搜索、插入、删除操作。此外，由于它的设计，任何不平衡都会在三次旋转之内解决。当然，还有一些更好的，但实现起来更复杂的数据结构 能够做到一步旋转之内达到平衡，但红黑树能够给我们一个比较“便宜”的解决方案。红黑树的算法时间复杂度和AVL相同，但统计性能比AVL树更高。\n\n当然，红黑树并不适应所有应用树的领域。如果数据基本上是静态的，那么让他们待在他们能够插入，并且不影响平衡的地方会具有更好的性能。如果数据完全是静态的，例如，做一个哈希表，性能可能会更好一些。\n\n在实际的系统中，例如，需要使用动态规则的防火墙系统，使用红黑树而不是散列表被实践证明具有更好的伸缩性。\n\n在jDK1.8以后HashMap结构就引入了红黑树,在链表长度达到八的时候将链表转化为红黑树.","slug":"红黑树的建立与维护","published":1,"updated":"2021-04-29T09:44:56.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mleq002ovkvylsjyk7t6","content":"<h3 id=\"红黑树介绍\"><a href=\"#红黑树介绍\" class=\"headerlink\" title=\"红黑树介绍\"></a>红黑树介绍</h3><p>红黑树(Red-Black Tree，简称R-B Tree)，它一种特殊的二叉查找树。<br>红黑树是特殊的二叉查找树，意味着它满足二叉查找树的特征：任意一个节点所包含的键值，大于等于左孩子的键值，小于等于右孩子的键值。<br>除了具备该特性之外，红黑树还包括许多额外的信息。</p>\n<p>红黑树的每个节点上都有存储位表示节点的颜色，颜色是红(Red)或黑(Black)。</p>\n<p>红黑树的特性:<br>(1) 每个节点或者是黑色，或者是红色。<br>(2) 根节点是黑色。<br>(3) 每个叶子节点是黑色。 [注意：这里叶子节点，是指为空的叶子节点！]<br>(4) 如果一个节点是红色的，则它的子节点必须是黑色的。<br>(5) 从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。</p>\n<p>关于它的特性，需要注意的是：<br>第一，特性(3)中的叶子节点，是只为空(NIL或null)的节点。<br>第二，特性(5)，确保没有一条路径会比其他路径长出俩倍。因而，红黑树是相对是接近平衡的二叉树。</p>\n<p>红黑树的主要是想对2-3查找树进行编码，尤其是对2-3查找树中的3-nodes节点添加额外的信息。红黑树中将节点之间的链接分为两种不同类型，红色链接，他用来链接两个2-nodes节点来表示一个3-nodes节点。黑色链接用来链接普通的2-3节点。特别的，使用红色链接的两个2-nodes来表示一个3-nodes节点，并且向左倾斜，即一个2-node是另一个2-node的左子节点。这种做法的好处是查找的时候不用做任何修改，和普通的二叉查找树相同。</p>\n<p>根据以上描述，红黑树定义如下：</p>\n<p>红黑树是一种具有红色和黑色链接的平衡查找树，同时满足：</p>\n<p>1.红色节点向左倾斜<br>2.一个节点不可能有两个红色链接<br>3.整个树完全黑色平衡，即从根节点到所以叶子结点的路径上，黑色链接的个数都相同。</p>\n<p>下图可以看到红黑树其实是2-3树的另外一种表现形式：如果我们将红色的连线水平绘制，那么他链接的两个2-node节点就是2-3树中的一个3-node节点了。</p>\n<p><img src=\"/2020/01/16/hong-hei-shu-de-jian-li-yu-wei-hu/1.png\" alt></p>\n<h3 id=\"红黑树java代码实现\"><a href=\"#红黑树java代码实现\" class=\"headerlink\" title=\"红黑树java代码实现\"></a>红黑树java代码实现</h3><pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>ArrayList<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RBTree</span><span class=\"token operator\">&lt;</span>K <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Comparable</span><span class=\"token operator\">&lt;</span>K<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> V<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> RED <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> BLACK <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> K key<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> V value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> Node left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> color<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">Node</span><span class=\"token punctuation\">(</span>K key<span class=\"token punctuation\">,</span> V value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n            left <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n            right <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n            color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> Node root<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">RBTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        root <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n        size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> size<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 判断节点node的颜色</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isRed</span><span class=\"token punctuation\">(</span>Node node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> BLACK<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//   node                     x</span>\n    <span class=\"token comment\" spellcheck=\"true\">//  /   \\     左旋转         /  \\</span>\n    <span class=\"token comment\" spellcheck=\"true\">// T1   x   --------->   node   T3</span>\n    <span class=\"token comment\" spellcheck=\"true\">//     / \\              /   \\</span>\n    <span class=\"token comment\" spellcheck=\"true\">//    T2 T3            T1   T2</span>\n    <span class=\"token keyword\">private</span> Node <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span>Node node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        Node x <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 左旋转</span>\n        node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n        x<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n\n        x<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>\n        node<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//     node                   x</span>\n    <span class=\"token comment\" spellcheck=\"true\">//    /   \\     右旋转       /  \\</span>\n    <span class=\"token comment\" spellcheck=\"true\">//   x    T2   ------->   y   node</span>\n    <span class=\"token comment\" spellcheck=\"true\">//  / \\                       /  \\</span>\n    <span class=\"token comment\" spellcheck=\"true\">// y  T1                     T1  T2</span>\n    <span class=\"token keyword\">private</span> Node <span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span>Node node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        Node x <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 右旋转</span>\n        node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n        x<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n\n        x<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>\n        node<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 颜色翻转</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">flipColors</span><span class=\"token punctuation\">(</span>Node node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        node<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n        node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n        node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 向红黑树中添加新的元素(key, value)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>K key<span class=\"token punctuation\">,</span> V value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        root <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        root<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 最终根节点为黑色节点</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 向以node为根的红黑树中插入元素(key, value)，递归算法</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 返回插入新节点后红黑树的根</span>\n    <span class=\"token keyword\">private</span> Node <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>Node node<span class=\"token punctuation\">,</span> K key<span class=\"token punctuation\">,</span> V value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            size <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 默认插入红色节点</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token comment\" spellcheck=\"true\">// key.compareTo(node.key) == 0</span>\n            node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isRed</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isRed</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            node <span class=\"token operator\">=</span> <span class=\"token function\">leftRotate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isRed</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isRed</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            node <span class=\"token operator\">=</span> <span class=\"token function\">rightRotate</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isRed</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isRed</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">flipColors</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 返回以node为根节点的二分搜索树中，key所在的节点</span>\n    <span class=\"token keyword\">private</span> Node <span class=\"token function\">getNode</span><span class=\"token punctuation\">(</span>Node node<span class=\"token punctuation\">,</span> K key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">getNode</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token comment\" spellcheck=\"true\">// if(key.compareTo(node.key) > 0)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">getNode</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>K key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">getNode</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> V <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>K key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        Node node <span class=\"token operator\">=</span> <span class=\"token function\">getNode</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> node <span class=\"token operator\">==</span> null <span class=\"token operator\">?</span> null <span class=\"token operator\">:</span> node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>K key<span class=\"token punctuation\">,</span> V newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        Node node <span class=\"token operator\">=</span> <span class=\"token function\">getNode</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">+</span> <span class=\"token string\">\" doesn't exist!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        node<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 返回以node为根的二分搜索树的最小值所在的节点</span>\n    <span class=\"token keyword\">private</span> Node <span class=\"token function\">minimum</span><span class=\"token punctuation\">(</span>Node node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">minimum</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 删除掉以node为根的二分搜索树中的最小节点</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 返回删除节点后新的二分搜索树的根</span>\n    <span class=\"token keyword\">private</span> Node <span class=\"token function\">removeMin</span><span class=\"token punctuation\">(</span>Node node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            Node rightNode <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n            node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n            size <span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> rightNode<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">removeMin</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 从二分搜索树中删除键为key的节点</span>\n    <span class=\"token keyword\">public</span> V <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>K key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        Node node <span class=\"token operator\">=</span> <span class=\"token function\">getNode</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            root <span class=\"token operator\">=</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> Node <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>Node node<span class=\"token punctuation\">,</span> K key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> node <span class=\"token operator\">==</span> null <span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> null<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>   <span class=\"token comment\" spellcheck=\"true\">// key.compareTo(node.key) == 0</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">// 待删除节点左子树为空的情况</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                Node rightNode <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n                node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n                size <span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> rightNode<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">// 待删除节点右子树为空的情况</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                Node leftNode <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n                node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n                size <span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> leftNode<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">// 待删除节点左右子树均不为空的情况</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">// 找到比待删除节点大的最小节点, 即待删除节点右子树的最小节点</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 用这个节点顶替待删除节点的位置</span>\n            Node successor <span class=\"token operator\">=</span> <span class=\"token function\">minimum</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            successor<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token function\">removeMin</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            successor<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n\n            node<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> successor<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pride and Prejudice\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        ArrayList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> words <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>FileOperation<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pride-and-prejudice.txt\"</span><span class=\"token punctuation\">,</span> words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total words: \"</span> <span class=\"token operator\">+</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            RBTree<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Integer<span class=\"token operator\">></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RBTree</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>String word <span class=\"token operator\">:</span> words<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span>\n                    map<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Total different words: \"</span> <span class=\"token operator\">+</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Frequency of PRIDE: \"</span> <span class=\"token operator\">+</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pride\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Frequency of PREJUDICE: \"</span> <span class=\"token operator\">+</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prejudice\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"红黑树优点与使用场景\"><a href=\"#红黑树优点与使用场景\" class=\"headerlink\" title=\"红黑树优点与使用场景\"></a>红黑树优点与使用场景</h3><p>红黑树并不追求“完全平衡”——它只要求部分地达到平衡要求，降低了对旋转的要求，从而提高了性能。</p>\n<p>红黑树能够以O(log2 n) 的时间复杂度进行搜索、插入、删除操作。此外，由于它的设计，任何不平衡都会在三次旋转之内解决。当然，还有一些更好的，但实现起来更复杂的数据结构 能够做到一步旋转之内达到平衡，但红黑树能够给我们一个比较“便宜”的解决方案。红黑树的算法时间复杂度和AVL相同，但统计性能比AVL树更高。</p>\n<p>当然，红黑树并不适应所有应用树的领域。如果数据基本上是静态的，那么让他们待在他们能够插入，并且不影响平衡的地方会具有更好的性能。如果数据完全是静态的，例如，做一个哈希表，性能可能会更好一些。</p>\n<p>在实际的系统中，例如，需要使用动态规则的防火墙系统，使用红黑树而不是散列表被实践证明具有更好的伸缩性。</p>\n<p>在jDK1.8以后HashMap结构就引入了红黑树,在链表长度达到八的时候将链表转化为红黑树.</p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h3 id=\"红黑树介绍\"><a href=\"#红黑树介绍\" class=\"headerlink\" title=\"红黑树介绍\"></a>红黑树介绍</h3><p>红黑树(Red-Black Tree，简称R-B Tree)，它一种特殊的二叉查找树。<br>红黑树是特殊的二叉查找树，意味着它满足二叉查找树的特征：任意一个节点所包含的键值，大于等于左孩子的键值，小于等于右孩子的键值。<br>除了具备该特性之外，红黑树还包括许多额外的信息。</p>\n<p>红黑树的每个节点上都有存储位表示节点的颜色，颜色是红(Red)或黑(Black)。</p>\n<p>红黑树的特性:<br>(1) 每个节点或者是黑色，或者是红色。<br>(2) 根节点是黑色。<br>(3) 每个叶子节点是黑色。 [注意：这里叶子节点，是指为空的叶子节点！]<br>(4) 如果一个节点是红色的，则它的子节点必须是黑色的。<br>(5) 从一个节点到该节点的子孙节点的所有路径上包含相同数目的黑节点。</p>\n<p>关于它的特性，需要注意的是：<br>第一，特性(3)中的叶子节点，是只为空(NIL或null)的节点。<br>第二，特性(5)，确保没有一条路径会比其他路径长出俩倍。因而，红黑树是相对是接近平衡的二叉树。</p>\n<p>红黑树的主要是想对2-3查找树进行编码，尤其是对2-3查找树中的3-nodes节点添加额外的信息。红黑树中将节点之间的链接分为两种不同类型，红色链接，他用来链接两个2-nodes节点来表示一个3-nodes节点。黑色链接用来链接普通的2-3节点。特别的，使用红色链接的两个2-nodes来表示一个3-nodes节点，并且向左倾斜，即一个2-node是另一个2-node的左子节点。这种做法的好处是查找的时候不用做任何修改，和普通的二叉查找树相同。</p>\n<p>根据以上描述，红黑树定义如下：</p>\n<p>红黑树是一种具有红色和黑色链接的平衡查找树，同时满足：</p>\n<p>1.红色节点向左倾斜<br>2.一个节点不可能有两个红色链接<br>3.整个树完全黑色平衡，即从根节点到所以叶子结点的路径上，黑色链接的个数都相同。</p>\n<p>下图可以看到红黑树其实是2-3树的另外一种表现形式：如果我们将红色的连线水平绘制，那么他链接的两个2-node节点就是2-3树中的一个3-node节点了。</p>\n<p><img src=\"/2020/01/16/hong-hei-shu-de-jian-li-yu-wei-hu/1.png\" alt></p>\n<h3 id=\"红黑树java代码实现\"><a href=\"#红黑树java代码实现\" class=\"headerlink\" title=\"红黑树java代码实现\"></a>红黑树java代码实现</h3><pre><code class=\"java\">import java.util.ArrayList;\n\npublic class RBTree&lt;K extends Comparable&lt;K&gt;, V&gt; {\n\n    private static final boolean RED = true;\n    private static final boolean BLACK = false;\n\n    private class Node{\n        public K key;\n        public V value;\n        public Node left, right;\n        public boolean color;\n\n        public Node(K key, V value){\n            this.key = key;\n            this.value = value;\n            left = null;\n            right = null;\n            color = RED;\n        }\n    }\n\n    private Node root;\n    private int size;\n\n    public RBTree(){\n        root = null;\n        size = 0;\n    }\n\n    public int getSize(){\n        return size;\n    }\n\n    public boolean isEmpty(){\n        return size == 0;\n    }\n\n    // 判断节点node的颜色\n    private boolean isRed(Node node){\n        if(node == null)\n            return BLACK;\n        return node.color;\n    }\n\n    //   node                     x\n    //  /   \\     左旋转         /  \\\n    // T1   x   ---------&gt;   node   T3\n    //     / \\              /   \\\n    //    T2 T3            T1   T2\n    private Node leftRotate(Node node){\n\n        Node x = node.right;\n\n        // 左旋转\n        node.right = x.left;\n        x.left = node;\n\n        x.color = node.color;\n        node.color = RED;\n\n        return x;\n    }\n\n    //     node                   x\n    //    /   \\     右旋转       /  \\\n    //   x    T2   -------&gt;   y   node\n    //  / \\                       /  \\\n    // y  T1                     T1  T2\n    private Node rightRotate(Node node){\n\n        Node x = node.left;\n\n        // 右旋转\n        node.left = x.right;\n        x.right = node;\n\n        x.color = node.color;\n        node.color = RED;\n\n        return x;\n    }\n\n    // 颜色翻转\n    private void flipColors(Node node){\n\n        node.color = RED;\n        node.left.color = BLACK;\n        node.right.color = BLACK;\n    }\n\n    // 向红黑树中添加新的元素(key, value)\n    public void add(K key, V value){\n        root = add(root, key, value);\n        root.color = BLACK; // 最终根节点为黑色节点\n    }\n\n    // 向以node为根的红黑树中插入元素(key, value)，递归算法\n    // 返回插入新节点后红黑树的根\n    private Node add(Node node, K key, V value){\n\n        if(node == null){\n            size ++;\n            return new Node(key, value); // 默认插入红色节点\n        }\n\n        if(key.compareTo(node.key) &lt; 0)\n            node.left = add(node.left, key, value);\n        else if(key.compareTo(node.key) &gt; 0)\n            node.right = add(node.right, key, value);\n        else // key.compareTo(node.key) == 0\n            node.value = value;\n\n        if (isRed(node.right) &amp;&amp; !isRed(node.left))\n            node = leftRotate(node);\n\n        if (isRed(node.left) &amp;&amp; isRed(node.left.left))\n            node = rightRotate(node);\n\n        if (isRed(node.left) &amp;&amp; isRed(node.right))\n            flipColors(node);\n\n        return node;\n    }\n\n    // 返回以node为根节点的二分搜索树中，key所在的节点\n    private Node getNode(Node node, K key){\n\n        if(node == null)\n            return null;\n\n        if(key.equals(node.key))\n            return node;\n        else if(key.compareTo(node.key) &lt; 0)\n            return getNode(node.left, key);\n        else // if(key.compareTo(node.key) &gt; 0)\n            return getNode(node.right, key);\n    }\n\n    public boolean contains(K key){\n        return getNode(root, key) != null;\n    }\n\n    public V get(K key){\n\n        Node node = getNode(root, key);\n        return node == null ? null : node.value;\n    }\n\n    public void set(K key, V newValue){\n        Node node = getNode(root, key);\n        if(node == null)\n            throw new IllegalArgumentException(key + &quot; doesn&#39;t exist!&quot;);\n\n        node.value = newValue;\n    }\n\n    // 返回以node为根的二分搜索树的最小值所在的节点\n    private Node minimum(Node node){\n        if(node.left == null)\n            return node;\n        return minimum(node.left);\n    }\n\n    // 删除掉以node为根的二分搜索树中的最小节点\n    // 返回删除节点后新的二分搜索树的根\n    private Node removeMin(Node node){\n\n        if(node.left == null){\n            Node rightNode = node.right;\n            node.right = null;\n            size --;\n            return rightNode;\n        }\n\n        node.left = removeMin(node.left);\n        return node;\n    }\n\n    // 从二分搜索树中删除键为key的节点\n    public V remove(K key){\n\n        Node node = getNode(root, key);\n        if(node != null){\n            root = remove(root, key);\n            return node.value;\n        }\n        return null;\n    }\n\n    private Node remove(Node node, K key){\n\n        if( node == null )\n            return null;\n\n        if( key.compareTo(node.key) &lt; 0 ){\n            node.left = remove(node.left , key);\n            return node;\n        }\n        else if(key.compareTo(node.key) &gt; 0 ){\n            node.right = remove(node.right, key);\n            return node;\n        }\n        else{   // key.compareTo(node.key) == 0\n\n            // 待删除节点左子树为空的情况\n            if(node.left == null){\n                Node rightNode = node.right;\n                node.right = null;\n                size --;\n                return rightNode;\n            }\n\n            // 待删除节点右子树为空的情况\n            if(node.right == null){\n                Node leftNode = node.left;\n                node.left = null;\n                size --;\n                return leftNode;\n            }\n\n            // 待删除节点左右子树均不为空的情况\n\n            // 找到比待删除节点大的最小节点, 即待删除节点右子树的最小节点\n            // 用这个节点顶替待删除节点的位置\n            Node successor = minimum(node.right);\n            successor.right = removeMin(node.right);\n            successor.left = node.left;\n\n            node.left = node.right = null;\n\n            return successor;\n        }\n    }\n\n    public static void main(String[] args){\n\n        System.out.println(&quot;Pride and Prejudice&quot;);\n\n        ArrayList&lt;String&gt; words = new ArrayList&lt;&gt;();\n        if(FileOperation.readFile(&quot;pride-and-prejudice.txt&quot;, words)) {\n            System.out.println(&quot;Total words: &quot; + words.size());\n\n            RBTree&lt;String, Integer&gt; map = new RBTree&lt;&gt;();\n            for (String word : words) {\n                if (map.contains(word))\n                    map.set(word, map.get(word) + 1);\n                else\n                    map.add(word, 1);\n            }\n\n            System.out.println(&quot;Total different words: &quot; + map.getSize());\n            System.out.println(&quot;Frequency of PRIDE: &quot; + map.get(&quot;pride&quot;));\n            System.out.println(&quot;Frequency of PREJUDICE: &quot; + map.get(&quot;prejudice&quot;));\n        }\n\n        System.out.println();\n    }\n}</code></pre>\n<h3 id=\"红黑树优点与使用场景\"><a href=\"#红黑树优点与使用场景\" class=\"headerlink\" title=\"红黑树优点与使用场景\"></a>红黑树优点与使用场景</h3><p>红黑树并不追求“完全平衡”——它只要求部分地达到平衡要求，降低了对旋转的要求，从而提高了性能。</p>\n<p>红黑树能够以O(log2 n) 的时间复杂度进行搜索、插入、删除操作。此外，由于它的设计，任何不平衡都会在三次旋转之内解决。当然，还有一些更好的，但实现起来更复杂的数据结构 能够做到一步旋转之内达到平衡，但红黑树能够给我们一个比较“便宜”的解决方案。红黑树的算法时间复杂度和AVL相同，但统计性能比AVL树更高。</p>\n<p>当然，红黑树并不适应所有应用树的领域。如果数据基本上是静态的，那么让他们待在他们能够插入，并且不影响平衡的地方会具有更好的性能。如果数据完全是静态的，例如，做一个哈希表，性能可能会更好一些。</p>\n<p>在实际的系统中，例如，需要使用动态规则的防火墙系统，使用红黑树而不是散列表被实践证明具有更好的伸缩性。</p>\n<p>在jDK1.8以后HashMap结构就引入了红黑树,在链表长度达到八的时候将链表转化为红黑树.</p>\n"},{"title":"线程池原理","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-22T15:05:54.000Z","password":null,"summary":null,"_content":"\n# 1. 为什么要使用线程池\n\n在实际使用中，线程是很占用系统资源的，如果对线程管理不善很容易导致系统问题。因此，在大多数并发框架中都会使用**线程池**来管理线程，使用线程池管理线程主要有如下好处：\n\n1. **降低资源消耗**。通过复用已存在的线程和降低线程关闭的次数来尽可能降低系统性能损耗；\n2. **提升系统响应速度**。通过复用线程，省去创建线程的过程，因此整体上提升了系统的响应速度；\n3. **提高线程的可管理性**。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，因此，需要使用线程池来管理线程。\n\n# 2. 线程池的工作原理\n\n当一个并发任务提交给线程池，线程池分配线程去执行任务的过程如下图所示：\n\n![线程池执行流程](线程池原理/1.png)\n\n从图可以看出，线程池执行所提交的任务过程主要有这样几个阶段：\n\n1. 先判断线程池中**核心线程池**所有的线程是否都在执行任务。如果不是，则新创建一个线程执行刚提交的任务，否则，核心线程池中所有的线程都在执行任务，则进入第 2 步；\n2. 判断当前**阻塞队列**是否已满，如果未满，则将提交的任务放置在阻塞队列中；否则，则进入第 3 步；\n3. 判断**线程池中所有的线程**是否都在执行任务，如果没有，则创建一个新的线程来执行任务，否则，则交给饱和策略进行处理\n\n# 3. 线程池的创建\n\n创建线程池主要是**ThreadPoolExecutor**类来完成，ThreadPoolExecutor 的有许多重载的构造方法，通过参数最多的构造方法来理解创建线程池有哪些需要配置的参数。ThreadPoolExecutor 的构造方法为：\n\n```java\nThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              ThreadFactory threadFactory,\n                              RejectedExecutionHandler handler)\n```\n\n下面对参数进行说明：\n\n1. corePoolSize：表示核心线程池的大小。当提交一个任务时，如果当前核心线程池的线程个数没有达到 corePoolSize，则会创建新的线程来执行所提交的任务，**即使当前核心线程池有空闲的线程**。如果当前核心线程池的线程个数已经达到了 corePoolSize，则不再重新创建线程。如果调用了`prestartCoreThread()`或者 `prestartAllCoreThreads()`，线程池创建的时候所有的核心线程都会被创建并且启动。\n2. maximumPoolSize：表示线程池能创建线程的最大个数。如果当阻塞队列已满时，并且当前线程池线程个数没有超过 maximumPoolSize 的话，就会创建新的线程来执行任务。\n3. keepAliveTime：空闲线程存活时间。如果当前线程池的线程个数已经超过了 corePoolSize，并且线程空闲时间超过了 keepAliveTime 的话，就会将这些空闲线程销毁，这样可以尽可能降低系统资源消耗。\n4. unit：时间单位。为 keepAliveTime 指定时间单位。\n5. workQueue：阻塞队列。用于保存任务的阻塞队列。可以使用**ArrayBlockingQueue, LinkedBlockingQueue, SynchronousQueue, PriorityBlockingQueue**。\n6. threadFactory：创建线程的工程类。可以通过指定线程工厂为每个创建出来的线程设置更有意义的名字，如果出现并发问题，也方便查找问题原因。\n7. 1. AbortPolicy： 直接拒绝所提交的任务，并抛出**RejectedExecutionException**异常；\n   2. CallerRunsPolicy：只用调用者所在的线程来执行任务；\n   3. DiscardPolicy：不处理直接丢弃掉任务；\n   4. DiscardOldestPolicy：丢弃掉阻塞队列中存放时间最久的任务，执行当前任务\n\n通过 ThreadPoolExecutor 创建线程池后，提交任务后执行过程是怎样的，下面来通过源码来看一看。execute 方法源码如下：\n\n```java\npublic void execute(Runnable command) {\n    if (command == null)\n        throw new NullPointerException();\n    /*\n     * Proceed in 3 steps:\n     *\n     * 1. If fewer than corePoolSize threads are running, try to\n     * start a new thread with the given command as its first\n     * task.  The call to addWorker atomically checks runState and\n     * workerCount, and so prevents false alarms that would add\n     * threads when it shouldn't, by returning false.\n     *\n     * 2. If a task can be successfully queued, then we still need\n     * to double-check whether we should have added a thread\n     * (because existing ones died since last checking) or that\n     * the pool shut down since entry into this method. So we\n     * recheck state and if necessary roll back the enqueuing if\n     * stopped, or start a new thread if there are none.\n     *\n     * 3. If we cannot queue task, then we try to add a new\n     * thread.  If it fails, we know we are shut down or saturated\n     * and so reject the task.\n     */\n    int c = ctl.get();\n\t//如果线程池的线程个数少于corePoolSize则创建新线程执行当前任务\n    if (workerCountOf(c) < corePoolSize) {\n        if (addWorker(command, true))\n            return;\n        c = ctl.get();\n    }\n\t//如果线程个数大于corePoolSize或者创建线程失败，则将任务存放在阻塞队列workQueue中\n    if (isRunning(c) && workQueue.offer(command)) {\n        int recheck = ctl.get();\n        if (! isRunning(recheck) && remove(command))\n            reject(command);\n        else if (workerCountOf(recheck) == 0)\n            addWorker(null, false);\n    }\n\t//如果当前任务无法放进阻塞队列中，则创建新的线程来执行任务\n    else if (!addWorker(command, false))\n        reject(command);\n}\n```\n\nThreadPoolExecutor 的 execute 方法执行逻辑请见注释。下图为 ThreadPoolExecutor 的 execute 方法的执行示意图：\n\n![execute执行过程](线程池原理/2.png)\n\nexecute 方法执行逻辑有这样几种情况：\n\n1. 如果当前运行的线程少于 corePoolSize，则会创建新的线程来执行新的任务；\n2. 如果运行的线程个数等于或者大于 corePoolSize，则会将提交的任务存放到阻塞队列 workQueue 中；\n3. 如果当前 workQueue 队列已满的话，则会创建新的线程来执行任务；\n4. 如果线程个数已经超过了 maximumPoolSize，则会使用饱和策略 RejectedExecutionHandler 来进行处理。\n\n需要注意的是，线程池的设计思想就是使用了**核心线程池 corePoolSize，阻塞队列 workQueue 和线程池 maximumPoolSize**，这样的缓存策略来处理任务，实际上这样的设计思想在需要框架中都会使用。\n\n# 4. 线程池的关闭\n\n关闭线程池，可以通过`shutdown`和`shutdownNow`这两个方法。它们的原理都是遍历线程池中所有的线程，然后依次中断线程。`shutdown`和`shutdownNow`还是有不一样的地方：\n\n1. `shutdownNow`首先将线程池的状态设置为**STOP**,然后尝试**停止所有的正在执行和未执行任务**的线程，并返回等待执行任务的列表；\n2. `shutdown`只是将线程池的状态设置为**SHUTDOWN**状态，然后中断所有没有正在执行任务的线程\n\n可以看出 shutdown 方法会将正在执行的任务继续执行完，而 shutdownNow 会直接中断正在执行的任务。调用了这两个方法的任意一个，`isShutdown`方法都会返回 true，当所有的线程都关闭成功，才表示线程池成功关闭，这时调用`isTerminated`方法才会返回 true。\n\n# 5. 如何合理配置线程池参数？\n\n要想合理的配置线程池，就必须首先分析任务特性，可以从以下几个角度来进行分析：\n\n1. 任务的性质：CPU 密集型任务，IO 密集型任务和混合型任务。\n2. 任务的优先级：高，中和低。\n3. 任务的执行时间：长，中和短。\n4. 任务的依赖性：是否依赖其他系统资源，如数据库连接。\n\n任务性质不同的任务可以用不同规模的线程池分开处理。CPU 密集型任务配置尽可能少的线程数量，如配置**Ncpu+1**个线程的线程池。IO 密集型任务则由于需要等待 IO 操作，线程并不是一直在执行任务，则配置尽可能多的线程，如**2xNcpu**。混合型的任务，如果可以拆分，则将其拆分成一个 CPU 密集型任务和一个 IO 密集型任务，只要这两个任务执行的时间相差不是太大，那么分解后执行的吞吐率要高于串行执行的吞吐率，如果这两个任务执行时间相差太大，则没必要进行分解。我们可以通过`Runtime.getRuntime().availableProcessors()`方法获得当前设备的 CPU 个数。\n\n优先级不同的任务可以使用优先级队列 PriorityBlockingQueue 来处理。它可以让优先级高的任务先得到执行，需要注意的是如果一直有优先级高的任务提交到队列里，那么优先级低的任务可能永远不能执行。\n\n执行时间不同的任务可以交给不同规模的线程池来处理，或者也可以使用优先级队列，让执行时间短的任务先执行。\n\n依赖数据库连接池的任务，因为线程提交 SQL 后需要等待数据库返回结果，如果等待的时间越长 CPU 空闲时间就越长，那么线程数应该设置越大，这样才能更好的利用 CPU。\n\n并且，阻塞队列**最好是使用有界队列**，如果采用无界队列的话，一旦任务积压在阻塞队列中的话就会占用过多的内存资源，甚至会使得系统崩溃。\n\n# 6.常用的封装好的线程池\n\n#### **1. SingleThreadExecutor 线程池**\n\n这个线程池只有一个核心线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。\n\n- corePoolSize：1，只有一个核心线程在工作。\n- maximumPoolSize：1。\n- keepAliveTime：0L。\n- workQueue：new LinkedBlockingQueue<Runnable>()，其缓冲队列是无界的。\n\n#### **2. FixedThreadPool 线程池**\n\nFixedThreadPool 是固定大小的线程池，只有核心线程。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。\n\nFixedThreadPool 多数针对一些很稳定很固定的正规并发线程，多用于服务器。\n\n- corePoolSize：nThreads\n- maximumPoolSize：nThreads\n- keepAliveTime：0L\n- workQueue：new LinkedBlockingQueue<Runnable>()，其缓冲队列是无界的。\n\n#### **3. CachedThreadPool 线程池**\n\nCachedThreadPool 是无界线程池，如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60 秒不执行任务）线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。\n\n线程池大小完全依赖于操作系统（或者说 JVM）能够创建的最大线程大小。SynchronousQueue 是一个是缓冲区为 1 的阻塞队列。\n\n缓存型池子通常用于执行一些生存期很短的异步型任务，因此在一些面向连接的 daemon 型 SERVER 中用得不多。但对于生存期短的异步任务，它是 Executor 的首选。\n\n- corePoolSize：0\n- maximumPoolSize：Integer.MAX_VALUE\n- keepAliveTime：60L\n- workQueue：new SynchronousQueue<Runnable>()，一个是缓冲区为 1 的阻塞队列。\n\n#### **4. ScheduledThreadPool 线程池**\n\nScheduledThreadPool：核心线程池固定，大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。创建一个周期性执行任务的线程池。如果闲置，非核心线程池会在 DEFAULT_KEEPALIVEMILLIS 时间内回收。\n\n- corePoolSize：corePoolSize\n- maximumPoolSize：Integer.MAX_VALUE\n- keepAliveTime：DEFAULT_KEEPALIVE_MILLIS\n- workQueue：new DelayedWorkQueue()","source":"_posts/线程池原理.md","raw":"---\ntitle: 线程池原理\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-22 23:05:54\npassword:\nsummary:\ntags:\ncategories: java\n---\n\n# 1. 为什么要使用线程池\n\n在实际使用中，线程是很占用系统资源的，如果对线程管理不善很容易导致系统问题。因此，在大多数并发框架中都会使用**线程池**来管理线程，使用线程池管理线程主要有如下好处：\n\n1. **降低资源消耗**。通过复用已存在的线程和降低线程关闭的次数来尽可能降低系统性能损耗；\n2. **提升系统响应速度**。通过复用线程，省去创建线程的过程，因此整体上提升了系统的响应速度；\n3. **提高线程的可管理性**。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，因此，需要使用线程池来管理线程。\n\n# 2. 线程池的工作原理\n\n当一个并发任务提交给线程池，线程池分配线程去执行任务的过程如下图所示：\n\n![线程池执行流程](线程池原理/1.png)\n\n从图可以看出，线程池执行所提交的任务过程主要有这样几个阶段：\n\n1. 先判断线程池中**核心线程池**所有的线程是否都在执行任务。如果不是，则新创建一个线程执行刚提交的任务，否则，核心线程池中所有的线程都在执行任务，则进入第 2 步；\n2. 判断当前**阻塞队列**是否已满，如果未满，则将提交的任务放置在阻塞队列中；否则，则进入第 3 步；\n3. 判断**线程池中所有的线程**是否都在执行任务，如果没有，则创建一个新的线程来执行任务，否则，则交给饱和策略进行处理\n\n# 3. 线程池的创建\n\n创建线程池主要是**ThreadPoolExecutor**类来完成，ThreadPoolExecutor 的有许多重载的构造方法，通过参数最多的构造方法来理解创建线程池有哪些需要配置的参数。ThreadPoolExecutor 的构造方法为：\n\n```java\nThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue,\n                              ThreadFactory threadFactory,\n                              RejectedExecutionHandler handler)\n```\n\n下面对参数进行说明：\n\n1. corePoolSize：表示核心线程池的大小。当提交一个任务时，如果当前核心线程池的线程个数没有达到 corePoolSize，则会创建新的线程来执行所提交的任务，**即使当前核心线程池有空闲的线程**。如果当前核心线程池的线程个数已经达到了 corePoolSize，则不再重新创建线程。如果调用了`prestartCoreThread()`或者 `prestartAllCoreThreads()`，线程池创建的时候所有的核心线程都会被创建并且启动。\n2. maximumPoolSize：表示线程池能创建线程的最大个数。如果当阻塞队列已满时，并且当前线程池线程个数没有超过 maximumPoolSize 的话，就会创建新的线程来执行任务。\n3. keepAliveTime：空闲线程存活时间。如果当前线程池的线程个数已经超过了 corePoolSize，并且线程空闲时间超过了 keepAliveTime 的话，就会将这些空闲线程销毁，这样可以尽可能降低系统资源消耗。\n4. unit：时间单位。为 keepAliveTime 指定时间单位。\n5. workQueue：阻塞队列。用于保存任务的阻塞队列。可以使用**ArrayBlockingQueue, LinkedBlockingQueue, SynchronousQueue, PriorityBlockingQueue**。\n6. threadFactory：创建线程的工程类。可以通过指定线程工厂为每个创建出来的线程设置更有意义的名字，如果出现并发问题，也方便查找问题原因。\n7. 1. AbortPolicy： 直接拒绝所提交的任务，并抛出**RejectedExecutionException**异常；\n   2. CallerRunsPolicy：只用调用者所在的线程来执行任务；\n   3. DiscardPolicy：不处理直接丢弃掉任务；\n   4. DiscardOldestPolicy：丢弃掉阻塞队列中存放时间最久的任务，执行当前任务\n\n通过 ThreadPoolExecutor 创建线程池后，提交任务后执行过程是怎样的，下面来通过源码来看一看。execute 方法源码如下：\n\n```java\npublic void execute(Runnable command) {\n    if (command == null)\n        throw new NullPointerException();\n    /*\n     * Proceed in 3 steps:\n     *\n     * 1. If fewer than corePoolSize threads are running, try to\n     * start a new thread with the given command as its first\n     * task.  The call to addWorker atomically checks runState and\n     * workerCount, and so prevents false alarms that would add\n     * threads when it shouldn't, by returning false.\n     *\n     * 2. If a task can be successfully queued, then we still need\n     * to double-check whether we should have added a thread\n     * (because existing ones died since last checking) or that\n     * the pool shut down since entry into this method. So we\n     * recheck state and if necessary roll back the enqueuing if\n     * stopped, or start a new thread if there are none.\n     *\n     * 3. If we cannot queue task, then we try to add a new\n     * thread.  If it fails, we know we are shut down or saturated\n     * and so reject the task.\n     */\n    int c = ctl.get();\n\t//如果线程池的线程个数少于corePoolSize则创建新线程执行当前任务\n    if (workerCountOf(c) < corePoolSize) {\n        if (addWorker(command, true))\n            return;\n        c = ctl.get();\n    }\n\t//如果线程个数大于corePoolSize或者创建线程失败，则将任务存放在阻塞队列workQueue中\n    if (isRunning(c) && workQueue.offer(command)) {\n        int recheck = ctl.get();\n        if (! isRunning(recheck) && remove(command))\n            reject(command);\n        else if (workerCountOf(recheck) == 0)\n            addWorker(null, false);\n    }\n\t//如果当前任务无法放进阻塞队列中，则创建新的线程来执行任务\n    else if (!addWorker(command, false))\n        reject(command);\n}\n```\n\nThreadPoolExecutor 的 execute 方法执行逻辑请见注释。下图为 ThreadPoolExecutor 的 execute 方法的执行示意图：\n\n![execute执行过程](线程池原理/2.png)\n\nexecute 方法执行逻辑有这样几种情况：\n\n1. 如果当前运行的线程少于 corePoolSize，则会创建新的线程来执行新的任务；\n2. 如果运行的线程个数等于或者大于 corePoolSize，则会将提交的任务存放到阻塞队列 workQueue 中；\n3. 如果当前 workQueue 队列已满的话，则会创建新的线程来执行任务；\n4. 如果线程个数已经超过了 maximumPoolSize，则会使用饱和策略 RejectedExecutionHandler 来进行处理。\n\n需要注意的是，线程池的设计思想就是使用了**核心线程池 corePoolSize，阻塞队列 workQueue 和线程池 maximumPoolSize**，这样的缓存策略来处理任务，实际上这样的设计思想在需要框架中都会使用。\n\n# 4. 线程池的关闭\n\n关闭线程池，可以通过`shutdown`和`shutdownNow`这两个方法。它们的原理都是遍历线程池中所有的线程，然后依次中断线程。`shutdown`和`shutdownNow`还是有不一样的地方：\n\n1. `shutdownNow`首先将线程池的状态设置为**STOP**,然后尝试**停止所有的正在执行和未执行任务**的线程，并返回等待执行任务的列表；\n2. `shutdown`只是将线程池的状态设置为**SHUTDOWN**状态，然后中断所有没有正在执行任务的线程\n\n可以看出 shutdown 方法会将正在执行的任务继续执行完，而 shutdownNow 会直接中断正在执行的任务。调用了这两个方法的任意一个，`isShutdown`方法都会返回 true，当所有的线程都关闭成功，才表示线程池成功关闭，这时调用`isTerminated`方法才会返回 true。\n\n# 5. 如何合理配置线程池参数？\n\n要想合理的配置线程池，就必须首先分析任务特性，可以从以下几个角度来进行分析：\n\n1. 任务的性质：CPU 密集型任务，IO 密集型任务和混合型任务。\n2. 任务的优先级：高，中和低。\n3. 任务的执行时间：长，中和短。\n4. 任务的依赖性：是否依赖其他系统资源，如数据库连接。\n\n任务性质不同的任务可以用不同规模的线程池分开处理。CPU 密集型任务配置尽可能少的线程数量，如配置**Ncpu+1**个线程的线程池。IO 密集型任务则由于需要等待 IO 操作，线程并不是一直在执行任务，则配置尽可能多的线程，如**2xNcpu**。混合型的任务，如果可以拆分，则将其拆分成一个 CPU 密集型任务和一个 IO 密集型任务，只要这两个任务执行的时间相差不是太大，那么分解后执行的吞吐率要高于串行执行的吞吐率，如果这两个任务执行时间相差太大，则没必要进行分解。我们可以通过`Runtime.getRuntime().availableProcessors()`方法获得当前设备的 CPU 个数。\n\n优先级不同的任务可以使用优先级队列 PriorityBlockingQueue 来处理。它可以让优先级高的任务先得到执行，需要注意的是如果一直有优先级高的任务提交到队列里，那么优先级低的任务可能永远不能执行。\n\n执行时间不同的任务可以交给不同规模的线程池来处理，或者也可以使用优先级队列，让执行时间短的任务先执行。\n\n依赖数据库连接池的任务，因为线程提交 SQL 后需要等待数据库返回结果，如果等待的时间越长 CPU 空闲时间就越长，那么线程数应该设置越大，这样才能更好的利用 CPU。\n\n并且，阻塞队列**最好是使用有界队列**，如果采用无界队列的话，一旦任务积压在阻塞队列中的话就会占用过多的内存资源，甚至会使得系统崩溃。\n\n# 6.常用的封装好的线程池\n\n#### **1. SingleThreadExecutor 线程池**\n\n这个线程池只有一个核心线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。\n\n- corePoolSize：1，只有一个核心线程在工作。\n- maximumPoolSize：1。\n- keepAliveTime：0L。\n- workQueue：new LinkedBlockingQueue<Runnable>()，其缓冲队列是无界的。\n\n#### **2. FixedThreadPool 线程池**\n\nFixedThreadPool 是固定大小的线程池，只有核心线程。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。\n\nFixedThreadPool 多数针对一些很稳定很固定的正规并发线程，多用于服务器。\n\n- corePoolSize：nThreads\n- maximumPoolSize：nThreads\n- keepAliveTime：0L\n- workQueue：new LinkedBlockingQueue<Runnable>()，其缓冲队列是无界的。\n\n#### **3. CachedThreadPool 线程池**\n\nCachedThreadPool 是无界线程池，如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60 秒不执行任务）线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。\n\n线程池大小完全依赖于操作系统（或者说 JVM）能够创建的最大线程大小。SynchronousQueue 是一个是缓冲区为 1 的阻塞队列。\n\n缓存型池子通常用于执行一些生存期很短的异步型任务，因此在一些面向连接的 daemon 型 SERVER 中用得不多。但对于生存期短的异步任务，它是 Executor 的首选。\n\n- corePoolSize：0\n- maximumPoolSize：Integer.MAX_VALUE\n- keepAliveTime：60L\n- workQueue：new SynchronousQueue<Runnable>()，一个是缓冲区为 1 的阻塞队列。\n\n#### **4. ScheduledThreadPool 线程池**\n\nScheduledThreadPool：核心线程池固定，大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。创建一个周期性执行任务的线程池。如果闲置，非核心线程池会在 DEFAULT_KEEPALIVEMILLIS 时间内回收。\n\n- corePoolSize：corePoolSize\n- maximumPoolSize：Integer.MAX_VALUE\n- keepAliveTime：DEFAULT_KEEPALIVE_MILLIS\n- workQueue：new DelayedWorkQueue()","slug":"线程池原理","published":1,"updated":"2021-04-29T09:35:59.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mlev002qvkvy9zxt8scn","content":"<h1 id=\"1-为什么要使用线程池\"><a href=\"#1-为什么要使用线程池\" class=\"headerlink\" title=\"1. 为什么要使用线程池\"></a>1. 为什么要使用线程池</h1><p>在实际使用中，线程是很占用系统资源的，如果对线程管理不善很容易导致系统问题。因此，在大多数并发框架中都会使用<strong>线程池</strong>来管理线程，使用线程池管理线程主要有如下好处：</p>\n<ol>\n<li><strong>降低资源消耗</strong>。通过复用已存在的线程和降低线程关闭的次数来尽可能降低系统性能损耗；</li>\n<li><strong>提升系统响应速度</strong>。通过复用线程，省去创建线程的过程，因此整体上提升了系统的响应速度；</li>\n<li><strong>提高线程的可管理性</strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，因此，需要使用线程池来管理线程。</li>\n</ol>\n<h1 id=\"2-线程池的工作原理\"><a href=\"#2-线程池的工作原理\" class=\"headerlink\" title=\"2. 线程池的工作原理\"></a>2. 线程池的工作原理</h1><p>当一个并发任务提交给线程池，线程池分配线程去执行任务的过程如下图所示：</p>\n<p><img src=\"/2020/01/22/xian-cheng-chi-yuan-li/1.png\" alt=\"线程池执行流程\"></p>\n<p>从图可以看出，线程池执行所提交的任务过程主要有这样几个阶段：</p>\n<ol>\n<li>先判断线程池中<strong>核心线程池</strong>所有的线程是否都在执行任务。如果不是，则新创建一个线程执行刚提交的任务，否则，核心线程池中所有的线程都在执行任务，则进入第 2 步；</li>\n<li>判断当前<strong>阻塞队列</strong>是否已满，如果未满，则将提交的任务放置在阻塞队列中；否则，则进入第 3 步；</li>\n<li>判断<strong>线程池中所有的线程</strong>是否都在执行任务，如果没有，则创建一个新的线程来执行任务，否则，则交给饱和策略进行处理</li>\n</ol>\n<h1 id=\"3-线程池的创建\"><a href=\"#3-线程池的创建\" class=\"headerlink\" title=\"3. 线程池的创建\"></a>3. 线程池的创建</h1><p>创建线程池主要是<strong>ThreadPoolExecutor</strong>类来完成，ThreadPoolExecutor 的有许多重载的构造方法，通过参数最多的构造方法来理解创建线程池有哪些需要配置的参数。ThreadPoolExecutor 的构造方法为：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token function\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">,</span>\n                              <span class=\"token keyword\">int</span> maximumPoolSize<span class=\"token punctuation\">,</span>\n                              <span class=\"token keyword\">long</span> keepAliveTime<span class=\"token punctuation\">,</span>\n                              TimeUnit unit<span class=\"token punctuation\">,</span>\n                              BlockingQueue<span class=\"token operator\">&lt;</span>Runnable<span class=\"token operator\">></span> workQueue<span class=\"token punctuation\">,</span>\n                              ThreadFactory threadFactory<span class=\"token punctuation\">,</span>\n                              RejectedExecutionHandler handler<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>下面对参数进行说明：</p>\n<ol>\n<li>corePoolSize：表示核心线程池的大小。当提交一个任务时，如果当前核心线程池的线程个数没有达到 corePoolSize，则会创建新的线程来执行所提交的任务，<strong>即使当前核心线程池有空闲的线程</strong>。如果当前核心线程池的线程个数已经达到了 corePoolSize，则不再重新创建线程。如果调用了<code>prestartCoreThread()</code>或者 <code>prestartAllCoreThreads()</code>，线程池创建的时候所有的核心线程都会被创建并且启动。</li>\n<li>maximumPoolSize：表示线程池能创建线程的最大个数。如果当阻塞队列已满时，并且当前线程池线程个数没有超过 maximumPoolSize 的话，就会创建新的线程来执行任务。</li>\n<li>keepAliveTime：空闲线程存活时间。如果当前线程池的线程个数已经超过了 corePoolSize，并且线程空闲时间超过了 keepAliveTime 的话，就会将这些空闲线程销毁，这样可以尽可能降低系统资源消耗。</li>\n<li>unit：时间单位。为 keepAliveTime 指定时间单位。</li>\n<li>workQueue：阻塞队列。用于保存任务的阻塞队列。可以使用<strong>ArrayBlockingQueue, LinkedBlockingQueue, SynchronousQueue, PriorityBlockingQueue</strong>。</li>\n<li>threadFactory：创建线程的工程类。可以通过指定线程工厂为每个创建出来的线程设置更有意义的名字，如果出现并发问题，也方便查找问题原因。</li>\n<li><ol>\n<li>AbortPolicy： 直接拒绝所提交的任务，并抛出<strong>RejectedExecutionException</strong>异常；</li>\n<li>CallerRunsPolicy：只用调用者所在的线程来执行任务；</li>\n<li>DiscardPolicy：不处理直接丢弃掉任务；</li>\n<li>DiscardOldestPolicy：丢弃掉阻塞队列中存放时间最久的任务，执行当前任务</li>\n</ol>\n</li>\n</ol>\n<p>通过 ThreadPoolExecutor 创建线程池后，提交任务后执行过程是怎样的，下面来通过源码来看一看。execute 方法源码如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>Runnable command<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>command <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">/*\n     * Proceed in 3 steps:\n     *\n     * 1. If fewer than corePoolSize threads are running, try to\n     * start a new thread with the given command as its first\n     * task.  The call to addWorker atomically checks runState and\n     * workerCount, and so prevents false alarms that would add\n     * threads when it shouldn't, by returning false.\n     *\n     * 2. If a task can be successfully queued, then we still need\n     * to double-check whether we should have added a thread\n     * (because existing ones died since last checking) or that\n     * the pool shut down since entry into this method. So we\n     * recheck state and if necessary roll back the enqueuing if\n     * stopped, or start a new thread if there are none.\n     *\n     * 3. If we cannot queue task, then we try to add a new\n     * thread.  If it fails, we know we are shut down or saturated\n     * and so reject the task.\n     */</span>\n    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//如果线程池的线程个数少于corePoolSize则创建新线程执行当前任务</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">workerCountOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> corePoolSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">addWorker</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        c <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">//如果线程个数大于corePoolSize或者创建线程失败，则将任务存放在阻塞队列workQueue中</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> workQueue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> recheck <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span>recheck<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">workerCountOf</span><span class=\"token punctuation\">(</span>recheck<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token function\">addWorker</span><span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">//如果当前任务无法放进阻塞队列中，则创建新的线程来执行任务</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">addWorker</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>ThreadPoolExecutor 的 execute 方法执行逻辑请见注释。下图为 ThreadPoolExecutor 的 execute 方法的执行示意图：</p>\n<p><img src=\"/2020/01/22/xian-cheng-chi-yuan-li/2.png\" alt=\"execute执行过程\"></p>\n<p>execute 方法执行逻辑有这样几种情况：</p>\n<ol>\n<li>如果当前运行的线程少于 corePoolSize，则会创建新的线程来执行新的任务；</li>\n<li>如果运行的线程个数等于或者大于 corePoolSize，则会将提交的任务存放到阻塞队列 workQueue 中；</li>\n<li>如果当前 workQueue 队列已满的话，则会创建新的线程来执行任务；</li>\n<li>如果线程个数已经超过了 maximumPoolSize，则会使用饱和策略 RejectedExecutionHandler 来进行处理。</li>\n</ol>\n<p>需要注意的是，线程池的设计思想就是使用了<strong>核心线程池 corePoolSize，阻塞队列 workQueue 和线程池 maximumPoolSize</strong>，这样的缓存策略来处理任务，实际上这样的设计思想在需要框架中都会使用。</p>\n<h1 id=\"4-线程池的关闭\"><a href=\"#4-线程池的关闭\" class=\"headerlink\" title=\"4. 线程池的关闭\"></a>4. 线程池的关闭</h1><p>关闭线程池，可以通过<code>shutdown</code>和<code>shutdownNow</code>这两个方法。它们的原理都是遍历线程池中所有的线程，然后依次中断线程。<code>shutdown</code>和<code>shutdownNow</code>还是有不一样的地方：</p>\n<ol>\n<li><code>shutdownNow</code>首先将线程池的状态设置为<strong>STOP</strong>,然后尝试<strong>停止所有的正在执行和未执行任务</strong>的线程，并返回等待执行任务的列表；</li>\n<li><code>shutdown</code>只是将线程池的状态设置为<strong>SHUTDOWN</strong>状态，然后中断所有没有正在执行任务的线程</li>\n</ol>\n<p>可以看出 shutdown 方法会将正在执行的任务继续执行完，而 shutdownNow 会直接中断正在执行的任务。调用了这两个方法的任意一个，<code>isShutdown</code>方法都会返回 true，当所有的线程都关闭成功，才表示线程池成功关闭，这时调用<code>isTerminated</code>方法才会返回 true。</p>\n<h1 id=\"5-如何合理配置线程池参数？\"><a href=\"#5-如何合理配置线程池参数？\" class=\"headerlink\" title=\"5. 如何合理配置线程池参数？\"></a>5. 如何合理配置线程池参数？</h1><p>要想合理的配置线程池，就必须首先分析任务特性，可以从以下几个角度来进行分析：</p>\n<ol>\n<li>任务的性质：CPU 密集型任务，IO 密集型任务和混合型任务。</li>\n<li>任务的优先级：高，中和低。</li>\n<li>任务的执行时间：长，中和短。</li>\n<li>任务的依赖性：是否依赖其他系统资源，如数据库连接。</li>\n</ol>\n<p>任务性质不同的任务可以用不同规模的线程池分开处理。CPU 密集型任务配置尽可能少的线程数量，如配置<strong>Ncpu+1</strong>个线程的线程池。IO 密集型任务则由于需要等待 IO 操作，线程并不是一直在执行任务，则配置尽可能多的线程，如<strong>2xNcpu</strong>。混合型的任务，如果可以拆分，则将其拆分成一个 CPU 密集型任务和一个 IO 密集型任务，只要这两个任务执行的时间相差不是太大，那么分解后执行的吞吐率要高于串行执行的吞吐率，如果这两个任务执行时间相差太大，则没必要进行分解。我们可以通过<code>Runtime.getRuntime().availableProcessors()</code>方法获得当前设备的 CPU 个数。</p>\n<p>优先级不同的任务可以使用优先级队列 PriorityBlockingQueue 来处理。它可以让优先级高的任务先得到执行，需要注意的是如果一直有优先级高的任务提交到队列里，那么优先级低的任务可能永远不能执行。</p>\n<p>执行时间不同的任务可以交给不同规模的线程池来处理，或者也可以使用优先级队列，让执行时间短的任务先执行。</p>\n<p>依赖数据库连接池的任务，因为线程提交 SQL 后需要等待数据库返回结果，如果等待的时间越长 CPU 空闲时间就越长，那么线程数应该设置越大，这样才能更好的利用 CPU。</p>\n<p>并且，阻塞队列<strong>最好是使用有界队列</strong>，如果采用无界队列的话，一旦任务积压在阻塞队列中的话就会占用过多的内存资源，甚至会使得系统崩溃。</p>\n<h1 id=\"6-常用的封装好的线程池\"><a href=\"#6-常用的封装好的线程池\" class=\"headerlink\" title=\"6.常用的封装好的线程池\"></a>6.常用的封装好的线程池</h1><h4 id=\"1-SingleThreadExecutor-线程池\"><a href=\"#1-SingleThreadExecutor-线程池\" class=\"headerlink\" title=\"1. SingleThreadExecutor 线程池\"></a><strong>1. SingleThreadExecutor 线程池</strong></h4><p>这个线程池只有一个核心线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。</p>\n<ul>\n<li>corePoolSize：1，只有一个核心线程在工作。</li>\n<li>maximumPoolSize：1。</li>\n<li>keepAliveTime：0L。</li>\n<li>workQueue：new LinkedBlockingQueue<runnable>()，其缓冲队列是无界的。</runnable></li>\n</ul>\n<h4 id=\"2-FixedThreadPool-线程池\"><a href=\"#2-FixedThreadPool-线程池\" class=\"headerlink\" title=\"2. FixedThreadPool 线程池\"></a><strong>2. FixedThreadPool 线程池</strong></h4><p>FixedThreadPool 是固定大小的线程池，只有核心线程。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。</p>\n<p>FixedThreadPool 多数针对一些很稳定很固定的正规并发线程，多用于服务器。</p>\n<ul>\n<li>corePoolSize：nThreads</li>\n<li>maximumPoolSize：nThreads</li>\n<li>keepAliveTime：0L</li>\n<li>workQueue：new LinkedBlockingQueue<runnable>()，其缓冲队列是无界的。</runnable></li>\n</ul>\n<h4 id=\"3-CachedThreadPool-线程池\"><a href=\"#3-CachedThreadPool-线程池\" class=\"headerlink\" title=\"3. CachedThreadPool 线程池\"></a><strong>3. CachedThreadPool 线程池</strong></h4><p>CachedThreadPool 是无界线程池，如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60 秒不执行任务）线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。</p>\n<p>线程池大小完全依赖于操作系统（或者说 JVM）能够创建的最大线程大小。SynchronousQueue 是一个是缓冲区为 1 的阻塞队列。</p>\n<p>缓存型池子通常用于执行一些生存期很短的异步型任务，因此在一些面向连接的 daemon 型 SERVER 中用得不多。但对于生存期短的异步任务，它是 Executor 的首选。</p>\n<ul>\n<li>corePoolSize：0</li>\n<li>maximumPoolSize：Integer.MAX_VALUE</li>\n<li>keepAliveTime：60L</li>\n<li>workQueue：new SynchronousQueue<runnable>()，一个是缓冲区为 1 的阻塞队列。</runnable></li>\n</ul>\n<h4 id=\"4-ScheduledThreadPool-线程池\"><a href=\"#4-ScheduledThreadPool-线程池\" class=\"headerlink\" title=\"4. ScheduledThreadPool 线程池\"></a><strong>4. ScheduledThreadPool 线程池</strong></h4><p>ScheduledThreadPool：核心线程池固定，大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。创建一个周期性执行任务的线程池。如果闲置，非核心线程池会在 DEFAULT_KEEPALIVEMILLIS 时间内回收。</p>\n<ul>\n<li>corePoolSize：corePoolSize</li>\n<li>maximumPoolSize：Integer.MAX_VALUE</li>\n<li>keepAliveTime：DEFAULT_KEEPALIVE_MILLIS</li>\n<li>workQueue：new DelayedWorkQueue()</li>\n</ul>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h1 id=\"1-为什么要使用线程池\"><a href=\"#1-为什么要使用线程池\" class=\"headerlink\" title=\"1. 为什么要使用线程池\"></a>1. 为什么要使用线程池</h1><p>在实际使用中，线程是很占用系统资源的，如果对线程管理不善很容易导致系统问题。因此，在大多数并发框架中都会使用<strong>线程池</strong>来管理线程，使用线程池管理线程主要有如下好处：</p>\n<ol>\n<li><strong>降低资源消耗</strong>。通过复用已存在的线程和降低线程关闭的次数来尽可能降低系统性能损耗；</li>\n<li><strong>提升系统响应速度</strong>。通过复用线程，省去创建线程的过程，因此整体上提升了系统的响应速度；</li>\n<li><strong>提高线程的可管理性</strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，因此，需要使用线程池来管理线程。</li>\n</ol>\n<h1 id=\"2-线程池的工作原理\"><a href=\"#2-线程池的工作原理\" class=\"headerlink\" title=\"2. 线程池的工作原理\"></a>2. 线程池的工作原理</h1><p>当一个并发任务提交给线程池，线程池分配线程去执行任务的过程如下图所示：</p>\n<p><img src=\"/2020/01/22/xian-cheng-chi-yuan-li/1.png\" alt=\"线程池执行流程\"></p>\n<p>从图可以看出，线程池执行所提交的任务过程主要有这样几个阶段：</p>\n<ol>\n<li>先判断线程池中<strong>核心线程池</strong>所有的线程是否都在执行任务。如果不是，则新创建一个线程执行刚提交的任务，否则，核心线程池中所有的线程都在执行任务，则进入第 2 步；</li>\n<li>判断当前<strong>阻塞队列</strong>是否已满，如果未满，则将提交的任务放置在阻塞队列中；否则，则进入第 3 步；</li>\n<li>判断<strong>线程池中所有的线程</strong>是否都在执行任务，如果没有，则创建一个新的线程来执行任务，否则，则交给饱和策略进行处理</li>\n</ol>\n<h1 id=\"3-线程池的创建\"><a href=\"#3-线程池的创建\" class=\"headerlink\" title=\"3. 线程池的创建\"></a>3. 线程池的创建</h1><p>创建线程池主要是<strong>ThreadPoolExecutor</strong>类来完成，ThreadPoolExecutor 的有许多重载的构造方法，通过参数最多的构造方法来理解创建线程池有哪些需要配置的参数。ThreadPoolExecutor 的构造方法为：</p>\n<pre><code class=\"java\">ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue&lt;Runnable&gt; workQueue,\n                              ThreadFactory threadFactory,\n                              RejectedExecutionHandler handler)</code></pre>\n<p>下面对参数进行说明：</p>\n<ol>\n<li>corePoolSize：表示核心线程池的大小。当提交一个任务时，如果当前核心线程池的线程个数没有达到 corePoolSize，则会创建新的线程来执行所提交的任务，<strong>即使当前核心线程池有空闲的线程</strong>。如果当前核心线程池的线程个数已经达到了 corePoolSize，则不再重新创建线程。如果调用了<code>prestartCoreThread()</code>或者 <code>prestartAllCoreThreads()</code>，线程池创建的时候所有的核心线程都会被创建并且启动。</li>\n<li>maximumPoolSize：表示线程池能创建线程的最大个数。如果当阻塞队列已满时，并且当前线程池线程个数没有超过 maximumPoolSize 的话，就会创建新的线程来执行任务。</li>\n<li>keepAliveTime：空闲线程存活时间。如果当前线程池的线程个数已经超过了 corePoolSize，并且线程空闲时间超过了 keepAliveTime 的话，就会将这些空闲线程销毁，这样可以尽可能降低系统资源消耗。</li>\n<li>unit：时间单位。为 keepAliveTime 指定时间单位。</li>\n<li>workQueue：阻塞队列。用于保存任务的阻塞队列。可以使用<strong>ArrayBlockingQueue, LinkedBlockingQueue, SynchronousQueue, PriorityBlockingQueue</strong>。</li>\n<li>threadFactory：创建线程的工程类。可以通过指定线程工厂为每个创建出来的线程设置更有意义的名字，如果出现并发问题，也方便查找问题原因。</li>\n<li><ol>\n<li>AbortPolicy： 直接拒绝所提交的任务，并抛出<strong>RejectedExecutionException</strong>异常；</li>\n<li>CallerRunsPolicy：只用调用者所在的线程来执行任务；</li>\n<li>DiscardPolicy：不处理直接丢弃掉任务；</li>\n<li>DiscardOldestPolicy：丢弃掉阻塞队列中存放时间最久的任务，执行当前任务</li>\n</ol>\n</li>\n</ol>\n<p>通过 ThreadPoolExecutor 创建线程池后，提交任务后执行过程是怎样的，下面来通过源码来看一看。execute 方法源码如下：</p>\n<pre><code class=\"java\">public void execute(Runnable command) {\n    if (command == null)\n        throw new NullPointerException();\n    /*\n     * Proceed in 3 steps:\n     *\n     * 1. If fewer than corePoolSize threads are running, try to\n     * start a new thread with the given command as its first\n     * task.  The call to addWorker atomically checks runState and\n     * workerCount, and so prevents false alarms that would add\n     * threads when it shouldn&#39;t, by returning false.\n     *\n     * 2. If a task can be successfully queued, then we still need\n     * to double-check whether we should have added a thread\n     * (because existing ones died since last checking) or that\n     * the pool shut down since entry into this method. So we\n     * recheck state and if necessary roll back the enqueuing if\n     * stopped, or start a new thread if there are none.\n     *\n     * 3. If we cannot queue task, then we try to add a new\n     * thread.  If it fails, we know we are shut down or saturated\n     * and so reject the task.\n     */\n    int c = ctl.get();\n    //如果线程池的线程个数少于corePoolSize则创建新线程执行当前任务\n    if (workerCountOf(c) &lt; corePoolSize) {\n        if (addWorker(command, true))\n            return;\n        c = ctl.get();\n    }\n    //如果线程个数大于corePoolSize或者创建线程失败，则将任务存放在阻塞队列workQueue中\n    if (isRunning(c) &amp;&amp; workQueue.offer(command)) {\n        int recheck = ctl.get();\n        if (! isRunning(recheck) &amp;&amp; remove(command))\n            reject(command);\n        else if (workerCountOf(recheck) == 0)\n            addWorker(null, false);\n    }\n    //如果当前任务无法放进阻塞队列中，则创建新的线程来执行任务\n    else if (!addWorker(command, false))\n        reject(command);\n}</code></pre>\n<p>ThreadPoolExecutor 的 execute 方法执行逻辑请见注释。下图为 ThreadPoolExecutor 的 execute 方法的执行示意图：</p>\n<p><img src=\"/2020/01/22/xian-cheng-chi-yuan-li/2.png\" alt=\"execute执行过程\"></p>\n<p>execute 方法执行逻辑有这样几种情况：</p>\n<ol>\n<li>如果当前运行的线程少于 corePoolSize，则会创建新的线程来执行新的任务；</li>\n<li>如果运行的线程个数等于或者大于 corePoolSize，则会将提交的任务存放到阻塞队列 workQueue 中；</li>\n<li>如果当前 workQueue 队列已满的话，则会创建新的线程来执行任务；</li>\n<li>如果线程个数已经超过了 maximumPoolSize，则会使用饱和策略 RejectedExecutionHandler 来进行处理。</li>\n</ol>\n<p>需要注意的是，线程池的设计思想就是使用了<strong>核心线程池 corePoolSize，阻塞队列 workQueue 和线程池 maximumPoolSize</strong>，这样的缓存策略来处理任务，实际上这样的设计思想在需要框架中都会使用。</p>\n<h1 id=\"4-线程池的关闭\"><a href=\"#4-线程池的关闭\" class=\"headerlink\" title=\"4. 线程池的关闭\"></a>4. 线程池的关闭</h1><p>关闭线程池，可以通过<code>shutdown</code>和<code>shutdownNow</code>这两个方法。它们的原理都是遍历线程池中所有的线程，然后依次中断线程。<code>shutdown</code>和<code>shutdownNow</code>还是有不一样的地方：</p>\n<ol>\n<li><code>shutdownNow</code>首先将线程池的状态设置为<strong>STOP</strong>,然后尝试<strong>停止所有的正在执行和未执行任务</strong>的线程，并返回等待执行任务的列表；</li>\n<li><code>shutdown</code>只是将线程池的状态设置为<strong>SHUTDOWN</strong>状态，然后中断所有没有正在执行任务的线程</li>\n</ol>\n<p>可以看出 shutdown 方法会将正在执行的任务继续执行完，而 shutdownNow 会直接中断正在执行的任务。调用了这两个方法的任意一个，<code>isShutdown</code>方法都会返回 true，当所有的线程都关闭成功，才表示线程池成功关闭，这时调用<code>isTerminated</code>方法才会返回 true。</p>\n<h1 id=\"5-如何合理配置线程池参数？\"><a href=\"#5-如何合理配置线程池参数？\" class=\"headerlink\" title=\"5. 如何合理配置线程池参数？\"></a>5. 如何合理配置线程池参数？</h1><p>要想合理的配置线程池，就必须首先分析任务特性，可以从以下几个角度来进行分析：</p>\n<ol>\n<li>任务的性质：CPU 密集型任务，IO 密集型任务和混合型任务。</li>\n<li>任务的优先级：高，中和低。</li>\n<li>任务的执行时间：长，中和短。</li>\n<li>任务的依赖性：是否依赖其他系统资源，如数据库连接。</li>\n</ol>\n<p>任务性质不同的任务可以用不同规模的线程池分开处理。CPU 密集型任务配置尽可能少的线程数量，如配置<strong>Ncpu+1</strong>个线程的线程池。IO 密集型任务则由于需要等待 IO 操作，线程并不是一直在执行任务，则配置尽可能多的线程，如<strong>2xNcpu</strong>。混合型的任务，如果可以拆分，则将其拆分成一个 CPU 密集型任务和一个 IO 密集型任务，只要这两个任务执行的时间相差不是太大，那么分解后执行的吞吐率要高于串行执行的吞吐率，如果这两个任务执行时间相差太大，则没必要进行分解。我们可以通过<code>Runtime.getRuntime().availableProcessors()</code>方法获得当前设备的 CPU 个数。</p>\n<p>优先级不同的任务可以使用优先级队列 PriorityBlockingQueue 来处理。它可以让优先级高的任务先得到执行，需要注意的是如果一直有优先级高的任务提交到队列里，那么优先级低的任务可能永远不能执行。</p>\n<p>执行时间不同的任务可以交给不同规模的线程池来处理，或者也可以使用优先级队列，让执行时间短的任务先执行。</p>\n<p>依赖数据库连接池的任务，因为线程提交 SQL 后需要等待数据库返回结果，如果等待的时间越长 CPU 空闲时间就越长，那么线程数应该设置越大，这样才能更好的利用 CPU。</p>\n<p>并且，阻塞队列<strong>最好是使用有界队列</strong>，如果采用无界队列的话，一旦任务积压在阻塞队列中的话就会占用过多的内存资源，甚至会使得系统崩溃。</p>\n<h1 id=\"6-常用的封装好的线程池\"><a href=\"#6-常用的封装好的线程池\" class=\"headerlink\" title=\"6.常用的封装好的线程池\"></a>6.常用的封装好的线程池</h1><h4 id=\"1-SingleThreadExecutor-线程池\"><a href=\"#1-SingleThreadExecutor-线程池\" class=\"headerlink\" title=\"1. SingleThreadExecutor 线程池\"></a><strong>1. SingleThreadExecutor 线程池</strong></h4><p>这个线程池只有一个核心线程在工作，也就是相当于单线程串行执行所有任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。</p>\n<ul>\n<li>corePoolSize：1，只有一个核心线程在工作。</li>\n<li>maximumPoolSize：1。</li>\n<li>keepAliveTime：0L。</li>\n<li>workQueue：new LinkedBlockingQueue<runnable>()，其缓冲队列是无界的。</runnable></li>\n</ul>\n<h4 id=\"2-FixedThreadPool-线程池\"><a href=\"#2-FixedThreadPool-线程池\" class=\"headerlink\" title=\"2. FixedThreadPool 线程池\"></a><strong>2. FixedThreadPool 线程池</strong></h4><p>FixedThreadPool 是固定大小的线程池，只有核心线程。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。</p>\n<p>FixedThreadPool 多数针对一些很稳定很固定的正规并发线程，多用于服务器。</p>\n<ul>\n<li>corePoolSize：nThreads</li>\n<li>maximumPoolSize：nThreads</li>\n<li>keepAliveTime：0L</li>\n<li>workQueue：new LinkedBlockingQueue<runnable>()，其缓冲队列是无界的。</runnable></li>\n</ul>\n<h4 id=\"3-CachedThreadPool-线程池\"><a href=\"#3-CachedThreadPool-线程池\" class=\"headerlink\" title=\"3. CachedThreadPool 线程池\"></a><strong>3. CachedThreadPool 线程池</strong></h4><p>CachedThreadPool 是无界线程池，如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60 秒不执行任务）线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。</p>\n<p>线程池大小完全依赖于操作系统（或者说 JVM）能够创建的最大线程大小。SynchronousQueue 是一个是缓冲区为 1 的阻塞队列。</p>\n<p>缓存型池子通常用于执行一些生存期很短的异步型任务，因此在一些面向连接的 daemon 型 SERVER 中用得不多。但对于生存期短的异步任务，它是 Executor 的首选。</p>\n<ul>\n<li>corePoolSize：0</li>\n<li>maximumPoolSize：Integer.MAX_VALUE</li>\n<li>keepAliveTime：60L</li>\n<li>workQueue：new SynchronousQueue<runnable>()，一个是缓冲区为 1 的阻塞队列。</runnable></li>\n</ul>\n<h4 id=\"4-ScheduledThreadPool-线程池\"><a href=\"#4-ScheduledThreadPool-线程池\" class=\"headerlink\" title=\"4. ScheduledThreadPool 线程池\"></a><strong>4. ScheduledThreadPool 线程池</strong></h4><p>ScheduledThreadPool：核心线程池固定，大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。创建一个周期性执行任务的线程池。如果闲置，非核心线程池会在 DEFAULT_KEEPALIVEMILLIS 时间内回收。</p>\n<ul>\n<li>corePoolSize：corePoolSize</li>\n<li>maximumPoolSize：Integer.MAX_VALUE</li>\n<li>keepAliveTime：DEFAULT_KEEPALIVE_MILLIS</li>\n<li>workQueue：new DelayedWorkQueue()</li>\n</ul>\n"},{"title":"网络七层架构","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-20T12:26:37.000Z","password":null,"summary":null,"_content":"\n### 网络七层架构\n\n7 层模型主要包括：\n\n#### 物理层\n\n主要定义物理设备标准，如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等。 它的主要作用是传输比特流（就是由 1、 0 转化为电流强弱来进行传输,到达目的地后在转化为1、 0，也就是我们常说的**模数转换与数模转换**）。**这一层的数据叫做比特**。\n\n#### 数据链路层\n\n主要将从物理层接收的数据进行 MAC 地址（网卡的地址）的封装与解封装。**常把这一层的数据叫做帧(Frame)**。在这一层工作的设备是交换机，**数据通过交换机来传输**,有一些书本也将改层细分为LLC(逻辑链路控制)和MAC(媒体访问控制)。\n\n#### 网络层\n\n主要将从下层接收到的数据进行 IP 地址（例 192.168.0.1)的封装与解封装。**在这一层工作的设备是路由器**，**常把这一层的数据叫做数据包(Packet)**,其又可以细分控制层面和数据层面.\n\n#### 传输层\n\n定义了一些**传输数据的协议和端口号**（WWW 端口 80 等），如： **TCP**（传输控制协议，传输效率低，可靠性强，用于传输可靠性要求高，数据量大的数据）， **UDP**（用户数据报协议，与 TCP 特性恰恰相反，用于传输可靠性要求不高，数据量小的数据，如 QQ 聊天数据就是通过这种方式传输的）。 主要是将从下层接收的数据进行分段进行传输，到达目的地址后在进行重组。**常常把这一层数据叫做段(Segment)**\n\n#### 会话层\n\n通过传输层（端口号：传输端口与接收端口） **建立数据传输的通路**。主要在你的系统之间发起会话或或者接受会话请求（设备之间需要互相认识可以是 IP 也可以是 MAC 或者是主机名）\n\n#### 表示层\n\n主要是进行对接收的数据进行**解释、加密与解密、压缩与解压缩**等（也就是把计算机能够识别的东西转换成人能够能识别的东西（如图片、声音等））\n\n#### 应用层\n\n主要是一些终端的应用，比如说FTP（各种文件下载）， HTTP（浏览器请求内容），DNS(域名解析为ip地址),SMTP(邮件传输)\n\n![](网络七层架构/OSIModel.png)","source":"_posts/网络七层架构.md","raw":"---\ntitle: 网络七层架构\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-20 20:26:37\npassword:\nsummary:\ntags:\ncategories: 计算机网络\n---\n\n### 网络七层架构\n\n7 层模型主要包括：\n\n#### 物理层\n\n主要定义物理设备标准，如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等。 它的主要作用是传输比特流（就是由 1、 0 转化为电流强弱来进行传输,到达目的地后在转化为1、 0，也就是我们常说的**模数转换与数模转换**）。**这一层的数据叫做比特**。\n\n#### 数据链路层\n\n主要将从物理层接收的数据进行 MAC 地址（网卡的地址）的封装与解封装。**常把这一层的数据叫做帧(Frame)**。在这一层工作的设备是交换机，**数据通过交换机来传输**,有一些书本也将改层细分为LLC(逻辑链路控制)和MAC(媒体访问控制)。\n\n#### 网络层\n\n主要将从下层接收到的数据进行 IP 地址（例 192.168.0.1)的封装与解封装。**在这一层工作的设备是路由器**，**常把这一层的数据叫做数据包(Packet)**,其又可以细分控制层面和数据层面.\n\n#### 传输层\n\n定义了一些**传输数据的协议和端口号**（WWW 端口 80 等），如： **TCP**（传输控制协议，传输效率低，可靠性强，用于传输可靠性要求高，数据量大的数据）， **UDP**（用户数据报协议，与 TCP 特性恰恰相反，用于传输可靠性要求不高，数据量小的数据，如 QQ 聊天数据就是通过这种方式传输的）。 主要是将从下层接收的数据进行分段进行传输，到达目的地址后在进行重组。**常常把这一层数据叫做段(Segment)**\n\n#### 会话层\n\n通过传输层（端口号：传输端口与接收端口） **建立数据传输的通路**。主要在你的系统之间发起会话或或者接受会话请求（设备之间需要互相认识可以是 IP 也可以是 MAC 或者是主机名）\n\n#### 表示层\n\n主要是进行对接收的数据进行**解释、加密与解密、压缩与解压缩**等（也就是把计算机能够识别的东西转换成人能够能识别的东西（如图片、声音等））\n\n#### 应用层\n\n主要是一些终端的应用，比如说FTP（各种文件下载）， HTTP（浏览器请求内容），DNS(域名解析为ip地址),SMTP(邮件传输)\n\n![](网络七层架构/OSIModel.png)","slug":"网络七层架构","published":1,"updated":"2020-02-28T05:52:23.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mlez002svkvye4t82fgl","content":"<h3 id=\"网络七层架构\"><a href=\"#网络七层架构\" class=\"headerlink\" title=\"网络七层架构\"></a>网络七层架构</h3><p>7 层模型主要包括：</p>\n<h4 id=\"物理层\"><a href=\"#物理层\" class=\"headerlink\" title=\"物理层\"></a>物理层</h4><p>主要定义物理设备标准，如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等。 它的主要作用是传输比特流（就是由 1、 0 转化为电流强弱来进行传输,到达目的地后在转化为1、 0，也就是我们常说的<strong>模数转换与数模转换</strong>）。<strong>这一层的数据叫做比特</strong>。</p>\n<h4 id=\"数据链路层\"><a href=\"#数据链路层\" class=\"headerlink\" title=\"数据链路层\"></a>数据链路层</h4><p>主要将从物理层接收的数据进行 MAC 地址（网卡的地址）的封装与解封装。<strong>常把这一层的数据叫做帧(Frame)</strong>。在这一层工作的设备是交换机，<strong>数据通过交换机来传输</strong>,有一些书本也将改层细分为LLC(逻辑链路控制)和MAC(媒体访问控制)。</p>\n<h4 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h4><p>主要将从下层接收到的数据进行 IP 地址（例 192.168.0.1)的封装与解封装。<strong>在这一层工作的设备是路由器</strong>，<strong>常把这一层的数据叫做数据包(Packet)</strong>,其又可以细分控制层面和数据层面.</p>\n<h4 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层\"></a>传输层</h4><p>定义了一些<strong>传输数据的协议和端口号</strong>（WWW 端口 80 等），如： <strong>TCP</strong>（传输控制协议，传输效率低，可靠性强，用于传输可靠性要求高，数据量大的数据）， <strong>UDP</strong>（用户数据报协议，与 TCP 特性恰恰相反，用于传输可靠性要求不高，数据量小的数据，如 QQ 聊天数据就是通过这种方式传输的）。 主要是将从下层接收的数据进行分段进行传输，到达目的地址后在进行重组。<strong>常常把这一层数据叫做段(Segment)</strong></p>\n<h4 id=\"会话层\"><a href=\"#会话层\" class=\"headerlink\" title=\"会话层\"></a>会话层</h4><p>通过传输层（端口号：传输端口与接收端口） <strong>建立数据传输的通路</strong>。主要在你的系统之间发起会话或或者接受会话请求（设备之间需要互相认识可以是 IP 也可以是 MAC 或者是主机名）</p>\n<h4 id=\"表示层\"><a href=\"#表示层\" class=\"headerlink\" title=\"表示层\"></a>表示层</h4><p>主要是进行对接收的数据进行<strong>解释、加密与解密、压缩与解压缩</strong>等（也就是把计算机能够识别的东西转换成人能够能识别的东西（如图片、声音等））</p>\n<h4 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h4><p>主要是一些终端的应用，比如说FTP（各种文件下载）， HTTP（浏览器请求内容），DNS(域名解析为ip地址),SMTP(邮件传输)</p>\n<p><img src=\"/2020/01/20/wang-luo-qi-ceng-jia-gou/OSIModel.png\" alt></p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h3 id=\"网络七层架构\"><a href=\"#网络七层架构\" class=\"headerlink\" title=\"网络七层架构\"></a>网络七层架构</h3><p>7 层模型主要包括：</p>\n<h4 id=\"物理层\"><a href=\"#物理层\" class=\"headerlink\" title=\"物理层\"></a>物理层</h4><p>主要定义物理设备标准，如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等。 它的主要作用是传输比特流（就是由 1、 0 转化为电流强弱来进行传输,到达目的地后在转化为1、 0，也就是我们常说的<strong>模数转换与数模转换</strong>）。<strong>这一层的数据叫做比特</strong>。</p>\n<h4 id=\"数据链路层\"><a href=\"#数据链路层\" class=\"headerlink\" title=\"数据链路层\"></a>数据链路层</h4><p>主要将从物理层接收的数据进行 MAC 地址（网卡的地址）的封装与解封装。<strong>常把这一层的数据叫做帧(Frame)</strong>。在这一层工作的设备是交换机，<strong>数据通过交换机来传输</strong>,有一些书本也将改层细分为LLC(逻辑链路控制)和MAC(媒体访问控制)。</p>\n<h4 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h4><p>主要将从下层接收到的数据进行 IP 地址（例 192.168.0.1)的封装与解封装。<strong>在这一层工作的设备是路由器</strong>，<strong>常把这一层的数据叫做数据包(Packet)</strong>,其又可以细分控制层面和数据层面.</p>\n<h4 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层\"></a>传输层</h4><p>定义了一些<strong>传输数据的协议和端口号</strong>（WWW 端口 80 等），如： <strong>TCP</strong>（传输控制协议，传输效率低，可靠性强，用于传输可靠性要求高，数据量大的数据）， <strong>UDP</strong>（用户数据报协议，与 TCP 特性恰恰相反，用于传输可靠性要求不高，数据量小的数据，如 QQ 聊天数据就是通过这种方式传输的）。 主要是将从下层接收的数据进行分段进行传输，到达目的地址后在进行重组。<strong>常常把这一层数据叫做段(Segment)</strong></p>\n<h4 id=\"会话层\"><a href=\"#会话层\" class=\"headerlink\" title=\"会话层\"></a>会话层</h4><p>通过传输层（端口号：传输端口与接收端口） <strong>建立数据传输的通路</strong>。主要在你的系统之间发起会话或或者接受会话请求（设备之间需要互相认识可以是 IP 也可以是 MAC 或者是主机名）</p>\n<h4 id=\"表示层\"><a href=\"#表示层\" class=\"headerlink\" title=\"表示层\"></a>表示层</h4><p>主要是进行对接收的数据进行<strong>解释、加密与解密、压缩与解压缩</strong>等（也就是把计算机能够识别的东西转换成人能够能识别的东西（如图片、声音等））</p>\n<h4 id=\"应用层\"><a href=\"#应用层\" class=\"headerlink\" title=\"应用层\"></a>应用层</h4><p>主要是一些终端的应用，比如说FTP（各种文件下载）， HTTP（浏览器请求内容），DNS(域名解析为ip地址),SMTP(邮件传输)</p>\n<p><img src=\"/2020/01/20/wang-luo-qi-ceng-jia-gou/OSIModel.png\" alt></p>\n"},{"title":"软件开发六大设计原则","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-10T13:36:19.000Z","password":null,"summary":null,"_content":"\n# 开闭原则\n定义：软件实体如类、模块和函数应该对扩展开放，对修改关闭。\n优点：可提高软件系统的可复用性及可维护性\n举例：一开始需要获取课程的价格，面向接口的开发原则如下\n\n```java\npublic interface Course {\n    Double getPrice();\n}\n\npublic class JavaCourse implements Course {\n    private Double price;\n    public JavaCourse() {\n    }\n    public JavaCourse(Integer id, String name, Double price) {\n        this.price = price;\n    }\n    @Override\n    public Double getPrice() {\n        return this.price;\n    }\npublic class Test {\n    public static void main(String[] args) {\n        Course course = new JavaCourse(1,\"java\",15.25);\n        System.out.println(\"课程价格\"+course.getPrice());\n    }\n}\n}\n```\n后来需求变动，需要显示课程打折后的价格。\n需要做如下变动：\n\n```java\npublic class JavaDiscountCourse extends JavaCourse {\n    public JavaDiscountCourse(Integer id, String name, Double price) {\n        super(id, name, price);\n    }\n    public Double getDiscountPrice(){\n        return this.getPrice()*0.8;\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Course course = new JavaDiscountCourse(1,\"java\",15.25);\n        System.out.println(\"课程价格\"+course.getPrice()+\"\\r\\n课程折后价格\"+((JavaDiscountCourse) course).getDiscountPrice());\n    }\n}\n```\n# 依赖倒置原则\n定义：高层模块不应该依赖底层模块，二者都应该依赖其抽象\n优点：可以减少类之间的耦合性、提高系统稳定性、提高代码可读性和可维护性，可降低修改程序所造成的风险\n代码举例：\n\n```java\npublic interface Course {\n    void study();\n}\n\npublic class PythonCourse implements Course {\n    @Override\n    public void study() {\n        System.out.println(\"学习Python课程\");\n    }\n}\n\npublic class Alice {\n     Course course;\n     public Alice(Course course){\n         this.course = course;\n     }\n     public void studyCourse(){\n         course.study();\n     }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Alice alice = new Alice(new PythonCourse());\n        alice.studyCourse();\n    }\n}\n```\n以上代码通过将PythonCourse的抽象注入Alice中实现了Alice和Course的具体实现的解耦，实现了依赖倒置。\n# 单一职责原则\n定义：不要存在多于一个导致类变更的原因\n优点：降低类的复杂度，提高类的可读性，提高系统的可维护性、降低变更引起的风险\n理解：一个类只需要实现一类功能，不要有几类功能同时在一个类中，这个微服务的思想有些相似，只是一个微服务需要实现的是一大类功能，目的都是使系统细粒度化，便于开发新功能时写更少的代码（用原有的功能通过不同的调用步骤或顺序或传入不同的参数即可组合出新的功能），也就是便于扩展。\n# 接口隔离原则\n定义：用多个专门的接口，而不使用单一的总接口，客户端不应该依赖他不需要的接口。\n优点：符合我们常说的高内聚低耦合的设计思想从而使得类具有很好的可读性、可扩展性和可维护性。\n# 迪米特法则（最少知道原则）\n定义：一个对象应该对其他对象保持最少的了解。\n优点：降低类之间的耦合。\n举例：如下类图并不遵循迪米特原则，因为Boss只需要和TeamLeader交互，而不需要和Course产生依赖。\n![](软件开发六大设计原则/1.png)\n\n改进后满足迪米特原则类关系如下\n![](软件开发六大设计原则/2.png)\n\n# 里斯替换原则\n\n\n\n定义1：如果对每一个类型为 T1的对象 o1，都有类型为 T2 的对象o2，使得以 T1定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。\n\n定义2：所有引用基类的地方必须能透明地使用其子类的对象。\n\n问题由来：有一功能P1，由类A完成。现需要将功能P1进行扩展，扩展后的功能为P，其中P由原有功能P1与新功能P2组成。新功能P由类A的子类B来完成，则子类B在完成新功能P2的同时，有可能会导致原有功能P1发生故障。\n\n解决方案：当使用继承时，遵循里氏替换原则。类B继承类A时，除添加新的方法完成新增功能P2外，尽量不要重写父类A的方法，也尽量不要重载父类A的方法.\n","source":"_posts/软件开发六大设计原则.md","raw":"---\ntitle: 软件开发六大设计原则\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-10 21:36:19\npassword:\nsummary:\ntags:\ncategories: java\n---\n\n# 开闭原则\n定义：软件实体如类、模块和函数应该对扩展开放，对修改关闭。\n优点：可提高软件系统的可复用性及可维护性\n举例：一开始需要获取课程的价格，面向接口的开发原则如下\n\n```java\npublic interface Course {\n    Double getPrice();\n}\n\npublic class JavaCourse implements Course {\n    private Double price;\n    public JavaCourse() {\n    }\n    public JavaCourse(Integer id, String name, Double price) {\n        this.price = price;\n    }\n    @Override\n    public Double getPrice() {\n        return this.price;\n    }\npublic class Test {\n    public static void main(String[] args) {\n        Course course = new JavaCourse(1,\"java\",15.25);\n        System.out.println(\"课程价格\"+course.getPrice());\n    }\n}\n}\n```\n后来需求变动，需要显示课程打折后的价格。\n需要做如下变动：\n\n```java\npublic class JavaDiscountCourse extends JavaCourse {\n    public JavaDiscountCourse(Integer id, String name, Double price) {\n        super(id, name, price);\n    }\n    public Double getDiscountPrice(){\n        return this.getPrice()*0.8;\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Course course = new JavaDiscountCourse(1,\"java\",15.25);\n        System.out.println(\"课程价格\"+course.getPrice()+\"\\r\\n课程折后价格\"+((JavaDiscountCourse) course).getDiscountPrice());\n    }\n}\n```\n# 依赖倒置原则\n定义：高层模块不应该依赖底层模块，二者都应该依赖其抽象\n优点：可以减少类之间的耦合性、提高系统稳定性、提高代码可读性和可维护性，可降低修改程序所造成的风险\n代码举例：\n\n```java\npublic interface Course {\n    void study();\n}\n\npublic class PythonCourse implements Course {\n    @Override\n    public void study() {\n        System.out.println(\"学习Python课程\");\n    }\n}\n\npublic class Alice {\n     Course course;\n     public Alice(Course course){\n         this.course = course;\n     }\n     public void studyCourse(){\n         course.study();\n     }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Alice alice = new Alice(new PythonCourse());\n        alice.studyCourse();\n    }\n}\n```\n以上代码通过将PythonCourse的抽象注入Alice中实现了Alice和Course的具体实现的解耦，实现了依赖倒置。\n# 单一职责原则\n定义：不要存在多于一个导致类变更的原因\n优点：降低类的复杂度，提高类的可读性，提高系统的可维护性、降低变更引起的风险\n理解：一个类只需要实现一类功能，不要有几类功能同时在一个类中，这个微服务的思想有些相似，只是一个微服务需要实现的是一大类功能，目的都是使系统细粒度化，便于开发新功能时写更少的代码（用原有的功能通过不同的调用步骤或顺序或传入不同的参数即可组合出新的功能），也就是便于扩展。\n# 接口隔离原则\n定义：用多个专门的接口，而不使用单一的总接口，客户端不应该依赖他不需要的接口。\n优点：符合我们常说的高内聚低耦合的设计思想从而使得类具有很好的可读性、可扩展性和可维护性。\n# 迪米特法则（最少知道原则）\n定义：一个对象应该对其他对象保持最少的了解。\n优点：降低类之间的耦合。\n举例：如下类图并不遵循迪米特原则，因为Boss只需要和TeamLeader交互，而不需要和Course产生依赖。\n![](软件开发六大设计原则/1.png)\n\n改进后满足迪米特原则类关系如下\n![](软件开发六大设计原则/2.png)\n\n# 里斯替换原则\n\n\n\n定义1：如果对每一个类型为 T1的对象 o1，都有类型为 T2 的对象o2，使得以 T1定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。\n\n定义2：所有引用基类的地方必须能透明地使用其子类的对象。\n\n问题由来：有一功能P1，由类A完成。现需要将功能P1进行扩展，扩展后的功能为P，其中P由原有功能P1与新功能P2组成。新功能P由类A的子类B来完成，则子类B在完成新功能P2的同时，有可能会导致原有功能P1发生故障。\n\n解决方案：当使用继承时，遵循里氏替换原则。类B继承类A时，除添加新的方法完成新增功能P2外，尽量不要重写父类A的方法，也尽量不要重载父类A的方法.\n","slug":"软件开发六大设计原则","published":1,"updated":"2021-04-29T10:24:28.210Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mlf2002uvkvyrkq91vmn","content":"<h1 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h1><p>定义：软件实体如类、模块和函数应该对扩展开放，对修改关闭。<br>优点：可提高软件系统的可复用性及可维护性<br>举例：一开始需要获取课程的价格，面向接口的开发原则如下</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Course</span> <span class=\"token punctuation\">{</span>\n    Double <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JavaCourse</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Course</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> Double price<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">JavaCourse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">JavaCourse</span><span class=\"token punctuation\">(</span>Integer id<span class=\"token punctuation\">,</span> String name<span class=\"token punctuation\">,</span> Double price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> Double <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Course course <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JavaCourse</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"java\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">15.25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"课程价格\"</span><span class=\"token operator\">+</span>course<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>后来需求变动，需要显示课程打折后的价格。<br>需要做如下变动：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JavaDiscountCourse</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JavaCourse</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">JavaDiscountCourse</span><span class=\"token punctuation\">(</span>Integer id<span class=\"token punctuation\">,</span> String name<span class=\"token punctuation\">,</span> Double price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> Double <span class=\"token function\">getDiscountPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">0.8</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Course course <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JavaDiscountCourse</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"java\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">15.25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"课程价格\"</span><span class=\"token operator\">+</span>course<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"\\r\\n课程折后价格\"</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>JavaDiscountCourse<span class=\"token punctuation\">)</span> course<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDiscountPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h1 id=\"依赖倒置原则\"><a href=\"#依赖倒置原则\" class=\"headerlink\" title=\"依赖倒置原则\"></a>依赖倒置原则</h1><p>定义：高层模块不应该依赖底层模块，二者都应该依赖其抽象<br>优点：可以减少类之间的耦合性、提高系统稳定性、提高代码可读性和可维护性，可降低修改程序所造成的风险<br>代码举例：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Course</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">study</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PythonCourse</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Course</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">study</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"学习Python课程\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Alice</span> <span class=\"token punctuation\">{</span>\n     Course course<span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">public</span> <span class=\"token function\">Alice</span><span class=\"token punctuation\">(</span>Course course<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>course <span class=\"token operator\">=</span> course<span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n     <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">studyCourse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n         course<span class=\"token punctuation\">.</span><span class=\"token function\">study</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Alice alice <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Alice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PythonCourse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        alice<span class=\"token punctuation\">.</span><span class=\"token function\">studyCourse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>以上代码通过将PythonCourse的抽象注入Alice中实现了Alice和Course的具体实现的解耦，实现了依赖倒置。</p>\n<h1 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"单一职责原则\"></a>单一职责原则</h1><p>定义：不要存在多于一个导致类变更的原因<br>优点：降低类的复杂度，提高类的可读性，提高系统的可维护性、降低变更引起的风险<br>理解：一个类只需要实现一类功能，不要有几类功能同时在一个类中，这个微服务的思想有些相似，只是一个微服务需要实现的是一大类功能，目的都是使系统细粒度化，便于开发新功能时写更少的代码（用原有的功能通过不同的调用步骤或顺序或传入不同的参数即可组合出新的功能），也就是便于扩展。</p>\n<h1 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h1><p>定义：用多个专门的接口，而不使用单一的总接口，客户端不应该依赖他不需要的接口。<br>优点：符合我们常说的高内聚低耦合的设计思想从而使得类具有很好的可读性、可扩展性和可维护性。</p>\n<h1 id=\"迪米特法则（最少知道原则）\"><a href=\"#迪米特法则（最少知道原则）\" class=\"headerlink\" title=\"迪米特法则（最少知道原则）\"></a>迪米特法则（最少知道原则）</h1><p>定义：一个对象应该对其他对象保持最少的了解。<br>优点：降低类之间的耦合。<br>举例：如下类图并不遵循迪米特原则，因为Boss只需要和TeamLeader交互，而不需要和Course产生依赖。<br><img src=\"/2020/01/10/ruan-jian-kai-fa-liu-da-she-ji-yuan-ze/1.png\" alt></p>\n<p>改进后满足迪米特原则类关系如下<br><img src=\"/2020/01/10/ruan-jian-kai-fa-liu-da-she-ji-yuan-ze/2.png\" alt></p>\n<h1 id=\"里斯替换原则\"><a href=\"#里斯替换原则\" class=\"headerlink\" title=\"里斯替换原则\"></a>里斯替换原则</h1><p>定义1：如果对每一个类型为 T1的对象 o1，都有类型为 T2 的对象o2，使得以 T1定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。</p>\n<p>定义2：所有引用基类的地方必须能透明地使用其子类的对象。</p>\n<p>问题由来：有一功能P1，由类A完成。现需要将功能P1进行扩展，扩展后的功能为P，其中P由原有功能P1与新功能P2组成。新功能P由类A的子类B来完成，则子类B在完成新功能P2的同时，有可能会导致原有功能P1发生故障。</p>\n<p>解决方案：当使用继承时，遵循里氏替换原则。类B继承类A时，除添加新的方法完成新增功能P2外，尽量不要重写父类A的方法，也尽量不要重载父类A的方法.</p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h1 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h1><p>定义：软件实体如类、模块和函数应该对扩展开放，对修改关闭。<br>优点：可提高软件系统的可复用性及可维护性<br>举例：一开始需要获取课程的价格，面向接口的开发原则如下</p>\n<pre><code class=\"java\">public interface Course {\n    Double getPrice();\n}\n\npublic class JavaCourse implements Course {\n    private Double price;\n    public JavaCourse() {\n    }\n    public JavaCourse(Integer id, String name, Double price) {\n        this.price = price;\n    }\n    @Override\n    public Double getPrice() {\n        return this.price;\n    }\npublic class Test {\n    public static void main(String[] args) {\n        Course course = new JavaCourse(1,&quot;java&quot;,15.25);\n        System.out.println(&quot;课程价格&quot;+course.getPrice());\n    }\n}\n}</code></pre>\n<p>后来需求变动，需要显示课程打折后的价格。<br>需要做如下变动：</p>\n<pre><code class=\"java\">public class JavaDiscountCourse extends JavaCourse {\n    public JavaDiscountCourse(Integer id, String name, Double price) {\n        super(id, name, price);\n    }\n    public Double getDiscountPrice(){\n        return this.getPrice()*0.8;\n    }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Course course = new JavaDiscountCourse(1,&quot;java&quot;,15.25);\n        System.out.println(&quot;课程价格&quot;+course.getPrice()+&quot;\\r\\n课程折后价格&quot;+((JavaDiscountCourse) course).getDiscountPrice());\n    }\n}</code></pre>\n<h1 id=\"依赖倒置原则\"><a href=\"#依赖倒置原则\" class=\"headerlink\" title=\"依赖倒置原则\"></a>依赖倒置原则</h1><p>定义：高层模块不应该依赖底层模块，二者都应该依赖其抽象<br>优点：可以减少类之间的耦合性、提高系统稳定性、提高代码可读性和可维护性，可降低修改程序所造成的风险<br>代码举例：</p>\n<pre><code class=\"java\">public interface Course {\n    void study();\n}\n\npublic class PythonCourse implements Course {\n    @Override\n    public void study() {\n        System.out.println(&quot;学习Python课程&quot;);\n    }\n}\n\npublic class Alice {\n     Course course;\n     public Alice(Course course){\n         this.course = course;\n     }\n     public void studyCourse(){\n         course.study();\n     }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        Alice alice = new Alice(new PythonCourse());\n        alice.studyCourse();\n    }\n}</code></pre>\n<p>以上代码通过将PythonCourse的抽象注入Alice中实现了Alice和Course的具体实现的解耦，实现了依赖倒置。</p>\n<h1 id=\"单一职责原则\"><a href=\"#单一职责原则\" class=\"headerlink\" title=\"单一职责原则\"></a>单一职责原则</h1><p>定义：不要存在多于一个导致类变更的原因<br>优点：降低类的复杂度，提高类的可读性，提高系统的可维护性、降低变更引起的风险<br>理解：一个类只需要实现一类功能，不要有几类功能同时在一个类中，这个微服务的思想有些相似，只是一个微服务需要实现的是一大类功能，目的都是使系统细粒度化，便于开发新功能时写更少的代码（用原有的功能通过不同的调用步骤或顺序或传入不同的参数即可组合出新的功能），也就是便于扩展。</p>\n<h1 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h1><p>定义：用多个专门的接口，而不使用单一的总接口，客户端不应该依赖他不需要的接口。<br>优点：符合我们常说的高内聚低耦合的设计思想从而使得类具有很好的可读性、可扩展性和可维护性。</p>\n<h1 id=\"迪米特法则（最少知道原则）\"><a href=\"#迪米特法则（最少知道原则）\" class=\"headerlink\" title=\"迪米特法则（最少知道原则）\"></a>迪米特法则（最少知道原则）</h1><p>定义：一个对象应该对其他对象保持最少的了解。<br>优点：降低类之间的耦合。<br>举例：如下类图并不遵循迪米特原则，因为Boss只需要和TeamLeader交互，而不需要和Course产生依赖。<br><img src=\"/2020/01/10/ruan-jian-kai-fa-liu-da-she-ji-yuan-ze/1.png\" alt></p>\n<p>改进后满足迪米特原则类关系如下<br><img src=\"/2020/01/10/ruan-jian-kai-fa-liu-da-she-ji-yuan-ze/2.png\" alt></p>\n<h1 id=\"里斯替换原则\"><a href=\"#里斯替换原则\" class=\"headerlink\" title=\"里斯替换原则\"></a>里斯替换原则</h1><p>定义1：如果对每一个类型为 T1的对象 o1，都有类型为 T2 的对象o2，使得以 T1定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。</p>\n<p>定义2：所有引用基类的地方必须能透明地使用其子类的对象。</p>\n<p>问题由来：有一功能P1，由类A完成。现需要将功能P1进行扩展，扩展后的功能为P，其中P由原有功能P1与新功能P2组成。新功能P由类A的子类B来完成，则子类B在完成新功能P2的同时，有可能会导致原有功能P1发生故障。</p>\n<p>解决方案：当使用继承时，遵循里氏替换原则。类B继承类A时，除添加新的方法完成新增功能P2外，尽量不要重写父类A的方法，也尽量不要重载父类A的方法.</p>\n"},{"title":"队列的用法","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-16T14:04:20.000Z","password":null,"summary":null,"img":"/medias/featureimages/queue.png","_content":"\n### **1、队列的基本概念**\n\n队列（queue）是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中没有元素时，称为空队列。队列的数据元素又称为队列元素。在队列中插入一个队列元素称为入队，从队列中删除一个队列元素称为出队。因为队列只允许在一端插入，在另一端删除，所以只有最早进入队列的元素才能最先从队列中删除，故队列又称为先进先出（FIFO—first in first out）线性表。比如我们去电影院排队买票，第一个进入排队序列的都是第一个买到票离开队列的人，而最后进入排队序列排队的都是最后买到票的。在比如在计算机操作系统中，有各种队列在安静的工作着，比如打印机在打印列队中等待打印。\n\n**队列分为：**\n\n①、单向队列（Queue）：只能在一端插入数据，另一端删除数据。\n\n②、双向队列（Deque）：每一端都可以进行插入数据和删除数据操作。\n\n这里我们还会介绍一种队列——优先级队列，优先级队列是比栈和队列更专用的数据结构，在优先级队列中，数据项按照关键字进行排序，关键字最小（或者最大）的数据项往往在队列的最前面，而数据项在插入的时候都会插入到合适的位置以确保队列的有序。\n\n#### Java中实现好的队列分类:\n\n**非阻塞队列**\n\nPriorityQueue优先级队列：线程不安全、基于数组存储构成优先级堆 添加元素为空抛出异常 每次操作，对元素进行排序，取优先级最高的元素放在队首，保证获取的元素按优先级从高到低\nsiftUpUsingComparator与siftDownUsingComparator ！！！！！\nadd、offer 添加元素 peek(获取元素不删除)、poll（获取元素并删除）\n\nConcurrentLinkedQueue：基于链表存储、线程安全\n\n**阻塞队列**\n\n在获取元素（take）时，若为空，阻塞当前线程（Lock condition的await）,当添加值进去后释放（signal）\n\nArrayBlockingQueue ：一个由数组支持的有界队列。LinkedBlockingQueue ：一个由链接节点支持的可选有界队列。PriorityBlockingQueue ：一个由优先级堆支持的无界优先级队列。DelayQueue ：一个由优先级堆支持的、基于时间的调度队列。\n\n**双向队列**\n\n可以向头跟尾放入与取出元素\n\nArrayDeque双向队列 基于数据 线程不安全\\LinkedList基于链表\n\n前两者属于单向队列，队尾添加元素，队头取出元素\n\n### **2、Java模拟单向队列实现**\n\nJava实现代码如下：\n\n```java\npublic interface Queue<E> {\n    int getSize();\n    boolean isEmpty();\n    void enqueue(E e);\n    E dequeue();\n    E getFront();\n}\n\npublic class ArrayQueue<E> implements Queue<E> {\n\n    private Array<E> array;\n\n    public ArrayQueue(int capacity){\n        array = new Array<>(capacity);\n    }\n\n    public ArrayQueue(){\n        array = new Array<>();\n    }\n\n    @Override\n    public int getSize(){\n        return array.getSize();\n    }\n\n    @Override\n    public boolean isEmpty(){\n        return array.isEmpty();\n    }\n\n    public int getCapacity(){\n        return array.getCapacity();\n    }\n\n    @Override\n    public void enqueue(E e){\n        array.addLast(e);\n    }\n\n    @Override\n    public E dequeue(){\n        return array.removeFirst();\n    }\n\n    @Override\n    public E getFront(){\n        return array.getFirst();\n    }\n\n    @Override\n    public String toString(){\n        StringBuilder res = new StringBuilder();\n        res.append(\"Queue: \");\n        res.append(\"front [\");\n        for(int i = 0 ; i < array.getSize() ; i ++){\n            res.append(array.get(i));\n            if(i != array.getSize() - 1)\n                res.append(\", \");\n        }\n        res.append(\"] tail\");\n        return res.toString();\n    }\n\n    public static void main(String[] args) {\n\n        ArrayQueue<Integer> queue = new ArrayQueue<>();\n        for(int i = 0 ; i < 10 ; i ++){\n            queue.enqueue(i);\n            System.out.println(queue);\n            if(i % 3 == 2){\n                queue.dequeue();\n                System.out.println(queue);\n            }\n        }\n    }\n}\n```\n\n### **3、双端队列**\n\n双端队列就是一个两端都是结尾或者开头的队列， 队列的每一端都可以进行插入数据项和移除数据项，这些方法可以叫做：\n\n**insertRight()、insertLeft()、removeLeft()、removeRight()**\n\n如果严格禁止调用insertLeft()和removeLeft()（或禁用右端操作），那么双端队列的功能就和前面讲的栈功能一样。如果严格禁止调用insertLeft()和removeRight(或相反的另一对方法)，那么双端队列的功能就和单向队列一样了。\n\n### **4、优先级队列**\n\n优先级队列（priority queue）是比栈和队列更专用的数据结构，在优先级队列中，数据项按照关键字进行排序，关键字最小（或者最大）的数据项往往在队列的最前面，而数据项在插入的时候都会插入到合适的位置以确保队列的有序。\n\n优先级队列 是0个或多个元素的集合，每个元素都有一个优先权，对优先级队列执行的操作有：\n\n**（1）**查找**（2）**插入一个新元素**（3）**删除\n\n一般情况下，查找操作用来搜索优先权最大的元素，删除操作用来删除该元素 。对于优先权相同的元素，可按先进先出次序处理或按任意优先权进行。这里我们用数组实现优先级队列，这种方法插入比较慢，但是它比较简单，适用于数据量比较小并且不是特别注重插入速度的情况。后面我们会讲解堆，用堆的数据结构来实现优先级队列，可以相当快的插入数据。**数组实现优先级队列，声明为int类型的数组，关键字是数组里面的元素，在插入的时候按照从大到小的顺序排列，也就是越小的元素优先级越高。**\n\n```java\npublic class PriorityQue {\n    private int maxSize;\n    private int[] priQueArray;\n    private int nItems;\n     \n    public PriorityQue(int s){\n        maxSize = s;\n        priQueArray = new int[maxSize];\n        nItems = 0;\n    }\n     \n    //插入数据\n    public void insert(int value){\n        int j;\n        if(nItems == 0){\n            priQueArray[nItems++] = value;\n        }else{\n            j = nItems -1;\n            //选择的排序方法是插入排序，按照从大到小的顺序排列，越小的越在队列的顶端\n            while(j >=0 && value > priQueArray[j]){\n                priQueArray[j+1] = priQueArray[j];\n                j--;\n            }\n            priQueArray[j+1] = value;\n            nItems++;\n        }\n    }\n     \n    //移除数据,由于是按照大小排序的，所以移除数据我们指针向下移动\n    //被移除的地方由于是int类型的，不能设置为null，这里的做法是设置为 -1\n    public int remove(){\n        int k = nItems -1;\n        int value = priQueArray[k];\n        priQueArray[k] = -1;//-1表示这个位置的数据被移除了\n        nItems--;\n        return value;\n    }\n     \n    //查看优先级最高的元素\n    public int peekMin(){\n        return priQueArray[nItems-1];\n    }\n     \n    //判断是否为空\n    public boolean isEmpty(){\n        return (nItems == 0);\n    }\n     \n    //判断是否满了\n    public boolean isFull(){\n        return (nItems == maxSize);\n    }\n}\n```\n\ninsert() 方法，先检查队列中是否有数据项，如果没有，则直接插入到下标为0的单元里，否则，从数组顶部开始比较，找到比插入值小的位置进行插入，并把 nItems 加1.\n\nremove() 方法直接获取顶部元素。\n\n优先级队列的插入操作需要 O(N)的时间，而删除操作则需要O(1) 的时间，后面会讲解如何通过 堆 来改进插入时间。\n\n### 5、队列的使用场景\n\n我们熟知的消息队列就是使用队列的基本原理完成设计，使用场景如下：\n\n**1、异步处理**\n\n**场景说明**：用户注册后，需要发注册邮件和注册短信。传统的做法有两种：串行的方式和并行方式。\n\n**串行方式**：将注册信息写入数据库成功后，发送注册邮件，再发送注册短信。以上三个任务全部完成后，返回给客户。\n\n![](队列的用法/1.png)\n\n**并行方式**：将注册信息写入数据库成功后，发送注册邮件的同时，发送注册短信。以上三个任务完成后，返回给客户端。与串行的差别是，并行的方式可以提高处理的时间。\n\n![](队列的用法/2.png)\n\n假设三个业务节点每个使用50毫秒钟，不考虑网络等其他开销，则串行方式的时间是150毫秒，并行的时间可能是100毫秒。\n\n因为CPU在单位时间内处理的请求数是一定的，假设CPU1秒内吞吐量是100次。则串行方式1秒内CPU可处理的请求量是7次（1000/150）。并行方式处理的请求量是10次（1000/100）。\n\n**小结**：如以上案例描述，传统的方式系统的性能（并发量，吞吐量，响应时间）会有瓶颈。如何解决这个问题呢？\n\n引入消息队列，将不是必须的业务逻辑，异步处理。改造后的架构如下：\n\n![](队列的用法/3.png)\n\n按照以上约定，用户的响应时间相当于是注册信息写入数据库的时间，也就是50毫秒。注册邮件，发送短信写入消息队列后，直接返回，因此写入消息队列的速度很快，基本可以忽略，因此用户的响应时间可能是50毫秒。因此架构改变后，系统的吞吐量提高到每秒20QPS。比串行提高了3倍，比并行提高了两倍！\n\n**2、应用解耦**\n\n**场景说明**：用户下单后，订单系统需要通知库存系统。传统的做法是，订单系统调用库存系统的接口。如下图：\n\n![](队列的用法/4.png)\n\n**传统模式的缺点**：\n\n假如库存系统无法访问，则订单减库存将失败，从而导致订单失败，订单系统与库存系统耦合。\n\n如何解决以上问题呢？引入应用消息队列后的方案，如下图：\n\n![](队列的用法/5.png)\n\n**订单系统**：用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功\n\n**库存系统**：订阅下单的消息，采用拉/推的方式，获取下单信息，库存系统根据下单信息，进行库存操作\n\n假如：在下单时库存系统不能正常使用。也不影响正常下单，因为下单后，订单系统写入消息队列就不再关心其他的后续操作了。实现订单系统与库存系统的应用解耦。\n\n**3、流量削锋**\n\n流量削锋也是消息队列中的常用场景，一般在秒杀或团抢活动中使用广泛！\n\n**应用场景**：秒杀活动，一般会因为流量过大，导致流量暴增，应用挂掉。为解决这个问题，一般需要在应用前端加入消息队列。\n\n可以控制活动的人数，可以缓解短时间内高流量压垮应用。\n\n![](队列的用法/6.png)\n\n用户的请求，服务器接收后，首先写入消息队列。假如消息队列长度超过最大数量，则直接抛弃用户请求或跳转到错误页面。\n\n秒杀业务根据消息队列中的请求信息，再做后续处理。\n\n**4、日志处理**\n\n日志处理是指将消息队列用在日志处理中，比如Kafka的应用，解决大量日志传输的问题。架构简化如下：\n\n![](队列的用法/7.png)\n\n日志采集客户端，负责日志数据采集，定时写受写入Kafka队列；Kafka消息队列，负责日志数据的接收，存储和转发；日志处理应用：订阅并消费kafka队列中的日志数据。\n\n以下是新浪kafka日志处理应用案例：\n\n![](队列的用法/8.png)\n\n**Kafka**：接收用户日志的消息队列；\n\n**Logstash**：做日志解析，统一成JSON输出给Elasticsearch；\n\n**Elasticsearch**：实时日志分析服务的核心技术，一个schemaless，实时的数据存储服务，通过index组织数据，兼具强大的搜索和统计功能；\n\n**Kibana**：基于Elasticsearch的数据可视化组件，超强的数据可视化能力是众多公司选择ELK stack的重要原因。\n\n**5、消息通讯**\n\n消息通讯是指，消息队列一般都内置了高效的通信机制，因此也可以用在纯的消息通讯。比如实现点对点消息队列，或者聊天室等。\n\n**点对点通讯**：\n\n![](队列的用法/9.png)\n\n客户端A和客户端B使用同一队列，进行消息通讯。\n\n**聊天室通讯**：\n\n![](队列的用法/10.png)\n\n客户端A，客户端B，客户端N订阅同一主题，进行消息发布和接收。实现类似聊天室效果。\n\n以上实际是消息队列的两种消息模式，点对点或发布订阅模式。模型为示意图，供参考。\n除了这些，针对当前互联网公司的技术需求以及结合主流技术，我自己整理了一套系统的架构技术体系，当你技术过硬的时候，能够解决技术问题才会服众。不少公司都很重视高并发高可用的技术，特别是一线互联网公司，分布式、JVM、spring源码分析、微服务等知识点已是面试的必考题，这些东西可能你们平时在工作中接触过，但是缺少的全面系统的学习，加入**后端开发群：943918498**，或是关注**微信公众号：Java资讯库，回复“架构”**，免费领取架构资料。","source":"_posts/队列的用法.md","raw":"---\ntitle: 队列的用法\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-16 22:04:20\npassword:\nsummary:\ntags:\nimg: /medias/featureimages/queue.png\ncategories: 数据结构\n---\n\n### **1、队列的基本概念**\n\n队列（queue）是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中没有元素时，称为空队列。队列的数据元素又称为队列元素。在队列中插入一个队列元素称为入队，从队列中删除一个队列元素称为出队。因为队列只允许在一端插入，在另一端删除，所以只有最早进入队列的元素才能最先从队列中删除，故队列又称为先进先出（FIFO—first in first out）线性表。比如我们去电影院排队买票，第一个进入排队序列的都是第一个买到票离开队列的人，而最后进入排队序列排队的都是最后买到票的。在比如在计算机操作系统中，有各种队列在安静的工作着，比如打印机在打印列队中等待打印。\n\n**队列分为：**\n\n①、单向队列（Queue）：只能在一端插入数据，另一端删除数据。\n\n②、双向队列（Deque）：每一端都可以进行插入数据和删除数据操作。\n\n这里我们还会介绍一种队列——优先级队列，优先级队列是比栈和队列更专用的数据结构，在优先级队列中，数据项按照关键字进行排序，关键字最小（或者最大）的数据项往往在队列的最前面，而数据项在插入的时候都会插入到合适的位置以确保队列的有序。\n\n#### Java中实现好的队列分类:\n\n**非阻塞队列**\n\nPriorityQueue优先级队列：线程不安全、基于数组存储构成优先级堆 添加元素为空抛出异常 每次操作，对元素进行排序，取优先级最高的元素放在队首，保证获取的元素按优先级从高到低\nsiftUpUsingComparator与siftDownUsingComparator ！！！！！\nadd、offer 添加元素 peek(获取元素不删除)、poll（获取元素并删除）\n\nConcurrentLinkedQueue：基于链表存储、线程安全\n\n**阻塞队列**\n\n在获取元素（take）时，若为空，阻塞当前线程（Lock condition的await）,当添加值进去后释放（signal）\n\nArrayBlockingQueue ：一个由数组支持的有界队列。LinkedBlockingQueue ：一个由链接节点支持的可选有界队列。PriorityBlockingQueue ：一个由优先级堆支持的无界优先级队列。DelayQueue ：一个由优先级堆支持的、基于时间的调度队列。\n\n**双向队列**\n\n可以向头跟尾放入与取出元素\n\nArrayDeque双向队列 基于数据 线程不安全\\LinkedList基于链表\n\n前两者属于单向队列，队尾添加元素，队头取出元素\n\n### **2、Java模拟单向队列实现**\n\nJava实现代码如下：\n\n```java\npublic interface Queue<E> {\n    int getSize();\n    boolean isEmpty();\n    void enqueue(E e);\n    E dequeue();\n    E getFront();\n}\n\npublic class ArrayQueue<E> implements Queue<E> {\n\n    private Array<E> array;\n\n    public ArrayQueue(int capacity){\n        array = new Array<>(capacity);\n    }\n\n    public ArrayQueue(){\n        array = new Array<>();\n    }\n\n    @Override\n    public int getSize(){\n        return array.getSize();\n    }\n\n    @Override\n    public boolean isEmpty(){\n        return array.isEmpty();\n    }\n\n    public int getCapacity(){\n        return array.getCapacity();\n    }\n\n    @Override\n    public void enqueue(E e){\n        array.addLast(e);\n    }\n\n    @Override\n    public E dequeue(){\n        return array.removeFirst();\n    }\n\n    @Override\n    public E getFront(){\n        return array.getFirst();\n    }\n\n    @Override\n    public String toString(){\n        StringBuilder res = new StringBuilder();\n        res.append(\"Queue: \");\n        res.append(\"front [\");\n        for(int i = 0 ; i < array.getSize() ; i ++){\n            res.append(array.get(i));\n            if(i != array.getSize() - 1)\n                res.append(\", \");\n        }\n        res.append(\"] tail\");\n        return res.toString();\n    }\n\n    public static void main(String[] args) {\n\n        ArrayQueue<Integer> queue = new ArrayQueue<>();\n        for(int i = 0 ; i < 10 ; i ++){\n            queue.enqueue(i);\n            System.out.println(queue);\n            if(i % 3 == 2){\n                queue.dequeue();\n                System.out.println(queue);\n            }\n        }\n    }\n}\n```\n\n### **3、双端队列**\n\n双端队列就是一个两端都是结尾或者开头的队列， 队列的每一端都可以进行插入数据项和移除数据项，这些方法可以叫做：\n\n**insertRight()、insertLeft()、removeLeft()、removeRight()**\n\n如果严格禁止调用insertLeft()和removeLeft()（或禁用右端操作），那么双端队列的功能就和前面讲的栈功能一样。如果严格禁止调用insertLeft()和removeRight(或相反的另一对方法)，那么双端队列的功能就和单向队列一样了。\n\n### **4、优先级队列**\n\n优先级队列（priority queue）是比栈和队列更专用的数据结构，在优先级队列中，数据项按照关键字进行排序，关键字最小（或者最大）的数据项往往在队列的最前面，而数据项在插入的时候都会插入到合适的位置以确保队列的有序。\n\n优先级队列 是0个或多个元素的集合，每个元素都有一个优先权，对优先级队列执行的操作有：\n\n**（1）**查找**（2）**插入一个新元素**（3）**删除\n\n一般情况下，查找操作用来搜索优先权最大的元素，删除操作用来删除该元素 。对于优先权相同的元素，可按先进先出次序处理或按任意优先权进行。这里我们用数组实现优先级队列，这种方法插入比较慢，但是它比较简单，适用于数据量比较小并且不是特别注重插入速度的情况。后面我们会讲解堆，用堆的数据结构来实现优先级队列，可以相当快的插入数据。**数组实现优先级队列，声明为int类型的数组，关键字是数组里面的元素，在插入的时候按照从大到小的顺序排列，也就是越小的元素优先级越高。**\n\n```java\npublic class PriorityQue {\n    private int maxSize;\n    private int[] priQueArray;\n    private int nItems;\n     \n    public PriorityQue(int s){\n        maxSize = s;\n        priQueArray = new int[maxSize];\n        nItems = 0;\n    }\n     \n    //插入数据\n    public void insert(int value){\n        int j;\n        if(nItems == 0){\n            priQueArray[nItems++] = value;\n        }else{\n            j = nItems -1;\n            //选择的排序方法是插入排序，按照从大到小的顺序排列，越小的越在队列的顶端\n            while(j >=0 && value > priQueArray[j]){\n                priQueArray[j+1] = priQueArray[j];\n                j--;\n            }\n            priQueArray[j+1] = value;\n            nItems++;\n        }\n    }\n     \n    //移除数据,由于是按照大小排序的，所以移除数据我们指针向下移动\n    //被移除的地方由于是int类型的，不能设置为null，这里的做法是设置为 -1\n    public int remove(){\n        int k = nItems -1;\n        int value = priQueArray[k];\n        priQueArray[k] = -1;//-1表示这个位置的数据被移除了\n        nItems--;\n        return value;\n    }\n     \n    //查看优先级最高的元素\n    public int peekMin(){\n        return priQueArray[nItems-1];\n    }\n     \n    //判断是否为空\n    public boolean isEmpty(){\n        return (nItems == 0);\n    }\n     \n    //判断是否满了\n    public boolean isFull(){\n        return (nItems == maxSize);\n    }\n}\n```\n\ninsert() 方法，先检查队列中是否有数据项，如果没有，则直接插入到下标为0的单元里，否则，从数组顶部开始比较，找到比插入值小的位置进行插入，并把 nItems 加1.\n\nremove() 方法直接获取顶部元素。\n\n优先级队列的插入操作需要 O(N)的时间，而删除操作则需要O(1) 的时间，后面会讲解如何通过 堆 来改进插入时间。\n\n### 5、队列的使用场景\n\n我们熟知的消息队列就是使用队列的基本原理完成设计，使用场景如下：\n\n**1、异步处理**\n\n**场景说明**：用户注册后，需要发注册邮件和注册短信。传统的做法有两种：串行的方式和并行方式。\n\n**串行方式**：将注册信息写入数据库成功后，发送注册邮件，再发送注册短信。以上三个任务全部完成后，返回给客户。\n\n![](队列的用法/1.png)\n\n**并行方式**：将注册信息写入数据库成功后，发送注册邮件的同时，发送注册短信。以上三个任务完成后，返回给客户端。与串行的差别是，并行的方式可以提高处理的时间。\n\n![](队列的用法/2.png)\n\n假设三个业务节点每个使用50毫秒钟，不考虑网络等其他开销，则串行方式的时间是150毫秒，并行的时间可能是100毫秒。\n\n因为CPU在单位时间内处理的请求数是一定的，假设CPU1秒内吞吐量是100次。则串行方式1秒内CPU可处理的请求量是7次（1000/150）。并行方式处理的请求量是10次（1000/100）。\n\n**小结**：如以上案例描述，传统的方式系统的性能（并发量，吞吐量，响应时间）会有瓶颈。如何解决这个问题呢？\n\n引入消息队列，将不是必须的业务逻辑，异步处理。改造后的架构如下：\n\n![](队列的用法/3.png)\n\n按照以上约定，用户的响应时间相当于是注册信息写入数据库的时间，也就是50毫秒。注册邮件，发送短信写入消息队列后，直接返回，因此写入消息队列的速度很快，基本可以忽略，因此用户的响应时间可能是50毫秒。因此架构改变后，系统的吞吐量提高到每秒20QPS。比串行提高了3倍，比并行提高了两倍！\n\n**2、应用解耦**\n\n**场景说明**：用户下单后，订单系统需要通知库存系统。传统的做法是，订单系统调用库存系统的接口。如下图：\n\n![](队列的用法/4.png)\n\n**传统模式的缺点**：\n\n假如库存系统无法访问，则订单减库存将失败，从而导致订单失败，订单系统与库存系统耦合。\n\n如何解决以上问题呢？引入应用消息队列后的方案，如下图：\n\n![](队列的用法/5.png)\n\n**订单系统**：用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功\n\n**库存系统**：订阅下单的消息，采用拉/推的方式，获取下单信息，库存系统根据下单信息，进行库存操作\n\n假如：在下单时库存系统不能正常使用。也不影响正常下单，因为下单后，订单系统写入消息队列就不再关心其他的后续操作了。实现订单系统与库存系统的应用解耦。\n\n**3、流量削锋**\n\n流量削锋也是消息队列中的常用场景，一般在秒杀或团抢活动中使用广泛！\n\n**应用场景**：秒杀活动，一般会因为流量过大，导致流量暴增，应用挂掉。为解决这个问题，一般需要在应用前端加入消息队列。\n\n可以控制活动的人数，可以缓解短时间内高流量压垮应用。\n\n![](队列的用法/6.png)\n\n用户的请求，服务器接收后，首先写入消息队列。假如消息队列长度超过最大数量，则直接抛弃用户请求或跳转到错误页面。\n\n秒杀业务根据消息队列中的请求信息，再做后续处理。\n\n**4、日志处理**\n\n日志处理是指将消息队列用在日志处理中，比如Kafka的应用，解决大量日志传输的问题。架构简化如下：\n\n![](队列的用法/7.png)\n\n日志采集客户端，负责日志数据采集，定时写受写入Kafka队列；Kafka消息队列，负责日志数据的接收，存储和转发；日志处理应用：订阅并消费kafka队列中的日志数据。\n\n以下是新浪kafka日志处理应用案例：\n\n![](队列的用法/8.png)\n\n**Kafka**：接收用户日志的消息队列；\n\n**Logstash**：做日志解析，统一成JSON输出给Elasticsearch；\n\n**Elasticsearch**：实时日志分析服务的核心技术，一个schemaless，实时的数据存储服务，通过index组织数据，兼具强大的搜索和统计功能；\n\n**Kibana**：基于Elasticsearch的数据可视化组件，超强的数据可视化能力是众多公司选择ELK stack的重要原因。\n\n**5、消息通讯**\n\n消息通讯是指，消息队列一般都内置了高效的通信机制，因此也可以用在纯的消息通讯。比如实现点对点消息队列，或者聊天室等。\n\n**点对点通讯**：\n\n![](队列的用法/9.png)\n\n客户端A和客户端B使用同一队列，进行消息通讯。\n\n**聊天室通讯**：\n\n![](队列的用法/10.png)\n\n客户端A，客户端B，客户端N订阅同一主题，进行消息发布和接收。实现类似聊天室效果。\n\n以上实际是消息队列的两种消息模式，点对点或发布订阅模式。模型为示意图，供参考。\n除了这些，针对当前互联网公司的技术需求以及结合主流技术，我自己整理了一套系统的架构技术体系，当你技术过硬的时候，能够解决技术问题才会服众。不少公司都很重视高并发高可用的技术，特别是一线互联网公司，分布式、JVM、spring源码分析、微服务等知识点已是面试的必考题，这些东西可能你们平时在工作中接触过，但是缺少的全面系统的学习，加入**后端开发群：943918498**，或是关注**微信公众号：Java资讯库，回复“架构”**，免费领取架构资料。","slug":"队列的用法","published":1,"updated":"2021-04-29T09:46:01.866Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckof6mlf7002wvkvyjkucwyyd","content":"<h3 id=\"1、队列的基本概念\"><a href=\"#1、队列的基本概念\" class=\"headerlink\" title=\"1、队列的基本概念\"></a><strong>1、队列的基本概念</strong></h3><p>队列（queue）是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中没有元素时，称为空队列。队列的数据元素又称为队列元素。在队列中插入一个队列元素称为入队，从队列中删除一个队列元素称为出队。因为队列只允许在一端插入，在另一端删除，所以只有最早进入队列的元素才能最先从队列中删除，故队列又称为先进先出（FIFO—first in first out）线性表。比如我们去电影院排队买票，第一个进入排队序列的都是第一个买到票离开队列的人，而最后进入排队序列排队的都是最后买到票的。在比如在计算机操作系统中，有各种队列在安静的工作着，比如打印机在打印列队中等待打印。</p>\n<p><strong>队列分为：</strong></p>\n<p>①、单向队列（Queue）：只能在一端插入数据，另一端删除数据。</p>\n<p>②、双向队列（Deque）：每一端都可以进行插入数据和删除数据操作。</p>\n<p>这里我们还会介绍一种队列——优先级队列，优先级队列是比栈和队列更专用的数据结构，在优先级队列中，数据项按照关键字进行排序，关键字最小（或者最大）的数据项往往在队列的最前面，而数据项在插入的时候都会插入到合适的位置以确保队列的有序。</p>\n<h4 id=\"Java中实现好的队列分类\"><a href=\"#Java中实现好的队列分类\" class=\"headerlink\" title=\"Java中实现好的队列分类:\"></a>Java中实现好的队列分类:</h4><p><strong>非阻塞队列</strong></p>\n<p>PriorityQueue优先级队列：线程不安全、基于数组存储构成优先级堆 添加元素为空抛出异常 每次操作，对元素进行排序，取优先级最高的元素放在队首，保证获取的元素按优先级从高到低<br>siftUpUsingComparator与siftDownUsingComparator ！！！！！<br>add、offer 添加元素 peek(获取元素不删除)、poll（获取元素并删除）</p>\n<p>ConcurrentLinkedQueue：基于链表存储、线程安全</p>\n<p><strong>阻塞队列</strong></p>\n<p>在获取元素（take）时，若为空，阻塞当前线程（Lock condition的await）,当添加值进去后释放（signal）</p>\n<p>ArrayBlockingQueue ：一个由数组支持的有界队列。LinkedBlockingQueue ：一个由链接节点支持的可选有界队列。PriorityBlockingQueue ：一个由优先级堆支持的无界优先级队列。DelayQueue ：一个由优先级堆支持的、基于时间的调度队列。</p>\n<p><strong>双向队列</strong></p>\n<p>可以向头跟尾放入与取出元素</p>\n<p>ArrayDeque双向队列 基于数据 线程不安全\\LinkedList基于链表</p>\n<p>前两者属于单向队列，队尾添加元素，队头取出元素</p>\n<h3 id=\"2、Java模拟单向队列实现\"><a href=\"#2、Java模拟单向队列实现\" class=\"headerlink\" title=\"2、Java模拟单向队列实现\"></a><strong>2、Java模拟单向队列实现</strong></h3><p>Java实现代码如下：</p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Queue</span><span class=\"token operator\">&lt;</span>E<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>E e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    E <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    E <span class=\"token function\">getFront</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayQueue</span><span class=\"token operator\">&lt;</span>E<span class=\"token operator\">></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Queue</span><span class=\"token operator\">&lt;</span>E<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> Array<span class=\"token operator\">&lt;</span>E<span class=\"token operator\">></span> array<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">ArrayQueue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">ArrayQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">getCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>E e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        array<span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> E <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">removeFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> E <span class=\"token function\">getFront</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">getFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        StringBuilder res <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Queue: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"front [\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"] tail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        ArrayQueue<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">></span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayQueue</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            queue<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                queue<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3、双端队列\"><a href=\"#3、双端队列\" class=\"headerlink\" title=\"3、双端队列\"></a><strong>3、双端队列</strong></h3><p>双端队列就是一个两端都是结尾或者开头的队列， 队列的每一端都可以进行插入数据项和移除数据项，这些方法可以叫做：</p>\n<p><strong>insertRight()、insertLeft()、removeLeft()、removeRight()</strong></p>\n<p>如果严格禁止调用insertLeft()和removeLeft()（或禁用右端操作），那么双端队列的功能就和前面讲的栈功能一样。如果严格禁止调用insertLeft()和removeRight(或相反的另一对方法)，那么双端队列的功能就和单向队列一样了。</p>\n<h3 id=\"4、优先级队列\"><a href=\"#4、优先级队列\" class=\"headerlink\" title=\"4、优先级队列\"></a><strong>4、优先级队列</strong></h3><p>优先级队列（priority queue）是比栈和队列更专用的数据结构，在优先级队列中，数据项按照关键字进行排序，关键字最小（或者最大）的数据项往往在队列的最前面，而数据项在插入的时候都会插入到合适的位置以确保队列的有序。</p>\n<p>优先级队列 是0个或多个元素的集合，每个元素都有一个优先权，对优先级队列执行的操作有：</p>\n<p><strong>（1）</strong>查找<strong>（2）</strong>插入一个新元素<strong>（3）</strong>删除</p>\n<p>一般情况下，查找操作用来搜索优先权最大的元素，删除操作用来删除该元素 。对于优先权相同的元素，可按先进先出次序处理或按任意优先权进行。这里我们用数组实现优先级队列，这种方法插入比较慢，但是它比较简单，适用于数据量比较小并且不是特别注重插入速度的情况。后面我们会讲解堆，用堆的数据结构来实现优先级队列，可以相当快的插入数据。<strong>数组实现优先级队列，声明为int类型的数组，关键字是数组里面的元素，在插入的时候按照从大到小的顺序排列，也就是越小的元素优先级越高。</strong></p>\n<pre class=\"line-numbers language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PriorityQue</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> maxSize<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> priQueArray<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> nItems<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">PriorityQue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        maxSize <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n        priQueArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span>maxSize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        nItems <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//插入数据</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nItems <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            priQueArray<span class=\"token punctuation\">[</span>nItems<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            j <span class=\"token operator\">=</span> nItems <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//选择的排序方法是插入排序，按照从大到小的顺序排列，越小的越在队列的顶端</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> value <span class=\"token operator\">></span> priQueArray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                priQueArray<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> priQueArray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            priQueArray<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n            nItems<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//移除数据,由于是按照大小排序的，所以移除数据我们指针向下移动</span>\n    <span class=\"token comment\" spellcheck=\"true\">//被移除的地方由于是int类型的，不能设置为null，这里的做法是设置为 -1</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> nItems <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> priQueArray<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        priQueArray<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//-1表示这个位置的数据被移除了</span>\n        nItems<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//查看优先级最高的元素</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">peekMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> priQueArray<span class=\"token punctuation\">[</span>nItems<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//判断是否为空</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>nItems <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//判断是否满了</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isFull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>nItems <span class=\"token operator\">==</span> maxSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>insert() 方法，先检查队列中是否有数据项，如果没有，则直接插入到下标为0的单元里，否则，从数组顶部开始比较，找到比插入值小的位置进行插入，并把 nItems 加1.</p>\n<p>remove() 方法直接获取顶部元素。</p>\n<p>优先级队列的插入操作需要 O(N)的时间，而删除操作则需要O(1) 的时间，后面会讲解如何通过 堆 来改进插入时间。</p>\n<h3 id=\"5、队列的使用场景\"><a href=\"#5、队列的使用场景\" class=\"headerlink\" title=\"5、队列的使用场景\"></a>5、队列的使用场景</h3><p>我们熟知的消息队列就是使用队列的基本原理完成设计，使用场景如下：</p>\n<p><strong>1、异步处理</strong></p>\n<p><strong>场景说明</strong>：用户注册后，需要发注册邮件和注册短信。传统的做法有两种：串行的方式和并行方式。</p>\n<p><strong>串行方式</strong>：将注册信息写入数据库成功后，发送注册邮件，再发送注册短信。以上三个任务全部完成后，返回给客户。</p>\n<p><img src=\"/2020/01/16/dui-lie-de-yong-fa/1.png\" alt></p>\n<p><strong>并行方式</strong>：将注册信息写入数据库成功后，发送注册邮件的同时，发送注册短信。以上三个任务完成后，返回给客户端。与串行的差别是，并行的方式可以提高处理的时间。</p>\n<p><img src=\"/2020/01/16/dui-lie-de-yong-fa/2.png\" alt></p>\n<p>假设三个业务节点每个使用50毫秒钟，不考虑网络等其他开销，则串行方式的时间是150毫秒，并行的时间可能是100毫秒。</p>\n<p>因为CPU在单位时间内处理的请求数是一定的，假设CPU1秒内吞吐量是100次。则串行方式1秒内CPU可处理的请求量是7次（1000/150）。并行方式处理的请求量是10次（1000/100）。</p>\n<p><strong>小结</strong>：如以上案例描述，传统的方式系统的性能（并发量，吞吐量，响应时间）会有瓶颈。如何解决这个问题呢？</p>\n<p>引入消息队列，将不是必须的业务逻辑，异步处理。改造后的架构如下：</p>\n<p><img src=\"/2020/01/16/dui-lie-de-yong-fa/3.png\" alt></p>\n<p>按照以上约定，用户的响应时间相当于是注册信息写入数据库的时间，也就是50毫秒。注册邮件，发送短信写入消息队列后，直接返回，因此写入消息队列的速度很快，基本可以忽略，因此用户的响应时间可能是50毫秒。因此架构改变后，系统的吞吐量提高到每秒20QPS。比串行提高了3倍，比并行提高了两倍！</p>\n<p><strong>2、应用解耦</strong></p>\n<p><strong>场景说明</strong>：用户下单后，订单系统需要通知库存系统。传统的做法是，订单系统调用库存系统的接口。如下图：</p>\n<p><img src=\"/2020/01/16/dui-lie-de-yong-fa/4.png\" alt></p>\n<p><strong>传统模式的缺点</strong>：</p>\n<p>假如库存系统无法访问，则订单减库存将失败，从而导致订单失败，订单系统与库存系统耦合。</p>\n<p>如何解决以上问题呢？引入应用消息队列后的方案，如下图：</p>\n<p><img src=\"/2020/01/16/dui-lie-de-yong-fa/5.png\" alt></p>\n<p><strong>订单系统</strong>：用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功</p>\n<p><strong>库存系统</strong>：订阅下单的消息，采用拉/推的方式，获取下单信息，库存系统根据下单信息，进行库存操作</p>\n<p>假如：在下单时库存系统不能正常使用。也不影响正常下单，因为下单后，订单系统写入消息队列就不再关心其他的后续操作了。实现订单系统与库存系统的应用解耦。</p>\n<p><strong>3、流量削锋</strong></p>\n<p>流量削锋也是消息队列中的常用场景，一般在秒杀或团抢活动中使用广泛！</p>\n<p><strong>应用场景</strong>：秒杀活动，一般会因为流量过大，导致流量暴增，应用挂掉。为解决这个问题，一般需要在应用前端加入消息队列。</p>\n<p>可以控制活动的人数，可以缓解短时间内高流量压垮应用。</p>\n<p><img src=\"/2020/01/16/dui-lie-de-yong-fa/6.png\" alt></p>\n<p>用户的请求，服务器接收后，首先写入消息队列。假如消息队列长度超过最大数量，则直接抛弃用户请求或跳转到错误页面。</p>\n<p>秒杀业务根据消息队列中的请求信息，再做后续处理。</p>\n<p><strong>4、日志处理</strong></p>\n<p>日志处理是指将消息队列用在日志处理中，比如Kafka的应用，解决大量日志传输的问题。架构简化如下：</p>\n<p><img src=\"/2020/01/16/dui-lie-de-yong-fa/7.png\" alt></p>\n<p>日志采集客户端，负责日志数据采集，定时写受写入Kafka队列；Kafka消息队列，负责日志数据的接收，存储和转发；日志处理应用：订阅并消费kafka队列中的日志数据。</p>\n<p>以下是新浪kafka日志处理应用案例：</p>\n<p><img src=\"/2020/01/16/dui-lie-de-yong-fa/8.png\" alt></p>\n<p><strong>Kafka</strong>：接收用户日志的消息队列；</p>\n<p><strong>Logstash</strong>：做日志解析，统一成JSON输出给Elasticsearch；</p>\n<p><strong>Elasticsearch</strong>：实时日志分析服务的核心技术，一个schemaless，实时的数据存储服务，通过index组织数据，兼具强大的搜索和统计功能；</p>\n<p><strong>Kibana</strong>：基于Elasticsearch的数据可视化组件，超强的数据可视化能力是众多公司选择ELK stack的重要原因。</p>\n<p><strong>5、消息通讯</strong></p>\n<p>消息通讯是指，消息队列一般都内置了高效的通信机制，因此也可以用在纯的消息通讯。比如实现点对点消息队列，或者聊天室等。</p>\n<p><strong>点对点通讯</strong>：</p>\n<p><img src=\"/2020/01/16/dui-lie-de-yong-fa/9.png\" alt></p>\n<p>客户端A和客户端B使用同一队列，进行消息通讯。</p>\n<p><strong>聊天室通讯</strong>：</p>\n<p><img src=\"/2020/01/16/dui-lie-de-yong-fa/10.png\" alt></p>\n<p>客户端A，客户端B，客户端N订阅同一主题，进行消息发布和接收。实现类似聊天室效果。</p>\n<p>以上实际是消息队列的两种消息模式，点对点或发布订阅模式。模型为示意图，供参考。<br>除了这些，针对当前互联网公司的技术需求以及结合主流技术，我自己整理了一套系统的架构技术体系，当你技术过硬的时候，能够解决技术问题才会服众。不少公司都很重视高并发高可用的技术，特别是一线互联网公司，分布式、JVM、spring源码分析、微服务等知识点已是面试的必考题，这些东西可能你们平时在工作中接触过，但是缺少的全面系统的学习，加入<strong>后端开发群：943918498</strong>，或是关注<strong>微信公众号：Java资讯库，回复“架构”</strong>，免费领取架构资料。</p>\n","site":{"data":{"musics":[]}},"excerpt":"","more":"<h3 id=\"1、队列的基本概念\"><a href=\"#1、队列的基本概念\" class=\"headerlink\" title=\"1、队列的基本概念\"></a><strong>1、队列的基本概念</strong></h3><p>队列（queue）是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中没有元素时，称为空队列。队列的数据元素又称为队列元素。在队列中插入一个队列元素称为入队，从队列中删除一个队列元素称为出队。因为队列只允许在一端插入，在另一端删除，所以只有最早进入队列的元素才能最先从队列中删除，故队列又称为先进先出（FIFO—first in first out）线性表。比如我们去电影院排队买票，第一个进入排队序列的都是第一个买到票离开队列的人，而最后进入排队序列排队的都是最后买到票的。在比如在计算机操作系统中，有各种队列在安静的工作着，比如打印机在打印列队中等待打印。</p>\n<p><strong>队列分为：</strong></p>\n<p>①、单向队列（Queue）：只能在一端插入数据，另一端删除数据。</p>\n<p>②、双向队列（Deque）：每一端都可以进行插入数据和删除数据操作。</p>\n<p>这里我们还会介绍一种队列——优先级队列，优先级队列是比栈和队列更专用的数据结构，在优先级队列中，数据项按照关键字进行排序，关键字最小（或者最大）的数据项往往在队列的最前面，而数据项在插入的时候都会插入到合适的位置以确保队列的有序。</p>\n<h4 id=\"Java中实现好的队列分类\"><a href=\"#Java中实现好的队列分类\" class=\"headerlink\" title=\"Java中实现好的队列分类:\"></a>Java中实现好的队列分类:</h4><p><strong>非阻塞队列</strong></p>\n<p>PriorityQueue优先级队列：线程不安全、基于数组存储构成优先级堆 添加元素为空抛出异常 每次操作，对元素进行排序，取优先级最高的元素放在队首，保证获取的元素按优先级从高到低<br>siftUpUsingComparator与siftDownUsingComparator ！！！！！<br>add、offer 添加元素 peek(获取元素不删除)、poll（获取元素并删除）</p>\n<p>ConcurrentLinkedQueue：基于链表存储、线程安全</p>\n<p><strong>阻塞队列</strong></p>\n<p>在获取元素（take）时，若为空，阻塞当前线程（Lock condition的await）,当添加值进去后释放（signal）</p>\n<p>ArrayBlockingQueue ：一个由数组支持的有界队列。LinkedBlockingQueue ：一个由链接节点支持的可选有界队列。PriorityBlockingQueue ：一个由优先级堆支持的无界优先级队列。DelayQueue ：一个由优先级堆支持的、基于时间的调度队列。</p>\n<p><strong>双向队列</strong></p>\n<p>可以向头跟尾放入与取出元素</p>\n<p>ArrayDeque双向队列 基于数据 线程不安全\\LinkedList基于链表</p>\n<p>前两者属于单向队列，队尾添加元素，队头取出元素</p>\n<h3 id=\"2、Java模拟单向队列实现\"><a href=\"#2、Java模拟单向队列实现\" class=\"headerlink\" title=\"2、Java模拟单向队列实现\"></a><strong>2、Java模拟单向队列实现</strong></h3><p>Java实现代码如下：</p>\n<pre><code class=\"java\">public interface Queue&lt;E&gt; {\n    int getSize();\n    boolean isEmpty();\n    void enqueue(E e);\n    E dequeue();\n    E getFront();\n}\n\npublic class ArrayQueue&lt;E&gt; implements Queue&lt;E&gt; {\n\n    private Array&lt;E&gt; array;\n\n    public ArrayQueue(int capacity){\n        array = new Array&lt;&gt;(capacity);\n    }\n\n    public ArrayQueue(){\n        array = new Array&lt;&gt;();\n    }\n\n    @Override\n    public int getSize(){\n        return array.getSize();\n    }\n\n    @Override\n    public boolean isEmpty(){\n        return array.isEmpty();\n    }\n\n    public int getCapacity(){\n        return array.getCapacity();\n    }\n\n    @Override\n    public void enqueue(E e){\n        array.addLast(e);\n    }\n\n    @Override\n    public E dequeue(){\n        return array.removeFirst();\n    }\n\n    @Override\n    public E getFront(){\n        return array.getFirst();\n    }\n\n    @Override\n    public String toString(){\n        StringBuilder res = new StringBuilder();\n        res.append(&quot;Queue: &quot;);\n        res.append(&quot;front [&quot;);\n        for(int i = 0 ; i &lt; array.getSize() ; i ++){\n            res.append(array.get(i));\n            if(i != array.getSize() - 1)\n                res.append(&quot;, &quot;);\n        }\n        res.append(&quot;] tail&quot;);\n        return res.toString();\n    }\n\n    public static void main(String[] args) {\n\n        ArrayQueue&lt;Integer&gt; queue = new ArrayQueue&lt;&gt;();\n        for(int i = 0 ; i &lt; 10 ; i ++){\n            queue.enqueue(i);\n            System.out.println(queue);\n            if(i % 3 == 2){\n                queue.dequeue();\n                System.out.println(queue);\n            }\n        }\n    }\n}</code></pre>\n<h3 id=\"3、双端队列\"><a href=\"#3、双端队列\" class=\"headerlink\" title=\"3、双端队列\"></a><strong>3、双端队列</strong></h3><p>双端队列就是一个两端都是结尾或者开头的队列， 队列的每一端都可以进行插入数据项和移除数据项，这些方法可以叫做：</p>\n<p><strong>insertRight()、insertLeft()、removeLeft()、removeRight()</strong></p>\n<p>如果严格禁止调用insertLeft()和removeLeft()（或禁用右端操作），那么双端队列的功能就和前面讲的栈功能一样。如果严格禁止调用insertLeft()和removeRight(或相反的另一对方法)，那么双端队列的功能就和单向队列一样了。</p>\n<h3 id=\"4、优先级队列\"><a href=\"#4、优先级队列\" class=\"headerlink\" title=\"4、优先级队列\"></a><strong>4、优先级队列</strong></h3><p>优先级队列（priority queue）是比栈和队列更专用的数据结构，在优先级队列中，数据项按照关键字进行排序，关键字最小（或者最大）的数据项往往在队列的最前面，而数据项在插入的时候都会插入到合适的位置以确保队列的有序。</p>\n<p>优先级队列 是0个或多个元素的集合，每个元素都有一个优先权，对优先级队列执行的操作有：</p>\n<p><strong>（1）</strong>查找<strong>（2）</strong>插入一个新元素<strong>（3）</strong>删除</p>\n<p>一般情况下，查找操作用来搜索优先权最大的元素，删除操作用来删除该元素 。对于优先权相同的元素，可按先进先出次序处理或按任意优先权进行。这里我们用数组实现优先级队列，这种方法插入比较慢，但是它比较简单，适用于数据量比较小并且不是特别注重插入速度的情况。后面我们会讲解堆，用堆的数据结构来实现优先级队列，可以相当快的插入数据。<strong>数组实现优先级队列，声明为int类型的数组，关键字是数组里面的元素，在插入的时候按照从大到小的顺序排列，也就是越小的元素优先级越高。</strong></p>\n<pre><code class=\"java\">public class PriorityQue {\n    private int maxSize;\n    private int[] priQueArray;\n    private int nItems;\n\n    public PriorityQue(int s){\n        maxSize = s;\n        priQueArray = new int[maxSize];\n        nItems = 0;\n    }\n\n    //插入数据\n    public void insert(int value){\n        int j;\n        if(nItems == 0){\n            priQueArray[nItems++] = value;\n        }else{\n            j = nItems -1;\n            //选择的排序方法是插入排序，按照从大到小的顺序排列，越小的越在队列的顶端\n            while(j &gt;=0 &amp;&amp; value &gt; priQueArray[j]){\n                priQueArray[j+1] = priQueArray[j];\n                j--;\n            }\n            priQueArray[j+1] = value;\n            nItems++;\n        }\n    }\n\n    //移除数据,由于是按照大小排序的，所以移除数据我们指针向下移动\n    //被移除的地方由于是int类型的，不能设置为null，这里的做法是设置为 -1\n    public int remove(){\n        int k = nItems -1;\n        int value = priQueArray[k];\n        priQueArray[k] = -1;//-1表示这个位置的数据被移除了\n        nItems--;\n        return value;\n    }\n\n    //查看优先级最高的元素\n    public int peekMin(){\n        return priQueArray[nItems-1];\n    }\n\n    //判断是否为空\n    public boolean isEmpty(){\n        return (nItems == 0);\n    }\n\n    //判断是否满了\n    public boolean isFull(){\n        return (nItems == maxSize);\n    }\n}</code></pre>\n<p>insert() 方法，先检查队列中是否有数据项，如果没有，则直接插入到下标为0的单元里，否则，从数组顶部开始比较，找到比插入值小的位置进行插入，并把 nItems 加1.</p>\n<p>remove() 方法直接获取顶部元素。</p>\n<p>优先级队列的插入操作需要 O(N)的时间，而删除操作则需要O(1) 的时间，后面会讲解如何通过 堆 来改进插入时间。</p>\n<h3 id=\"5、队列的使用场景\"><a href=\"#5、队列的使用场景\" class=\"headerlink\" title=\"5、队列的使用场景\"></a>5、队列的使用场景</h3><p>我们熟知的消息队列就是使用队列的基本原理完成设计，使用场景如下：</p>\n<p><strong>1、异步处理</strong></p>\n<p><strong>场景说明</strong>：用户注册后，需要发注册邮件和注册短信。传统的做法有两种：串行的方式和并行方式。</p>\n<p><strong>串行方式</strong>：将注册信息写入数据库成功后，发送注册邮件，再发送注册短信。以上三个任务全部完成后，返回给客户。</p>\n<p><img src=\"/2020/01/16/dui-lie-de-yong-fa/1.png\" alt></p>\n<p><strong>并行方式</strong>：将注册信息写入数据库成功后，发送注册邮件的同时，发送注册短信。以上三个任务完成后，返回给客户端。与串行的差别是，并行的方式可以提高处理的时间。</p>\n<p><img src=\"/2020/01/16/dui-lie-de-yong-fa/2.png\" alt></p>\n<p>假设三个业务节点每个使用50毫秒钟，不考虑网络等其他开销，则串行方式的时间是150毫秒，并行的时间可能是100毫秒。</p>\n<p>因为CPU在单位时间内处理的请求数是一定的，假设CPU1秒内吞吐量是100次。则串行方式1秒内CPU可处理的请求量是7次（1000/150）。并行方式处理的请求量是10次（1000/100）。</p>\n<p><strong>小结</strong>：如以上案例描述，传统的方式系统的性能（并发量，吞吐量，响应时间）会有瓶颈。如何解决这个问题呢？</p>\n<p>引入消息队列，将不是必须的业务逻辑，异步处理。改造后的架构如下：</p>\n<p><img src=\"/2020/01/16/dui-lie-de-yong-fa/3.png\" alt></p>\n<p>按照以上约定，用户的响应时间相当于是注册信息写入数据库的时间，也就是50毫秒。注册邮件，发送短信写入消息队列后，直接返回，因此写入消息队列的速度很快，基本可以忽略，因此用户的响应时间可能是50毫秒。因此架构改变后，系统的吞吐量提高到每秒20QPS。比串行提高了3倍，比并行提高了两倍！</p>\n<p><strong>2、应用解耦</strong></p>\n<p><strong>场景说明</strong>：用户下单后，订单系统需要通知库存系统。传统的做法是，订单系统调用库存系统的接口。如下图：</p>\n<p><img src=\"/2020/01/16/dui-lie-de-yong-fa/4.png\" alt></p>\n<p><strong>传统模式的缺点</strong>：</p>\n<p>假如库存系统无法访问，则订单减库存将失败，从而导致订单失败，订单系统与库存系统耦合。</p>\n<p>如何解决以上问题呢？引入应用消息队列后的方案，如下图：</p>\n<p><img src=\"/2020/01/16/dui-lie-de-yong-fa/5.png\" alt></p>\n<p><strong>订单系统</strong>：用户下单后，订单系统完成持久化处理，将消息写入消息队列，返回用户订单下单成功</p>\n<p><strong>库存系统</strong>：订阅下单的消息，采用拉/推的方式，获取下单信息，库存系统根据下单信息，进行库存操作</p>\n<p>假如：在下单时库存系统不能正常使用。也不影响正常下单，因为下单后，订单系统写入消息队列就不再关心其他的后续操作了。实现订单系统与库存系统的应用解耦。</p>\n<p><strong>3、流量削锋</strong></p>\n<p>流量削锋也是消息队列中的常用场景，一般在秒杀或团抢活动中使用广泛！</p>\n<p><strong>应用场景</strong>：秒杀活动，一般会因为流量过大，导致流量暴增，应用挂掉。为解决这个问题，一般需要在应用前端加入消息队列。</p>\n<p>可以控制活动的人数，可以缓解短时间内高流量压垮应用。</p>\n<p><img src=\"/2020/01/16/dui-lie-de-yong-fa/6.png\" alt></p>\n<p>用户的请求，服务器接收后，首先写入消息队列。假如消息队列长度超过最大数量，则直接抛弃用户请求或跳转到错误页面。</p>\n<p>秒杀业务根据消息队列中的请求信息，再做后续处理。</p>\n<p><strong>4、日志处理</strong></p>\n<p>日志处理是指将消息队列用在日志处理中，比如Kafka的应用，解决大量日志传输的问题。架构简化如下：</p>\n<p><img src=\"/2020/01/16/dui-lie-de-yong-fa/7.png\" alt></p>\n<p>日志采集客户端，负责日志数据采集，定时写受写入Kafka队列；Kafka消息队列，负责日志数据的接收，存储和转发；日志处理应用：订阅并消费kafka队列中的日志数据。</p>\n<p>以下是新浪kafka日志处理应用案例：</p>\n<p><img src=\"/2020/01/16/dui-lie-de-yong-fa/8.png\" alt></p>\n<p><strong>Kafka</strong>：接收用户日志的消息队列；</p>\n<p><strong>Logstash</strong>：做日志解析，统一成JSON输出给Elasticsearch；</p>\n<p><strong>Elasticsearch</strong>：实时日志分析服务的核心技术，一个schemaless，实时的数据存储服务，通过index组织数据，兼具强大的搜索和统计功能；</p>\n<p><strong>Kibana</strong>：基于Elasticsearch的数据可视化组件，超强的数据可视化能力是众多公司选择ELK stack的重要原因。</p>\n<p><strong>5、消息通讯</strong></p>\n<p>消息通讯是指，消息队列一般都内置了高效的通信机制，因此也可以用在纯的消息通讯。比如实现点对点消息队列，或者聊天室等。</p>\n<p><strong>点对点通讯</strong>：</p>\n<p><img src=\"/2020/01/16/dui-lie-de-yong-fa/9.png\" alt></p>\n<p>客户端A和客户端B使用同一队列，进行消息通讯。</p>\n<p><strong>聊天室通讯</strong>：</p>\n<p><img src=\"/2020/01/16/dui-lie-de-yong-fa/10.png\" alt></p>\n<p>客户端A，客户端B，客户端N订阅同一主题，进行消息发布和接收。实现类似聊天室效果。</p>\n<p>以上实际是消息队列的两种消息模式，点对点或发布订阅模式。模型为示意图，供参考。<br>除了这些，针对当前互联网公司的技术需求以及结合主流技术，我自己整理了一套系统的架构技术体系，当你技术过硬的时候，能够解决技术问题才会服众。不少公司都很重视高并发高可用的技术，特别是一线互联网公司，分布式、JVM、spring源码分析、微服务等知识点已是面试的必考题，这些东西可能你们平时在工作中接触过，但是缺少的全面系统的学习，加入<strong>后端开发群：943918498</strong>，或是关注<strong>微信公众号：Java资讯库，回复“架构”</strong>，免费领取架构资料。</p>\n"}],"PostAsset":[{"_id":"source/_posts/docker/2.png","slug":"2.png","post":"ckof6mlbn001hvkvywybthhnh","modified":0,"renderable":0},{"_id":"source/_posts/使用VMware安装linux虚拟机/format2.png","slug":"format2.png","post":"ckof6mlct001vvkvyy4h0smwg","modified":0,"renderable":0},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps25.jpg","slug":"wps25.jpg","post":"ckof6mldj002cvkvy7cjv1wgn","modified":0,"renderable":0},{"_id":"source/_posts/HTTP与HTTPS原理/1.png","slug":"1.png","post":"ckof6ml8w000cvkvyk4a6wtmc","modified":0,"renderable":0},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps27.jpg","slug":"wps27.jpg","post":"ckof6mldj002cvkvy7cjv1wgn","modified":0,"renderable":0},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps8.png","slug":"wps8.png","post":"ckof6mldj002cvkvy7cjv1wgn","modified":0,"renderable":0},{"_id":"source/_posts/网络七层架构/OSIModel.png","slug":"OSIModel.png","post":"ckof6mlez002svkvye4t82fgl","modified":0,"renderable":0},{"_id":"source/_posts/MongoDB使用及底层原理/1.png","slug":"1.png","post":"ckof6mlas000yvkvy1zf8q9ap","modified":0,"renderable":0},{"_id":"source/_posts/java异常/1.png","slug":"1.png","post":"ckof6mlbw001nvkvywmhs9erh","modified":0,"renderable":0},{"_id":"source/_posts/动态代理的实现方式与区别/1.png","slug":"1.png","post":"ckof6mlcw001xvkvy37blrp5q","modified":0,"renderable":0},{"_id":"source/_posts/因特网五层架构/tcpip1.png","slug":"tcpip1.png","post":"ckof6mld30021vkvy0zw7fkur","modified":0,"renderable":0},{"_id":"source/_posts/多线程之缓存与主存一致性/20160613151013467.png","slug":"20160613151013467.png","post":"ckof6mld50023vkvym5ov3iit","modified":0,"renderable":0},{"_id":"source/_posts/红黑树的建立与维护/1.png","slug":"1.png","post":"ckof6mleq002ovkvylsjyk7t6","modified":0,"renderable":0},{"_id":"source/_posts/Kafka-大数据的标准数据源/1.png","slug":"1.png","post":"ckof6mlai000rvkvyjadgzk9p","modified":0,"renderable":0},{"_id":"source/_posts/Kafka-大数据的标准数据源/2.png","slug":"2.png","post":"ckof6mlai000rvkvyjadgzk9p","modified":0,"renderable":0},{"_id":"source/_posts/MapReduce的流程及优化/wps3.png","slug":"wps3.png","post":"ckof6mlaq000wvkvym9ia49sm","modified":0,"renderable":0},{"_id":"source/_posts/MapReduce的流程及优化/wps4.png","slug":"wps4.png","post":"ckof6mlaq000wvkvym9ia49sm","modified":0,"renderable":0},{"_id":"source/_posts/docker/1.png","slug":"1.png","post":"ckof6mlbn001hvkvywybthhnh","modified":0,"renderable":0},{"_id":"source/_posts/javaWeb三大核心组件之servlet/1","slug":"1","post":"ckof6mlbt001lvkvy1u6s4y9h","modified":0,"renderable":0},{"_id":"source/_posts/javaWeb三大核心组件之servlet/2.png","slug":"2.png","post":"ckof6mlbt001lvkvy1u6s4y9h","modified":0,"renderable":0},{"_id":"source/_posts/springboot项目遇到的问题/1593848519591.png","slug":"1593848519591.png","post":"ckof6mlco001tvkvyobex9pa3","modified":0,"renderable":0},{"_id":"source/_posts/springboot项目遇到的问题/1594362451200.png","slug":"1594362451200.png","post":"ckof6mlco001tvkvyobex9pa3","modified":0,"renderable":0},{"_id":"source/_posts/回头再看spring/1.png","slug":"1.png","post":"ckof6mld0001zvkvyfudemxfk","modified":0,"renderable":0},{"_id":"source/_posts/回头再看spring/clipboard.png","slug":"clipboard.png","post":"ckof6mld0001zvkvyfudemxfk","modified":0,"renderable":0},{"_id":"source/_posts/深入理解java的BIO、NIO、AIO/1.png","slug":"1.png","post":"ckof6mldq002gvkvye92ruzop","modified":0,"renderable":0},{"_id":"source/_posts/深入理解java的BIO、NIO、AIO/2.png","slug":"2.png","post":"ckof6mldq002gvkvye92ruzop","modified":0,"renderable":0},{"_id":"source/_posts/稳定排序与非稳定排序的应用场景/0_1275286328kIDC.png","slug":"0_1275286328kIDC.png","post":"ckof6mle1002mvkvyn1jomnu5","modified":0,"renderable":0},{"_id":"source/_posts/稳定排序与非稳定排序的应用场景/stable1.png","slug":"stable1.png","post":"ckof6mle1002mvkvyn1jomnu5","modified":0,"renderable":0},{"_id":"source/_posts/线程池原理/1.png","slug":"1.png","post":"ckof6mlev002qvkvy9zxt8scn","modified":0,"renderable":0},{"_id":"source/_posts/线程池原理/2.png","slug":"2.png","post":"ckof6mlev002qvkvy9zxt8scn","modified":0,"renderable":0},{"_id":"source/_posts/软件开发六大设计原则/1.png","slug":"1.png","post":"ckof6mlf2002uvkvyrkq91vmn","modified":0,"renderable":0},{"_id":"source/_posts/软件开发六大设计原则/2.png","slug":"2.png","post":"ckof6mlf2002uvkvyrkq91vmn","modified":0,"renderable":0},{"_id":"source/_posts/Shiro框架原理及简单使用/1.png","slug":"1.png","post":"ckof6mlb60016vkvyxhxtq02k","modified":0,"renderable":0},{"_id":"source/_posts/Shiro框架原理及简单使用/2.png","slug":"2.png","post":"ckof6mlb60016vkvyxhxtq02k","modified":0,"renderable":0},{"_id":"source/_posts/Shiro框架原理及简单使用/3.png","slug":"3.png","post":"ckof6mlb60016vkvyxhxtq02k","modified":0,"renderable":0},{"_id":"source/_posts/对Mysql读写分离的认识/1.png","slug":"1.png","post":"ckof6mldf0029vkvyr9hxe4bp","modified":0,"renderable":0},{"_id":"source/_posts/对Mysql读写分离的认识/2.png","slug":"2.png","post":"ckof6mldf0029vkvyr9hxe4bp","modified":0,"renderable":0},{"_id":"source/_posts/对Mysql读写分离的认识/3.png","slug":"3.png","post":"ckof6mldf0029vkvyr9hxe4bp","modified":0,"renderable":0},{"_id":"source/_posts/ElasticSearch原理及基本使用/1.png","slug":"1.png","post":"ckof6ml7b0003vkvyhhn0ijd9","modified":0,"renderable":0},{"_id":"source/_posts/ElasticSearch原理及基本使用/1577523021175.png","slug":"1577523021175.png","post":"ckof6ml7b0003vkvyhhn0ijd9","modified":0,"renderable":0},{"_id":"source/_posts/ElasticSearch原理及基本使用/2.png","slug":"2.png","post":"ckof6ml7b0003vkvyhhn0ijd9","modified":0,"renderable":0},{"_id":"source/_posts/ElasticSearch原理及基本使用/3.png","slug":"3.png","post":"ckof6ml7b0003vkvyhhn0ijd9","modified":0,"renderable":0},{"_id":"source/_posts/栈的性质及一些使用场景/1.png","slug":"1.png","post":"ckof6mldb0027vkvy07ekjkqf","modified":0,"renderable":0},{"_id":"source/_posts/栈的性质及一些使用场景/2.png","slug":"2.png","post":"ckof6mldb0027vkvy07ekjkqf","modified":0,"renderable":0},{"_id":"source/_posts/栈的性质及一些使用场景/3.png","slug":"3.png","post":"ckof6mldb0027vkvy07ekjkqf","modified":0,"renderable":0},{"_id":"source/_posts/栈的性质及一些使用场景/4.png","slug":"4.png","post":"ckof6mldb0027vkvy07ekjkqf","modified":0,"renderable":0},{"_id":"source/_posts/真正意义的流式处理框架Strom/1.png","slug":"1.png","post":"ckof6mldw002kvkvy3z2tzx8e","modified":0,"renderable":0},{"_id":"source/_posts/真正意义的流式处理框架Strom/2.png","slug":"2.png","post":"ckof6mldw002kvkvy3z2tzx8e","modified":0,"renderable":0},{"_id":"source/_posts/真正意义的流式处理框架Strom/3.png","slug":"3.png","post":"ckof6mldw002kvkvy3z2tzx8e","modified":0,"renderable":0},{"_id":"source/_posts/真正意义的流式处理框架Strom/4.png","slug":"4.png","post":"ckof6mldw002kvkvy3z2tzx8e","modified":0,"renderable":0},{"_id":"source/_posts/redis简单使用总结/1.png","slug":"1.png","post":"ckof6mlcj001rvkvynegi2zp4","modified":0,"renderable":0},{"_id":"source/_posts/redis简单使用总结/2.png","slug":"2.png","post":"ckof6mlcj001rvkvynegi2zp4","modified":0,"renderable":0},{"_id":"source/_posts/redis简单使用总结/3.png","slug":"3.png","post":"ckof6mlcj001rvkvynegi2zp4","modified":0,"renderable":0},{"_id":"source/_posts/redis简单使用总结/4.png","slug":"4.png","post":"ckof6mlcj001rvkvynegi2zp4","modified":0,"renderable":0},{"_id":"source/_posts/redis简单使用总结/5.png","slug":"5.png","post":"ckof6mlcj001rvkvynegi2zp4","modified":0,"renderable":0},{"_id":"source/_posts/HTTP与HTTPS原理/2.png","slug":"2.png","post":"ckof6ml8w000cvkvyk4a6wtmc","modified":0,"renderable":0},{"_id":"source/_posts/HTTP与HTTPS原理/3.png","slug":"3.png","post":"ckof6ml8w000cvkvyk4a6wtmc","modified":0,"renderable":0},{"_id":"source/_posts/HTTP与HTTPS原理/4.png","slug":"4.png","post":"ckof6ml8w000cvkvyk4a6wtmc","modified":0,"renderable":0},{"_id":"source/_posts/HTTP与HTTPS原理/5.png","slug":"5.png","post":"ckof6ml8w000cvkvyk4a6wtmc","modified":0,"renderable":0},{"_id":"source/_posts/HTTP与HTTPS原理/6.png","slug":"6.png","post":"ckof6ml8w000cvkvyk4a6wtmc","modified":0,"renderable":0},{"_id":"source/_posts/HTTP与HTTPS原理/7.png","slug":"7.png","post":"ckof6ml8w000cvkvyk4a6wtmc","modified":0,"renderable":0},{"_id":"source/_posts/Nginx使用心得/1526016663674.png","slug":"1526016663674.png","post":"ckof6mlb20013vkvyba26qiwj","modified":0,"renderable":0},{"_id":"source/_posts/Nginx使用心得/1526187409033.png","slug":"1526187409033.png","post":"ckof6mlb20013vkvyba26qiwj","modified":0,"renderable":0},{"_id":"source/_posts/Nginx使用心得/1526188831504.png","slug":"1526188831504.png","post":"ckof6mlb20013vkvyba26qiwj","modified":0,"renderable":0},{"_id":"source/_posts/Nginx使用心得/1526189945180.png","slug":"1526189945180.png","post":"ckof6mlb20013vkvyba26qiwj","modified":0,"renderable":0},{"_id":"source/_posts/Nginx使用心得/1579422396676.png","slug":"1579422396676.png","post":"ckof6mlb20013vkvyba26qiwj","modified":0,"renderable":0},{"_id":"source/_posts/Nginx使用心得/screenshot.png","slug":"screenshot.png","post":"ckof6mlb20013vkvyba26qiwj","modified":0,"renderable":0},{"_id":"source/_posts/Nginx使用心得/sshot-1.png","slug":"sshot-1.png","post":"ckof6mlb20013vkvyba26qiwj","modified":0,"renderable":0},{"_id":"source/_posts/FastDFS分布式文件系统安装使用教程/1577523021175.png","slug":"1577523021175.png","post":"ckof6ml710001vkvy617zrmuh","modified":0,"renderable":0},{"_id":"source/_posts/FastDFS分布式文件系统安装使用教程/1577523108700.png","slug":"1577523108700.png","post":"ckof6ml710001vkvy617zrmuh","modified":0,"renderable":0},{"_id":"source/_posts/FastDFS分布式文件系统安装使用教程/1577523192987.png","slug":"1577523192987.png","post":"ckof6ml710001vkvy617zrmuh","modified":0,"renderable":0},{"_id":"source/_posts/FastDFS分布式文件系统安装使用教程/1577524769079.png","slug":"1577524769079.png","post":"ckof6ml710001vkvy617zrmuh","modified":0,"renderable":0},{"_id":"source/_posts/FastDFS分布式文件系统安装使用教程/1577525471795.png","slug":"1577525471795.png","post":"ckof6ml710001vkvy617zrmuh","modified":0,"renderable":0},{"_id":"source/_posts/FastDFS分布式文件系统安装使用教程/1577535905825.png","slug":"1577535905825.png","post":"ckof6ml710001vkvy617zrmuh","modified":0,"renderable":0},{"_id":"source/_posts/FastDFS分布式文件系统安装使用教程/1577536510714.png","slug":"1577536510714.png","post":"ckof6ml710001vkvy617zrmuh","modified":0,"renderable":0},{"_id":"source/_posts/FastDFS分布式文件系统安装使用教程/1577537632508.png","slug":"1577537632508.png","post":"ckof6ml710001vkvy617zrmuh","modified":0,"renderable":0},{"_id":"source/_posts/FastDFS分布式文件系统安装使用教程/1577538377340.png","slug":"1577538377340.png","post":"ckof6ml710001vkvy617zrmuh","modified":0,"renderable":0},{"_id":"source/_posts/Flume-大数据采集工具/wps11.jpg","slug":"wps11.jpg","post":"ckof6ml7i0005vkvyk1fszyi5","modified":0,"renderable":0},{"_id":"source/_posts/Flume-大数据采集工具/wps2.jpg","slug":"wps2.jpg","post":"ckof6ml7i0005vkvyk1fszyi5","modified":0,"renderable":0},{"_id":"source/_posts/Flume-大数据采集工具/wps27.jpg","slug":"wps27.jpg","post":"ckof6ml7i0005vkvyk1fszyi5","modified":0,"renderable":0},{"_id":"source/_posts/Flume-大数据采集工具/wps28.jpg","slug":"wps28.jpg","post":"ckof6ml7i0005vkvyk1fszyi5","modified":0,"renderable":0},{"_id":"source/_posts/Flume-大数据采集工具/wps4.jpg","slug":"wps4.jpg","post":"ckof6ml7i0005vkvyk1fszyi5","modified":0,"renderable":0},{"_id":"source/_posts/Flume-大数据采集工具/wps5.jpg","slug":"wps5.jpg","post":"ckof6ml7i0005vkvyk1fszyi5","modified":0,"renderable":0},{"_id":"source/_posts/Flume-大数据采集工具/wps6.jpg","slug":"wps6.jpg","post":"ckof6ml7i0005vkvyk1fszyi5","modified":0,"renderable":0},{"_id":"source/_posts/Flume-大数据采集工具/wps7.jpg","slug":"wps7.jpg","post":"ckof6ml7i0005vkvyk1fszyi5","modified":0,"renderable":0},{"_id":"source/_posts/Flume-大数据采集工具/wps8.png","slug":"wps8.png","post":"ckof6ml7i0005vkvyk1fszyi5","modified":0,"renderable":0},{"_id":"source/_posts/SpringMVC原理/1.png","slug":"1.png","post":"ckof6mlbe001bvkvytsyeismh","modified":0,"renderable":0},{"_id":"source/_posts/SpringMVC原理/12.png","slug":"12.png","post":"ckof6mlbe001bvkvytsyeismh","modified":0,"renderable":0},{"_id":"source/_posts/SpringMVC原理/16b5eb3870589ac4.png","slug":"16b5eb3870589ac4.png","post":"ckof6mlbe001bvkvytsyeismh","modified":0,"renderable":0},{"_id":"source/_posts/SpringMVC原理/16b5eb3cc1ab2fe9.png","slug":"16b5eb3cc1ab2fe9.png","post":"ckof6mlbe001bvkvytsyeismh","modified":0,"renderable":0},{"_id":"source/_posts/SpringMVC原理/3.png","slug":"3.png","post":"ckof6mlbe001bvkvytsyeismh","modified":0,"renderable":0},{"_id":"source/_posts/SpringMVC原理/4.png","slug":"4.png","post":"ckof6mlbe001bvkvytsyeismh","modified":0,"renderable":0},{"_id":"source/_posts/SpringMVC原理/5.png","slug":"5.png","post":"ckof6mlbe001bvkvytsyeismh","modified":0,"renderable":0},{"_id":"source/_posts/SpringMVC原理/6.png","slug":"6.png","post":"ckof6mlbe001bvkvytsyeismh","modified":0,"renderable":0},{"_id":"source/_posts/SpringMVC原理/b856096cf065baaaabe5884deb4ecfa3.png","slug":"b856096cf065baaaabe5884deb4ecfa3.png","post":"ckof6mlbe001bvkvytsyeismh","modified":0,"renderable":0},{"_id":"source/_posts/队列的用法/1.png","slug":"1.png","post":"ckof6mlf7002wvkvyjkucwyyd","modified":0,"renderable":0},{"_id":"source/_posts/队列的用法/10.png","slug":"10.png","post":"ckof6mlf7002wvkvyjkucwyyd","modified":0,"renderable":0},{"_id":"source/_posts/队列的用法/2.png","slug":"2.png","post":"ckof6mlf7002wvkvyjkucwyyd","modified":0,"renderable":0},{"_id":"source/_posts/队列的用法/3.png","slug":"3.png","post":"ckof6mlf7002wvkvyjkucwyyd","modified":0,"renderable":0},{"_id":"source/_posts/队列的用法/4.png","slug":"4.png","post":"ckof6mlf7002wvkvyjkucwyyd","modified":0,"renderable":0},{"_id":"source/_posts/队列的用法/5.png","slug":"5.png","post":"ckof6mlf7002wvkvyjkucwyyd","modified":0,"renderable":0},{"_id":"source/_posts/队列的用法/6.png","slug":"6.png","post":"ckof6mlf7002wvkvyjkucwyyd","modified":0,"renderable":0},{"_id":"source/_posts/队列的用法/7.png","slug":"7.png","post":"ckof6mlf7002wvkvyjkucwyyd","modified":0,"renderable":0},{"_id":"source/_posts/队列的用法/8.png","slug":"8.png","post":"ckof6mlf7002wvkvyjkucwyyd","modified":0,"renderable":0},{"_id":"source/_posts/队列的用法/9.png","slug":"9.png","post":"ckof6mlf7002wvkvyjkucwyyd","modified":0,"renderable":0},{"_id":"source/_posts/使用VMware安装linux虚拟机/1577631145598.png","slug":"1577631145598.png","post":"ckof6mlct001vvkvyy4h0smwg","modified":0,"renderable":0},{"_id":"source/_posts/使用VMware安装linux虚拟机/1577691474359.png","slug":"1577691474359.png","post":"ckof6mlct001vvkvyy4h0smwg","modified":0,"renderable":0},{"_id":"source/_posts/使用VMware安装linux虚拟机/1577692561419.png","slug":"1577692561419.png","post":"ckof6mlct001vvkvyy4h0smwg","modified":0,"renderable":0},{"_id":"source/_posts/使用VMware安装linux虚拟机/20171126014938900.png","slug":"20171126014938900.png","post":"ckof6mlct001vvkvyy4h0smwg","modified":0,"renderable":0},{"_id":"source/_posts/使用VMware安装linux虚拟机/20171126015037602.png","slug":"20171126015037602.png","post":"ckof6mlct001vvkvyy4h0smwg","modified":0,"renderable":0},{"_id":"source/_posts/使用VMware安装linux虚拟机/20171126015051216.png","slug":"20171126015051216.png","post":"ckof6mlct001vvkvyy4h0smwg","modified":0,"renderable":0},{"_id":"source/_posts/使用VMware安装linux虚拟机/format.png","slug":"format.png","post":"ckof6mlct001vvkvyy4h0smwg","modified":0,"renderable":0},{"_id":"source/_posts/使用VMware安装linux虚拟机/format1.png","slug":"format1.png","post":"ckof6mlct001vvkvyy4h0smwg","modified":0,"renderable":0},{"_id":"source/_posts/使用VMware安装linux虚拟机/format3.png","slug":"format3.png","post":"ckof6mlct001vvkvyy4h0smwg","modified":0,"renderable":0},{"_id":"source/_posts/使用VMware安装linux虚拟机/format4.png","slug":"format4.png","post":"ckof6mlct001vvkvyy4h0smwg","modified":0,"renderable":0},{"_id":"source/_posts/使用VMware安装linux虚拟机/format7.png","slug":"format7.png","post":"ckof6mlct001vvkvyy4h0smwg","modified":0,"renderable":0},{"_id":"source/_posts/HashMap与ConcurrentHashMap/1.png","slug":"1.png","post":"ckof6ml9k000ivkvymowpuy72","modified":0,"renderable":0},{"_id":"source/_posts/HashMap与ConcurrentHashMap/10.png","slug":"10.png","post":"ckof6ml9k000ivkvymowpuy72","modified":0,"renderable":0},{"_id":"source/_posts/HashMap与ConcurrentHashMap/11.png","slug":"11.png","post":"ckof6ml9k000ivkvymowpuy72","modified":0,"renderable":0},{"_id":"source/_posts/HashMap与ConcurrentHashMap/12.png","slug":"12.png","post":"ckof6ml9k000ivkvymowpuy72","modified":0,"renderable":0},{"_id":"source/_posts/HashMap与ConcurrentHashMap/13.png","slug":"13.png","post":"ckof6ml9k000ivkvymowpuy72","modified":0,"renderable":0},{"_id":"source/_posts/HashMap与ConcurrentHashMap/2.png","slug":"2.png","post":"ckof6ml9k000ivkvymowpuy72","modified":0,"renderable":0},{"_id":"source/_posts/HashMap与ConcurrentHashMap/3.png","slug":"3.png","post":"ckof6ml9k000ivkvymowpuy72","modified":0,"renderable":0},{"_id":"source/_posts/HashMap与ConcurrentHashMap/4.png","slug":"4.png","post":"ckof6ml9k000ivkvymowpuy72","modified":0,"renderable":0},{"_id":"source/_posts/HashMap与ConcurrentHashMap/5.png","slug":"5.png","post":"ckof6ml9k000ivkvymowpuy72","modified":0,"renderable":0},{"_id":"source/_posts/HashMap与ConcurrentHashMap/6.png","slug":"6.png","post":"ckof6ml9k000ivkvymowpuy72","modified":0,"renderable":0},{"_id":"source/_posts/HashMap与ConcurrentHashMap/7.png","slug":"7.png","post":"ckof6ml9k000ivkvymowpuy72","modified":0,"renderable":0},{"_id":"source/_posts/HashMap与ConcurrentHashMap/8.png","slug":"8.png","post":"ckof6ml9k000ivkvymowpuy72","modified":0,"renderable":0},{"_id":"source/_posts/HashMap与ConcurrentHashMap/9.png","slug":"9.png","post":"ckof6ml9k000ivkvymowpuy72","modified":0,"renderable":0},{"_id":"source/_posts/JVM必须知道的基础/1.png","slug":"1.png","post":"ckof6ml9u000ovkvymt3546g4","modified":0,"renderable":0},{"_id":"source/_posts/JVM必须知道的基础/10.png","slug":"10.png","post":"ckof6ml9u000ovkvymt3546g4","modified":0,"renderable":0},{"_id":"source/_posts/JVM必须知道的基础/11.png","slug":"11.png","post":"ckof6ml9u000ovkvymt3546g4","modified":0,"renderable":0},{"_id":"source/_posts/JVM必须知道的基础/12.png","slug":"12.png","post":"ckof6ml9u000ovkvymt3546g4","modified":0,"renderable":0},{"_id":"source/_posts/JVM必须知道的基础/13.png","slug":"13.png","post":"ckof6ml9u000ovkvymt3546g4","modified":0,"renderable":0},{"_id":"source/_posts/JVM必须知道的基础/2.png","slug":"2.png","post":"ckof6ml9u000ovkvymt3546g4","modified":0,"renderable":0},{"_id":"source/_posts/JVM必须知道的基础/3.png","slug":"3.png","post":"ckof6ml9u000ovkvymt3546g4","modified":0,"renderable":0},{"_id":"source/_posts/JVM必须知道的基础/4.png","slug":"4.png","post":"ckof6ml9u000ovkvymt3546g4","modified":0,"renderable":0},{"_id":"source/_posts/JVM必须知道的基础/5.png","slug":"5.png","post":"ckof6ml9u000ovkvymt3546g4","modified":0,"renderable":0},{"_id":"source/_posts/JVM必须知道的基础/6.png","slug":"6.png","post":"ckof6ml9u000ovkvymt3546g4","modified":0,"renderable":0},{"_id":"source/_posts/JVM必须知道的基础/7.png","slug":"7.png","post":"ckof6ml9u000ovkvymt3546g4","modified":0,"renderable":0},{"_id":"source/_posts/JVM必须知道的基础/8.png","slug":"8.png","post":"ckof6ml9u000ovkvymt3546g4","modified":0,"renderable":0},{"_id":"source/_posts/JVM必须知道的基础/9.png","slug":"9.png","post":"ckof6ml9u000ovkvymt3546g4","modified":0,"renderable":0},{"_id":"source/_posts/Spark到底好在哪里/1.png","slug":"1.png","post":"ckof6mlb90018vkvyvgun9ein","modified":0,"renderable":0},{"_id":"source/_posts/Spark到底好在哪里/10.png","slug":"10.png","post":"ckof6mlb90018vkvyvgun9ein","modified":0,"renderable":0},{"_id":"source/_posts/Spark到底好在哪里/11.png","slug":"11.png","post":"ckof6mlb90018vkvyvgun9ein","modified":0,"renderable":0},{"_id":"source/_posts/Spark到底好在哪里/12.png","slug":"12.png","post":"ckof6mlb90018vkvyvgun9ein","modified":0,"renderable":0},{"_id":"source/_posts/Spark到底好在哪里/13.png","slug":"13.png","post":"ckof6mlb90018vkvyvgun9ein","modified":0,"renderable":0},{"_id":"source/_posts/Spark到底好在哪里/2.png","slug":"2.png","post":"ckof6mlb90018vkvyvgun9ein","modified":0,"renderable":0},{"_id":"source/_posts/Spark到底好在哪里/3.png","slug":"3.png","post":"ckof6mlb90018vkvyvgun9ein","modified":0,"renderable":0},{"_id":"source/_posts/Spark到底好在哪里/4.png","slug":"4.png","post":"ckof6mlb90018vkvyvgun9ein","modified":0,"renderable":0},{"_id":"source/_posts/Spark到底好在哪里/5.png","slug":"5.png","post":"ckof6mlb90018vkvyvgun9ein","modified":0,"renderable":0},{"_id":"source/_posts/Spark到底好在哪里/6.png","slug":"6.png","post":"ckof6mlb90018vkvyvgun9ein","modified":0,"renderable":0},{"_id":"source/_posts/Spark到底好在哪里/7.png","slug":"7.png","post":"ckof6mlb90018vkvyvgun9ein","modified":0,"renderable":0},{"_id":"source/_posts/Spark到底好在哪里/8.png","slug":"8.png","post":"ckof6mlb90018vkvyvgun9ein","modified":0,"renderable":0},{"_id":"source/_posts/Spark到底好在哪里/9.png","slug":"9.png","post":"ckof6mlb90018vkvyvgun9ein","modified":0,"renderable":0},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/1.png","slug":"1.png","post":"ckof6ml9r000mvkvyjc3zegir","modified":0,"renderable":0},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/10.png","slug":"10.png","post":"ckof6ml9r000mvkvyjc3zegir","modified":0,"renderable":0},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/11.png","slug":"11.png","post":"ckof6ml9r000mvkvyjc3zegir","modified":0,"renderable":0},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/12.png","slug":"12.png","post":"ckof6ml9r000mvkvyjc3zegir","modified":0,"renderable":0},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/13.png","slug":"13.png","post":"ckof6ml9r000mvkvyjc3zegir","modified":0,"renderable":0},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/14.png","slug":"14.png","post":"ckof6ml9r000mvkvyjc3zegir","modified":0,"renderable":0},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/15.png","slug":"15.png","post":"ckof6ml9r000mvkvyjc3zegir","modified":0,"renderable":0},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/16.png","slug":"16.png","post":"ckof6ml9r000mvkvyjc3zegir","modified":0,"renderable":0},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/2.png","slug":"2.png","post":"ckof6ml9r000mvkvyjc3zegir","modified":0,"renderable":0},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/3.png","slug":"3.png","post":"ckof6ml9r000mvkvyjc3zegir","modified":0,"renderable":0},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/4.png","slug":"4.png","post":"ckof6ml9r000mvkvyjc3zegir","modified":0,"renderable":0},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/5.png","slug":"5.png","post":"ckof6ml9r000mvkvyjc3zegir","modified":0,"renderable":0},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/6.png","slug":"6.png","post":"ckof6ml9r000mvkvyjc3zegir","modified":0,"renderable":0},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/8.png","slug":"8.png","post":"ckof6ml9r000mvkvyjc3zegir","modified":0,"renderable":0},{"_id":"source/_posts/Hive-基于MapReduce的数据分析工具/9.png","slug":"9.png","post":"ckof6ml9r000mvkvyjc3zegir","modified":0,"renderable":0},{"_id":"source/_posts/java的Object对象/1.png","slug":"1.png","post":"ckof6mlc7001pvkvyw7efymih","modified":0,"renderable":0},{"_id":"source/_posts/java的Object对象/10.png","slug":"10.png","post":"ckof6mlc7001pvkvyw7efymih","modified":0,"renderable":0},{"_id":"source/_posts/java的Object对象/11.png","slug":"11.png","post":"ckof6mlc7001pvkvyw7efymih","modified":0,"renderable":0},{"_id":"source/_posts/java的Object对象/12.png","slug":"12.png","post":"ckof6mlc7001pvkvyw7efymih","modified":0,"renderable":0},{"_id":"source/_posts/java的Object对象/13.png","slug":"13.png","post":"ckof6mlc7001pvkvyw7efymih","modified":0,"renderable":0},{"_id":"source/_posts/java的Object对象/14.png","slug":"14.png","post":"ckof6mlc7001pvkvyw7efymih","modified":0,"renderable":0},{"_id":"source/_posts/java的Object对象/15.png","slug":"15.png","post":"ckof6mlc7001pvkvyw7efymih","modified":0,"renderable":0},{"_id":"source/_posts/java的Object对象/1578923476661.png","slug":"1578923476661.png","post":"ckof6mlc7001pvkvyw7efymih","modified":0,"renderable":0},{"_id":"source/_posts/java的Object对象/1578923575140.png","slug":"1578923575140.png","post":"ckof6mlc7001pvkvyw7efymih","modified":0,"renderable":0},{"_id":"source/_posts/java的Object对象/16.png","slug":"16.png","post":"ckof6mlc7001pvkvyw7efymih","modified":0,"renderable":0},{"_id":"source/_posts/java的Object对象/17.png","slug":"17.png","post":"ckof6mlc7001pvkvyw7efymih","modified":0,"renderable":0},{"_id":"source/_posts/java的Object对象/18.png","slug":"18.png","post":"ckof6mlc7001pvkvyw7efymih","modified":0,"renderable":0},{"_id":"source/_posts/java的Object对象/19.png","slug":"19.png","post":"ckof6mlc7001pvkvyw7efymih","modified":0,"renderable":0},{"_id":"source/_posts/java的Object对象/2.png","slug":"2.png","post":"ckof6mlc7001pvkvyw7efymih","modified":0,"renderable":0},{"_id":"source/_posts/java的Object对象/3.png","slug":"3.png","post":"ckof6mlc7001pvkvyw7efymih","modified":0,"renderable":0},{"_id":"source/_posts/java的Object对象/4.png","slug":"4.png","post":"ckof6mlc7001pvkvyw7efymih","modified":0,"renderable":0},{"_id":"source/_posts/java的Object对象/5.png","slug":"5.png","post":"ckof6mlc7001pvkvyw7efymih","modified":0,"renderable":0},{"_id":"source/_posts/java的Object对象/6.png","slug":"6.png","post":"ckof6mlc7001pvkvyw7efymih","modified":0,"renderable":0},{"_id":"source/_posts/java的Object对象/7.png","slug":"7.png","post":"ckof6mlc7001pvkvyw7efymih","modified":0,"renderable":0},{"_id":"source/_posts/java的Object对象/8.png","slug":"8.png","post":"ckof6mlc7001pvkvyw7efymih","modified":0,"renderable":0},{"_id":"source/_posts/java的Object对象/9.png","slug":"9.png","post":"ckof6mlc7001pvkvyw7efymih","modified":0,"renderable":0},{"_id":"source/_posts/流式处理框架后起之秀Flink/1.jpg","slug":"1.jpg","post":"ckof6mldj002cvkvy7cjv1wgn","modified":0,"renderable":0},{"_id":"source/_posts/流式处理框架后起之秀Flink/2.jpg","slug":"2.jpg","post":"ckof6mldj002cvkvy7cjv1wgn","modified":0,"renderable":0},{"_id":"source/_posts/流式处理框架后起之秀Flink/2.png","slug":"2.png","post":"ckof6mldj002cvkvy7cjv1wgn","modified":0,"renderable":0},{"_id":"source/_posts/流式处理框架后起之秀Flink/3.jpg","slug":"3.jpg","post":"ckof6mldj002cvkvy7cjv1wgn","modified":0,"renderable":0},{"_id":"source/_posts/流式处理框架后起之秀Flink/4.jpg","slug":"4.jpg","post":"ckof6mldj002cvkvy7cjv1wgn","modified":0,"renderable":0},{"_id":"source/_posts/流式处理框架后起之秀Flink/4.png","slug":"4.png","post":"ckof6mldj002cvkvy7cjv1wgn","modified":0,"renderable":0},{"_id":"source/_posts/流式处理框架后起之秀Flink/5.png","slug":"5.png","post":"ckof6mldj002cvkvy7cjv1wgn","modified":0,"renderable":0},{"_id":"source/_posts/流式处理框架后起之秀Flink/6.png","slug":"6.png","post":"ckof6mldj002cvkvy7cjv1wgn","modified":0,"renderable":0},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps10.jpg","slug":"wps10.jpg","post":"ckof6mldj002cvkvy7cjv1wgn","modified":0,"renderable":0},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps23.jpg","slug":"wps23.jpg","post":"ckof6mldj002cvkvy7cjv1wgn","modified":0,"renderable":0},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps24.jpg","slug":"wps24.jpg","post":"ckof6mldj002cvkvy7cjv1wgn","modified":0,"renderable":0},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps26.jpg","slug":"wps26.jpg","post":"ckof6mldj002cvkvy7cjv1wgn","modified":0,"renderable":0},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps29.jpg","slug":"wps29.jpg","post":"ckof6mldj002cvkvy7cjv1wgn","modified":0,"renderable":0},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps30.jpg","slug":"wps30.jpg","post":"ckof6mldj002cvkvy7cjv1wgn","modified":0,"renderable":0},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps5.jpg","slug":"wps5.jpg","post":"ckof6mldj002cvkvy7cjv1wgn","modified":0,"renderable":0},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps6.jpg","slug":"wps6.jpg","post":"ckof6mldj002cvkvy7cjv1wgn","modified":0,"renderable":0},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps7.jpg","slug":"wps7.jpg","post":"ckof6mldj002cvkvy7cjv1wgn","modified":0,"renderable":0},{"_id":"source/_posts/流式处理框架后起之秀Flink/wps9.jpg","slug":"wps9.jpg","post":"ckof6mldj002cvkvy7cjv1wgn","modified":0,"renderable":0},{"_id":"source/_posts/Netty原理/1.png","slug":"1.png","post":"ckof6mlay0011vkvypnbuu2rn","modified":0,"renderable":0},{"_id":"source/_posts/Netty原理/10.png","slug":"10.png","post":"ckof6mlay0011vkvypnbuu2rn","modified":0,"renderable":0},{"_id":"source/_posts/Netty原理/11.webp","slug":"11.webp","post":"ckof6mlay0011vkvypnbuu2rn","modified":0,"renderable":0},{"_id":"source/_posts/Netty原理/12.webp","slug":"12.webp","post":"ckof6mlay0011vkvypnbuu2rn","modified":0,"renderable":0},{"_id":"source/_posts/Netty原理/13.webp","slug":"13.webp","post":"ckof6mlay0011vkvypnbuu2rn","modified":0,"renderable":0},{"_id":"source/_posts/Netty原理/14.png","slug":"14.png","post":"ckof6mlay0011vkvypnbuu2rn","modified":0,"renderable":0},{"_id":"source/_posts/Netty原理/15.webp","slug":"15.webp","post":"ckof6mlay0011vkvypnbuu2rn","modified":0,"renderable":0},{"_id":"source/_posts/Netty原理/16.jpg","slug":"16.jpg","post":"ckof6mlay0011vkvypnbuu2rn","modified":0,"renderable":0},{"_id":"source/_posts/Netty原理/17.png","slug":"17.png","post":"ckof6mlay0011vkvypnbuu2rn","modified":0,"renderable":0},{"_id":"source/_posts/Netty原理/18.png","slug":"18.png","post":"ckof6mlay0011vkvypnbuu2rn","modified":0,"renderable":0},{"_id":"source/_posts/Netty原理/19.webp","slug":"19.webp","post":"ckof6mlay0011vkvypnbuu2rn","modified":0,"renderable":0},{"_id":"source/_posts/Netty原理/2.png","slug":"2.png","post":"ckof6mlay0011vkvypnbuu2rn","modified":0,"renderable":0},{"_id":"source/_posts/Netty原理/20.jpg","slug":"20.jpg","post":"ckof6mlay0011vkvypnbuu2rn","modified":0,"renderable":0},{"_id":"source/_posts/Netty原理/21.webp","slug":"21.webp","post":"ckof6mlay0011vkvypnbuu2rn","modified":0,"renderable":0},{"_id":"source/_posts/Netty原理/22.png","slug":"22.png","post":"ckof6mlay0011vkvypnbuu2rn","modified":0,"renderable":0},{"_id":"source/_posts/Netty原理/23.png","slug":"23.png","post":"ckof6mlay0011vkvypnbuu2rn","modified":0,"renderable":0},{"_id":"source/_posts/Netty原理/24.png","slug":"24.png","post":"ckof6mlay0011vkvypnbuu2rn","modified":0,"renderable":0},{"_id":"source/_posts/Netty原理/3.webp","slug":"3.webp","post":"ckof6mlay0011vkvypnbuu2rn","modified":0,"renderable":0},{"_id":"source/_posts/Netty原理/4.jpg","slug":"4.jpg","post":"ckof6mlay0011vkvypnbuu2rn","modified":0,"renderable":0},{"_id":"source/_posts/Netty原理/5.jpg","slug":"5.jpg","post":"ckof6mlay0011vkvypnbuu2rn","modified":0,"renderable":0},{"_id":"source/_posts/Netty原理/6.webp","slug":"6.webp","post":"ckof6mlay0011vkvypnbuu2rn","modified":0,"renderable":0},{"_id":"source/_posts/Netty原理/7.webp","slug":"7.webp","post":"ckof6mlay0011vkvypnbuu2rn","modified":0,"renderable":0},{"_id":"source/_posts/Netty原理/8.jpg","slug":"8.jpg","post":"ckof6mlay0011vkvypnbuu2rn","modified":0,"renderable":0},{"_id":"source/_posts/Netty原理/9.png","slug":"9.png","post":"ckof6mlay0011vkvypnbuu2rn","modified":0,"renderable":0},{"_id":"source/_posts/对MySQL执行引擎InnoDB的认识/0300000000_1.3.0.435.publish_release.exe","slug":"0300000000_1.3.0.435.publish_release.exe","post":"ckof6mld90025vkvybtxkxowb","modified":0,"renderable":0},{"_id":"source/_posts/对MySQL执行引擎InnoDB的认识/1.png","slug":"1.png","post":"ckof6mld90025vkvybtxkxowb","modified":0,"renderable":0},{"_id":"source/_posts/对MySQL执行引擎InnoDB的认识/2.png","slug":"2.png","post":"ckof6mld90025vkvybtxkxowb","modified":0,"renderable":0},{"_id":"source/_posts/对MySQL执行引擎InnoDB的认识/3.png","slug":"3.png","post":"ckof6mld90025vkvybtxkxowb","modified":0,"renderable":0},{"_id":"source/_posts/对MySQL执行引擎InnoDB的认识/4.png","slug":"4.png","post":"ckof6mld90025vkvybtxkxowb","modified":0,"renderable":0},{"_id":"source/_posts/对MySQL执行引擎InnoDB的认识/5.png","slug":"5.png","post":"ckof6mld90025vkvybtxkxowb","modified":0,"renderable":0},{"_id":"source/_posts/对MySQL执行引擎InnoDB的认识/6.png","slug":"6.png","post":"ckof6mld90025vkvybtxkxowb","modified":0,"renderable":0},{"_id":"source/_posts/对MySQL执行引擎InnoDB的认识/7.png","slug":"7.png","post":"ckof6mld90025vkvybtxkxowb","modified":0,"renderable":0},{"_id":"source/_posts/对MySQL执行引擎InnoDB的认识/授权声明.pdf","slug":"授权声明.pdf","post":"ckof6mld90025vkvybtxkxowb","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckof6ml7b0003vkvyhhn0ijd9","category_id":"ckof6ml8a0007vkvyqmjbkce5","_id":"ckof6ml9d000gvkvy9kbiu4cy"},{"post_id":"ckof6ml7i0005vkvyk1fszyi5","category_id":"ckof6ml8y000dvkvyqj8q0t64","_id":"ckof6ml9p000lvkvy2rwrijhh"},{"post_id":"ckof6ml9b000fvkvy8bbgam2b","category_id":"ckof6ml8y000dvkvyqj8q0t64","_id":"ckof6ml9t000nvkvyfwe51gyc"},{"post_id":"ckof6ml8f0008vkvy7zu57itt","category_id":"ckof6ml8y000dvkvyqj8q0t64","_id":"ckof6mlaf000qvkvy2kqyk4oj"},{"post_id":"ckof6ml9m000jvkvy0g4vx5p0","category_id":"ckof6ml8y000dvkvyqj8q0t64","_id":"ckof6mlal000svkvydcryrzac"},{"post_id":"ckof6ml9r000mvkvyjc3zegir","category_id":"ckof6ml8y000dvkvyqj8q0t64","_id":"ckof6mlap000uvkvy6iu2ji80"},{"post_id":"ckof6ml8p000avkvyegbe6uh8","category_id":"ckof6ml8y000dvkvyqj8q0t64","_id":"ckof6mlas000xvkvygpeadl9w"},{"post_id":"ckof6mlai000rvkvyjadgzk9p","category_id":"ckof6ml8y000dvkvyqj8q0t64","_id":"ckof6mlav000zvkvyr7lnosvd"},{"post_id":"ckof6ml8w000cvkvyk4a6wtmc","category_id":"ckof6mlab000pvkvy98b5sd5r","_id":"ckof6mlb10012vkvyeqbxm8lq"},{"post_id":"ckof6mlal000tvkvy78fpnt6b","category_id":"ckof6ml8y000dvkvyqj8q0t64","_id":"ckof6mlb40014vkvygispgike"},{"post_id":"ckof6mlaq000wvkvym9ia49sm","category_id":"ckof6ml8y000dvkvyqj8q0t64","_id":"ckof6mlb90017vkvy9pnt3k46"},{"post_id":"ckof6ml95000evkvykbwu7uhp","category_id":"ckof6mlab000pvkvy98b5sd5r","_id":"ckof6mlbd0019vkvy677c0jmf"},{"post_id":"ckof6mlay0011vkvypnbuu2rn","category_id":"ckof6ml8a0007vkvyqmjbkce5","_id":"ckof6mlbg001cvkvyzp0iyj28"},{"post_id":"ckof6ml9k000ivkvymowpuy72","category_id":"ckof6mlaw0010vkvyi7mvvvg9","_id":"ckof6mlbj001evkvy3zhxwx7t"},{"post_id":"ckof6mlb20013vkvyba26qiwj","category_id":"ckof6ml8a0007vkvyqmjbkce5","_id":"ckof6mlbm001gvkvyy0elow0f"},{"post_id":"ckof6mlb60016vkvyxhxtq02k","category_id":"ckof6mlaw0010vkvyi7mvvvg9","_id":"ckof6mlbp001ivkvy28lgg1rt"},{"post_id":"ckof6ml9u000ovkvymt3546g4","category_id":"ckof6mlaw0010vkvyi7mvvvg9","_id":"ckof6mlbs001kvkvy4c429oqz"},{"post_id":"ckof6mlb90018vkvyvgun9ein","category_id":"ckof6ml8y000dvkvyqj8q0t64","_id":"ckof6mlbv001mvkvy5m75fskg"},{"post_id":"ckof6mlbe001bvkvytsyeismh","category_id":"ckof6mlaw0010vkvyi7mvvvg9","_id":"ckof6mlby001ovkvy8rm94fcl"},{"post_id":"ckof6mlbh001dvkvy9vypk7tg","category_id":"ckof6ml8y000dvkvyqj8q0t64","_id":"ckof6mlch001qvkvyq4w4mxmt"},{"post_id":"ckof6mlas000yvkvy1zf8q9ap","category_id":"ckof6mlbd001avkvyg6pbz26v","_id":"ckof6mlcm001svkvygf285st7"},{"post_id":"ckof6mlbp001jvkvyum29verv","category_id":"ckof6ml8a0007vkvyqmjbkce5","_id":"ckof6mlcz001yvkvy899k6739"},{"post_id":"ckof6mlbt001lvkvy1u6s4y9h","category_id":"ckof6mlaw0010vkvyi7mvvvg9","_id":"ckof6mld20020vkvywfgkdixt"},{"post_id":"ckof6mlbw001nvkvywmhs9erh","category_id":"ckof6mlaw0010vkvyi7mvvvg9","_id":"ckof6mld40022vkvy75b4wmd5"},{"post_id":"ckof6mlc7001pvkvyw7efymih","category_id":"ckof6mlaw0010vkvyi7mvvvg9","_id":"ckof6mld80024vkvy6znxzuqh"},{"post_id":"ckof6mlcj001rvkvynegi2zp4","category_id":"ckof6ml8a0007vkvyqmjbkce5","_id":"ckof6mldb0026vkvyjzan6c61"},{"post_id":"ckof6mlco001tvkvyobex9pa3","category_id":"ckof6mlaw0010vkvyi7mvvvg9","_id":"ckof6mlde0028vkvyisnvd5tx"},{"post_id":"ckof6mlct001vvkvyy4h0smwg","category_id":"ckof6ml8y000dvkvyqj8q0t64","_id":"ckof6mldi002avkvyt4ex1vak"},{"post_id":"ckof6mlcw001xvkvy37blrp5q","category_id":"ckof6mlaw0010vkvyi7mvvvg9","_id":"ckof6mldm002dvkvyvijrcgjg"},{"post_id":"ckof6mld0001zvkvyfudemxfk","category_id":"ckof6mlaw0010vkvyi7mvvvg9","_id":"ckof6mldp002fvkvyiv0s9rhm"},{"post_id":"ckof6mld30021vkvy0zw7fkur","category_id":"ckof6mlab000pvkvy98b5sd5r","_id":"ckof6mlds002hvkvyksf4vpf6"},{"post_id":"ckof6mld50023vkvym5ov3iit","category_id":"ckof6mlaw0010vkvyi7mvvvg9","_id":"ckof6mldv002jvkvyg3yb6tkq"},{"post_id":"ckof6mld90025vkvybtxkxowb","category_id":"ckof6mlbd001avkvyg6pbz26v","_id":"ckof6mle0002lvkvyi8te3pg0"},{"post_id":"ckof6mldf0029vkvyr9hxe4bp","category_id":"ckof6mlbd001avkvyg6pbz26v","_id":"ckof6mleo002nvkvy0v2zlqus"},{"post_id":"ckof6mldj002cvkvy7cjv1wgn","category_id":"ckof6ml8y000dvkvyqj8q0t64","_id":"ckof6mleu002pvkvyeft2jw2y"},{"post_id":"ckof6mldn002evkvy9f21uc63","category_id":"ckof6mlaw0010vkvyi7mvvvg9","_id":"ckof6mley002rvkvyib0d9l97"},{"post_id":"ckof6mldb0027vkvy07ekjkqf","category_id":"ckof6mldi002bvkvy3855rwdh","_id":"ckof6mlf1002tvkvy31zmm7xa"},{"post_id":"ckof6mldq002gvkvye92ruzop","category_id":"ckof6mlaw0010vkvyi7mvvvg9","_id":"ckof6mlf5002vvkvymq5hhod6"},{"post_id":"ckof6mldt002ivkvytdo9m5vl","category_id":"ckof6mldi002bvkvy3855rwdh","_id":"ckof6mlf9002xvkvyb5feiokr"},{"post_id":"ckof6mldw002kvkvy3z2tzx8e","category_id":"ckof6ml8y000dvkvyqj8q0t64","_id":"ckof6mlfa002yvkvygtu61kcw"},{"post_id":"ckof6mle1002mvkvyn1jomnu5","category_id":"ckof6mldi002bvkvy3855rwdh","_id":"ckof6mlfa002zvkvyxws76xoy"},{"post_id":"ckof6mleq002ovkvylsjyk7t6","category_id":"ckof6mldi002bvkvy3855rwdh","_id":"ckof6mlfb0030vkvyka7v9r8p"},{"post_id":"ckof6mlev002qvkvy9zxt8scn","category_id":"ckof6mlaw0010vkvyi7mvvvg9","_id":"ckof6mlfb0031vkvy0hl0a5ni"},{"post_id":"ckof6mlez002svkvye4t82fgl","category_id":"ckof6mlab000pvkvy98b5sd5r","_id":"ckof6mlfb0032vkvywj4dbvt4"},{"post_id":"ckof6mlf2002uvkvyrkq91vmn","category_id":"ckof6mlaw0010vkvyi7mvvvg9","_id":"ckof6mlfc0033vkvyps6nllqe"},{"post_id":"ckof6mlf7002wvkvyjkucwyyd","category_id":"ckof6mldi002bvkvy3855rwdh","_id":"ckof6mlfc0034vkvydhoifzuh"},{"post_id":"ckof6mlbn001hvkvywybthhnh","category_id":"ckof6ml8a0007vkvyqmjbkce5","_id":"ckof70is60001g8vy1m8l714t"}],"PostTag":[],"Tag":[]}}